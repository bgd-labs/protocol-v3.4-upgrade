{"version":3,"sources":["../src/browser.ts","../src/foundry/storage-diff.ts","../src/rpc/chainIds.ts","../src/rpc/helpers.ts","../src/rpc/clients.ts","../src/ipfs/hash.ts","../src/ipfs/upload.ts","../src/ipfs/parseIpfs.ts","../src/storage/storageSlots.ts","../src/storage/poolStorage.ts"],"sourcesContent":["export * from './foundry/storage-diff';\nexport * from './rpc/chainIds';\nexport * from './rpc/helpers';\nexport * from './rpc/clients';\nexport * from './ipfs/hash';\nexport * from './ipfs/upload';\nexport * from './ipfs/parseIpfs';\nexport * from './storage/storageSlots';\nexport * from './storage/poolStorage';\n","import type {\n  StorageItemForComparison,\n  ComparedStorageItem,\n  Storage,\n} from './types';\n\n/**\n * Generates a markdown table comparing two foundry storage layout snapshots\n * @param layoutBefore\n * @param layoutAfter\n * @returns markdown string\n */\nexport function compareStorageLayouts(\n  layoutBefore: Storage,\n  layoutAfter: Storage,\n) {\n  // preformat jsons\n  const layoutForComparisonBefore: StorageItemForComparison[] =\n    preformatStorageLayout(layoutBefore);\n\n  const layoutForComparisonAfter: StorageItemForComparison[] =\n    preformatStorageLayout(layoutAfter);\n\n  // compare arrays\n  const comparison: ComparedStorageItem[] = compareStorageArrays(\n    layoutForComparisonBefore,\n    layoutForComparisonAfter,\n  );\n\n  // output MD\n  const md = generateMarkdownOutput(comparison);\n  return md;\n}\n\nfunction preformatStorageLayout(json: Storage): StorageItemForComparison[] {\n  return json.storage.map((item) => ({\n    label: item.label,\n    offset: item.offset,\n    slot: item.slot,\n    type: json.types[item.type].label,\n    numberOfBytes: json.types[item.type].numberOfBytes,\n  }));\n}\n\nfunction compareStorageArrays(\n  oldArray: StorageItemForComparison[],\n  newArray: StorageItemForComparison[],\n): ComparedStorageItem[] {\n  const changes: ComparedStorageItem[] = [];\n\n  const oldMap = new Map(\n    oldArray.map((item) => [item.slot + '-' + item.offset, item]),\n  );\n  const newMap = new Map(\n    newArray.map((item) => [item.slot + '-' + item.offset, item]),\n  );\n\n  // Find removed and changed elements\n  oldArray.forEach((oldItem) => {\n    const newItem = newMap.get(oldItem.slot + '-' + oldItem.offset);\n    if (!newItem) {\n      changes.push({ ...oldItem, status: 'removed' });\n    } else if (isDifferent(oldItem, newItem)) {\n      changes.push({ ...oldItem, status: 'removed' });\n      changes.push({ ...newItem, status: 'added' });\n    } else {\n      changes.push({ ...newItem, status: 'unchanged' });\n    }\n  });\n\n  // Find added elements\n  newArray.forEach((newItem) => {\n    if (!oldMap.has(newItem.slot + '-' + newItem.offset)) {\n      changes.push({ ...newItem, status: 'added' });\n    }\n  });\n\n  // Sort the changes by slot and offset\n  changes.sort((a, b) => {\n    if (a.slot === b.slot) {\n      return a.offset - b.offset;\n    }\n    return a.slot.localeCompare(b.slot);\n  });\n\n  return changes;\n}\n\nfunction isDifferent(\n  item1: StorageItemForComparison,\n  item2: StorageItemForComparison,\n): boolean {\n  return (\n    item1.offset !== item2.offset ||\n    item1.slot !== item2.slot ||\n    item1.type !== item2.type ||\n    item1.numberOfBytes !== item2.numberOfBytes\n  );\n}\n\nfunction generateMarkdownOutput(items: ComparedStorageItem[]): string {\n  // Calculate padding for each column for prettification\n  const columnWidths = {\n    name: Math.max(...items.map((item) => item.label.length), 'Label'.length),\n    offset: 'Offset'.length,\n    slot: 'Slot'.length,\n    type: Math.max(...items.map((item) => item.type.length), 'Type'.length),\n    numberOfBytes: 'Bytes'.length,\n  };\n\n  let markdownTable = '```diff\\n';\n\n  // Generate the table header\n  markdownTable += ` | ${'Label'.padEnd(\n    columnWidths.name,\n    ' ',\n  )} | ${'Offset'.padEnd(columnWidths.offset, ' ')} | ${'Slot'.padEnd(\n    columnWidths.slot,\n    ' ',\n  )} | ${'Type'.padEnd(columnWidths.type, ' ')} | ${'Bytes'.padEnd(\n    columnWidths.numberOfBytes,\n    ' ',\n  )} |\\n`;\n\n  markdownTable += ` |${'-'.repeat(columnWidths.name + 2)}|${'-'.repeat(\n    columnWidths.offset + 2,\n  )}|${'-'.repeat(columnWidths.slot + 2)}|${'-'.repeat(\n    columnWidths.type + 2,\n  )}|${'-'.repeat(columnWidths.numberOfBytes + 2)}||\\n`;\n\n  // Iterate over each item and add it as a row in the table\n  items.forEach((item) => {\n    const sign =\n      item.status === 'added' ? '+' : item.status === 'removed' ? '-' : ' ';\n\n    const row = `${sign}| ${item.label.padEnd(\n      columnWidths.name,\n      ' ',\n    )} | ${item.offset\n      .toString()\n      .padEnd(columnWidths.offset, ' ')} | ${item.slot.padEnd(\n        columnWidths.slot,\n        ' ',\n      )} | ${item.type.padEnd(\n        columnWidths.type,\n        ' ',\n      )} | ${item.numberOfBytes.padEnd(columnWidths.numberOfBytes, ' ')} |\\n`;\n\n    markdownTable += row;\n  });\n\n  markdownTable += '```';\n\n  return markdownTable;\n}\n","import {\n  mainnet,\n  arbitrumGoerli,\n  arbitrumSepolia,\n  avalancheFuji,\n  bsc,\n  fantomTestnet,\n  harmonyOne,\n  optimismGoerli,\n  optimismSepolia,\n  polygonMumbai,\n  polygonZkEvm,\n  scrollSepolia,\n  baseSepolia,\n  goerli,\n  polygon,\n  avalanche,\n  arbitrum,\n  fantom,\n  optimism,\n  sepolia,\n  scroll,\n  metis,\n  base,\n  gnosis,\n  celo,\n  zkSync\n} from 'viem/chains';\n\nexport const ChainId = {\n  mainnet: mainnet.id,\n  goerli: goerli.id,\n  polygon: polygon.id,\n  mumbai: polygonMumbai.id,\n  avalanche: avalanche.id,\n  fuji: avalancheFuji.id,\n  arbitrum_one: arbitrum.id,\n  arbitrum_goerli: arbitrumGoerli.id,\n  arbitrum_sepolia: arbitrumSepolia.id,\n  fantom: fantom.id,\n  fantom_testnet: fantomTestnet.id,\n  optimism: optimism.id,\n  optimism_sepolia: optimismSepolia.id,\n  optimism_goerli: optimismGoerli.id,\n  harmony: harmonyOne.id,\n  sepolia: sepolia.id,\n  scroll: scroll.id,\n  scroll_sepolia: scrollSepolia.id,\n  metis: metis.id,\n  base: base.id,\n  base_sepolia: baseSepolia.id,\n  bnb: bsc.id,\n  gnosis: gnosis.id,\n  zkEVM: polygonZkEvm.id,\n  celo: celo.id,\n  zkSync: zkSync.id\n} as const;\n","import {\n  type Address,\n  type GetLogsReturnType,\n  type Client,\n  fromHex,\n  type Hex,\n} from 'viem';\nimport type { AbiEvent } from 'abitype';\nimport { PromisePool } from '@supercharge/promise-pool';\nimport { getBlock, getBytecode, getLogs } from 'viem/actions';\nimport { debug } from 'node:util';\n\ninterface GetContractDeploymentBlockArgs {\n  client: Client;\n  contractAddress: Address;\n  fromBlock: bigint;\n  toBlock: bigint;\n  maxDelta: bigint;\n}\n\n/**\n * In some cases it's important to know when a contract was first seen onChain.\n * This data is hard to obtain, as it's not indexed data.\n * On way of doing it is recursively checking on an archive node when the code was first seen.\n * @param client a viem Client\n * @param fromBlock a block on which the contract is not yet deployed\n * @param toBlock a block on which the contract is deployed\n * @param contractAddress address of the contract\n * @param maxDelta the maximum block distance between the returned block and the deployment block\n * @returns a blockNumber on which the contract is not yet deployed with a max delta to when it was deployed\n */\nexport async function getContractDeploymentBlock({\n  client,\n  contractAddress,\n  fromBlock,\n  toBlock,\n  maxDelta,\n}: GetContractDeploymentBlockArgs) {\n  if (fromBlock == toBlock) return fromBlock;\n  if (fromBlock < toBlock) {\n    const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);\n    const codeMid = await getBytecode(client, {\n      blockNumber: midBlock,\n      address: contractAddress,\n    });\n    if (!codeMid) {\n      if (toBlock - midBlock > maxDelta) {\n        return getContractDeploymentBlock({\n          client,\n          contractAddress,\n          fromBlock: midBlock,\n          toBlock,\n          maxDelta,\n        });\n      } else {\n        return midBlock;\n      }\n    }\n    return getContractDeploymentBlock({\n      client,\n      contractAddress,\n      fromBlock,\n      toBlock: midBlock,\n      maxDelta,\n    });\n  }\n  throw new Error('Could not find contract deployment block');\n}\n\ninterface GetBlockAtTimestampArgs {\n  client: Client;\n  timestamp: bigint;\n  fromBlock: bigint;\n  toBlock: bigint;\n  maxDelta: bigint;\n}\n\n/**\n * Returns a block before the specified timestamp with a maximum of maxDelta divergence\n * @param client\n * @param fromBlock\n * @param toBlock\n * @param timestamp\n * @param maxDelta\n * @returns blocknumber\n */\nexport async function getBlockAtTimestamp({\n  client,\n  timestamp,\n  fromBlock,\n  toBlock,\n  maxDelta,\n}: GetBlockAtTimestampArgs) {\n  if (fromBlock <= toBlock) {\n    const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);\n    const block = await getBlock(client, { blockNumber: midBlock });\n    if (block.timestamp > timestamp) {\n      return getBlockAtTimestamp({\n        client,\n        timestamp,\n        fromBlock,\n        toBlock: midBlock,\n        maxDelta,\n      });\n    } else {\n      if (timestamp - block.timestamp < maxDelta) {\n        return block;\n      } else {\n        return getBlockAtTimestamp({\n          client,\n          timestamp,\n          fromBlock: midBlock,\n          toBlock,\n          maxDelta,\n        });\n      }\n    }\n  }\n  throw new Error('Could not find matching block');\n}\n\ninterface GetLogsArgs<TAbiEvents extends AbiEvent[] | undefined> {\n  client: Client;\n  events: TAbiEvents;\n  address: Address | Address[];\n  fromBlock: bigint;\n  toBlock: bigint;\n}\n\n/**\n * A thin wrapper around eth_getLogs which does batching & error handing and some known scenarios\n * @param param0\n * @returns logs\n */\nexport async function strategicGetLogs<\n  TAbiEvents extends AbiEvent[] | undefined,\n>({\n  client,\n  events,\n  address,\n  fromBlock,\n  toBlock,\n}: GetLogsArgs<TAbiEvents>): Promise<GetLogsReturnType<undefined, TAbiEvents>> {\n  if (client.transport.key === 'http') {\n    const url: string = client.transport.url;\n    let batchSize = 0;\n    if (/llamarpc/.test(url)) batchSize = 100_000;\n    if (/quiknode/.test(url)) batchSize = 10_000;\n    // alchemy behaves different to other rpcs as it allows querying with infinite block range as long as the response size is below a certain threshold\n    if (/alchemy/.test(url)) {\n      getLogsRecursive({ client, events, address, fromBlock, toBlock });\n    }\n    if (batchSize > 0) {\n      return getLogsInBatches({\n        client,\n        events,\n        address,\n        fromBlock,\n        toBlock,\n        batchSize,\n      });\n    }\n  }\n  return getLogsRecursive({ client, events, address, fromBlock, toBlock });\n}\n\n/**\n * fetches logs recursively\n */\nexport async function getLogsRecursive<\n  TAbiEvents extends AbiEvent[] | undefined,\n>({\n  client,\n  events,\n  address,\n  fromBlock,\n  toBlock,\n}: GetLogsArgs<TAbiEvents>): Promise<GetLogsReturnType<undefined, TAbiEvents>> {\n  debug('recursions')(`fetching from block ${fromBlock} to block ${toBlock}`);\n  if (fromBlock <= toBlock) {\n    try {\n      const logs = await getLogs(client, {\n        fromBlock,\n        toBlock,\n        events,\n        address,\n      });\n      return logs;\n    } catch (error: any) {\n      // for alchemy part of the details string contains sth like: [0x8d01be, 0x948ce4]\n      const rangeMatch = (error.details as string)?.match(/.*\\[(.*),\\s*(.*)\\]/);\n      if (rangeMatch?.length === 3) {\n        const maxBlock = fromHex(rangeMatch[2] as Hex, 'bigint');\n        const arr1 = await getLogsRecursive({\n          client,\n          events,\n          address,\n          fromBlock,\n          toBlock: maxBlock,\n        });\n        const midBlock = BigInt(maxBlock + toBlock) >> BigInt(1);\n\n        const arr2 = await getLogsRecursive({\n          client,\n          events,\n          address,\n          fromBlock: maxBlock + BigInt(1),\n          toBlock: midBlock,\n        });\n        const arr3 = await getLogsRecursive({\n          client,\n          events,\n          address,\n          fromBlock: midBlock + BigInt(1),\n          toBlock,\n        });\n        return [...arr1, ...arr2, ...arr3];\n      } else {\n        // divide & conquer when issue/limit is now known\n        const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);\n        const arr1 = await getLogsRecursive({\n          client,\n          events,\n          address,\n          fromBlock,\n          toBlock: midBlock,\n        });\n        const arr2 = await getLogsRecursive({\n          client,\n          events,\n          address,\n          fromBlock: midBlock + BigInt(1),\n          toBlock,\n        });\n        return [...arr1, ...arr2];\n      }\n    }\n  }\n  return [];\n}\n\ninterface GetLogsInBatchesArgs<TAbiEvents extends AbiEvent[] | undefined>\n  extends GetLogsArgs<TAbiEvents> {\n  batchSize: number;\n}\n\n/**\n * Fetches logs between two blocks with a given batchSize per call\n * @param client\n * @param events\n * @param address\n * @param fromBlock\n * @param toBlock\n * @param batchSize\n * @returns\n */\nasync function getLogsInBatches<TAbiEvents extends AbiEvent[] | undefined>({\n  client,\n  events,\n  address,\n  fromBlock,\n  toBlock,\n  batchSize,\n}: GetLogsInBatchesArgs<TAbiEvents>) {\n  const batches: { from: bigint; to: bigint }[] = [];\n  for (let i = Number(fromBlock); i < Number(toBlock); i = i + batchSize) {\n    batches.push({\n      from: BigInt(i),\n      to:\n        BigInt(i + batchSize - 1) > toBlock\n          ? toBlock\n          : BigInt(i + batchSize - 1),\n    });\n  }\n\n  // TODO: add retry logic\n  const { results, errors } = await PromisePool.for(batches)\n    .withConcurrency(5)\n    .useCorrespondingResults()\n    .process(async ({ from, to }) => {\n      return getLogs(client, {\n        fromBlock: from,\n        toBlock: to,\n        events,\n        address,\n      });\n    });\n  if (errors.length !== 0) {\n    throw new Error('Error fetching logs');\n  }\n  return results.flat() as GetLogsReturnType<undefined, TAbiEvents>;\n}\n","import { createClient, http } from 'viem';\nimport {\n  mainnet,\n  arbitrum,\n  polygon,\n  optimism,\n  metis,\n  base,\n  baseSepolia,\n  sepolia,\n  goerli,\n  bsc,\n  fantom,\n  avalanche,\n  gnosis,\n  polygonZkEvm,\n  scroll,\n  celo,\n  zkSync,\n  avalancheFuji,\n  polygonMumbai,\n  harmonyOne,\n  arbitrumGoerli,\n  optimismGoerli,\n  optimismSepolia,\n  scrollSepolia,\n  fantomTestnet,\n  arbitrumSepolia,\n} from 'viem/chains';\nimport { ChainId } from './chainIds';\nimport { Client } from 'viem';\n\nconst commonConfig = { timeout: 30_000 };\n\nexport const mainnetClient = createClient({\n  chain: mainnet,\n  transport: http(process.env.RPC_MAINNET, commonConfig),\n});\n\nexport const arbitrumClient = createClient({\n  chain: arbitrum,\n  transport: http(process.env.RPC_ARBITRUM, commonConfig),\n});\n\nexport const polygonClient = createClient({\n  chain: polygon,\n  transport: http(process.env.RPC_POLYGON, commonConfig),\n});\n\nexport const optimismClient = createClient({\n  chain: optimism,\n  transport: http(process.env.RPC_OPTIMISM, commonConfig),\n});\n\nexport const metisClient = createClient({\n  chain: metis,\n  transport: http(process.env.RPC_METIS, commonConfig),\n});\n\nexport const baseClient = createClient({\n  chain: base,\n  transport: http(process.env.RPC_BASE, commonConfig),\n});\n\nexport const fantomClient = createClient({\n  chain: fantom,\n  transport: http(process.env.RPC_FANTOM, commonConfig),\n});\n\nexport const bnbClient = createClient({\n  chain: bsc,\n  transport: http(process.env.RPC_BNB, commonConfig),\n});\n\nexport const avalancheClient = createClient({\n  chain: avalanche,\n  transport: http(process.env.RPC_AVALANCHE, commonConfig),\n});\n\nexport const gnosisClient = createClient({\n  chain: gnosis,\n  transport: http(process.env.RPC_GNOSIS, commonConfig),\n});\n\nexport const scrollClient = createClient({\n  chain: scroll,\n  transport: http(process.env.RPC_SCROLL, commonConfig),\n});\n\nexport const zkEVMClient = createClient({\n  chain: polygonZkEvm,\n  transport: http(process.env.RPC_ZKEVM, commonConfig),\n});\n\nexport const celoClient = createClient({\n  chain: celo,\n  transport: http(process.env.RPC_CELO, commonConfig),\n});\n\nexport const zkSyncClient = createClient({\n  chain: zkSync,\n  transport: http(process.env.RPC_ZKSYNC, commonConfig),\n});\n\nexport const harmonyClient = createClient({\n  chain: harmonyOne,\n  transport: http(process.env.RPC_HARMONY, commonConfig),\n});\n\n// testnets\nexport const fujiClient = createClient({\n  chain: avalancheFuji,\n  transport: http(process.env.RPC_FUJI, commonConfig),\n});\n\nexport const mumbaiClient = createClient({\n  chain: polygonMumbai,\n  transport: http(process.env.RPC_MUMBAI, commonConfig),\n});\n\nexport const sepoliaClient = createClient({\n  chain: sepolia,\n  transport: http(process.env.RPC_SEPOLIA, commonConfig),\n});\n\nexport const goerliClient = createClient({\n  chain: goerli,\n  transport: http(process.env.RPC_GOERLI, commonConfig),\n});\n\nexport const arbitrumGoerliClient = createClient({\n  chain: arbitrumGoerli,\n  transport: http(process.env.RPC_ARBITRUM_GOERLI, commonConfig),\n});\n\nexport const arbitrumSepoliaClient = createClient({\n  chain: arbitrumSepolia,\n  transport: http(process.env.RPC_ARBITRUM_SEPOLIA, commonConfig),\n});\n\nexport const optimismGoerliClient = createClient({\n  chain: optimismGoerli,\n  transport: http(process.env.RPC_OPTIMISM_GOERLI, commonConfig),\n});\n\nexport const optimismSepoliaClient = createClient({\n  chain: optimismSepolia,\n  transport: http(process.env.RPC_OPTIMISM_SEPOLIA, commonConfig),\n});\n\nexport const scrollSepoliaClient = createClient({\n  chain: scrollSepolia,\n  transport: http(process.env.RPC_SCROLL_SEPOLIA, commonConfig),\n});\n\nexport const fantomTestnetClient = createClient({\n  chain: fantomTestnet,\n  transport: http(process.env.RPC_FANTOM_TESTNET, commonConfig),\n});\n\nexport const baseSepoliaClient = createClient({\n  chain: baseSepolia,\n  transport: http(process.env.RPC_BASE_SEPOLIA, commonConfig),\n});\n\nexport const CHAIN_ID_CLIENT_MAP: Record<number, Client> = {\n  [ChainId.mainnet]: mainnetClient,\n  [ChainId.arbitrum_one]: arbitrumClient,\n  [ChainId.arbitrum_goerli]: arbitrumGoerliClient,\n  [ChainId.arbitrum_sepolia]: arbitrumSepoliaClient,\n  [ChainId.polygon]: polygonClient,\n  [ChainId.optimism]: optimismClient,\n  [ChainId.optimism_goerli]: optimismGoerliClient,\n  [ChainId.optimism_sepolia]: optimismSepoliaClient,\n  [ChainId.metis]: metisClient,\n  [ChainId.base]: baseClient,\n  [ChainId.base_sepolia]: baseSepoliaClient,\n  [ChainId.sepolia]: sepoliaClient,\n  [ChainId.goerli]: goerliClient,\n  [ChainId.fantom]: fantomClient,\n  [ChainId.fantom_testnet]: fantomTestnetClient,\n  [ChainId.bnb]: bnbClient,\n  [ChainId.avalanche]: avalancheClient,\n  [ChainId.gnosis]: gnosisClient,\n  [ChainId.scroll]: scrollClient,\n  [ChainId.scroll_sepolia]: scrollSepoliaClient,\n  [ChainId.zkEVM]: zkEVMClient,\n  [ChainId.celo]: celoClient,\n  [ChainId.zkSync]: zkSyncClient,\n  [ChainId.fuji]: fujiClient,\n  [ChainId.mumbai]: mumbaiClient,\n  [ChainId.harmony]: harmonyClient,\n} as const;\n","import bs58 from 'bs58';\n\nexport function baseToCidv0(hash: string) {\n  return bs58.encode(Buffer.from(`1220${hash.slice(2)}`, 'hex'));\n}\n","export async function uploadToPinata(source: string) {\n  const PINATA_KEY = process.env.PINATA_KEY;\n  if (!PINATA_KEY) throw new Error('PINATA_KEY env must be set');\n  const PINATA_SECRET = process.env.PINATA_SECRET;\n  if (!PINATA_SECRET) throw new Error('PINATA_SECRET env must be set');\n  const data = new FormData();\n  data.append('file', new Blob([source]));\n  const res = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n    method: 'POST',\n    body: data,\n    headers: {\n      pinata_api_key: PINATA_KEY,\n      pinata_secret_api_key: PINATA_SECRET,\n    },\n  });\n\n  if (!res.ok) {\n    throw Error(await res.text());\n  }\n\n  const result = await res.json();\n\n  if (result.error) throw { message: result.error };\n  return result;\n}\n\nexport async function uploadToTheGraph(source: string) {\n  const data = new FormData();\n  data.append('file', new Blob([source]));\n  const res = await fetch('https://api.thegraph.com/ipfs/api/v0/add', {\n    method: 'POST',\n    body: data,\n  });\n  return res.json();\n}\n\nexport async function uploadToQuicknode(source: string, key?: string) {\n  const apiKey = process.env.QUICKNODE_API_KEY!;\n  const headers = new Headers();\n  headers.append('x-api-key', apiKey);\n  const data = new FormData();\n  data.append('Body', new Blob([source]));\n  data.append('Key', key || 'unknownKey');\n  data.append('ContentType', 'text/plain');\n  const res = await fetch(\n    'https://api.quicknode.com/ipfs/rest/v1/s3/put-object',\n    {\n      method: 'POST',\n      headers,\n      body: data,\n      redirect: 'follow',\n    },\n  );\n  return res.text();\n}\n","import matter from 'gray-matter';\nimport { baseToCidv0 } from './hash';\n\nexport type ProposalMetadata = {\n  title: string;\n  description: string;\n  ipfsHash: string;\n  discussions: string;\n  author: string;\n};\n\nexport function getLink(hash: string, gateway: string): string {\n  return `${gateway}/${hash}`;\n}\n\nexport async function getProposalMetadata(\n  hash: string,\n  gateway: string = 'https://cloudflare-ipfs.com/ipfs',\n): Promise<ProposalMetadata> {\n  const ipfsHash = hash.startsWith('0x') ? baseToCidv0(hash) : hash;\n  const ipfsPath = getLink(ipfsHash, gateway);\n  const ipfsResponse = await fetch(ipfsPath, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  if (!ipfsResponse.ok) throw Error(`IPFS: error fetching ${ipfsPath}`);\n  const clone = ipfsResponse.clone();\n  try {\n    const response = await ipfsResponse.json();\n    const { content, data } = matter(response.description);\n    return {\n      ...response,\n      ipfsHash,\n      description: content,\n      ...data,\n    };\n  } catch (e) {\n    const { content, data } = matter(await clone.text());\n    return {\n      ...ipfsResponse,\n      ipfsHash,\n      description: content,\n      ...(data as { title: string; discussions: string; author: string }),\n    };\n  }\n}\n","import {\n  type Hex,\n  concat,\n  encodeAbiParameters,\n  fromHex,\n  keccak256,\n  pad,\n  parseAbiParameters,\n  toBytes,\n  toHex,\n  trim,\n} from 'viem';\n\n/**\n * @notice Returns the storage slot for a Solidity mapping with bytes32 keys, given the slot of the mapping itself\n * @dev Read more at https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html#mappings-and-dynamic-arrays\n * @param mappingSlot Mapping slot in storage\n * @param key Mapping key to find slot for\n * @returns Storage slot\n */\nexport function getSolidityStorageSlotBytes(mappingSlot: Hex, key: Hex) {\n  const slot = pad(mappingSlot, { size: 32 });\n  return trim(\n    keccak256(\n      encodeAbiParameters(parseAbiParameters('bytes32, uint256'), [\n        key,\n        BigInt(slot),\n      ]),\n    ),\n  );\n}\n\n/**\n * @notice Returns the storage slot for a Solidity mapping with uint keys, given the slot of the mapping itself\n * @dev Read more at https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html#mappings-and-dynamic-arrays\n * @param mappingSlot Mapping slot in storage\n * @param key Mapping key to find slot for\n * @returns Storage slot\n */\nexport function getSolidityStorageSlotUint(mappingSlot: bigint, key: bigint) {\n  return keccak256(\n    encodeAbiParameters(parseAbiParameters('uint256, uint256'), [\n      key,\n      mappingSlot,\n    ]),\n  );\n}\n\nexport function getSolidityStorageSlotAddress(\n  mappingSlot: bigint | number,\n  key: Hex,\n) {\n  return keccak256(\n    encodeAbiParameters(parseAbiParameters('address, uint256'), [\n      key,\n      BigInt(mappingSlot),\n    ]),\n  );\n}\n\n/**\n * Returns the slot of an array item\n * @param baseSlot baseSlot of the array size pointer\n * @param arrayIndex index within the array\n * @param itemSize number of slots consumed per array item\n * @returns\n */\nexport function getDynamicArraySlot(\n  baseSlot: bigint,\n  arrayIndex: number,\n  itemSize: number,\n): Hex {\n  return pad(\n    toHex(\n      fromHex(\n        keccak256(\n          encodeAbiParameters(parseAbiParameters('uint256'), [baseSlot]),\n        ),\n        'bigint',\n      ) + BigInt(arrayIndex * itemSize),\n    ),\n    { size: 32 },\n  );\n}\n\n/**\n * https://ethereum.stackexchange.com/questions/107282/storage-and-memory-layout-of-strings\n * @param value string | bytes\n */\nexport function getBytesValue(value: string | Hex) {\n  const bytesString = toBytes(value);\n  if (bytesString.length > 31)\n    throw new Error('Error: strings > 31 bytes are not implemented');\n  return concat([\n    toHex(pad(bytesString, { size: 31, dir: 'right' })),\n    toHex(bytesString.length * 2, { size: 1 }),\n  ]);\n}\n\n/**\n * Returns the selected bits of a uint256\n * @param _bigIntValue\n * @param startBit\n * @param endBit\n * @returns\n */\nexport function getBits(\n  _bigIntValue: bigint | number | string,\n  startBit: bigint,\n  _endBit: bigint,\n) {\n  let endBit = _endBit;\n  const bigIntValue = BigInt(_bigIntValue);\n  if (startBit > endBit) {\n    throw new Error(\n      'Invalid bit range: startBit must be less than or equal to endBit',\n    );\n  }\n\n  const bitLength = BigInt(bigIntValue.toString(2)).toString().length;\n  if (endBit >= bitLength) {\n    endBit = BigInt(bitLength - 1);\n  }\n\n  const mask = (1n << (endBit - startBit + 1n)) - 1n;\n  const maskedValue = (bigIntValue >> startBit) & mask;\n  return maskedValue.toString();\n}\n\n/**\n * Sets the bits in a bigint\n * @param _bigIntBase\n * @param startBit inclusive\n * @param endBit exclusive\n * @param value the value to replace\n * @returns\n */\nexport function setBits(\n  _bigIntBase: bigint | number | string,\n  startBit: bigint,\n  endBit: bigint,\n  _replaceValue: bigint | number,\n) {\n  const bigIntBase = BigInt(_bigIntBase);\n  const bigIntReplaceValue = BigInt(_replaceValue);\n\n  // Calculate the mask for the specified range\n  let mask = BigInt(0);\n  for (let i = startBit; i < endBit; i++) {\n    mask |= BigInt(1) << BigInt(i);\n  }\n  // Clear the bits in the original number within the specified range\n  const clearedNumber = bigIntBase & ~mask;\n\n  // Set the new bits in the specified range\n  const result = clearedNumber | (bigIntReplaceValue << BigInt(startBit));\n  return result;\n}\n","import { getBits } from './storageSlots';\n\nexport function decodeReserveConfigV2(data: bigint) {\n  const ltv = getBits(data, 0n, 15n);\n  const liquidationThreshold = getBits(data, 16n, 31n);\n  const liquidationBonus = getBits(data, 32n, 47n);\n  const decimals = getBits(data, 48n, 55n);\n  const active = Number(getBits(data, 56n, 56n));\n  const frozen = Number(getBits(data, 57n, 57n));\n  const borrowingEnabled = Number(getBits(data, 58n, 58n));\n  const stableBorrowingEnabled = Number(getBits(data, 59n, 59n));\n  const reserveFactor = getBits(data, 64n, 79n);\n  return {\n    ltv,\n    liquidationThreshold,\n    liquidationBonus,\n    decimals,\n    active: !!active,\n    frozen: !!frozen,\n    borrowingEnabled: !!borrowingEnabled,\n    stableBorrowingEnabled: !!stableBorrowingEnabled,\n    reserveFactor,\n  };\n}\n\nexport function decodeReserveConfigV3(data: bigint) {\n  const ltv = getBits(data, 0n, 15n);\n  const liquidationThreshold = getBits(data, 16n, 31n);\n  const liquidationBonus = getBits(data, 32n, 47n);\n  const decimals = getBits(data, 48n, 55n);\n  const active = Number(getBits(data, 56n, 56n));\n  const frozen = Number(getBits(data, 57n, 57n));\n  const borrowingEnabled = Number(getBits(data, 58n, 58n));\n  const stableRateBorrowingEnabled = Number(getBits(data, 59n, 59n));\n  const paused = Number(getBits(data, 60n, 60n));\n  const borrowingInIsolation = Number(getBits(data, 61n, 61n));\n  const siloedBorrowingEnabled = Number(getBits(data, 62n, 62n));\n  const flashloaningEnabled = Number(getBits(data, 63n, 63n));\n  const reserveFactor = getBits(data, 64n, 79n);\n  const borrowCap = getBits(data, 80n, 115n);\n  const supplyCap = getBits(data, 116n, 151n);\n  const liquidationProtocolFee = getBits(data, 152n, 167n);\n  const eModeCategory = getBits(data, 168n, 175n);\n  const unbackedMintCap = getBits(data, 176n, 211n);\n  const debtCeiling = getBits(data, 212n, 251n);\n\n  return {\n    ltv,\n    liquidationThreshold,\n    liquidationBonus,\n    decimals,\n    active: !!active,\n    frozen: !!frozen,\n    borrowingEnabled: !!borrowingEnabled,\n    stableRateBorrowingEnabled: !!stableRateBorrowingEnabled,\n    paused: !!paused,\n    borrowingInIsolation: !!borrowingInIsolation,\n    reserveFactor,\n    borrowCap,\n    supplyCap,\n    liquidationProtocolFee,\n    eModeCategory,\n    unbackedMintCap,\n    debtCeiling,\n    siloedBorrowingEnabled: !!siloedBorrowingEnabled,\n    flashloaningEnabled: !!flashloaningEnabled,\n  };\n}\n"],"mappings":"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","names":["import_viem","import_chains","bs58","matter","import_viem"]}