import * as viem_zksync from 'viem/zksync';
import * as viem_experimental from 'viem/experimental';
import * as abitype from 'abitype';
import * as viem_chains from 'viem/chains';
import * as viem from 'viem';

declare const ChainId: {
    readonly mainnet: 1;
    readonly polygon: 137;
    readonly polygon_amoy: 80002;
    readonly avalanche: 43114;
    readonly avalanche_fuji: 43113;
    readonly arbitrum: 42161;
    readonly arbitrum_sepolia: 421614;
    readonly fantom: 250;
    readonly fantom_testnet: 4002;
    readonly optimism: 10;
    readonly optimism_sepolia: 11155420;
    readonly harmony: 1666600000;
    readonly sepolia: 11155111;
    readonly scroll: 534352;
    readonly scroll_sepolia: 534351;
    readonly metis: 1088;
    readonly base: 8453;
    readonly base_sepolia: 84532;
    readonly bnb: 56;
    readonly gnosis: 100;
    readonly zkEVM: 1101;
    readonly celo: 42220;
    readonly zksync: 324;
    readonly linea: 59144;
};
declare const ChainList: {
    1: {
        blockExplorers: {
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://etherscan.io";
                readonly apiUrl: "https://api.etherscan.io/api";
            };
        };
        contracts: {
            readonly ensRegistry: {
                readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
            };
            readonly ensUniversalResolver: {
                readonly address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67";
                readonly blockCreated: 19258213;
            };
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 14353601;
            };
        };
        id: 1;
        name: "Ethereum";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://cloudflare-eth.com"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    137: {
        blockExplorers: {
            readonly default: {
                readonly name: "PolygonScan";
                readonly url: "https://polygonscan.com";
                readonly apiUrl: "https://api.polygonscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 25770160;
            };
        };
        id: 137;
        name: "Polygon";
        nativeCurrency: {
            readonly name: "POL";
            readonly symbol: "POL";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://polygon-rpc.com"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    80002: {
        blockExplorers: {
            readonly default: {
                readonly name: "PolygonScan";
                readonly url: "https://amoy.polygonscan.com";
                readonly apiUrl: "https://api-amoy.polygonscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 3127388;
            };
        };
        id: 80002;
        name: "Polygon Amoy";
        nativeCurrency: {
            readonly name: "POL";
            readonly symbol: "POL";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc-amoy.polygon.technology"];
            };
        };
        sourceId?: number | undefined;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    43114: {
        blockExplorers: {
            readonly default: {
                readonly name: "SnowTrace";
                readonly url: "https://snowtrace.io";
                readonly apiUrl: "https://api.snowtrace.io";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 11907934;
            };
        };
        id: 43114;
        name: "Avalanche";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "Avalanche";
            readonly symbol: "AVAX";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    43113: {
        blockExplorers: {
            readonly default: {
                readonly name: "SnowTrace";
                readonly url: "https://testnet.snowtrace.io";
                readonly apiUrl: "https://api-testnet.snowtrace.io";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 7096959;
            };
        };
        id: 43113;
        name: "Avalanche Fuji";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "Avalanche Fuji";
            readonly symbol: "AVAX";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
            };
        };
        sourceId?: number | undefined;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    42161: {
        blockExplorers: {
            readonly default: {
                readonly name: "Arbiscan";
                readonly url: "https://arbiscan.io";
                readonly apiUrl: "https://api.arbiscan.io/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 7654707;
            };
        };
        id: 42161;
        name: "Arbitrum One";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    421614: {
        blockExplorers: {
            readonly default: {
                readonly name: "Arbiscan";
                readonly url: "https://sepolia.arbiscan.io";
                readonly apiUrl: "https://api-sepolia.arbiscan.io/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 81930;
            };
        };
        id: 421614;
        name: "Arbitrum Sepolia";
        nativeCurrency: {
            readonly name: "Arbitrum Sepolia Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://sepolia-rollup.arbitrum.io/rpc"];
            };
        };
        sourceId?: number | undefined;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    250: {
        blockExplorers: {
            readonly default: {
                readonly name: "FTMScan";
                readonly url: "https://ftmscan.com";
                readonly apiUrl: "https://api.ftmscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 33001987;
            };
        };
        id: 250;
        name: "Fantom";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "Fantom";
            readonly symbol: "FTM";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.ankr.com/fantom"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    4002: {
        blockExplorers: {
            readonly default: {
                readonly name: "FTMScan";
                readonly url: "https://testnet.ftmscan.com";
                readonly apiUrl: "https://testnet.ftmscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 8328688;
            };
        };
        id: 4002;
        name: "Fantom Testnet";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "Fantom";
            readonly symbol: "FTM";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.testnet.fantom.network"];
            };
        };
        sourceId?: number | undefined;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    10: {
        blockExplorers: {
            readonly default: {
                readonly name: "Optimism Explorer";
                readonly url: "https://optimistic.etherscan.io";
                readonly apiUrl: "https://api-optimistic.etherscan.io/api";
            };
        };
        contracts: {
            readonly disputeGameFactory: {
                readonly 1: {
                    readonly address: "0xe5965Ab5962eDc7477C8520243A95517CD252fA9";
                };
            };
            readonly l2OutputOracle: {
                readonly 1: {
                    readonly address: "0xdfe97868233d1aa22e815a266982f2cf17685a27";
                };
            };
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 4286263;
            };
            readonly portal: {
                readonly 1: {
                    readonly address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed";
                };
            };
            readonly l1StandardBridge: {
                readonly 1: {
                    readonly address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1";
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 10;
        name: "OP Mainnet";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://mainnet.optimism.io"];
            };
        };
        sourceId: 1;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    mixHash: viem.Hash;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.OpStackTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    uncles: viem.Hash[];
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransaction) => ({
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean;
                    mint?: bigint | undefined;
                    sourceHash: viem.Hex;
                    type: "deposit";
                } | {
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                }) & {};
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: viem.Hash;
                    blockNumber: bigint;
                    contractAddress: abitype.Address | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: abitype.Address;
                    gasUsed: bigint;
                    logs: viem.Log<bigint, number, false>[];
                    logsBloom: viem.Hex;
                    root?: viem.Hash | undefined;
                    status: "success" | "reverted";
                    to: abitype.Address | null;
                    transactionHash: viem.Hash;
                    transactionIndex: number;
                    type: viem.TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                } & {};
                type: "transactionReceipt";
            };
        };
        serializers: {
            readonly transaction: typeof viem_chains.serializeTransactionOpStack;
        };
    };
    11155420: {
        blockExplorers: {
            readonly default: {
                readonly name: "Blockscout";
                readonly url: "https://optimism-sepolia.blockscout.com";
                readonly apiUrl: "https://optimism-sepolia.blockscout.com/api";
            };
        };
        contracts: {
            readonly disputeGameFactory: {
                readonly 11155111: {
                    readonly address: "0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1";
                };
            };
            readonly l2OutputOracle: {
                readonly 11155111: {
                    readonly address: "0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F";
                };
            };
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 1620204;
            };
            readonly portal: {
                readonly 11155111: {
                    readonly address: "0x16Fc5058F25648194471939df75CF27A2fdC48BC";
                };
            };
            readonly l1StandardBridge: {
                readonly 11155111: {
                    readonly address: "0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1";
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 11155420;
        name: "OP Sepolia";
        nativeCurrency: {
            readonly name: "Sepolia Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://sepolia.optimism.io"];
            };
        };
        sourceId: 11155111;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    mixHash: viem.Hash;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.OpStackTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    uncles: viem.Hash[];
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransaction) => ({
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean;
                    mint?: bigint | undefined;
                    sourceHash: viem.Hex;
                    type: "deposit";
                } | {
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                }) & {};
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: viem.Hash;
                    blockNumber: bigint;
                    contractAddress: abitype.Address | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: abitype.Address;
                    gasUsed: bigint;
                    logs: viem.Log<bigint, number, false>[];
                    logsBloom: viem.Hex;
                    root?: viem.Hash | undefined;
                    status: "success" | "reverted";
                    to: abitype.Address | null;
                    transactionHash: viem.Hash;
                    transactionIndex: number;
                    type: viem.TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                } & {};
                type: "transactionReceipt";
            };
        };
        serializers: {
            readonly transaction: typeof viem_chains.serializeTransactionOpStack;
        };
    };
    1666600000: {
        blockExplorers: {
            readonly default: {
                readonly name: "Harmony Explorer";
                readonly url: "https://explorer.harmony.one";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 24185753;
            };
        };
        id: 1666600000;
        name: "Harmony One";
        nativeCurrency: {
            readonly name: "Harmony";
            readonly symbol: "ONE";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.ankr.com/harmony"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    11155111: {
        blockExplorers: {
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://sepolia.etherscan.io";
                readonly apiUrl: "https://api-sepolia.etherscan.io/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 751532;
            };
            readonly ensRegistry: {
                readonly address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
            };
            readonly ensUniversalResolver: {
                readonly address: "0xc8Af999e38273D658BE1b921b88A9Ddf005769cC";
                readonly blockCreated: 5317080;
            };
        };
        id: 11155111;
        name: "Sepolia";
        nativeCurrency: {
            readonly name: "Sepolia Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://sepolia.drpc.org"];
            };
        };
        sourceId?: number | undefined;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    534352: {
        blockExplorers: {
            readonly default: {
                readonly name: "Scrollscan";
                readonly url: "https://scrollscan.com";
                readonly apiUrl: "https://api.scrollscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 14;
            };
        };
        id: 534352;
        name: "Scroll";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.scroll.io"];
                readonly webSocket: readonly ["wss://wss-rpc.scroll.io/ws"];
            };
        };
        sourceId?: number | undefined;
        testnet: false;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    534351: {
        blockExplorers: {
            readonly default: {
                readonly name: "Scrollscan";
                readonly url: "https://sepolia.scrollscan.com";
                readonly apiUrl: "https://api-sepolia.scrollscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 9473;
            };
        };
        id: 534351;
        name: "Scroll Sepolia";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://sepolia-rpc.scroll.io"];
            };
        };
        sourceId?: number | undefined;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    1088: {
        blockExplorers: {
            readonly default: {
                readonly name: "Metis Explorer";
                readonly url: "https://explorer.metis.io";
                readonly apiUrl: "https://api.routescan.io/v2/network/mainnet/evm/1088/etherscan/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 2338552;
            };
        };
        id: 1088;
        name: "Metis";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "Metis";
            readonly symbol: "METIS";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://andromeda.metis.io/?owner=1088"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    8453: {
        blockExplorers: {
            readonly default: {
                readonly name: "Basescan";
                readonly url: "https://basescan.org";
                readonly apiUrl: "https://api.basescan.org/api";
            };
        };
        contracts: {
            readonly disputeGameFactory: {
                readonly 1: {
                    readonly address: "0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e";
                };
            };
            readonly l2OutputOracle: {
                readonly 1: {
                    readonly address: "0x56315b90c40730925ec5485cf004d835058518A0";
                };
            };
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 5022;
            };
            readonly portal: {
                readonly 1: {
                    readonly address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e";
                    readonly blockCreated: 17482143;
                };
            };
            readonly l1StandardBridge: {
                readonly 1: {
                    readonly address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35";
                    readonly blockCreated: 17482143;
                };
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 8453;
        name: "Base";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://mainnet.base.org"];
            };
        };
        sourceId: 1;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    mixHash: viem.Hash;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.OpStackTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    uncles: viem.Hash[];
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransaction) => ({
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean;
                    mint?: bigint | undefined;
                    sourceHash: viem.Hex;
                    type: "deposit";
                } | {
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                }) & {};
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: viem.Hash;
                    blockNumber: bigint;
                    contractAddress: abitype.Address | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: abitype.Address;
                    gasUsed: bigint;
                    logs: viem.Log<bigint, number, false>[];
                    logsBloom: viem.Hex;
                    root?: viem.Hash | undefined;
                    status: "success" | "reverted";
                    to: abitype.Address | null;
                    transactionHash: viem.Hash;
                    transactionIndex: number;
                    type: viem.TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                } & {};
                type: "transactionReceipt";
            };
        };
        serializers: {
            readonly transaction: typeof viem_chains.serializeTransactionOpStack;
        };
    };
    84532: {
        blockExplorers: {
            readonly default: {
                readonly name: "Basescan";
                readonly url: "https://sepolia.basescan.org";
                readonly apiUrl: "https://api-sepolia.basescan.org/api";
            };
        };
        contracts: {
            readonly disputeGameFactory: {
                readonly 11155111: {
                    readonly address: "0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1";
                };
            };
            readonly l2OutputOracle: {
                readonly 11155111: {
                    readonly address: "0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254";
                };
            };
            readonly portal: {
                readonly 11155111: {
                    readonly address: "0x49f53e41452c74589e85ca1677426ba426459e85";
                    readonly blockCreated: 4446677;
                };
            };
            readonly l1StandardBridge: {
                readonly 11155111: {
                    readonly address: "0xfd0Bf71F60660E2f608ed56e1659C450eB113120";
                    readonly blockCreated: 4446677;
                };
            };
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 1059647;
            };
            readonly gasPriceOracle: {
                readonly address: "0x420000000000000000000000000000000000000F";
            };
            readonly l1Block: {
                readonly address: "0x4200000000000000000000000000000000000015";
            };
            readonly l2CrossDomainMessenger: {
                readonly address: "0x4200000000000000000000000000000000000007";
            };
            readonly l2Erc721Bridge: {
                readonly address: "0x4200000000000000000000000000000000000014";
            };
            readonly l2StandardBridge: {
                readonly address: "0x4200000000000000000000000000000000000010";
            };
            readonly l2ToL1MessagePasser: {
                readonly address: "0x4200000000000000000000000000000000000016";
            };
        };
        id: 84532;
        name: "Base Sepolia";
        nativeCurrency: {
            readonly name: "Sepolia Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://sepolia.base.org"];
            };
        };
        sourceId: 11155111;
        testnet: true;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    mixHash: viem.Hash;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.OpStackTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    uncles: viem.Hash[];
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransaction) => ({
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean;
                    mint?: bigint | undefined;
                    sourceHash: viem.Hex;
                    type: "deposit";
                } | {
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: undefined;
                    mint?: undefined;
                    sourceHash?: undefined;
                }) & {};
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: viem_chains.OpStackRpcTransactionReceipt) => {
                    blobGasPrice?: bigint | undefined;
                    blobGasUsed?: bigint | undefined;
                    blockHash: viem.Hash;
                    blockNumber: bigint;
                    contractAddress: abitype.Address | null | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    from: abitype.Address;
                    gasUsed: bigint;
                    logs: viem.Log<bigint, number, false>[];
                    logsBloom: viem.Hex;
                    root?: viem.Hash | undefined;
                    status: "success" | "reverted";
                    to: abitype.Address | null;
                    transactionHash: viem.Hash;
                    transactionIndex: number;
                    type: viem.TransactionType;
                    l1GasPrice: bigint | null;
                    l1GasUsed: bigint | null;
                    l1Fee: bigint | null;
                    l1FeeScalar: number | null;
                } & {};
                type: "transactionReceipt";
            };
        };
        serializers: {
            readonly transaction: typeof viem_chains.serializeTransactionOpStack;
        };
        readonly network: "base-sepolia";
    };
    56: {
        blockExplorers: {
            readonly default: {
                readonly name: "BscScan";
                readonly url: "https://bscscan.com";
                readonly apiUrl: "https://api.bscscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 15921452;
            };
        };
        id: 56;
        name: "BNB Smart Chain";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "BNB";
            readonly symbol: "BNB";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.ankr.com/bsc"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    100: {
        blockExplorers: {
            readonly default: {
                readonly name: "Gnosisscan";
                readonly url: "https://gnosisscan.io";
                readonly apiUrl: "https://api.gnosisscan.io/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 21022491;
            };
        };
        id: 100;
        name: "Gnosis";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "xDAI";
            readonly symbol: "XDAI";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.gnosischain.com"];
                readonly webSocket: readonly ["wss://rpc.gnosischain.com/wss"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    1101: {
        blockExplorers: {
            readonly default: {
                readonly name: "PolygonScan";
                readonly url: "https://zkevm.polygonscan.com";
                readonly apiUrl: "https://api-zkevm.polygonscan.com/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                readonly blockCreated: 57746;
            };
        };
        id: 1101;
        name: "Polygon zkEVM";
        nativeCurrency: {
            readonly name: "Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://zkevm-rpc.com"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom?: Record<string, unknown> | undefined;
        fees?: viem.ChainFees<undefined> | undefined;
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
    42220: {
        blockExplorers: {
            readonly default: {
                readonly name: "Celo Explorer";
                readonly url: "https://celoscan.io";
                readonly apiUrl: "https://api.celoscan.io/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                readonly blockCreated: 13112599;
            };
        };
        id: 42220;
        name: "Celo";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "CELO";
            readonly symbol: "CELO";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://forno.celo.org"];
            };
        };
        sourceId?: number | undefined;
        testnet: false;
        custom?: Record<string, unknown> | undefined;
        fees: viem.ChainFees<{
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.CeloRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint | undefined;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint | undefined;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    nonce: bigint | null | undefined;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.CeloTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                    mixHash?: undefined;
                    randomness?: {
                        committed: viem.Hex;
                        revealed: viem.Hex;
                    } | undefined;
                    uncles?: undefined;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.CeloRpcTransaction) => ({
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    accessList: viem.AccessList;
                    chainId: number;
                    feeCurrency: abitype.Address | null;
                    gatewayFee: bigint | null;
                    gatewayFeeRecipient: abitype.Address | null;
                    type: "cip42";
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    accessList: viem.AccessList;
                    chainId: number;
                    feeCurrency: abitype.Address | null;
                    type: "cip64";
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean;
                    mint?: bigint | undefined;
                    sourceHash: viem.Hex;
                    type: "deposit";
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: undefined;
                    feeCurrency?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                }) & {};
                type: "transaction";
            };
            readonly transactionRequest: {
                exclude: [] | undefined;
                format: (args: viem_chains.CeloTransactionRequest) => ({
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x0" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: `0x${string}` | undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    blobs?: undefined;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x1" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: `0x${string}` | undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    accessList?: viem.AccessList | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x2" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    type?: "0x3" | undefined;
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    value?: `0x${string}` | undefined;
                    to: `0x${string}` | null;
                    gasPrice?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    maxFeePerBlobGas: `0x${string}`;
                    accessList?: viem.AccessList | undefined;
                    blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
                    blobVersionedHashes?: readonly viem.Hex[] | undefined;
                    kzg?: viem.Kzg | undefined;
                    sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
                    authorizationList?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    type?: "0x4" | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    value?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    authorizationList?: viem_experimental.RpcAuthorizationList | undefined;
                    blobs?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x7b" | undefined;
                    value?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    feeCurrency?: abitype.Address | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                }) & {};
                type: "transactionRequest";
            };
        }>;
        formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.CeloRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint | undefined;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint | undefined;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    nonce: bigint | null | undefined;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.CeloTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                    mixHash?: undefined;
                    randomness?: {
                        committed: viem.Hex;
                        revealed: viem.Hex;
                    } | undefined;
                    uncles?: undefined;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.CeloRpcTransaction) => ({
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    feeCurrency: abitype.Address | null;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    accessList: viem.AccessList;
                    chainId: number;
                    feeCurrency: abitype.Address | null;
                    gatewayFee: bigint | null;
                    gatewayFeeRecipient: abitype.Address | null;
                    type: "cip42";
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    accessList: viem.AccessList;
                    chainId: number;
                    feeCurrency: abitype.Address | null;
                    type: "cip64";
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    mint?: undefined;
                    isSystemTx?: undefined;
                    sourceHash?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    isSystemTx?: boolean;
                    mint?: bigint | undefined;
                    sourceHash: viem.Hex;
                    type: "deposit";
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: undefined;
                    feeCurrency?: undefined;
                    gatewayFee?: undefined;
                    gatewayFeeRecipient?: undefined;
                }) & {};
                type: "transaction";
            };
            readonly transactionRequest: {
                exclude: [] | undefined;
                format: (args: viem_chains.CeloTransactionRequest) => ({
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x0" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: `0x${string}` | undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    blobs?: undefined;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x1" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: `0x${string}` | undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    accessList?: viem.AccessList | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x2" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    type?: "0x3" | undefined;
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    value?: `0x${string}` | undefined;
                    to: `0x${string}` | null;
                    gasPrice?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    maxFeePerBlobGas: `0x${string}`;
                    accessList?: viem.AccessList | undefined;
                    blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
                    blobVersionedHashes?: readonly viem.Hex[] | undefined;
                    kzg?: viem.Kzg | undefined;
                    sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
                    authorizationList?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    type?: "0x4" | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    value?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    authorizationList?: viem_experimental.RpcAuthorizationList | undefined;
                    blobs?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    feeCurrency?: abitype.Address | undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x7b" | undefined;
                    value?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    feeCurrency?: abitype.Address | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                }) & {};
                type: "transactionRequest";
            };
        };
        serializers: {
            readonly transaction: typeof viem_chains.serializeTransactionCelo;
        };
    };
    324: {
        blockExplorers: {
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://era.zksync.network/";
                readonly apiUrl: "https://api-era.zksync.network/api";
            };
            readonly native: {
                readonly name: "ZKsync Explorer";
                readonly url: "https://explorer.zksync.io/";
                readonly apiUrl: "https://block-explorer-api.mainnet.zksync.io/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xF9cda624FBC7e059355ce98a31693d299FACd963";
            };
            readonly universalSignatureVerifier: {
                readonly address: "0xfB688330379976DA81eB64Fe4BF50d7401763B9C";
                readonly blockCreated: 45659388;
            };
        };
        id: 324;
        name: "ZKsync Era";
        nativeCurrency: {
            readonly decimals: 18;
            readonly name: "Ether";
            readonly symbol: "ETH";
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://mainnet.era.zksync.io"];
                readonly webSocket: readonly ["wss://mainnet.era.zksync.io/ws"];
            };
        };
        sourceId?: number | undefined;
        testnet?: boolean | undefined;
        custom: {
            readonly getEip712Domain: viem_zksync.EIP712DomainFn<viem_chains.ZkSyncTransactionSerializable, viem_chains.ZkSyncEIP712TransactionSignable>;
        };
        fees?: viem.ChainFees<undefined> | undefined;
        formatters: {
            readonly block: {
                exclude: [] | undefined;
                format: (args: viem_chains.ZkSyncRpcBlock) => {
                    baseFeePerGas: bigint | null;
                    blobGasUsed: bigint;
                    difficulty: bigint;
                    excessBlobGas: bigint;
                    extraData: viem.Hex;
                    gasLimit: bigint;
                    gasUsed: bigint;
                    hash: `0x${string}` | null;
                    logsBloom: `0x${string}` | null;
                    miner: abitype.Address;
                    mixHash: viem.Hash;
                    nonce: `0x${string}` | null;
                    number: bigint | null;
                    parentBeaconBlockRoot?: viem.Hex | undefined;
                    parentHash: viem.Hash;
                    receiptsRoot: viem.Hex;
                    sealFields: viem.Hex[];
                    sha3Uncles: viem.Hash;
                    size: bigint;
                    stateRoot: viem.Hash;
                    timestamp: bigint;
                    totalDifficulty: bigint | null;
                    transactions: `0x${string}`[] | viem_chains.ZkSyncTransaction<boolean>[];
                    transactionsRoot: viem.Hash;
                    uncles: viem.Hash[];
                    withdrawals?: viem.Withdrawal[] | undefined;
                    withdrawalsRoot?: viem.Hex | undefined;
                    l1BatchNumber: bigint | null;
                    l1BatchTimestamp: bigint | null;
                } & {};
                type: "block";
            };
            readonly transaction: {
                exclude: [] | undefined;
                format: (args: viem_chains.ZkSyncRpcTransaction) => ({
                    r: viem.Hex;
                    s: viem.Hex;
                    v: bigint;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    gas: bigint;
                    nonce: number;
                    value: bigint;
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    hash: viem.Hash;
                    input: viem.Hex;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId?: number | undefined;
                    yParity?: undefined;
                    type: "legacy";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip2930";
                    gasPrice: bigint;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip1559";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList?: undefined;
                    blobVersionedHashes: readonly viem.Hex[];
                    chainId: number;
                    type: "eip4844";
                    gasPrice?: undefined;
                    maxFeePerBlobGas: bigint;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    accessList: viem.AccessList;
                    authorizationList: viem_experimental.SignedAuthorizationList;
                    blobVersionedHashes?: undefined;
                    chainId: number;
                    type: "eip7702";
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    type: "priority";
                } | {
                    blockHash: `0x${string}` | null;
                    blockNumber: bigint | null;
                    from: abitype.Address;
                    gas: bigint;
                    hash: viem.Hash;
                    input: viem.Hex;
                    nonce: number;
                    r: viem.Hex;
                    s: viem.Hex;
                    to: abitype.Address | null;
                    transactionIndex: number | null;
                    typeHex: viem.Hex | null;
                    v: bigint;
                    value: bigint;
                    yParity: number;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas: bigint;
                    maxPriorityFeePerGas: bigint;
                    type: "eip712" | "priority";
                }) & {};
                type: "transaction";
            };
            readonly transactionReceipt: {
                exclude: [] | undefined;
                format: (args: viem_chains.ZkSyncRpcTransactionReceipt) => {
                    type: viem_chains.ZkSyncTransactionType;
                    to: abitype.Address | null;
                    from: abitype.Address;
                    blockHash: viem.Hash;
                    blockNumber: bigint;
                    transactionIndex: number;
                    status: "success" | "reverted";
                    contractAddress: abitype.Address | null | undefined;
                    logsBloom: viem.Hex;
                    blobGasUsed?: bigint | undefined;
                    gasUsed: bigint;
                    transactionHash: viem.Hash;
                    blobGasPrice?: bigint | undefined;
                    cumulativeGasUsed: bigint;
                    effectiveGasPrice: bigint;
                    root?: viem.Hash | undefined;
                    l1BatchNumber: bigint | null;
                    l1BatchTxIndex: bigint | null;
                    logs: viem_chains.ZkSyncLog[];
                    l2ToL1Logs: viem_chains.ZkSyncL2ToL1Log[];
                } & {};
                type: "transactionReceipt";
            };
            readonly transactionRequest: {
                exclude: ("paymaster" | "gasPerPubdata" | "factoryDeps" | "paymasterInput" | "customSignature")[] | undefined;
                format: (args: viem_chains.ZkSyncTransactionRequest) => ({
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x0" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: `0x${string}` | undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    blobs?: undefined;
                    accessList?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    eip712Meta?: undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x1" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: `0x${string}` | undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: undefined;
                    maxPriorityFeePerGas?: undefined;
                    accessList?: viem.AccessList | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    eip712Meta?: undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type?: "0x2" | undefined;
                    value?: `0x${string}` | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    blobs?: undefined;
                    authorizationList?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    eip712Meta?: undefined;
                } | {
                    type?: "0x3" | undefined;
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    value?: `0x${string}` | undefined;
                    to: `0x${string}` | null;
                    gasPrice?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    maxFeePerBlobGas: `0x${string}`;
                    accessList?: viem.AccessList | undefined;
                    blobs: readonly viem.Hex[] | readonly viem.ByteArray[];
                    blobVersionedHashes?: readonly viem.Hex[] | undefined;
                    kzg?: viem.Kzg | undefined;
                    sidecars?: readonly viem.BlobSidecar<viem.Hex>[] | undefined;
                    authorizationList?: undefined;
                    eip712Meta?: undefined;
                } | {
                    type?: "0x4" | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    value?: `0x${string}` | undefined;
                    accessList?: viem.AccessList | undefined;
                    authorizationList?: viem_experimental.RpcAuthorizationList | undefined;
                    blobs?: undefined;
                    blobVersionedHashes?: undefined;
                    kzg?: undefined;
                    sidecars?: undefined;
                    eip712Meta?: undefined;
                } | {
                    data?: viem.Hex | undefined;
                    from?: abitype.Address | undefined;
                    gas?: `0x${string}` | undefined;
                    nonce?: `0x${string}` | undefined;
                    to?: abitype.Address | null | undefined;
                    type: "0xff" | "0x71";
                    value?: `0x${string}` | undefined;
                    gasPrice?: undefined;
                    maxFeePerBlobGas?: undefined;
                    maxFeePerGas?: `0x${string}` | undefined;
                    maxPriorityFeePerGas?: `0x${string}` | undefined;
                    eip712Meta: viem_chains.ZkSyncEip712Meta;
                }) & {
                    paymaster: never;
                    gasPerPubdata: never;
                    factoryDeps: never;
                    paymasterInput: never;
                    customSignature: never;
                };
                type: "transactionRequest";
            };
        };
        serializers: {
            readonly transaction: typeof viem_zksync.serializeTransaction;
        };
        readonly network: "zksync-era";
    };
    59144: {
        blockExplorers: {
            readonly default: {
                readonly name: "Etherscan";
                readonly url: "https://lineascan.build";
                readonly apiUrl: "https://api.lineascan.build/api";
            };
        };
        contracts: {
            readonly multicall3: {
                readonly address: "0xcA11bde05977b3631167028862bE2a173976CA11";
                readonly blockCreated: 42;
            };
        };
        id: 59144;
        name: "Linea Mainnet";
        nativeCurrency: {
            readonly name: "Linea Ether";
            readonly symbol: "ETH";
            readonly decimals: 18;
        };
        rpcUrls: {
            readonly default: {
                readonly http: readonly ["https://rpc.linea.build"];
                readonly webSocket: readonly ["wss://rpc.linea.build"];
            };
        };
        sourceId?: number | undefined;
        testnet: false;
        custom?: Record<string, unknown> | undefined;
        fees: {
            readonly estimateFeesPerGas: ({ client, multiply, request, type, }: Parameters<viem.ChainEstimateFeesPerGasFn>[0]) => ReturnType<viem.ChainEstimateFeesPerGasFn>;
            readonly maxPriorityFeePerGas: ({ block, client, request }: viem.ChainFeesFnParameters<viem.ChainFormatters | undefined>) => Promise<bigint | null>;
        };
        formatters?: undefined;
        serializers?: viem.ChainSerializers<undefined, viem.TransactionSerializable> | undefined;
    };
};

type SupportedChainIds = (typeof ChainId)[keyof typeof ChainId];
declare const alchemySupportedChainIds: (1 | 137 | 80002 | 43114 | 43113 | 42161 | 421614 | 250 | 4002 | 10 | 11155420 | 1666600000 | 11155111 | 534352 | 534351 | 1088 | 8453 | 84532 | 56 | 100 | 1101 | 42220 | 324 | 59144)[];
declare const getNetworkEnv: (chainId: SupportedChainIds) => "RPC_MAINNET" | "RPC_POLYGON" | "RPC_POLYGON_AMOY" | "RPC_AVALANCHE" | "RPC_AVALANCHE_FUJI" | "RPC_ARBITRUM" | "RPC_ARBITRUM_SEPOLIA" | "RPC_FANTOM" | "RPC_FANTOM_TESTNET" | "RPC_OPTIMISM" | "RPC_OPTIMISM_SEPOLIA" | "RPC_HARMONY" | "RPC_SEPOLIA" | "RPC_SCROLL" | "RPC_SCROLL_SEPOLIA" | "RPC_METIS" | "RPC_BASE" | "RPC_BASE_SEPOLIA" | "RPC_BNB" | "RPC_GNOSIS" | "RPC_ZKEVM" | "RPC_CELO" | "RPC_ZKSYNC" | "RPC_LINEA";
declare function getExplicitRPC(chainId: SupportedChainIds): string;
declare function getAlchemyRPC(chainId: SupportedChainIds, alchemyKey: string): string;
declare function getPublicRpc(chainId: SupportedChainIds): "https://eth.llamarpc.com" | "https://polygon.llamarpc.com" | "https://base.llamarpc.com" | "https://binance.llamarpc.com" | "https://andromeda.metis.io/?owner=1088" | "https://rpc.ankr.com/gnosis" | "https://rpc.scroll.io" | "https://mainnet.era.zksync.io" | "https://rpc.ftm.tools" | "https://api.avax.network/ext/bc/C/rpc" | "https://rpc.linea.build";
declare function getQuickNodeRpc(chainId: SupportedChainIds, options: {
    quicknodeEndpointName: string;
    quicknodeToken: string;
}): string;
type GetRPCUrlOptions = {
    alchemyKey?: string;
    quicknodeEndpointName?: string;
    quicknodeToken?: string;
};
/**
 * Return a RPC_URL for supported chains.
 * If the RPC_URL environment variable is set, it will be used.
 * Otherwise will construct the URL based on the chain ID and Alchemy API key.
 *
 * @notice This method acts as fall-through and will only revert if the ChainId is strictly not supported.
 * If no RPC_URL is set, and non of the private rpc providers supports the chain, it will return undefined.
 * @param chainId
 * @param alchemyKey
 * @returns the RPC_URL for the given chain ID
 */
declare const getRPCUrl: (chainId: SupportedChainIds, options?: GetRPCUrlOptions) => string | undefined;

export { ChainId, ChainList, type SupportedChainIds, alchemySupportedChainIds, getAlchemyRPC, getExplicitRPC, getNetworkEnv, getPublicRpc, getQuickNodeRpc, getRPCUrl };
