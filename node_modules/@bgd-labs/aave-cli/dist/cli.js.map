{"version":3,"sources":["../node_modules/base-x/src/index.js","../node_modules/bs58/index.js","../src/cli.ts","../package.json","../src/commands/diffSnaphots.ts","../src/reports/diff.ts","../src/reports/adi-diff-reports.ts","../src/reports/diff-reports.ts","../src/reports/emode.ts","../src/utils/storageSlots.ts","../src/reports/fetch-IR-strategy.ts","../src/reports/reserve.ts","../src/govv3/utils/markdownUtils.ts","../src/govv3/utils/checkAddress.ts","../src/utils/getClient.ts","../src/reports/strategy.ts","../src/reports/code-diff.ts","../src/utils/json.ts","../src/commands/fork.ts","../src/govv3/governance.ts","../src/utils/constants.ts","../src/utils/logger.ts","../src/utils/tenderlyClient.ts","../src/govv3/proofs.ts","../src/govv3/payloadsController.ts","../src/commands/governance.ts","../src/govv3/checks/logs.ts","../src/govv3/utils/logInterpreter.ts","../src/govv3/utils/solidityUtils.ts","../src/govv3/checks/selfDestruct.ts","../src/govv3/checks/state.ts","../src/govv3/utils/reserveConfigurationInterpreter.ts","../src/govv3/checks/targetsVerified.ts","../src/govv3/generatePayloadReport.ts","../src/govv3/generateProposalReport.ts","../src/govv3/simulate.ts","../src/commands/ipfsUpload.ts","../src/ipfs/aipValidation.ts","../src/ipfs/onlyHash.ts","../src/commands/capo.ts","../src/reports/capo-report.ts"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","#!/usr/bin/env node\nimport {Command, Option} from '@commander-js/extra-typings';\nimport 'dotenv/config';\nimport packageJson from '../package.json';\nimport {addCommand as addDiffSnapshots} from './commands/diffSnaphots';\nimport {addCommand as addFork} from './commands/fork';\nimport {addCommand as addGovernance} from './commands/governance';\nimport {addCommand as addIpfsCommand} from './commands/ipfsUpload';\nimport {addCommand as addCapoCommand} from './commands/capo';\n\nconst program = new Command();\n\nprogram\n  .name('aave-cli')\n  .description('CLI to interact with the aave ecosystem')\n  .option('-v, --verbose', 'Showing logs for all the taken steps')\n  .on('option:verbose', () => {\n    process.env.VERBOSE = 'true';\n  })\n  .addOption(\n    new Option('--format <format>', 'Set preferred output format')\n      .default('raw')\n      .choices(['raw', 'encoded'] as const),\n  )\n  .on('option:format', (format) => {\n    process.env.FORMAT = format;\n  })\n  .version(packageJson.version)\n  .showHelpAfterError();\naddGovernance(program);\naddDiffSnapshots(program);\naddFork(program);\naddIpfsCommand(program);\naddCapoCommand(program);\n\nprogram.parse();\n","{\n  \"name\": \"@bgd-labs/aave-cli\",\n  \"version\": \"1.1.12\",\n  \"description\": \"A cli to perform various aave governance related tasks\",\n  \"private\": false,\n  \"sideEffects\": false,\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"start\": \"bun src/cli.ts\",\n    \"build\": \"tsup\",\n    \"test\": \"vitest\",\n    \"lint:fix\": \"bunx prettier . --write\",\n    \"lint\": \"bunx prettier . --check\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/bgd-labs/report-engine.git\"\n  },\n  \"author\": \"BGD labs\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/bgd-labs/report-engine/issues\"\n  },\n  \"homepage\": \"https://github.com/bgd-labs/report-engine#readme\",\n  \"devDependencies\": {\n    \"@types/object-hash\": \"^3.0.6\",\n    \"prettier\": \"^3.2.5\",\n    \"prettier-plugin-solidity\": \"^1.4.1\",\n    \"tsup\": \"^8.3.5\",\n    \"typescript\": \"^5.4.5\",\n    \"vitest\": \"^2.1.5\"\n  },\n  \"type\": \"module\",\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.js\",\n  \"exports\": {\n    \".\": {\n      \"require\": {\n        \"types\": \"./dist/index.d.cts\",\n        \"default\": \"./dist/index.cjs\"\n      },\n      \"import\": {\n        \"types\": \"./dist/index.d.ts\",\n        \"default\": \"./dist/index.js\"\n      },\n      \"types\": \"./dist/index.d.cts\",\n      \"default\": \"./dist/index.cjs\"\n    }\n  },\n  \"bin\": {\n    \"aave-cli\": \"dist/cli.js\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"dependencies\": {\n    \"@bgd-labs/aave-address-book\": \"^4.5.1\",\n    \"@bgd-labs/aave-v3-governance-cache\": \"^1.0.8\",\n    \"@bgd-labs/js-utils\": \"^1.4.6\",\n    \"@bgd-labs/rpc-env\": \"^2.1.1\",\n    \"@commander-js/extra-typings\": \"^12.1.0\",\n    \"@inquirer/prompts\": \"^7.1.0\",\n    \"blockstore-core\": \"^5.0.2\",\n    \"chalk\": \"^4.1.2\",\n    \"commander\": \"^12.1.0\",\n    \"deepmerge\": \"^4.3.1\",\n    \"dotenv\": \"^16.4.1\",\n    \"find-object-paths\": \"^1.1.0\",\n    \"gray-matter\": \"^4.0.3\",\n    \"ipfs-unixfs-importer\": \"^15.3.1\",\n    \"json-bigint\": \"^1.0.0\",\n    \"viem\": \"^2.21.48\",\n    \"zod\": \"^3.23.8\"\n  }\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport {compareStorageLayouts} from '@bgd-labs/js-utils';\nimport type {Command} from '@commander-js/extra-typings';\nimport {adiDiffReports} from '../reports/adi-diff-reports';\nimport {diffReports} from '../reports/diff-reports';\nimport {readJsonFile, readJsonString} from '../utils/json';\nimport {diff} from '../reports/diff';\n\nexport function addCommand(program: Command) {\n  program\n    .command('diff-snapshots')\n    .description('generate a snapshot diff report')\n    .argument('<from>')\n    .argument('<to>')\n    .option('-o, --out <string>', 'output path')\n    .option('--stringMode', 'expects input to be a string, not paths')\n    .action(async (_from, _to, options) => {\n      const from = options.stringMode ? readJsonString(_from) : readJsonFile(_from);\n      const to = options.stringMode ? readJsonString(_to) : readJsonFile(_to);\n      const content = await diffReports(from, to);\n      if (options.out) {\n        fs.mkdirSync(path.dirname(options.out), {recursive: true});\n        fs.writeFileSync(options.out, content);\n      } else {\n        console.log(content);\n      }\n    });\n\n  program\n    .command('adi-diff-snapshots')\n    .description('generate a aDI snapshot diff report')\n    .argument('<from>')\n    .argument('<to>')\n    .option('-o, --out <string>', 'output path')\n    .option('--stringMode', 'expects input to be a string, not paths')\n    .action(async (_from, _to, options) => {\n      const from = options.stringMode ? readJsonString(_from) : readJsonFile(_from);\n      const to = options.stringMode ? readJsonString(_to) : readJsonFile(_to);\n      const content = await adiDiffReports(from, to);\n      if (options.out) {\n        fs.mkdirSync(path.dirname(options.out), {recursive: true});\n        fs.writeFileSync(options.out, content);\n      } else {\n        console.log(content);\n      }\n    });\n\n  program\n    .command('diff-storage')\n    .description('generate a storage diff')\n    .argument('<from>')\n    .argument('<to>')\n    .option('-o, --out <string>', 'output path')\n    .action(async (_from, _to, options) => {\n      const from = readJsonFile(_from);\n      const to = readJsonFile(_to);\n      const content = await compareStorageLayouts(from, to);\n      if (options.out) {\n        fs.mkdirSync(path.dirname(options.out), {recursive: true});\n        fs.writeFileSync(options.out, content);\n      } else {\n        console.log(content);\n      }\n    });\n}\n","/**\n * Highly inspired by - reimplemented a bit simpler & added types\n * @license MIT https://github.com/omgaz/diffler\n * Author: Gary Chisholm @omgaz\n */\n\nexport type Difference<A extends Record<string, any>, B extends Record<string, any>> = {\n  [key in keyof Omit<A, keyof B>]: {from: A[key]; to: null};\n} & {\n  [key in keyof Omit<B, keyof A>]: {from: null; to: B[key]};\n};\n\nexport type DiffOutput<A extends Record<string, any>, B extends Record<string, any>> = {\n  [key in keyof (A | B)]: DiffOutput<A[key], B[key]>;\n} & Difference<A, B>;\n\nexport function diff<T extends Record<string, any>, X extends Record<string, any>>(\n  a: T,\n  b: X,\n  removeUnchanged?: boolean,\n): DiffOutput<T, X> {\n  const out = {} as Record<string, any>;\n  for (const key in a) {\n    if (!b.hasOwnProperty(key)) {\n      out[key] = {from: a[key], to: null};\n    } else {\n      if (typeof a[key] === 'object') {\n        const tempDiff = diff(a[key], b[key], removeUnchanged);\n        if (Object.keys(tempDiff).length > 0) {\n          out[key] = tempDiff;\n        }\n      } else {\n        if (b[key as string] === a[key]) {\n          if (!removeUnchanged) out[key] = a[key];\n        } else {\n          out[key] = {from: a[key], to: b[key]};\n        }\n      }\n    }\n  }\n  for (const key in b) {\n    if (a.hasOwnProperty(key)) continue;\n    out[key] = {from: null, to: b[key]};\n  }\n  return out as DiffOutput<T, X>;\n}\n","import {diff} from './diff';\nimport type {ADISnapshot} from './snapshot-types';\n\nexport async function adiDiffReports<A extends ADISnapshot, B extends ADISnapshot>(\n  pre: A,\n  post: B,\n) {\n  const chainId = pre.chainId;\n  const diffResult = diff(pre, post);\n\n  // create report\n  let content = '';\n\n  content += `## Raw diff\\n\\n\\`\\`\\`json\\n${JSON.stringify(diff(pre, post, true), null, 2)}\\n\\`\\`\\``;\n  return content;\n}\n","import {writeFileSync} from 'fs';\nimport {diff} from './diff';\nimport {renderEmodeDiff} from './emode';\nimport {getStrategyImageUrl} from './fetch-IR-strategy';\nimport {renderReserve, renderReserveDiff} from './reserve';\nimport {AaveV3Reserve, type AaveV3Snapshot} from './snapshot-types';\nimport {renderStrategy, renderStrategyDiff} from './strategy';\nimport {diffCode, downloadContract} from './code-diff';\n\nfunction hasDiff(input: Record<string, any>): boolean {\n  if (!input) return false;\n  return !!Object.keys(input).find(\n    (key) =>\n      typeof input[key as keyof typeof input] === 'object' &&\n      input[key as keyof typeof input] !== null &&\n      (input[key as keyof typeof input].hasOwnProperty('from') ||\n        input[key as keyof typeof input].hasOwnProperty('to')),\n  );\n}\n\nexport async function diffReports<A extends AaveV3Snapshot, B extends AaveV3Snapshot>(\n  pre: A,\n  post: B,\n) {\n  const chainId = pre.chainId;\n  const diffResult = diff(pre, post);\n  const diffResultWithoutUnchanged = diff(pre, post, true);\n\n  // create report\n  let content = '';\n  const reservesAdded = Object.keys(diffResult.reserves)\n    .map((reserveKey) => {\n      // to being present on reserve level % trueish means reserve was added\n      if ((diffResult.reserves[reserveKey] as any).to) {\n        let report = renderReserve((diffResult.reserves[reserveKey] as any).to, chainId);\n        report += renderStrategy(post.strategies[reserveKey]);\n        report += `| interestRate | ![ir](${getStrategyImageUrl(post.strategies[reserveKey])}) |\\n`;\n\n        return report;\n      }\n    })\n    .filter((i) => i);\n  const reservesRemoved = Object.keys(diffResult.reserves)\n    .map((reserveKey) => {\n      // from being present on reserve level % trueish means reserve was removed\n      if ((diffResult.reserves[reserveKey] as any).from) {\n        return renderReserve((diffResult.reserves[reserveKey] as any).from, chainId);\n      }\n    })\n    .filter((i) => i);\n  const reservesAltered = Object.keys(diffResult.reserves)\n    .map((reserveKey) => {\n      // \"from\" being present on reserses key means reserve was removed\n      if (!(diffResult.reserves[reserveKey] as any).hasOwnProperty('from')) {\n        const hasChangedReserveProperties = hasDiff(diffResult.reserves[reserveKey]);\n        const preIr = getStrategyImageUrl(pre.strategies[reserveKey]);\n        const postIr = getStrategyImageUrl(post.strategies[reserveKey]);\n        const hasChangedIr = preIr !== postIr;\n        if (!hasChangedReserveProperties && !hasChangedIr) return;\n        // diff reserve\n        let report = renderReserveDiff(diffResult.reserves[reserveKey] as any, chainId);\n        // diff irs\n        if (hasChangedIr) {\n          report += renderStrategyDiff(\n            diff(pre.strategies[reserveKey], post.strategies[reserveKey]) as any,\n          );\n          report += `| interestRate | ![before](${preIr}) | ![after](${postIr}) |`;\n        }\n\n        return report;\n      }\n    })\n    .filter((i) => i);\n  if (reservesAdded.length || reservesRemoved.length || reservesAltered.length) {\n    content += '## Reserve changes\\n\\n';\n    if (reservesAdded.length) {\n      content += `### ${reservesAdded.length > 1 ? 'Reserve' : 'Reserves'} added\\n\\n`;\n      content += reservesAdded.join('\\n\\n');\n      content += '\\n\\n';\n    }\n\n    if (reservesAltered.length) {\n      content += `### ${reservesAltered.length > 1 ? 'Reserve' : 'Reserves'} altered\\n\\n`;\n      content += reservesAltered.join('\\n\\n');\n      content += '\\n\\n';\n    }\n\n    if (reservesRemoved.length) {\n      content += `### ${reservesRemoved.length > 1 ? 'Reserve' : 'Reserves'} removed\\n\\n`;\n      content += reservesRemoved.join('\\n\\n');\n      content += '\\n\\n';\n    }\n  }\n\n  if (diffResultWithoutUnchanged.eModes) {\n    content += '## Emodes changed\\n\\n';\n    for (const eMode of Object.keys(diffResult.eModes)) {\n      const hasChanges = hasDiff(diffResult.eModes?.[eMode]);\n      content += `### EMode: ${post.eModes[eMode].label}(id: ${post.eModes[eMode].eModeCategory})\\n\\n`;\n      if (hasChanges) {\n        content += renderEmodeDiff(\n          diff(pre.eModes[eMode] || {}, post.eModes[eMode] || {}) as any,\n          pre,\n          post,\n        );\n      } else if (!pre.eModes[eMode] || !post.eModes[eMode]) {\n        content += renderEmodeDiff(\n          diff(pre.eModes[eMode] || {}, post.eModes[eMode] || {}) as any,\n          pre,\n          post,\n        );\n      }\n      content += '\\n\\n';\n    }\n  }\n\n  try {\n    if (diffResultWithoutUnchanged.poolConfig) {\n      for (const key of Object.keys(diffResult.poolConfig)) {\n        if (\n          typeof (diffResult as any).poolConfig[key] === 'object' &&\n          (diffResult as any).poolConfig[key].hasOwnProperty('from')\n        ) {\n          const fromAddress = (diffResult as any).poolConfig[key].from;\n          const toAddress = (diffResult as any).poolConfig[key].to;\n          const from = downloadContract(pre.chainId, fromAddress);\n          const to = downloadContract(pre.chainId, toAddress);\n          const result = diffCode(from, to);\n          writeFileSync(`./diffs/${pre.chainId}_${key}_${fromAddress}_${toAddress}.diff`, result);\n        }\n      }\n    }\n  } catch (e) {}\n\n  content += `## Raw diff\\n\\n\\`\\`\\`json\\n${JSON.stringify(diffResultWithoutUnchanged, null, 2)}\\n\\`\\`\\``;\n  return content;\n}\n","import {formatUnits} from 'viem';\nimport type {AaveV3Emode, AaveV3Snapshot} from './snapshot-types';\nimport {bitMapToIndexes} from '../utils/storageSlots';\n\nexport function renderEModeValue<T extends keyof AaveV3Emode>(\n  key: T,\n  emode: AaveV3Emode,\n  snapshot: AaveV3Snapshot,\n) {\n  if (!emode[key]) return '-';\n  if (['reserveFactor', 'liquidationProtocolFee', 'liquidationThreshold', 'ltv'].includes(key))\n    return `${formatUnits(BigInt(emode[key]), 2)} %`;\n  if (key === 'liquidationBonus')\n    return emode[key] === 0 ? '0 %' : `${((emode[key] as number) - 10000) / 100} %`;\n  if (key === 'borrowableBitmap' || key === 'collateralBitmap') {\n    const indexes = bitMapToIndexes(BigInt(emode[key]));\n    return indexes\n      .map(\n        (i) =>\n          snapshot.reserves[\n            Object.keys(snapshot.reserves).find((key) => snapshot.reserves[key].id === i) as any\n          ].symbol,\n      )\n      .join(', ');\n  }\n  return emode[key];\n}\n\nconst ORDER: (keyof AaveV3Emode)[] = [\n  'eModeCategory',\n  'label',\n  'ltv',\n  'liquidationThreshold',\n  'liquidationBonus',\n  'priceSource',\n];\nfunction sortEmodeKeys(a: keyof AaveV3Emode, b: keyof AaveV3Emode) {\n  const indexA = ORDER.indexOf(a);\n  const indexB = ORDER.indexOf(b);\n  if (indexA !== -1 && indexB !== -1) {\n    if (indexA > indexB) {\n      return 1;\n    }\n    if (indexB > indexA) {\n      return -1;\n    }\n  }\n  if (indexA !== -1) return -1;\n  if (indexB !== -1) return -1;\n  return a.localeCompare(b);\n}\n\nconst OMIT_KEYS: (keyof AaveV3Emode)[] = ['eModeCategory'];\n\nexport type EmodeDiff<A extends AaveV3Emode = AaveV3Emode> = {\n  [key in keyof AaveV3Emode]: A[key] & {\n    from: A[key] | null;\n    to: A[key] | null;\n  };\n};\n\nexport function renderEmodeDiff(diff: EmodeDiff, pre: AaveV3Snapshot, post: AaveV3Snapshot) {\n  let content = '| description | value before | value after |\\n| --- | --- | --- |\\n';\n  (Object.keys(diff) as (keyof AaveV3Emode)[])\n    .filter((key) => !OMIT_KEYS.includes(key))\n    .sort(sortEmodeKeys)\n    .map((key) => {\n      if (typeof diff[key] === 'object' && diff[key].hasOwnProperty('from'))\n        content += `| eMode.${key} | ${renderEModeValue(\n          key,\n          {\n            ...diff,\n            [key]: diff[key].from,\n          },\n          pre,\n        )} | ${renderEModeValue(key, {...diff, [key]: diff[key].to}, post)} |\\n`;\n      else {\n        const value = renderEModeValue(key, diff, pre);\n        content += `| eMode.${key} (unchanged) | ${value} | ${value} |\\n`;\n      }\n    });\n\n  return content;\n}\n","import {\n  type Hex,\n  concat,\n  encodeAbiParameters,\n  fromHex,\n  keccak256,\n  pad,\n  parseAbiParameters,\n  toBytes,\n  toHex,\n  trim,\n} from 'viem';\n/**\n * @notice Returns the storage slot for a Solidity mapping with bytes32 keys, given the slot of the mapping itself\n * @dev Read more at https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html#mappings-and-dynamic-arrays\n * @param mappingSlot Mapping slot in storage\n * @param key Mapping key to find slot for\n * @returns Storage slot\n */\nexport function getSolidityStorageSlotBytes(mappingSlot: Hex, key: Hex) {\n  const slot = pad(mappingSlot, {size: 32});\n  return trim(\n    keccak256(encodeAbiParameters(parseAbiParameters('bytes32, uint256'), [key, BigInt(slot)])),\n  );\n}\n\n/**\n * @notice Returns the storage slot for a Solidity mapping with uint keys, given the slot of the mapping itself\n * @dev Read more at https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html#mappings-and-dynamic-arrays\n * @param mappingSlot Mapping slot in storage\n * @param key Mapping key to find slot for\n * @returns Storage slot\n */\nexport function getSolidityStorageSlotUint(mappingSlot: bigint, key: bigint) {\n  return keccak256(encodeAbiParameters(parseAbiParameters('uint256, uint256'), [key, mappingSlot]));\n}\n\nexport function getSolidityStorageSlotAddress(mappingSlot: bigint | number, key: Hex) {\n  return keccak256(\n    encodeAbiParameters(parseAbiParameters('address, uint256'), [key, BigInt(mappingSlot)]),\n  );\n}\n\n/**\n * Returns the slot of an array item\n * @param baseSlot baseSlot of the array size pointer\n * @param arrayIndex index within the array\n * @param itemSize number of slots consumed per array item\n * @returns\n */\nexport function getDynamicArraySlot(baseSlot: bigint, arrayIndex: number, itemSize: number): Hex {\n  return pad(\n    toHex(\n      fromHex(keccak256(encodeAbiParameters(parseAbiParameters('uint256'), [baseSlot])), 'bigint') +\n        BigInt(arrayIndex * itemSize),\n    ),\n    {size: 32},\n  );\n}\n\n/**\n * https://ethereum.stackexchange.com/questions/107282/storage-and-memory-layout-of-strings\n * @param value string | bytes\n */\nexport function getBytesValue(value: string | Hex) {\n  const bytesString = toBytes(value);\n  if (bytesString.length > 31) throw new Error('Error: strings > 31 bytes are not implemented');\n  return concat([\n    toHex(pad(bytesString, {size: 31, dir: 'right'})),\n    toHex(bytesString.length * 2, {size: 1}),\n  ]);\n}\n\n/**\n * Returns the selected bits of a uint256\n * @param _bigIntValue\n * @param startBit\n * @param endBit\n * @returns\n */\nexport function getBits(_bigIntValue: bigint | number | string, startBit: bigint, _endBit: bigint) {\n  let endBit = _endBit;\n  const bigIntValue = BigInt(_bigIntValue);\n  if (startBit > endBit) {\n    throw new Error('Invalid bit range: startBit must be less than or equal to endBit');\n  }\n\n  const bitLength = BigInt(bigIntValue.toString(2)).toString().length;\n  if (endBit >= bitLength) {\n    endBit = BigInt(bitLength - 1);\n  }\n\n  const mask = (1n << (endBit - startBit + 1n)) - 1n;\n  const maskedValue = (bigIntValue >> startBit) & mask;\n  return maskedValue.toString();\n}\n\n/**\n * Sets the bits in a bigint\n * @param _bigIntBase\n * @param startBit inclusive\n * @param endBit exclusive\n * @param value the value to replace\n * @returns\n */\nexport function setBits(\n  _bigIntBase: bigint | number | string,\n  startBit: bigint,\n  endBit: bigint,\n  _replaceValue: bigint | number,\n) {\n  const bigIntBase = BigInt(_bigIntBase);\n  const bigIntReplaceValue = BigInt(_replaceValue);\n\n  // Calculate the mask for the specified range\n  let mask = BigInt(0);\n  for (let i = startBit; i < endBit; i++) {\n    mask |= BigInt(1) << BigInt(i);\n  }\n  // Clear the bits in the original number within the specified range\n  const clearedNumber = bigIntBase & ~mask;\n\n  // Set the new bits in the specified range\n  const result = clearedNumber | (bigIntReplaceValue << BigInt(startBit));\n  return result;\n}\n\nexport function bitMapToIndexes(bitmap: bigint) {\n  const reserveIndexes = [];\n  for (let i = 0; bitmap != 0n; i++) {\n    if (bitmap & 0x1n) reserveIndexes.push(i);\n    bitmap = bitmap >> 1n;\n  }\n  return reserveIndexes;\n}\n","import type {AaveV3Strategy} from './snapshot-types';\n\n/**\n * Fetches the rate image from rate-strategy explorer\n * @dev currently broken as https://github.com/foundry-rs/foundry/issues/4601 results in json numbers which will be broken inside js\n * @param {*} rate\n * @param fileName the fileName to store the ir to\n */\nexport function getStrategyImageUrl(rate: AaveV3Strategy) {\n  const paramsObj: {[key: string]: string} = {\n    variableRateSlope1: rate.variableRateSlope1,\n    variableRateSlope2: rate.variableRateSlope2,\n    optimalUsageRatio: rate.optimalUsageRatio,\n    baseVariableBorrowRate: rate.baseVariableBorrowRate,\n    maxVariableBorrowRate: rate.maxVariableBorrowRate,\n  };\n  const searchParams = new URLSearchParams(paramsObj);\n  return `https://dash.onaave.com/api/static?${searchParams.toString()}`;\n}\n","import {type Hex, formatUnits} from 'viem';\nimport {prettifyNumber, toAddressLink} from '../govv3/utils/markdownUtils';\nimport type {AaveV3Reserve, CHAIN_ID} from './snapshot-types';\nimport {getClient} from '../utils/getClient';\n\nexport function renderReserveValue<T extends keyof AaveV3Reserve>(\n  key: T,\n  reserve: AaveV3Reserve,\n  chainId: CHAIN_ID,\n) {\n  if (['reserveFactor', 'liquidationProtocolFee', 'liquidationThreshold', 'ltv'].includes(key))\n    return prettifyNumber({value: reserve[key] as string, decimals: 2, suffix: '%'});\n  if (['supplyCap', 'borrowCap'].includes(key))\n    return `${reserve[key].toLocaleString('en-US')} ${reserve.symbol}`;\n  if (['aTokenUnderlyingBalance', 'virtualBalance'].includes(key))\n    return prettifyNumber({\n      value: reserve[key] as string,\n      decimals: reserve.decimals,\n      suffix: reserve.symbol,\n    });\n  if (key === 'debtCeiling')\n    return prettifyNumber({value: reserve[key] as string, decimals: 2, suffix: '$'});\n  if (['liquidityIndex', 'variableBorrowIndex'].includes(key))\n    return prettifyNumber({value: reserve[key] as string, decimals: 27, suffix: '%'}); // `${Number(formatUnits(BigInt(reserve[key]), 27)).toLocaleString('en-US')}`;\n  if (['currentLiquidityRate', 'currentVariableBorrowRate'].includes(key))\n    return prettifyNumber({value: reserve[key] as string, decimals: 25, suffix: '%'}); // `${Number(formatUnits(BigInt(reserve[key]), 25)).toLocaleString('en-US')} %`;\n  if (key === 'liquidationBonus')\n    return reserve[key] === 0 ? '0 %' : `${((reserve[key] as number) - 10000) / 100} %`;\n  if (key === 'interestRateStrategy')\n    return toAddressLink(reserve[key] as Hex, true, getClient(chainId));\n  if (key === 'oracleLatestAnswer' && reserve.oracleDecimals)\n    return formatUnits(BigInt(reserve[key]), reserve.oracleDecimals);\n  if (typeof reserve[key] === 'number') return reserve[key].toLocaleString('en-US');\n  if (typeof reserve[key] === 'string' && /0x.+/.test(reserve[key] as string))\n    return toAddressLink(reserve[key] as Hex, true, getClient(chainId));\n  return reserve[key];\n}\n\nfunction renderReserveHeadline(reserve: AaveV3Reserve, chainId: CHAIN_ID) {\n  return `#### ${reserve.symbol} (${toAddressLink(reserve.underlying as Hex, true, getClient(chainId))})\\n\\n`;\n}\n\nconst ORDER: (keyof AaveV3Reserve)[] = [\n  'symbol',\n  'decimals',\n  'isActive',\n  'isFrozen',\n  'supplyCap',\n  'borrowCap',\n  'debtCeiling',\n  'isSiloed',\n  'isFlashloanable',\n  'eModeCategory',\n  'oracle',\n  'oracleDecimals',\n  'oracleDescription',\n  'oracleName',\n  'oracleLatestAnswer',\n  'usageAsCollateralEnabled',\n  'ltv',\n  'liquidationThreshold',\n  'liquidationBonus',\n  'liquidationProtocolFee',\n  'reserveFactor',\n  'aToken',\n  'aTokenImpl',\n  'variableDebtToken',\n  'variableDebtTokenImpl',\n  'stableDebtToken',\n  'stableDebtTokenImpl',\n  'borrowingEnabled',\n  'stableBorrowRateEnabled',\n  'isBorrowableInIsolation',\n  'interestRateStrategy',\n  'liquidityIndex',\n  'variableBorrowIndex',\n];\nfunction sortReserveKeys(a: keyof AaveV3Reserve, b: keyof AaveV3Reserve) {\n  const indexA = ORDER.indexOf(a);\n  if (indexA === -1) return 1;\n  const indexB = ORDER.indexOf(b);\n  if (indexB === -1) return -1;\n  return indexA - indexB;\n}\n\nfunction renderReserveConfig(reserve: AaveV3Reserve, chainId: CHAIN_ID) {\n  let content = '| description | value |\\n| --- | --- |\\n';\n  const OMIT_KEYS: (keyof AaveV3Reserve)[] = [\n    'underlying', // already rendered in the header\n    'symbol', // already rendered in the header\n  ];\n  (Object.keys(reserve) as (keyof AaveV3Reserve)[])\n    .filter((key) => !OMIT_KEYS.includes(key))\n    .sort(sortReserveKeys)\n    .map((key) => {\n      content += `| ${key} | ${renderReserveValue(key, reserve, chainId)} |\\n`;\n    });\n  return content;\n}\n\nexport function renderReserve(reserve: AaveV3Reserve, chainId: CHAIN_ID) {\n  let content = renderReserveHeadline(reserve, chainId);\n  content += renderReserveConfig(reserve, chainId);\n  return content;\n}\n\nexport type ReserveDiff<A extends AaveV3Reserve = AaveV3Reserve> = {\n  [key in keyof A]: A[key] & {from: A[key] | null; to: A[key] | null};\n};\n\nexport function renderReserveDiff(diff: ReserveDiff, chainId: CHAIN_ID) {\n  let content = renderReserveHeadline(diff as AaveV3Reserve, chainId);\n  content += '| description | value before | value after |\\n| --- | --- | --- |\\n';\n  const from = Object.keys(diff).reduce((acc, _key) => {\n    const key = _key as keyof AaveV3Reserve;\n    (acc as any)[key] = typeof diff[key] === 'object' ? diff[key].from : diff[key];\n    return acc;\n  }, {} as AaveV3Reserve);\n  const to = Object.keys(diff).reduce((acc, _key) => {\n    const key = _key as keyof AaveV3Reserve;\n    (acc as any)[key] = typeof diff[key] === 'object' ? diff[key].to : diff[key];\n    return acc;\n  }, {} as AaveV3Reserve);\n  (Object.keys(diff) as (keyof AaveV3Reserve)[])\n    .filter((key) => diff[key].hasOwnProperty('from'))\n    .sort(sortReserveKeys)\n    .map((key) => {\n      content += `| ${key} | ${renderReserveValue(key, from, chainId)} | ${renderReserveValue(key, to, chainId)} |\\n`;\n    });\n  return content;\n}\n","import {type Client, type Hex, formatUnits, Address, getContract} from 'viem';\nimport type {CheckResult} from '../checks/types';\nimport {findAsset} from './checkAddress';\n\nexport function boolToMarkdown(value: boolean) {\n  if (value) return ':white_check_mark:';\n  return ':sos:';\n}\n\n/**\n * Turns a plaintext address into a link to etherscan page of that address\n * @param address to be linked\n * @param code whether to link to the code tab\n */\nexport function toAddressLink(address: Hex, md: boolean, client?: Client): string {\n  if (!client) return address;\n  const link = `${client.chain?.blockExplorers?.default.url}/address/${address}`;\n  if (md) return toMarkdownLink(link, address);\n  return link;\n}\n\n/**\n * Turns a plaintext address into a link to etherscan page of that address\n * @param address to be linked\n * @param code whether to link to the code tab\n */\nexport function toTxLink(txn: Hex, md: boolean, client?: Client): string {\n  if (!client) return txn;\n  const link = `${client.chain?.blockExplorers?.default.url}/tx/${txn}`;\n  if (md) return toMarkdownLink(link, txn);\n  return link;\n}\n\nexport function toMarkdownLink(link: string, title?: any) {\n  return `[${title || link}](${link})`;\n}\n\nexport function renderCheckResult(check: {name: string}, result: CheckResult) {\n  let response = `### Check: ${check.name} ${boolToMarkdown(!result.errors.length)}\\n\\n`;\n  if (result.errors.length) response += `#### Errors\\n\\n${result.errors.join('\\n')}\\n\\n`;\n  if (result.warnings.length) response += `#### Warnings\\n\\n${result.warnings.join('\\n')}\\n\\n`;\n  if (result.info.length) response += `#### Info\\n\\n${result.info.join('\\n')}\\n\\n`;\n  return response;\n}\n\nexport function renderUnixTime(time: number) {\n  return new Date(time * 1000).toLocaleString('en-GB', {timeZone: 'UTC'});\n}\n\nexport function flagKnownAddress(isKnown: string[] | void) {\n  if (isKnown === undefined || isKnown.length === 0) return '';\n  return `[:ghost:](https://github.com/bgd-labs/aave-address-book \"${isKnown.join(', ')}\")`;\n}\n\n/**\n * Returns a string with `,` separators.\n * Not using toLocalString() as it forces us to use `number` types, which can be problematic with decimals & big numbers\n * @param x\n * @returns\n * credits: https://stackoverflow.com/a/2901298\n */\nexport function formatNumberString(x: string | number) {\n  return String(x).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nfunction limitDecimalsWithoutRounding(val: string, decimals: number) {\n  const parts = val.split('.');\n  if (parts.length != 2) return val;\n  return parts[0] + '.' + parts[1].substring(0, decimals);\n}\n\nexport function prettifyNumber({\n  value,\n  decimals,\n  prefix,\n  suffix,\n  showDecimals,\n  patchedValue,\n}: {\n  value: string | number | bigint;\n  decimals: number;\n  prefix?: string;\n  suffix?: string;\n  showDecimals?: boolean;\n  // allow overwriting the value when formatting\n  // this is useful for e.g. 1e4 % numbers, when the 100% should be removed in the formatting\n  patchedValue?: string | number | bigint;\n}) {\n  const formattedNumber = limitDecimalsWithoutRounding(\n    formatNumberString(formatUnits(BigInt(patchedValue || value), decimals)),\n    4,\n  );\n  return `${prefix ? `${prefix} ` : ''}${formattedNumber}${\n    suffix ? ` ${suffix}` : ''\n  } [${value}${showDecimals ? `, ${decimals} decimals` : ''}]`;\n}\n\nexport function wrapInQuotes(name: string, quotes: boolean) {\n  if (quotes) return '`' + name + '`';\n  return name;\n}\n\nexport async function addAssetSymbol(client: Client, value: Address) {\n  const asset = await findAsset(client, value);\n  return `${value} (symbol: ${asset.symbol})`;\n}\n\nconst CL_PROXY_ABI = [\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [{internalType: 'uint8', name: '', type: 'uint8'}],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'description',\n    outputs: [{internalType: 'string', name: '', type: 'string'}],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'latestAnswer',\n    outputs: [{internalType: 'int256', name: '', type: 'int256'}],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const;\n\nexport async function addAssetPrice(client: Client, address: Address) {\n  const clProxy = getContract({client, address, abi: CL_PROXY_ABI});\n  let decimals,\n    latestAnswer = 0n,\n    description = 'unknown';\n  try {\n    decimals = await clProxy.read.decimals();\n  } catch (e) {}\n  try {\n    latestAnswer = await clProxy.read.latestAnswer();\n  } catch (e) {}\n  try {\n    description = await clProxy.read.description();\n  } catch (e) {}\n  return `${address} (latestAnswer: ${\n    decimals ? prettifyNumber({value: latestAnswer, decimals, showDecimals: true}) : latestAnswer\n  }, description: ${description})`;\n}\n","import * as addresses from '@bgd-labs/aave-address-book';\nimport {IPool_ABI, IERC20Detailed_ABI} from '@bgd-labs/aave-address-book/abis';\nimport {findObjectPaths} from 'find-object-paths';\nimport {type Address, type Client, HDKey, type Hex, getAddress, getContract} from 'viem';\n\n/**\n * Checks if address is listed on address-book\n * @param value\n * @param chainId\n * @returns string[] found paths to address-book addresses\n */\nexport function isKnownAddress(value: Address, chainId: number): string[] | void {\n  // glob imports have no object properties\n  // therefore we recreate the object via spread & remove addresses unrelated to the chain we are checking\n  const transformedAddresses = Object.keys(addresses).reduce(\n    (acc, key) => {\n      if ((addresses as any)[key].CHAIN_ID === chainId) {\n        const chainAddresses = {...(addresses as any)[key]};\n        if (chainAddresses.E_MODES) delete chainAddresses.E_MODES;\n        acc[key] = chainAddresses;\n      }\n      return acc;\n    },\n    {} as {[key: string]: any},\n  );\n  // while on address book we have checksummed addresses tenderly returns non check summed\n  // therefore we checksum the needle to have exact matches\n  const results = findObjectPaths(transformedAddresses, {value: getAddress(value)});\n  if (typeof results === 'string') return [results];\n  return results;\n}\n\nexport function findPayloadsController(chainId: number): Address | void {\n  const key = Object.keys(addresses).find(\n    (key) =>\n      (addresses[key as keyof typeof addresses] as any).CHAIN_ID === chainId &&\n      (addresses[key as keyof typeof addresses] as any).PAYLOADS_CONTROLLER,\n  );\n  if (key) return (addresses[key as keyof typeof addresses] as any).PAYLOADS_CONTROLLER;\n}\n\ntype AssetInfo = {symbol: string; decimals: number};\n\nconst assetsCache = (Object.keys(addresses) as (keyof typeof addresses)[]).reduce<\n  Record<number, Record<Hex, AssetInfo>>\n>((acc, key) => {\n  if (!(addresses[key] as any).ASSETS) return acc;\n  const pool = addresses[key] as typeof addresses.AaveV2Ethereum;\n  if (!acc[pool.CHAIN_ID]) acc[pool.CHAIN_ID] = {};\n  Object.keys(pool.ASSETS).map((symbol) => {\n    const asset = pool.ASSETS[symbol as keyof typeof pool.ASSETS];\n    acc[pool.CHAIN_ID][asset.UNDERLYING] = {decimals: asset.decimals, symbol};\n  });\n  return acc;\n}, {});\n\nexport async function findAsset(client: Client, address: Hex) {\n  const chainId = client.chain!.id;\n  const asset = assetsCache[chainId][address];\n  if (asset) return asset;\n  const erc20Contract = getContract({client, address: address, abi: IERC20Detailed_ABI});\n  let symbol = 'unknown';\n  let decimals = 0;\n  try {\n    symbol = await erc20Contract.read.symbol();\n  } catch (e) {}\n  try {\n    decimals = await erc20Contract.read.decimals();\n  } catch (e) {}\n  assetsCache[chainId][address] = {\n    symbol,\n    decimals,\n  };\n  return assetsCache[chainId][address];\n}\n\nconst cachedReservesList: Record<number, readonly Hex[]> = {};\n\nexport async function assetIndexesToAsset(\n  client: Client,\n  poolAddress: Hex,\n  indexes: number[],\n): Promise<string[]> {\n  if (!cachedReservesList[client.chain!.id])\n    cachedReservesList[client.chain!.id] = await getContract({\n      client,\n      abi: IPool_ABI,\n      address: poolAddress,\n    }).read.getReservesList();\n  const reservesList = cachedReservesList[client.chain!.id];\n  return await Promise.all(\n    indexes.map(async (index) => {\n      if (index < reservesList.length) {\n        const reserve = reservesList[index];\n        return `${(await findAsset(client, reserve)).symbol}(id: ${index})`;\n      }\n      return `unknown(id: ${index})`;\n    }),\n  );\n}\n","import 'dotenv/config';\nimport {ChainId, ChainList, getRPCUrl} from '@bgd-labs/rpc-env';\nimport {createClient, http} from 'viem';\n\nexport function getClient(chainId: number) {\n  const chain = ChainList[chainId as keyof typeof ChainList];\n  if (!chain) return;\n  return createClient({\n    transport: http(\n      getRPCUrl(chainId as any, {\n        alchemyKey: process.env.ALCHEMY_API_KEY,\n      })!,\n    ),\n    chain,\n  });\n}\n","import {formatUnits} from 'viem';\nimport type {AaveV3Strategy} from './snapshot-types';\n\nexport function renderStrategyValue<T extends keyof AaveV3Strategy>(\n  key: T,\n  reserve: AaveV3Strategy,\n) {\n  if (reserve[key] === undefined || reserve[key] === null) return '/';\n  return `${formatUnits(BigInt(reserve[key]), 25)} %`;\n}\n\nconst ORDER: (keyof AaveV3Strategy)[] = [\n  'optimalUsageRatio',\n  'maxVariableBorrowRate',\n  'baseVariableBorrowRate',\n  'variableRateSlope1',\n  'variableRateSlope2',\n];\nfunction sortStrategyKeys(a: keyof AaveV3Strategy, b: keyof AaveV3Strategy) {\n  const indexA = ORDER.indexOf(a);\n  const indexB = ORDER.indexOf(b);\n  if (indexA !== -1 && indexB !== -1) {\n    if (indexA > indexB) {\n      return 1;\n    }\n    if (indexB > indexA) {\n      return -1;\n    }\n  }\n  if (indexA !== -1) return -1;\n  if (indexB !== -1) return -1;\n  return a.localeCompare(b);\n}\n\nconst OMIT_KEYS: (keyof AaveV3Strategy)[] = [\n  'address', // already rendered in the reserve\n];\n\nexport function renderStrategy(strategy: AaveV3Strategy) {\n  let content = '';\n  (Object.keys(strategy) as (keyof AaveV3Strategy)[])\n    .filter((key) => !OMIT_KEYS.includes(key))\n    .sort(sortStrategyKeys)\n    .map((key) => {\n      content += `| ${key} | ${renderStrategyValue(key, strategy)} |\\n`;\n    });\n  return content;\n}\n\nexport type StrategyDiff<A extends AaveV3Strategy = AaveV3Strategy> = {\n  [key in keyof AaveV3Strategy]: A[key] & {\n    from: A[key] | null;\n    to: A[key] | null;\n  };\n};\n\nexport function renderStrategyDiff(diff: StrategyDiff) {\n  let content = '';\n\n  (Object.keys(diff) as (keyof AaveV3Strategy)[])\n    .filter((key) => !OMIT_KEYS.includes(key))\n    .filter((key) => diff[key].hasOwnProperty('from'))\n    .sort(sortStrategyKeys)\n    .map((key) => {\n      content += `| ${key} | ${renderStrategyValue(key, {\n        ...diff,\n        [key]: diff[key].from,\n      })} | ${renderStrategyValue(key, {...diff, [key]: diff[key].to})} |\\n`;\n    });\n\n  return content;\n}\n","import {existsSync} from 'fs';\nimport {execSync} from 'child_process';\nimport {AaveV3Snapshot, AaveV3Config} from './snapshot-types';\n\nexport function downloadContract(chainId: number, address: string) {\n  const outPath = `/tmp/${chainId}_${address}`;\n  if (existsSync(outPath)) console.log('skipped download');\n  const command = `cast etherscan-source --chain ${chainId} -d ${outPath} ${address}`;\n  execSync(command);\n  return outPath;\n}\n\nfunction flatten(path: string) {\n  const flattenCmd = `\n          mkdir -p ${path}_flat\n          counter=1\n          for file in $(find ${path} -type f)\n          do\n            original_file_name=\"\\${file##*/}\"\n            if [ -e ${path}_flat/\\${counter}_\\${original_file_name} ]\n            then\n              mv \"\\$file\" \"${path}_flat/\\${counter}_\\${original_file_name}\"\n            else\n              mv \"\\$file\" \"${path}_flat/\\${original_file_name}\"\n            fi\n            ((counter++))\n          done;\n      `;\n  execSync(flattenCmd);\n  return `${path}_flat`;\n}\n\nexport function diffCode(fromPath: string, toPath: string) {\n  fromPath = flatten(fromPath);\n  toPath = flatten(toPath);\n  const prettierCmd = `npx prettier ${fromPath} ${toPath} --write`;\n  execSync(prettierCmd);\n  const diffCmd = `\n  git diff --no-index --ignore-space-at-eol ${fromPath} ${toPath} | awk '\n    BEGIN { in_diff_block = 0; skip_block = 0; buffer = \"\" }\n    /^diff --git/ {\n      if (in_diff_block && skip_block == 0) { printf \"%s\", buffer }\n      in_diff_block = 1; skip_block = 0; buffer = $0 \"\\\\n\"\n    }\n    /similarity index 100%/ { skip_block = 1 }\n    { if (in_diff_block && !/^diff --git/) { buffer = buffer $0 \"\\\\n\" } }\n    END { if (in_diff_block && skip_block == 0) { printf \"%s\", buffer } }\n  '\n  `;\n  const result = execSync(diffCmd);\n  return result.toString();\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\n/**\n * While javascript supports bigint, JSON.parse doesn't\n * Therefore this file contains utilities to parse JSON containing bigint\n */\nimport JSONbig from 'json-bigint';\n\nexport function readJsonString(content: string) {\n  return JSON.parse(JSON.stringify(JSONbig({storeAsString: true}).parse(content)));\n}\n\nexport function readJsonFile(filePath: string) {\n  const content = fs.readFileSync(path.join(process.cwd(), filePath), 'utf8');\n  return readJsonString(content);\n}\n","import path from 'node:path';\nimport type {Command} from '@commander-js/extra-typings';\nimport {http, type Hex, createWalletClient} from 'viem';\nimport {getGovernance} from '../govv3/governance';\nimport {getPayloadsController} from '../govv3/payloadsController';\nimport {findPayloadsController} from '../govv3/utils/checkAddress';\nimport {DEFAULT_GOVERNANCE, DEFAULT_GOVERNANCE_CLIENT, EOA} from '../utils/constants';\nimport {tenderly} from '../utils/tenderlyClient';\nimport {getClient} from '../utils/getClient';\n\nexport function addCommand(program: Command) {\n  program\n    .command('fork')\n    .description('generates a fork (optionally with a proposal executeds')\n    .requiredOption('--chainId <number>', 'the chainId to fork offs')\n    .option('--blockNumber <number>', 'the blocknumber to fork of (latest if omitted)')\n    .option('--alias <string>', 'Set a custom alias')\n    .option('--proposalId <number>', 'ProposalId to execute')\n    .option('--payloadId <number>', 'PayloadId to execute')\n    .option('--payloadAddress <string>', 'Payload address')\n    .option('--artifactPath <string>', 'path to the local payload')\n    .action(async (options) => {\n      const {chainId, blockNumber, alias, payloadId, proposalId, artifactPath, payloadAddress} =\n        options;\n      function getAlias() {\n        const unix = Math.floor(new Date().getTime() / 1000);\n        if (alias) {\n          return `${unix}-${alias}`;\n        }\n        if (options.proposalId) {\n          return `${unix}-proposalId-${options.proposalId}`;\n        }\n        if (options.payloadId) {\n          return `${unix}-payloadId-${options.payloadId}`;\n        }\n        return 'vanilla-fork';\n      }\n\n      const forkConfig = {\n        chainId: Number(chainId),\n        alias: getAlias(),\n        blockNumber: Number(blockNumber),\n      };\n      if (proposalId) {\n        const governance = getGovernance({\n          address: DEFAULT_GOVERNANCE,\n          client: DEFAULT_GOVERNANCE_CLIENT,\n        });\n        const payload = await governance.getSimulationPayloadForExecution(BigInt(proposalId));\n        const fork = await tenderly.fork({\n          ...forkConfig,\n          blockNumber: forkConfig.blockNumber || payload.block_number,\n        });\n        await tenderly.unwrapAndExecuteSimulationPayloadOnFork(fork, payload);\n        return;\n      }\n      const payloadsControllerAddress = findPayloadsController(forkConfig.chainId);\n      if (!payloadsControllerAddress)\n        throw new Error('payloadscontroller not found on specified chain');\n\n      if (artifactPath) {\n        const fork = await tenderly.fork({\n          ...forkConfig,\n          blockNumber: forkConfig.blockNumber,\n        });\n        const payload = await tenderly.deployCode(fork, path.join(process.cwd(), artifactPath!));\n        const walletProvider = createWalletClient({\n          account: EOA,\n          chain: {id: fork.forkNetworkId, name: 'tenderly'} as any,\n          transport: http(fork.forkUrl),\n        });\n        const payloadsController = getPayloadsController(\n          payloadsControllerAddress as Hex,\n          walletProvider,\n        );\n        await payloadsController.controllerContract.write.createPayload(\n          [\n            [\n              {\n                target: payload,\n                withDelegateCall: true,\n                accessLevel: 1,\n                value: 0n,\n                signature: 'execute()',\n                callData: '0x0',\n              },\n            ],\n          ],\n          {} as any,\n        );\n        const tenderlyPayload = await payloadsController.getSimulationPayloadForExecution(\n          Number((await payloadsController.controllerContract.read.getPayloadsCount()) - 1),\n        );\n        await tenderly.unwrapAndExecuteSimulationPayloadOnFork(fork, tenderlyPayload);\n        return;\n      }\n      if (payloadId) {\n        const payloadsController = getPayloadsController(\n          payloadsControllerAddress as Hex,\n          getClient(Number(chainId)),\n        );\n        const payload = await payloadsController.getSimulationPayloadForExecution(\n          Number(payloadId),\n        );\n        const fork = await tenderly.fork({\n          ...forkConfig,\n          blockNumber: forkConfig.blockNumber || payload.block_number,\n        });\n        await tenderly.unwrapAndExecuteSimulationPayloadOnFork(fork, payload);\n        return;\n      }\n      if (payloadAddress) {\n        const fork = await tenderly.fork({\n          ...forkConfig,\n          blockNumber: forkConfig.blockNumber,\n        });\n        const walletProvider = createWalletClient({\n          account: EOA,\n          chain: {id: fork.forkNetworkId, name: 'tenderly'} as any,\n          transport: http(fork.forkUrl),\n        });\n        const payloadsController = getPayloadsController(\n          payloadsControllerAddress as Hex,\n          walletProvider,\n        );\n        await payloadsController.controllerContract.write.createPayload(\n          [\n            [\n              {\n                target: payloadAddress as Hex,\n                withDelegateCall: true,\n                accessLevel: 1,\n                value: 0n,\n                signature: 'execute()',\n                callData: '0x0',\n              },\n            ],\n          ],\n          {} as any,\n        );\n        const tenderlyPayload = await payloadsController.getSimulationPayloadForExecution(\n          Number((await payloadsController.controllerContract.read.getPayloadsCount()) - 1),\n        );\n        await tenderly.unwrapAndExecuteSimulationPayloadOnFork(fork, tenderlyPayload);\n      }\n    });\n}\n","import {AaveSafetyModule, AaveV3Ethereum, GovernanceV3Ethereum} from '@bgd-labs/aave-address-book';\nimport {IGovernanceCore_ABI} from '@bgd-labs/aave-address-book/abis';\nimport merge from 'deepmerge';\nimport {\n  type Client,\n  type GetContractReturnType,\n  type Hex,\n  encodeFunctionData,\n  fromHex,\n  getContract,\n  toHex,\n} from 'viem';\nimport type {GetProofReturnType} from 'viem/actions';\nimport {getBlock, getStorageAt, getTransaction} from 'viem/actions';\nimport {EOA} from '../utils/constants';\nimport {logInfo} from '../utils/logger';\nimport {\n  getSolidityStorageSlotAddress,\n  getSolidityStorageSlotBytes,\n  getSolidityStorageSlotUint,\n} from '../utils/storageSlots';\nimport {setBits} from '../utils/storageSlots';\nimport {\n  type TenderlyRequest,\n  type TenderlySimulationResponse,\n  tenderly,\n} from '../utils/tenderlyClient';\nimport {VOTING_SLOTS, WAREHOUSE_SLOTS, getAccountRPL, getProof} from './proofs';\nimport {ProposalState, type ProposalExecutedEvent} from '@bgd-labs/aave-v3-governance-cache';\n\nexport interface Governance {\n  governanceContract: GetContractReturnType<typeof IGovernanceCore_ABI, Client>;\n  /**\n   * Thin caching wrapper on top of getProposal.\n   * If the proposal state is final, the proposal will be stored in json and fetched from there.\n   * @param proposalId\n   * @returns Proposal struct\n   */\n  getSimulationPayloadForExecution: (proposalId: bigint) => Promise<TenderlyRequest>;\n  simulateProposalExecutionOnTenderly: (\n    proposalId: bigint,\n    params: {executedLog?: ProposalExecutedEvent},\n  ) => Promise<TenderlySimulationResponse>;\n  getStorageRoots(proposalId: bigint): Promise<GetProofReturnType[]>;\n  /**\n   * Returns the proofs that are non-zero for a specified address\n   * @param proposalId\n   * @param voter\n   * @param votingChainId\n   */\n  getVotingProofs: (\n    proposalId: bigint,\n    voter: Hex,\n    votingChainId: bigint,\n  ) => Promise<{proof: Hex; slot: bigint; underlyingAsset: Hex}[]>;\n}\n\nconst SLOTS = {\n  PROPOSALS_MAPPING: 7n,\n};\n\nexport const HUMAN_READABLE_STATE = {\n  [ProposalState.Null]: 'Null',\n  [ProposalState.Created]: 'Created',\n  [ProposalState.Active]: 'Active',\n  [ProposalState.Queued]: 'Queued',\n  [ProposalState.Executed]: 'Executed',\n  [ProposalState.Failed]: 'Failed',\n  [ProposalState.Cancelled]: 'Cancelled',\n  [ProposalState.Expired]: 'Expired',\n};\n\ninterface GetGovernanceParams {\n  address: Hex;\n  client: Client;\n  blockCreated?: bigint;\n}\n\nexport const getGovernance = ({address, client}: GetGovernanceParams): Governance => {\n  const governanceContract = getContract({\n    abi: IGovernanceCore_ABI,\n    address,\n    client,\n  });\n\n  async function getProposal(proposalId: bigint) {\n    return governanceContract.read.getProposal([proposalId]);\n  }\n\n  async function getSimulationPayloadForExecution(proposalId: bigint) {\n    const currentBlock = await getBlock(client);\n    const proposalSlot = getSolidityStorageSlotUint(SLOTS.PROPOSALS_MAPPING, proposalId);\n    const data = await getStorageAt(client, {\n      address: governanceContract.address,\n      slot: proposalSlot,\n    });\n    let proposalSlot1 = fromHex(data!, {to: 'bigint'});\n    // manipulate storage\n    // set queued\n    proposalSlot1 = setBits(proposalSlot1, 0n, 8n, ProposalState.Queued);\n    // set creation time\n    proposalSlot1 = setBits(\n      proposalSlot1,\n      16n,\n      56n,\n      currentBlock.timestamp - (await governanceContract.read.PROPOSAL_EXPIRATION_TIME()),\n    );\n    const simulationPayload: TenderlyRequest = {\n      network_id: String(client.chain!.id),\n      from: EOA,\n      to: governanceContract.address,\n      input: encodeFunctionData({\n        abi: IGovernanceCore_ABI,\n        functionName: 'executeProposal',\n        args: [proposalId],\n      }),\n      // value: parseEther('0.5').toString(),\n      block_number: -2,\n      state_objects: {\n        [governanceContract.address]: {\n          storage: {\n            [proposalSlot]: toHex(proposalSlot1, {size: 32}), // state & time\n            // [toHex(fromHex(proposalSlot, { to: 'bigint' }) + 5n)]: toHex(parseUnits('340000000', 18), {\n            //   size: 32,\n            // }), // votes (not needed as there's no validation for this at this point)\n          },\n        },\n      },\n    };\n    return simulationPayload;\n  }\n\n  return {\n    governanceContract,\n    getSimulationPayloadForExecution,\n    async simulateProposalExecutionOnTenderly(proposalId, {executedLog}) {\n      // if successfully executed just replay the txn\n      if (executedLog) {\n        const tx = await getTransaction(client, {\n          hash: executedLog.transactionHash!,\n        });\n        return tenderly.simulateTx(client.chain!.id, tx);\n      }\n      const payload = await getSimulationPayloadForExecution(proposalId);\n      return tenderly.simulate(payload, client);\n    },\n    async getVotingProofs(proposalId: bigint, voter: Hex, votingChainId: bigint) {\n      const proposal = await getProposal(proposalId);\n\n      const [stkAaveProof, aaveProof, aAaveProof, representativeProof] = await Promise.all([\n        getProof(\n          client,\n          AaveSafetyModule.STK_AAVE,\n          [getSolidityStorageSlotAddress(VOTING_SLOTS[AaveSafetyModule.STK_AAVE].balance, voter)],\n          proposal.snapshotBlockHash,\n        ),\n        getProof(\n          client,\n          AaveV3Ethereum.ASSETS.AAVE.UNDERLYING,\n          [\n            getSolidityStorageSlotAddress(\n              VOTING_SLOTS[AaveV3Ethereum.ASSETS.AAVE.UNDERLYING].balance,\n              voter,\n            ),\n          ],\n          proposal.snapshotBlockHash,\n        ),\n        getProof(\n          client,\n          AaveV3Ethereum.ASSETS.AAVE.A_TOKEN,\n          [\n            getSolidityStorageSlotAddress(\n              VOTING_SLOTS[AaveV3Ethereum.ASSETS.AAVE.A_TOKEN].balance,\n              voter,\n            ),\n            getSolidityStorageSlotAddress(\n              VOTING_SLOTS[AaveV3Ethereum.ASSETS.AAVE.A_TOKEN].delegation,\n              voter,\n            ),\n          ],\n          proposal.snapshotBlockHash,\n        ),\n        getProof(\n          client,\n          GovernanceV3Ethereum.GOVERNANCE,\n          [\n            getSolidityStorageSlotBytes(\n              getSolidityStorageSlotAddress(\n                VOTING_SLOTS[GovernanceV3Ethereum.GOVERNANCE].representative,\n                voter,\n              ),\n              toHex(votingChainId, {size: 32}),\n            ),\n          ],\n          proposal.snapshotBlockHash,\n        ),\n      ]);\n\n      return [\n        {proof: stkAaveProof, slots: [0n]},\n        {proof: aaveProof, slots: [0n]},\n        {proof: aAaveProof, slots: [52n, 64n]},\n        {proof: representativeProof, slots: [9n]},\n      ].flatMap(({proof, slots}) => {\n        return (\n          slots\n            // filter out zero proofs as they don't add any value\n            .filter((slot, ix) => {\n              const shouldSubmitProof = proof.storageProof[ix].value !== 0n;\n              if (!shouldSubmitProof)\n                logInfo(\n                  'Proof',\n                  `Skipping slot ${slot} on ${proof.address} as value is zero for voter ${voter}`,\n                );\n              return shouldSubmitProof;\n            })\n            .map((slot, ix) => ({\n              underlyingAsset: proof.address,\n              slot,\n              proof: getAccountRPL(proof.storageProof[ix].proof),\n            }))\n        );\n      });\n    },\n    async getStorageRoots(proposalId: bigint) {\n      const proposal = await getProposal(proposalId);\n      const addresses = merge(VOTING_SLOTS, WAREHOUSE_SLOTS);\n\n      const proofs = await Promise.all(\n        (Object.keys(addresses) as (keyof typeof addresses)[]).map((address) =>\n          getProof(\n            client,\n            address,\n            Object.keys(addresses[address]).map((slotKey) =>\n              toHex((addresses[address] as any)[slotKey]),\n            ),\n            proposal.snapshotBlockHash,\n          ),\n        ),\n      );\n\n      return proofs;\n    },\n  };\n};\n","import {GovernanceV3Ethereum} from '@bgd-labs/aave-address-book';\nimport {getClient} from './getClient';\n\n// arbitrary from EOA for proposal executions\nexport const EOA = '0xD73a92Be73EfbFcF3854433A5FcbAbF9c1316073' as const;\n\n// determines if verbose logs should be shown\nexport const VERBOSE = process.env.VERBOSE;\n\n// determines what type of format to output\n// foundry will consume everything on stdOut so in foundry mode we essentially don't log\nexport const FORMAT = (process.env.FORMAT || 'raw') as 'raw' | 'encoded';\n\nexport const DEFAULT_GOVERNANCE = GovernanceV3Ethereum.GOVERNANCE;\nexport const DEFAULT_GOVERNANCE_CLIENT = getClient(1);\n","import chalk from 'chalk';\nimport {VERBOSE} from './constants';\n\nexport function logVerbose(topic: string, text: string | number | bigint) {\n  if (VERBOSE) console.log(chalk.gray(`Info[${topic}]: ${text}`));\n}\n\nexport function logInfo(topic: string, text: string | number | bigint) {\n  console.log(chalk.blue(`Info[${topic}]: ${text}`));\n}\n\nexport function logWarning(topic: string, text: string | number | bigint) {\n  console.log(chalk.yellow(`Warning[${topic}]: ${text}`));\n}\n\nexport function logError(topic: string, text: string | number | bigint) {\n  console.log(chalk.red(`Error[${topic}]: ${text}`));\n}\n\nexport function logSuccess(topic: string, text: string | number | bigint) {\n  console.log(chalk.green(`Success[${topic}]: ${text}`));\n}\n","import {\n  http,\n  Address,\n  type Chain,\n  type Client,\n  type Hex,\n  createClient,\n  fromHex,\n  getContractAddress,\n  pad,\n  parseEther,\n  toHex,\n} from 'viem';\nimport type {GetTransactionReturnType} from 'viem';\nimport {deployContract, getBlock, getTransactionReceipt, sendTransaction} from 'viem/actions';\nimport {EOA} from './constants';\nimport {logError, logInfo, logSuccess, logWarning} from './logger';\nexport type StateObject = {\n  balance?: string;\n  code?: string;\n  storage?: Record<Hex, Hex>;\n};\n\ninterface RawElement {\n  address: string;\n  key: string;\n  original: string;\n  dirty: string;\n}\n\nexport interface StateDiff {\n  soltype: SoltypeElement | null;\n  original: string | Record<string, any>;\n  dirty: string | Record<string, any>;\n  raw: RawElement[];\n  address: string;\n}\n\nexport type ContractObject = {\n  contractName: string;\n  source: string;\n  sourcePath: string;\n  compiler: {\n    name: 'solc';\n    version: string;\n  };\n  networks: Record<\n    string,\n    {\n      events?: Record<string, string>;\n      links?: Record<string, string>;\n      address: string;\n      transactionHash?: string;\n    }\n  >;\n};\n\nexport type TenderlyRequest = {\n  network_id: string;\n  block_number?: number;\n  transaction_index?: number;\n  from: Hex;\n  to: Hex;\n  input: Hex;\n  gas?: number;\n  gas_price?: string;\n  value?: string;\n  simulation_type?: 'full' | 'quick';\n  save?: boolean;\n  save_if_fails?: boolean;\n  state_objects?: Record<Hex, StateObject>;\n  contracts?: ContractObject[];\n  block_header?: {\n    number?: Hex;\n    timestamp?: Hex;\n  };\n  generate_access_list?: boolean;\n  root?: string;\n};\n\nenum SoltypeType {\n  Address = 'address',\n  Bool = 'bool',\n  Bytes32 = 'bytes32',\n  MappingAddressUint256 = 'mapping (address => uint256)',\n  MappingUint256Uint256 = 'mapping (uint256 => uint256)',\n  String = 'string',\n  Tuple = 'tuple',\n  TypeAddress = 'address[]',\n  TypeTuple = 'tuple[]',\n  Uint16 = 'uint16',\n  Uint256 = 'uint256',\n  Uint48 = 'uint48',\n  Uint56 = 'uint56',\n  Uint8 = 'uint8',\n}\n\nenum StorageLocation {\n  Calldata = 'calldata',\n  Default = 'default',\n  Memory = 'memory',\n  Storage = 'storage',\n}\n\nenum SimpleTypeType {\n  Address = 'address',\n  Bool = 'bool',\n  Bytes = 'bytes',\n  Slice = 'slice',\n  String = 'string',\n  Uint = 'uint',\n}\n\ninterface Type {\n  type: SimpleTypeType;\n}\n\nexport interface SoltypeElement {\n  name: string;\n  type: SoltypeType;\n  storage_location: StorageLocation;\n  components: SoltypeElement[] | null;\n  offset: number;\n  index: string;\n  indexed: boolean;\n  simple_type?: Type;\n}\n\nexport interface Input {\n  soltype: SoltypeElement | null;\n  value: boolean | string;\n}\n\nexport interface Log {\n  name: string | null;\n  anonymous: boolean;\n  inputs: Input[];\n  raw: LogRaw;\n}\n\nexport interface LogRaw {\n  address: string;\n  topics: string[];\n  data: string;\n}\n\nexport interface Trace {\n  from: Hex;\n  to?: Hex;\n  function_name?: string;\n  input: Hex;\n  output: string;\n  calls?: Trace[];\n  decoded_input: Input[];\n  caller_op: string;\n}\n\nexport interface TenderlyLogRaw {\n  address: string;\n  topics: string[];\n  data: string;\n}\n\nexport interface TenderlyLog {\n  name: string | null;\n  anonymous: boolean;\n  inputs: Input[];\n  raw: TenderlyLogRaw;\n}\n\nexport interface TenderlyStackTrace {\n  file_index: number;\n  contract: string;\n  name: string;\n  line: number;\n  error: string;\n  error_reason: string;\n  code: string;\n  op: string;\n  length: number;\n}\n\nexport type TransactionInfo = {\n  call_trace: {\n    calls: Trace[];\n  };\n  state_diff: StateDiff[];\n  logs: TenderlyLog[] | null;\n  stack_trace: TenderlyStackTrace[] | null;\n};\n\ntype Transaction = {\n  transaction_info: TransactionInfo;\n  block_number: number;\n  timestamp: string;\n  status: boolean;\n  addresses: Hex[];\n};\n\ntype TenderlyContractResponseObject = {\n  address: Hex;\n  contract_name: string;\n  standards?: string[];\n  token_data?: {\n    symbol: string;\n    name: string;\n    decimals: number;\n  };\n  child_contracts?: {id: string; address: Hex; network_id: string}[];\n  src_map: any;\n};\n\nexport interface TenderlySimulationResponseObject {\n  id: string;\n  project_id: string;\n  owner_id: string;\n  network_id: string;\n  block_number: number;\n  transaction_index: number;\n  from: string;\n  to: string;\n  input: string;\n  gas: number;\n  gas_price: string;\n  value: string;\n  method: string;\n  status: boolean;\n  access_list: null;\n  queue_origin: string;\n  created_at: Date;\n  block_header: {\n    timestamp: string;\n  };\n}\n\nexport type TenderlySimulationResponse = {\n  transaction: Transaction;\n  contracts: TenderlyContractResponseObject[];\n  simulation: TenderlySimulationResponseObject;\n};\n\nexport type TenderlyTraceResponse = TransactionInfo;\n\nexport type Fork = {\n  id: string;\n  chainId: string;\n  block_number: number;\n  forkNetworkId: string;\n  forkUrl: string;\n  global_head: string;\n};\n\nclass Tenderly {\n  TENDERLY_BASE = 'https://api.tenderly.co/api/v1';\n\n  ACCESS_TOKEN: string;\n  ACCOUNT: string;\n  PROJECT: string;\n\n  constructor(accessToken: string, account: string, project: string) {\n    this.ACCESS_TOKEN = accessToken;\n    this.ACCOUNT = account;\n    this.PROJECT = project;\n  }\n\n  trace = async (chainId: number, txHash: string): Promise<TenderlyTraceResponse> => {\n    const response = await fetch(\n      `${this.TENDERLY_BASE}/public-contract/${chainId}/trace/${txHash}`,\n      {\n        method: 'GET',\n        headers: new Headers({\n          'Content-Type': 'application/json',\n          'X-Access-Key': this.ACCESS_TOKEN,\n        }),\n      },\n    );\n    const result: TenderlyTraceResponse = await response.json();\n    // Post-processing to ensure addresses we use are checksummed (since ethers returns checksummed addresses)\n    // result.transaction.addresses = result.transaction.addresses.map(getAddress);\n    // result.contracts.forEach((contract) => (contract.address = getAddress(contract.address)));\n    return result;\n  };\n\n  simulate = async (\n    request: TenderlyRequest,\n    client?: Client,\n  ): Promise<TenderlySimulationResponse> => {\n    if (!request.state_objects) {\n      request.state_objects = {};\n    }\n    if (!request.state_objects[request.from]) {\n      request.state_objects[request.from] = {\n        balance: String(parseEther('3')),\n      };\n    } else {\n      request.state_objects[request.from].balance = String(parseEther('3'));\n    }\n\n    let apiUrl = `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/simulate`;\n\n    if (client) {\n      const url = client.transport.url! as string;\n      const tenderlyForkRegex = new RegExp(/https:\\/\\/rpc.tenderly.co\\/fork\\/(.*)/);\n      if (tenderlyForkRegex.test(url)) {\n        const matches = url.match(tenderlyForkRegex);\n        if (matches) {\n          const fork = await this.getForkInfo(matches[1]);\n          request.root = fork.global_head;\n          delete (request as any).network_id;\n          apiUrl = `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/fork/${matches[1]}/simulate`;\n        }\n      }\n    }\n\n    const fullRequest = JSON.stringify({\n      generate_access_list: true,\n      save: true,\n      gas_price: '0',\n      gas: 30_000_000,\n      force_import_contracts: true,\n      ...request,\n    });\n\n    logInfo('tenderly', `request: ${JSON.stringify(fullRequest)}`);\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      body: fullRequest,\n      headers: new Headers({\n        'Content-Type': 'application/json',\n        'X-Access-Key': this.ACCESS_TOKEN,\n      }),\n    });\n    if (response.status !== 200) {\n      console.log(await response.text());\n      throw new Error(`TenderlyError: ${response.statusText}`);\n    }\n    return await response.json();\n  };\n\n  /**\n   * Fork api to get fork information from an existing fork id\n   * @param project name of the Tenderly project where the fork was created\n   * @param forkId id of the fork created in tenderly\n   * @returns fork object\n   */\n  getForkInfo = async (forkId: string, project?: string): Promise<Fork> => {\n    const response: Response = await fetch(\n      `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${project || this.PROJECT}/fork/${forkId}`,\n      {\n        method: 'GET',\n        headers: new Headers({\n          'Content-Type': 'application/json',\n          'X-Access-Key': this.ACCESS_TOKEN,\n        }),\n      },\n    );\n\n    if (response.status >= 400) {\n      console.log(await response.text());\n      throw new Error(`TenderlyError: ${response.statusText}`);\n    }\n    const result = await response.json();\n    const fork = {\n      id: result.simulation_fork.id,\n      chainId: result.simulation_fork.network_id,\n      block_number: result.simulation_fork.block_number,\n      forkNetworkId: result.simulation_fork.chain_config.chain_id,\n      forkUrl: `https://rpc.tenderly.co/fork/${result.simulation_fork.id}`,\n      global_head: result.simulation_fork.global_head,\n    };\n    return fork;\n  };\n  /**\n   * Trace api lacks most information we need, so simulateTx uses the simulation api to replicate the trace.\n   * @param chainId\n   * @param tx\n   * @returns\n   */\n  simulateTx = async (\n    chainId: number,\n    tx: GetTransactionReturnType<Chain, 'latest'>,\n  ): Promise<TenderlySimulationResponse> => {\n    const simulationPayload = {\n      network_id: String(chainId),\n      from: tx.from!,\n      to: tx.to!,\n      block_number: Number(tx.blockNumber),\n      input: tx.input,\n    };\n    return this.simulate(simulationPayload);\n  };\n\n  fork = async ({\n    chainId,\n    blockNumber,\n    alias,\n    forkChainId = 3030,\n  }: {\n    chainId: number;\n    blockNumber?: number;\n    alias?: string;\n    forkChainId?: number;\n  }): Promise<Fork> => {\n    const forkingPoint = {\n      network_id: chainId,\n      chain_config: {chain_id: forkChainId},\n    };\n    if (blockNumber) (forkingPoint as any).block_number = blockNumber;\n    if (alias) (forkingPoint as any).alias = alias;\n    const response = await fetch(\n      `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/fork`,\n      {\n        method: 'POST',\n        body: JSON.stringify(forkingPoint),\n        headers: new Headers({\n          'Content-Type': 'application/json',\n          'X-Access-Key': this.ACCESS_TOKEN,\n        }),\n      },\n    );\n\n    const result = await response.json();\n    if (result.error) {\n      logError('tenderly', 'fork could not be created');\n      throw new Error(result.error.message);\n    }\n    const fork = {\n      id: result.simulation_fork.id,\n      chainId: result.simulation_fork.network_id,\n      block_number: result.simulation_fork.block_number,\n      forkNetworkId: result.simulation_fork.chain_config.chain_id,\n      forkUrl: `https://rpc.tenderly.co/fork/${result.simulation_fork.id}`,\n      global_head: result.simulation_fork.global_head,\n    };\n    logSuccess(\n      'tenderly',\n      `Fork created! To use in aave interface you need to run the following commands:\\n\\n---\\nlocalStorage.setItem('forkEnabled', 'true');\\nlocalStorage.setItem('forkBaseChainId', ${fork.chainId});\\nlocalStorage.setItem('forkNetworkId', ${fork.forkNetworkId});\\nlocalStorage.setItem(\"forkRPCUrl\", \"${fork.forkUrl}\");\\n---\\n`,\n    );\n    return fork;\n  };\n\n  deployCode = async (fork: Fork, filePath: string, from?: Hex) => {\n    const walletProvider = createClient({\n      account: from || EOA,\n      chain: {id: fork.forkNetworkId, name: 'tenderly'} as any,\n      transport: http(fork.forkUrl),\n    });\n\n    const artifact = require(filePath);\n    logInfo('tenderly', `deploying ${filePath}`);\n\n    const hash = await deployContract(walletProvider, {\n      abi: artifact.abi,\n      bytecode: artifact.bytecode.object,\n      account: walletProvider.account,\n    } as any);\n\n    const receipt = await getTransactionReceipt(walletProvider, {hash});\n    return getContractAddress({from: receipt.from, nonce: receipt.nonce});\n  };\n\n  warpTime = async (fork: Fork, timestamp: bigint) => {\n    const client = createClient({\n      chain: {id: fork.forkNetworkId} as any,\n      transport: http(fork.forkUrl),\n    });\n\n    const currentBlock = await getBlock(client);\n    // warping forward in time\n    if (timestamp > currentBlock.timestamp) {\n      logInfo('tenderly', `warping time from ${currentBlock.timestamp} to ${timestamp}`);\n      await client.request({\n        method: 'evm_increaseTime' as any,\n        params: [toHex(timestamp - currentBlock.timestamp)],\n      });\n    } else {\n      logWarning(\n        'tenderly',\n        `skipping time warp as tenderly forks do not support traveling back in time (from ${currentBlock.timestamp} to ${timestamp})`,\n      );\n    }\n  };\n\n  warpBlocks = async (fork: Fork, blockNumber: bigint) => {\n    const client = createClient({\n      chain: {id: fork.forkNetworkId} as any,\n      transport: http(fork.forkUrl),\n    });\n    const currentBlock = await getBlock(client);\n    if (blockNumber > currentBlock.number) {\n      logInfo('tenderly', `warping blocks from ${currentBlock.number} to ${blockNumber}`);\n      await client.request({\n        method: 'evm_increaseBlocks' as any,\n        params: [toHex(blockNumber - currentBlock.number)],\n      });\n    } else {\n      logWarning(\n        'tenderly',\n        'skipping block warp as tenderly forks do not support traveling back in time',\n      );\n    }\n  };\n\n  unwrapAndExecuteSimulationPayloadOnFork = async (fork: Fork, request: TenderlyRequest) => {\n    // 0. fund account\n    await this.fundAccount(fork, request.from);\n\n    const publicProvider = createClient({\n      chain: {id: fork.forkNetworkId} as any,\n      transport: http(fork.forkUrl),\n    });\n    // 1. apply storage changes\n    if (request.state_objects) {\n      logInfo('tenderly', 'setting storage');\n      for (const address of Object.keys(request.state_objects) as Hex[]) {\n        if (request.state_objects[address].storage) {\n          for (const slot of Object.keys(request.state_objects[address].storage!) as Hex[]) {\n            await publicProvider.request({\n              method: 'tenderly_setStorageAt' as any,\n              params: [\n                address as Hex,\n                pad(slot as Hex, {size: 32}),\n                pad(request.state_objects[address].storage![slot] as Hex, {\n                  size: 32,\n                }),\n              ],\n            });\n          }\n        }\n      }\n    }\n\n    // 2. warp time\n    if (request.block_header?.timestamp) {\n      await this.warpTime(fork, fromHex(request.block_header?.timestamp, 'bigint'));\n    }\n    if (request.block_header?.number) {\n      await this.warpBlocks(fork, fromHex(request.block_header?.number, 'bigint'));\n    }\n\n    // 3. execute txn\n    if (request.input) {\n      logInfo('tenderly', 'execute transaction');\n      const walletProvider = createClient({\n        account: request.from,\n        chain: {id: fork.forkNetworkId, name: 'tenderly'} as any,\n        transport: http(fork.forkUrl),\n      });\n      const hash = await sendTransaction(walletProvider, {\n        data: request.input,\n        to: request.to,\n        value: request.value || 0n,\n      } as any);\n      const receipt = await getTransactionReceipt(walletProvider, {hash});\n      if (receipt.status === 'success') {\n        logSuccess('tenderly', 'transaction successfully executed');\n      } else {\n        logError('tenderly', 'transaction reverted');\n      }\n      return hash;\n    }\n  };\n\n  fundAccount = (fork: Fork, address: Hex) => {\n    logInfo('tenderly', 'fund account');\n    return fetch(\n      `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/fork/${fork.id}/balance`,\n      {\n        method: 'POST',\n        body: JSON.stringify({accounts: [address], amount: 1000}),\n        headers: new Headers({\n          'Content-Type': 'application/json',\n          'X-Access-Key': this.ACCESS_TOKEN,\n        }),\n      },\n    );\n  };\n\n  replaceCode = (fork: Fork, address: Hex, code: Hex) => {\n    const publicProvider = createClient({\n      chain: {id: fork.forkNetworkId} as any,\n      transport: http(fork.forkUrl),\n    });\n    return publicProvider.request({\n      method: 'tenderly_setCode' as any,\n      params: [address, code],\n    });\n  };\n}\n\nexport const tenderly = new Tenderly(\n  process.env.TENDERLY_ACCESS_TOKEN,\n  process.env.TENDERLY_ACCOUNT,\n  process.env.TENDERLY_PROJECT_SLUG,\n);\n","import {AaveSafetyModule, AaveV3Ethereum, GovernanceV3Ethereum} from '@bgd-labs/aave-address-book';\nimport {\n  type Chain,\n  type Client,\n  type GetBlockReturnType,\n  type Hex,\n  fromRlp,\n  toHex,\n  toRlp,\n} from 'viem';\nimport {getBlock, getProof as viemGetProof} from 'viem/actions';\n\n/**\n * Slots that represent configuration values relevant for all accounts\n */\nexport const WAREHOUSE_SLOTS = {\n  [AaveSafetyModule.STK_AAVE]: {\n    exchangeRate: 81n, // exchangeRate\n  },\n} as const;\n\n/**\n * Slots that represent the balance of a single account\n */\nexport const VOTING_SLOTS = {\n  [AaveSafetyModule.STK_AAVE]: {balance: 0n}, // balance\n  [AaveV3Ethereum.ASSETS.AAVE.A_TOKEN]: {\n    balance: 52n, // balance\n    delegation: 64n,\n  }, // delegation\n  [AaveV3Ethereum.ASSETS.AAVE.UNDERLYING]: {balance: 0n}, // balance\n  [GovernanceV3Ethereum.GOVERNANCE]: {representative: 9n}, // representative\n} as const;\n\nexport async function getProof(\n  client: Client,\n  address: Hex,\n  slots: readonly Hex[],\n  blockHash: Hex,\n) {\n  const block = await getBlock(client, {blockHash});\n  return viemGetProof(client, {\n    address,\n    storageKeys: slots.map((slot) => slot),\n    blockNumber: block.number,\n  });\n}\n\n// IMPORTANT valid only for post-Shapella blocks, as it includes `withdrawalsRoot`\nexport const getBlockRLP = (\n  rawBlock: GetBlockReturnType<Chain | undefined, false, 'latest'>,\n): Hex => {\n  const rawData: Hex[] = [\n    rawBlock.parentHash,\n    rawBlock.sha3Uncles,\n    rawBlock.miner,\n    rawBlock.stateRoot,\n    rawBlock.transactionsRoot,\n    rawBlock.receiptsRoot,\n    rawBlock.logsBloom!,\n    '0x0', //toHex(rawBlock.difficulty),\n    toHex(rawBlock.number || 0), // 0 to account for type null\n    toHex(rawBlock.gasLimit),\n    toHex(rawBlock.gasUsed),\n    toHex(rawBlock.timestamp),\n    rawBlock.extraData,\n    rawBlock.mixHash,\n    rawBlock.nonce!,\n    toHex(rawBlock.baseFeePerGas || 0), // 0 to account for type null\n    // @ts-ignore looks like this field is not yet added into the type\n    rawBlock.withdrawalsRoot!,\n  ];\n  return toRlp(rawData);\n};\n\nexport const getAccountRPL = (proof: Hex[]) => {\n  return toRlp(proof.map((rpl) => fromRlp(rpl, 'hex')));\n};\n","import {IPayloadsControllerCore_ABI} from '@bgd-labs/aave-address-book/abis';\nimport {\n  type Client,\n  type GetContractReturnType,\n  type Hex,\n  encodeFunctionData,\n  encodePacked,\n  getContract,\n} from 'viem';\nimport {getBlock, getTransaction} from 'viem/actions';\nimport {EOA} from '../utils/constants';\nimport {getSolidityStorageSlotUint} from '../utils/storageSlots';\nimport {\n  type TenderlyRequest,\n  type TenderlySimulationResponse,\n  tenderly,\n} from '../utils/tenderlyClient';\nimport {GetPayloadReturnType, PayloadState} from '@bgd-labs/aave-v3-governance-cache';\n\nexport const HUMAN_READABLE_PAYLOAD_STATE = {\n  [PayloadState.None]: 'None',\n  [PayloadState.Created]: 'Created',\n  [PayloadState.Queued]: 'Queued',\n  [PayloadState.Executed]: 'Executed',\n  [PayloadState.Cancelled]: 'Cancelled',\n  [PayloadState.Expired]: 'Expired',\n};\n\nexport interface PayloadsController {\n  controllerContract: GetContractReturnType<typeof IPayloadsControllerCore_ABI, Client>;\n  getSimulationPayloadForExecution: (id: number) => Promise<TenderlyRequest>;\n  simulatePayloadExecutionOnTenderly: (\n    id: number,\n    logs: GetPayloadReturnType['logs'],\n  ) => Promise<TenderlySimulationResponse>;\n}\n\nconst SLOTS = {\n  PAYLOADS_MAPPING: 3n,\n};\n\nexport const getPayloadsController = (address: Hex, client: Client): PayloadsController => {\n  const controllerContract = getContract({\n    abi: IPayloadsControllerCore_ABI,\n    address,\n    client,\n  });\n\n  const getSimulationPayloadForExecution = async (id: number) => {\n    const payload = await controllerContract.read.getPayloadById([id]);\n    const currentBlock = await getBlock(client);\n    const simulationPayload: TenderlyRequest = {\n      network_id: String(client.chain!.id),\n      from: EOA,\n      to: controllerContract.address,\n      input: encodeFunctionData({\n        abi: IPayloadsControllerCore_ABI,\n        functionName: 'executePayload',\n        args: [id],\n      }),\n      block_number: -2,\n      state_objects: {\n        [controllerContract.address]: {\n          storage: {\n            [getSolidityStorageSlotUint(SLOTS.PAYLOADS_MAPPING, BigInt(id))]: encodePacked(\n              ['uint40', 'uint40', 'uint8', 'uint8', 'address'],\n              [\n                // we subtract 240n(4min), as tenderly might have been fallen behind\n                // therefore using block_number -1 (latest on tenderly) and a 4min margin should give a save margin\n                Number(currentBlock.timestamp - BigInt(payload.delay) - 1n - 240n), // altering queued time so can be executed in current block\n                payload.createdAt,\n                PayloadState.Queued,\n                payload.maximumAccessLevelRequired,\n                payload.creator,\n              ],\n            ),\n          },\n        },\n      },\n    };\n    return simulationPayload;\n  };\n\n  return {\n    controllerContract,\n    getSimulationPayloadForExecution,\n    simulatePayloadExecutionOnTenderly: async (id, {executedLog}) => {\n      // if successfully executed just replay the txn\n      if (executedLog) {\n        const tx = await getTransaction(client, {\n          hash: executedLog.transactionHash!,\n        });\n        return tenderly.simulateTx(client.chain!.id, tx);\n      }\n      const payload = await getSimulationPayloadForExecution(id);\n\n      return tenderly.simulate(payload, client);\n    },\n  };\n};\n","import {\n  IDataWarehouse_ABI,\n  IVotingMachineWithProofs_ABI,\n  IVotingPortal_ABI,\n} from '@bgd-labs/aave-address-book/abis';\nimport type {Command} from '@commander-js/extra-typings';\nimport {confirm, input, select} from '@inquirer/prompts';\nimport {type Hex, encodeAbiParameters, encodeFunctionData, getContract} from 'viem';\nimport {generateReport} from '../govv3/generatePayloadReport';\nimport {HUMAN_READABLE_STATE, getGovernance} from '../govv3/governance';\nimport {getPayloadsController} from '../govv3/payloadsController';\nimport {getAccountRPL, getBlockRLP} from '../govv3/proofs';\nimport {simulateProposal} from '../govv3/simulate';\nimport {findPayloadsController} from '../govv3/utils/checkAddress';\nimport {toAddressLink, toTxLink} from '../govv3/utils/markdownUtils';\nimport {DEFAULT_GOVERNANCE, DEFAULT_GOVERNANCE_CLIENT, FORMAT} from '../utils/constants';\nimport {logError, logInfo, logSuccess} from '../utils/logger';\nimport {getBlock} from 'viem/actions';\nimport {customStorageProvider} from '@bgd-labs/aave-v3-governance-cache/customStorageProvider';\nimport {fileSystemStorageAdapter} from '@bgd-labs/aave-v3-governance-cache/fileSystemStorageAdapter';\n\nconst localCacheAdapter = customStorageProvider(fileSystemStorageAdapter);\n\nimport {refreshCache} from '@bgd-labs/aave-v3-governance-cache/refreshCache';\nimport {getClient} from '../utils/getClient';\n\nenum DialogOptions {\n  DETAILS = 0,\n  IPFS_TEXT = 1,\n  TRANSACTIONS = 2,\n  HOW_TO_VOTE = 3,\n  HOW_TO_REGISTER_STORAGE_ROOTS = 4,\n  EXIT = 5,\n}\n\nexport function addCommand(program: Command) {\n  const govV3 = program.command('governance').description('interact with governance v3 contracts');\n\n  govV3\n    .command('simulate')\n    .description('simulates a proposal on tenderly')\n    .requiredOption('--proposalId <number>', 'proposalId to simulate via tenderly')\n    .action(async (name, options) => {\n      const proposalId = BigInt(options.getOptionValue('proposalId'));\n      await simulateProposal(DEFAULT_GOVERNANCE, DEFAULT_GOVERNANCE_CLIENT, proposalId);\n    });\n\n  govV3\n    .command('simulate-payload')\n    .description('simulates a payloadId on tenderly')\n    .requiredOption('--chainId <number>', 'the chainId to fork of')\n    .requiredOption('--payloadId <number>', 'payloadId to simulate via tenderly')\n    .action(async ({payloadId: _payloadId, chainId}, options) => {\n      await refreshCache(localCacheAdapter);\n      const payloadId = Number(_payloadId);\n      const client = getClient(Number(chainId));\n      const payloadsControllerAddress = findPayloadsController(Number(chainId));\n      const payloadsController = getPayloadsController(payloadsControllerAddress as Hex, client);\n      const cache = await localCacheAdapter.getPayload({\n        chainId: Number(chainId),\n        payloadsController: payloadsControllerAddress as Hex,\n        payloadId: Number(payloadId),\n      });\n      const result = await payloadsController.simulatePayloadExecutionOnTenderly(\n        Number(payloadId),\n        cache.logs,\n      );\n      console.log(\n        await generateReport({\n          simulation: result,\n          payloadId: payloadId,\n          payloadInfo: cache,\n          client,\n        }),\n      );\n    });\n\n  govV3\n    .command('view')\n    .description('shows all the proposals & state')\n    .action(async (opts) => {\n      await refreshCache(localCacheAdapter);\n      const governance = getGovernance({\n        address: DEFAULT_GOVERNANCE,\n        client: DEFAULT_GOVERNANCE_CLIENT,\n      });\n      const count = await governance.governanceContract.read.getProposalsCount();\n      const proposalIds = [...Array(Number(count)).keys()].reverse();\n      const selectedProposalId = BigInt(\n        await select({\n          message: 'Select a proposal to get more information',\n          choices: await Promise.all(\n            proposalIds.map(async (id) => {\n              const proposalCache = await localCacheAdapter.getProposal({\n                chainId: DEFAULT_GOVERNANCE_CLIENT.chain!.id,\n                governance: DEFAULT_GOVERNANCE,\n                proposalId: BigInt(id),\n              });\n              const title = `${id} - ${\n                HUMAN_READABLE_STATE[\n                  proposalCache.proposal.state as keyof typeof HUMAN_READABLE_STATE\n                ]\n              } | ${proposalCache.ipfs?.title || 'problems fetching ipfs meta'}`;\n              return {name: title, value: id};\n            }),\n          ),\n        }),\n      );\n      const cache = await localCacheAdapter.getProposal({\n        chainId: DEFAULT_GOVERNANCE_CLIENT.chain!.id,\n        governance: DEFAULT_GOVERNANCE,\n        proposalId: selectedProposalId,\n      });\n      let exitLvl2 = false;\n      while (!exitLvl2) {\n        const moreInfo = await select({\n          message: 'What do you want to do?',\n          choices: [\n            {\n              name: 'Show details',\n              value: DialogOptions.DETAILS,\n            },\n            {\n              name: 'Show ipfs details',\n              value: DialogOptions.IPFS_TEXT,\n            },\n            {\n              name: 'Show transactions',\n              value: DialogOptions.TRANSACTIONS,\n            },\n            {\n              name: 'Show me How to vote',\n              value: DialogOptions.HOW_TO_VOTE,\n            },\n            {\n              name: 'Show me How to register storage roots',\n              value: DialogOptions.HOW_TO_REGISTER_STORAGE_ROOTS,\n            },\n            {\n              name: 'Exit',\n              value: DialogOptions.EXIT,\n            },\n          ],\n        });\n\n        if (moreInfo === DialogOptions.EXIT) {\n          exitLvl2 = true;\n          process.exit(0);\n        }\n\n        if (moreInfo === DialogOptions.IPFS_TEXT) {\n          logInfo('title', cache.ipfs?.title || 'problem fetching ipfs metadata');\n          logInfo('author', cache.ipfs?.author || 'problem fetching ipfs metadata');\n          logInfo('discussion', cache.ipfs?.discussions || 'problem fetching ipfs metadata');\n          logInfo('description', cache.ipfs?.description || 'problem fetching ipfs metadata');\n        }\n\n        if (moreInfo === DialogOptions.TRANSACTIONS) {\n          logInfo(\n            'CreatedLog',\n            toTxLink(cache.logs.createdLog.transactionHash, false, DEFAULT_GOVERNANCE_CLIENT),\n          );\n          if (cache.logs.votingActivatedLog)\n            logInfo(\n              'VotingActivated',\n              toTxLink(\n                cache.logs.votingActivatedLog.transactionHash,\n                false,\n                DEFAULT_GOVERNANCE_CLIENT,\n              ),\n            );\n          if (cache.logs.queuedLog)\n            logInfo(\n              'QueuedLog',\n              toTxLink(cache.logs.queuedLog.transactionHash, false, DEFAULT_GOVERNANCE_CLIENT),\n            );\n          if (cache.logs.executedLog)\n            logInfo(\n              'ExecutedLog',\n              toTxLink(cache.logs.executedLog.transactionHash, false, DEFAULT_GOVERNANCE_CLIENT),\n            );\n        }\n\n        if (moreInfo === DialogOptions.DETAILS) {\n          logInfo('Creator', cache.proposal.creator);\n          logInfo('ForVotes', cache.proposal.forVotes);\n          logInfo('AgainstVotes', cache.proposal.againstVotes);\n          logInfo('AccessLevel', cache.proposal.accessLevel);\n          logInfo('VotingPortal', cache.proposal.votingPortal);\n          cache.proposal.payloads.map((payload, ix) => {\n            logInfo(`Payload.${ix}.accessLevel`, payload.accessLevel);\n            logInfo(`Payload.${ix}.chain`, getClient(Number(payload.chain)).chain!.name);\n            logInfo(`Payload.${ix}.payloadId`, payload.payloadId);\n            logInfo(`Payload.${ix}.payloadsController`, payload.payloadsController);\n          });\n        }\n\n        if (moreInfo === DialogOptions.HOW_TO_VOTE) {\n          const address = (await input({\n            message: 'Enter the address you would like to vote with',\n          })) as Hex;\n          const support = await confirm({\n            message: 'Are you in Support of the proposal?',\n          });\n          const portal = getContract({\n            address: cache.proposal.votingPortal,\n            abi: IVotingPortal_ABI,\n            client: DEFAULT_GOVERNANCE_CLIENT,\n          });\n          const [machine, chainId] = await Promise.all([\n            portal.read.VOTING_MACHINE(),\n            portal.read.VOTING_MACHINE_CHAIN_ID(),\n          ]);\n          const proofs = await governance.getVotingProofs(selectedProposalId, address, chainId);\n          if (proofs.length === 0) logError('Voting Error', 'You need voting power to vote');\n          else {\n            logSuccess('VotingMachine', toAddressLink(machine, false, getClient(Number(chainId))));\n            if (FORMAT === 'raw') {\n              logSuccess('Method', 'submitVote');\n              logSuccess('parameter proposalId', selectedProposalId);\n              logSuccess('parameter support', String(support));\n              logSuccess(\n                'parameter votingBalanceProofs',\n                JSON.stringify(proofs.map((p) => [p.underlyingAsset, p.slot.toString(), p.proof])),\n              );\n            } else {\n              logSuccess(\n                'encoded calldata',\n                encodeFunctionData({\n                  abi: IVotingMachineWithProofs_ABI,\n                  functionName: 'submitVote',\n                  args: [selectedProposalId, support, proofs],\n                }),\n              );\n            }\n          }\n        }\n\n        if (moreInfo === DialogOptions.HOW_TO_REGISTER_STORAGE_ROOTS) {\n          const portalContract = getContract({\n            address: cache.proposal.votingPortal,\n            abi: IVotingPortal_ABI,\n            client: DEFAULT_GOVERNANCE_CLIENT,\n          });\n          const [machine, chainId] = await Promise.all([\n            portalContract.read.VOTING_MACHINE(),\n            portalContract.read.VOTING_MACHINE_CHAIN_ID(),\n          ]);\n          const machineContract = getContract({\n            address: machine,\n            abi: IVotingMachineWithProofs_ABI,\n            client: getClient(Number(chainId)),\n          });\n          const dataWarehouse = await machineContract.read.DATA_WAREHOUSE();\n          const roots = await governance.getStorageRoots(selectedProposalId);\n          logSuccess(\n            'DataWarehouse',\n            toAddressLink(dataWarehouse, false, getClient(Number(chainId))),\n          );\n          const block = await getBlock(DEFAULT_GOVERNANCE_CLIENT, {\n            blockHash: cache.proposal.snapshotBlockHash,\n          });\n          const blockRPL = getBlockRLP(block);\n          console.log(FORMAT);\n          if (FORMAT === 'raw') {\n            logSuccess('Method', 'processStorageRoot');\n            roots.map((root, ix) => {\n              const accountRPL = getAccountRPL(root.accountProof);\n              logSuccess(`account.${ix}`, root.address);\n              logSuccess(`blockHash.${ix}`, cache.proposal.snapshotBlockHash);\n              logSuccess(`blockHeaderRPL.${ix}`, blockRPL);\n              logSuccess(`accountStateProofRPL.${ix}`, accountRPL);\n            });\n          } else {\n            roots.map((root, ix) => {\n              const accountRPL = getAccountRPL(root.accountProof);\n              logSuccess(\n                'Encoded callData',\n                encodeFunctionData({\n                  abi: IDataWarehouse_ABI,\n                  functionName: 'processStorageRoot',\n                  args: [root.address, cache.proposal.snapshotBlockHash, blockRPL, accountRPL],\n                }),\n              );\n            });\n          }\n        }\n      }\n    });\n\n  /**\n   *\n   */\n  govV3\n    .command('getStorageRoots')\n    .description('generate the storage roots for the warehouse')\n    .requiredOption('--proposalId <number>', 'proposalId to generate the proof for')\n    .action(async (name, options) => {\n      const governance = getGovernance({\n        address: DEFAULT_GOVERNANCE,\n        client: DEFAULT_GOVERNANCE_CLIENT,\n      });\n      const proposalId = BigInt(options.getOptionValue('proposalId'));\n      const proposal = await governance.governanceContract.read.getProposal([proposalId]);\n\n      const roots = await governance.getStorageRoots(proposalId);\n      const block = await getBlock(DEFAULT_GOVERNANCE_CLIENT, {\n        blockHash: proposal.snapshotBlockHash,\n      });\n      const blockRPL = getBlockRLP(block);\n      const params = roots.map((root) => {\n        const accountRPL = getAccountRPL(root.accountProof);\n        return {\n          account: root.address,\n          blockHash: proposal.snapshotBlockHash,\n          blockHeaderRPL: blockRPL,\n          accountStateProofRPL: accountRPL,\n        };\n      });\n\n      console.log(\n        encodeAbiParameters(\n          [\n            {\n              name: 'params',\n              type: 'tuple[]',\n              components: [\n                {name: 'account', type: 'address'},\n                {name: 'blockHash', type: 'bytes32'},\n                {name: 'blockHeaderRPL', type: 'bytes'},\n                {name: 'accountStateProofRPL', type: 'bytes'},\n              ],\n            },\n          ],\n          [params],\n        ),\n      );\n    });\n\n  /**\n   *\n   */\n  govV3\n    .command('getVotingProofs')\n    .description('generates the proofs for voting')\n    .requiredOption('--proposalId <number>', 'proposalId to generate the proof for')\n    .requiredOption('--voter <string>', 'the address to vote')\n    .action(async (name, options) => {\n      const governance = getGovernance({\n        address: DEFAULT_GOVERNANCE,\n        client: DEFAULT_GOVERNANCE_CLIENT,\n      });\n      const proposalId = BigInt(options.getOptionValue('proposalId'));\n      const voter = options.getOptionValue('voter') as Hex;\n\n      const proposal = await governance.governanceContract.read.getProposal([proposalId]);\n\n      const portal = getContract({\n        address: proposal.votingPortal,\n        abi: IVotingPortal_ABI,\n        client: DEFAULT_GOVERNANCE_CLIENT,\n      });\n      const chainId = await portal.read.VOTING_MACHINE_CHAIN_ID();\n      const proofs = await governance.getVotingProofs(proposalId, voter as Hex, chainId);\n      console.log(\n        encodeAbiParameters(\n          [\n            {\n              name: 'proofs',\n              type: 'tuple[]',\n              components: [\n                {name: 'underlyingAsset', type: 'address'},\n                {name: 'slot', type: 'uint128'},\n                {name: 'proof', type: 'bytes'},\n              ],\n            },\n          ],\n          [proofs],\n        ),\n      );\n    });\n}\n","// Based on https://github.com/Uniswap/governance-seatbelt/blob/main/checks/check-logs.ts\n// adjusted for viem & aave governance v3\nimport {type Address, getAddress} from 'viem';\nimport type {Log} from '../../utils/tenderlyClient';\nimport {interpretLog} from '../utils/logInterpreter';\nimport {getContractName} from '../utils/solidityUtils';\nimport type {ProposalCheck} from './types';\n\n/**\n * Reports all emitted events from the proposal\n */\nexport const checkLogs: ProposalCheck<any> = {\n  name: 'Reports all events emitted from the proposal',\n  async checkProposal(proposal, sim, client) {\n    const info = [];\n    const events = sim.transaction.transaction_info.logs?.reduce(\n      (logs, log) => {\n        const addr = getAddress(log.raw.address);\n        if (!logs[addr]) logs[addr] = [log];\n        else logs[addr].push(log);\n        return logs;\n      },\n      {} as Record<Address, Log[]>,\n    );\n\n    // Return if no events to show\n    if (!events || !Object.keys(events).length)\n      return {info: ['No events emitted'], warnings: [], errors: []};\n\n    // Parse each event\n    for (const [address, logs] of Object.entries(events)) {\n      // Use contracts array to get contract name of address\n      info.push(`- ${getContractName(sim.contracts, address as Address, client.chain!.id)}`);\n\n      // Format log data for report\n      for (const log of logs) {\n        if (log.name) {\n          info.push(await interpretLog(client, address as Address, log.name, log.inputs));\n        } else {\n          // Log is not decoded, report the raw data\n          // TODO find a transaction with undecoded logs to know how topics/data are formatted in simulation response\n          info.push(`  - Undecoded log: \\`${JSON.stringify(log)}\\``);\n        }\n      }\n    }\n\n    return {info, warnings: [], errors: []};\n  },\n};\n","import {type Client, type Hex, formatUnits, Address} from 'viem';\nimport type {Input} from '../../utils/tenderlyClient';\nimport {findAsset} from './checkAddress';\nimport {addAssetSymbol, formatNumberString, prettifyNumber} from './markdownUtils';\n\n// events emitted typically on the erc20\nconst tokenAmountEvents = ['Transfer', 'Approval', 'Burn', 'Mint', 'BalanceTransfer'];\n\n// events emitted on the pool\nconst reserveEvents = ['Withdraw', 'Supply', 'Deposit'];\n\nconst assetFields = ['asset', 'token', 'reserve', 'fromToken', 'toToken'];\n\nexport async function interpretLog(\n  client: Client,\n  address: Hex,\n  name: string | null,\n  inputs: Input[] | null,\n) {\n  if (inputs) {\n    for (let i = 0; i < inputs.length; i++) {\n      if (inputs[i].soltype?.name && assetFields.includes(inputs[i].soltype!.name)) {\n        inputs[i].value = await addAssetSymbol(client, inputs[i].value as Address);\n      }\n    }\n    if (name && tokenAmountEvents.includes(name)) {\n      // fields formatted by the asset decimal\n      const decimalFieldNames = ['value', 'amount', 'wad'];\n      for (const name of decimalFieldNames) {\n        const valueIndex = inputs.findIndex((i) => i.soltype!.name === name);\n        if (valueIndex !== -1) {\n          const asset = await findAsset(client, address);\n          if (asset) {\n            inputs[valueIndex].value = prettifyNumber({\n              showDecimals: true,\n              value: inputs[valueIndex].value as string,\n              decimals: asset.decimals,\n            });\n          }\n        }\n      }\n    }\n    if (name && reserveEvents.includes(name)) {\n      const valueIndex = inputs.findIndex((i) => i.soltype!.name === 'amount');\n      const reserveIndex = inputs.findIndex((i) => i.soltype!.name === 'reserve');\n      if (valueIndex !== -1 && reserveIndex !== -1) {\n        const asset = await findAsset(client, inputs[reserveIndex].value as Hex);\n        if (asset) {\n          inputs[valueIndex].value = prettifyNumber({\n            showDecimals: true,\n            value: inputs[valueIndex].value as string,\n            decimals: asset.decimals,\n          });\n        }\n      }\n    }\n    if (name && ['Mint', 'ReserveDataUpdated', 'Burn'].includes(name)) {\n      // fields formatted by the asset decimal\n      const decimalFieldNames = ['liquidityIndex', 'variableBorrowIndex', 'index'];\n      for (const name of decimalFieldNames) {\n        const valueIndex = inputs.findIndex((i) => i.soltype!.name === name);\n        if (valueIndex !== -1) {\n          inputs[valueIndex].value = prettifyNumber({\n            showDecimals: true,\n            value: inputs[valueIndex].value as string,\n            decimals: 27,\n          });\n        }\n      }\n    }\n  }\n  const parsedInputs = inputs\n    ?.map(\n      (i) =>\n        `${i.soltype!.name}: ${typeof i.value === 'object' ? JSON.stringify(i.value) : i.value}`,\n    )\n    .join(', ');\n  return `  - \\`${name}(${parsedInputs || ''})\\``;\n}\n","import {type Address, getAddress} from 'viem';\nimport type {TenderlySimulationResponse} from '../../utils/tenderlyClient';\nimport {isKnownAddress} from './checkAddress';\nimport {flagKnownAddress} from './markdownUtils';\n\n// --- Helper methods ---\n/**\n * @notice Given a Tenderly contract object, generates a descriptive human-friendly name for that contract\n * @param contract Tenderly contract object to generate name from\n */\nexport function getContractName(\n  contracts: TenderlySimulationResponse['contracts'],\n  address: Address,\n  chainId: number,\n): string {\n  const isAddrKnown = isKnownAddress(address, chainId);\n\n  // lower-case comparison as strict equality would fail on child contracts which are lower-cased when returned from tenderly\n  const contract = contracts.find((c) => c.address.toLowerCase() === address.toLowerCase());\n  if (!contract)\n    return `unknown contract name at \\`${getAddress(address)}\\`${flagKnownAddress(isAddrKnown)}`;\n  let contractName = contract?.contract_name;\n\n  // If the contract is a token, include the full token name. This is useful in cases where the\n  // token is a proxy, so the contract name doesn't give much useful information\n  if (contract?.token_data?.name) contractName += ` (${contract?.token_data?.name})`;\n\n  // if the contract is a proxy include it's child\n  if (contract.standards?.includes('eip1967') && contract.child_contracts?.[0].address) {\n    return `${contractName} at \\`${getAddress(address)}\\`${flagKnownAddress(\n      isAddrKnown,\n    )} with implementation ${getContractName(contracts, contract.child_contracts?.[0].address, chainId)}`;\n  }\n\n  // Lastly, append the contract address and save it off\n  return `${contractName} at \\`${getAddress(address)}\\`${flagKnownAddress(isAddrKnown)}`;\n}\n","// Based on https://github.com/Uniswap/governance-seatbelt/blob/main/checks/check-targets-no-selfdestruct.ts\n// adjusted for viem & aave governance v3\nimport type {Client, Hex} from 'viem';\nimport {getBytecode, getTransactionCount} from 'viem/actions';\nimport {isKnownAddress} from '../utils/checkAddress';\nimport {flagKnownAddress, toAddressLink} from '../utils/markdownUtils';\nimport type {ProposalCheck} from './types';\nimport {GetPayloadReturnType} from '@bgd-labs/aave-v3-governance-cache';\n\n/**\n * Check all targets with code if they contain selfdestruct.\n */\nexport const checkTargetsNoSelfdestruct: ProposalCheck<GetPayloadReturnType> = {\n  name: 'Check all targets do not contain selfdestruct',\n  async checkProposal(proposal, sim, client) {\n    const allTargets = proposal.payload.actions.map((action) => action.target);\n    const uniqueTargets = allTargets.filter((addr, i, targets) => targets.indexOf(addr) === i);\n    const {info, warn, error} = await checkNoSelfdestructs([], uniqueTargets, client);\n    return {info, warnings: warn, errors: error};\n  },\n};\n\n/**\n * Check all touched contracts with code if they contain selfdestruct.\n */\nexport const checkTouchedContractsNoSelfdestruct: ProposalCheck<any> = {\n  name: 'Check all touched contracts do not contain selfdestruct',\n  async checkProposal(proposal, sim, client) {\n    const {info, warn, error} = await checkNoSelfdestructs([], sim.transaction.addresses, client);\n    return {info, warnings: warn, errors: error};\n  },\n};\n\n/**\n * For a given simulation response, check if a set of addresses contain selfdestruct.\n */\nasync function checkNoSelfdestructs(\n  trustedAddrs: Hex[],\n  addresses: Hex[],\n  client: Client,\n): Promise<{info: string[]; warn: string[]; error: string[]}> {\n  const info: string[] = [];\n  const warn: string[] = [];\n  const error: string[] = [];\n  for (const addr of addresses) {\n    const status = await checkNoSelfdestruct(trustedAddrs, addr, client);\n    const isAddrKnown = isKnownAddress(addr, client.chain!.id);\n    const address = toAddressLink(addr, true, client);\n    if (status === 'eoa') info.push(`- ${address}: EOA${flagKnownAddress(isAddrKnown)}`);\n    else if (status === 'empty')\n      warn.push(`- ${address}: EOA (may have code later)${flagKnownAddress(isAddrKnown)}`);\n    else if (status === 'safe')\n      info.push(`- ${address}: Contract (looks safe)${flagKnownAddress(isAddrKnown)}`);\n    else if (status === 'delegatecall')\n      warn.push(`- ${address}: Contract (with DELEGATECALL)${flagKnownAddress(isAddrKnown)}`);\n    else if (status === 'trusted')\n      info.push(`- ${address}: Trusted contract (not checked)${flagKnownAddress(isAddrKnown)}`);\n    else error.push(`- ${address}: Contract (with SELFDESTRUCT)${flagKnownAddress(isAddrKnown)}`);\n  }\n  return {info, warn, error};\n}\n\nconst STOP = 0x00;\nconst JUMPDEST = 0x5b;\nconst PUSH1 = 0x60;\nconst PUSH32 = 0x7f;\nconst RETURN = 0xf3;\nconst REVERT = 0xfd;\nconst INVALID = 0xfe;\nconst SELFDESTRUCT = 0xff;\nconst DELEGATECALL = 0xf4;\n\nconst isHalting = (opcode: number): boolean =>\n  [STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(opcode);\nconst isPUSH = (opcode: number): boolean => opcode >= PUSH1 && opcode <= PUSH32;\n\n/**\n * For a given address, check if it's an EOA, a safe contract, or a contract contain selfdestruct.\n */\nasync function checkNoSelfdestruct(\n  trustedAddrs: Hex[],\n  addr: Hex,\n  client: Client,\n): Promise<'safe' | 'eoa' | 'empty' | 'selfdestruct' | 'delegatecall' | 'trusted'> {\n  if (trustedAddrs.map((addr) => addr.toLowerCase()).includes(addr.toLowerCase())) return 'trusted';\n\n  const [code, nonce] = await Promise.all([\n    getBytecode(client, {address: addr}),\n    getTransactionCount(client, {address: addr}),\n  ]);\n\n  // If there is no code and nonce is > 0 then it's an EOA.\n  // If nonce is 0 it is an empty account that might have code later.\n  // A contract might have nonce > 0, but then it will have code.\n  // If it had code, but was selfdestructed, the nonce should be reset to 0.\n  if (!code) return nonce > 0 ? 'eoa' : 'empty';\n\n  // Detection logic from https://github.com/MrLuit/selfdestruct-detect\n  const bytecode = Buffer.from(code.substring(2), 'hex');\n  let halted = false;\n  let delegatecall = false;\n  for (let index = 0; index < bytecode.length; index++) {\n    const opcode = bytecode[index];\n    if (opcode === SELFDESTRUCT && !halted) {\n      return 'selfdestruct';\n    }\n    if (opcode === DELEGATECALL && !halted) {\n      delegatecall = true;\n    } else if (opcode === JUMPDEST) {\n      halted = false;\n    } else if (isHalting(opcode)) {\n      halted = true;\n    } else if (isPUSH(opcode)) {\n      index += opcode - PUSH1 + 0x01;\n    }\n  }\n\n  return delegatecall ? 'delegatecall' : 'safe';\n}\n","// Based on https://github.com/Uniswap/governance-seatbelt/blob/main/checks/check-state-changes.ts\n// adjusted for viem & aave governance v3\nimport {type Client, type Hex, getAddress, Address} from 'viem';\nimport type {StateDiff, TenderlySimulationResponse} from '../../utils/tenderlyClient';\nimport {assetIndexesToAsset, findAsset} from '../utils/checkAddress';\nimport {addAssetPrice, addAssetSymbol, prettifyNumber, wrapInQuotes} from '../utils/markdownUtils';\nimport {getDecodedReserveData} from '../utils/reserveConfigurationInterpreter';\nimport {getContractName} from '../utils/solidityUtils';\nimport type {ProposalCheck} from './types';\nimport {bitMapToIndexes} from '../../utils/storageSlots';\n\ntype ValueType = string | Record<string, string>;\n\ntype Change = {\n  name: string;\n  before: string | Record<string, ValueType>;\n  after: string;\n  type?: string;\n};\n\nfunction resolveChain(chain: string[]) {\n  return chain.join('.');\n}\n\nfunction getContractChanges(diffs: StateDiff[]) {\n  const changes: Change[] = [];\n  for (const diff of diffs) {\n    if (!diff.soltype) {\n      // In this branch, state change is not decoded, so return raw data of each storage write\n      // (all other branches have decoded state changes)\n      for (const w of diff.raw) {\n        const oldVal = JSON.stringify(w.original);\n        const newVal = JSON.stringify(w.dirty);\n        changes.push({before: oldVal, after: newVal, name: `Slot \\`${w.key}\\``});\n      }\n    } else if (diff.soltype.simple_type) {\n      // This is a simple type with a single changed value\n      // const oldVal = JSON.parse(JSON.stringify(diff.original))\n      // const newVal = JSON.parse(JSON.stringify(diff.dirty))\n      changes.push({\n        before: diff.original as string,\n        after: diff.dirty as string,\n        name: diff.soltype.name,\n        type: diff.soltype?.name,\n      });\n    } else if (diff.soltype.type.startsWith('mapping')) {\n      // This is a complex type like a mapping, which may have multiple changes. The diff.original\n      // and diff.dirty fields can be strings or objects, and for complex types they are objects,\n      // so we cast them as such\n      const keys = Object.keys(diff.original);\n      const original = diff.original as Record<string, any>;\n      const dirty = diff.dirty as Record<string, any>;\n      for (const k of keys as Hex[]) {\n        changes.push({before: original[k], after: dirty[k], name: k, type: diff.soltype?.name});\n      }\n    } else {\n      // TODO arrays and nested mapping are currently not well supported -- find a transaction\n      // that changes state of these types to inspect the Tenderly simulation response and\n      // handle it accordingly. In the meantime we show the raw state changes and print a\n      // warning about decoding the data\n      for (const w of diff.raw) {\n        const oldVal = JSON.stringify(w.original);\n        const newVal = JSON.stringify(w.dirty);\n        // info += `\\n        - Slot \\`${w.key}\\` changed from \\`${oldVal}\\` to \\`${newVal}\\``\n        changes.push({before: oldVal, after: newVal, name: `Slot \\`${w.key}\\``});\n        console.log(\n          `Could not parse state: add support for formatting type ${diff.soltype?.type} (slot ${w.key})\\n`,\n        );\n      }\n    }\n  }\n  return changes;\n}\n\nasync function renderContractChanges(\n  simulation: TenderlySimulationResponse,\n  client: Client,\n  address: Hex,\n  changes: Change[],\n) {\n  let stateChanges = `\\n${getContractName(simulation.contracts, address, client.chain!.id)}\\n\\`\\`\\`diff\\n`;\n  for (const change of changes) {\n    stateChanges += await deepDiff({\n      client,\n      address,\n      before: change.before,\n      after: change.after,\n      accessChain: [change.name],\n      type: change.type,\n    });\n  }\n  stateChanges += '```\\n';\n\n  return stateChanges;\n}\n\nexport async function deepDiff({\n  client,\n  address,\n  before,\n  after,\n  accessChain,\n  type,\n}: {\n  client: Client;\n  address: Hex;\n  before: Record<string, any> | string;\n  after: Record<string, any> | string;\n  accessChain: string[];\n  type?: string;\n}): Promise<string> {\n  if (type && accessChain.length === 1 && ['_reserves', 'assets', 'assetsSources'].includes(type)) {\n    accessChain[0] = await addAssetSymbol(client, accessChain[0] as Address);\n  }\n  if (typeof before !== 'object' || typeof after !== 'object') {\n    return `@@ ${type ? `${wrapInQuotes(type, true)} key ` : ''}${wrapInQuotes(\n      resolveChain(accessChain),\n      !!type,\n    )} @@\\n- ${await enhanceValue({client, address, value: before as string, type, accessChain})}\\n+ ${await enhanceValue(\n      {\n        client,\n        address,\n        value: after as string,\n        type,\n        accessChain,\n      },\n    )}\\n`;\n  }\n  /**\n   * Injecting the decoded configuration uint256 into the state diff\n   */\n\n  let result = '';\n  if (type === '_reserves' && (before.configuration?.data || after.configuration?.data)) {\n    before.configuration.data_decoded = getDecodedReserveData(address, before.configuration.data);\n    after.configuration.data_decoded = getDecodedReserveData(address, after.configuration.data);\n  }\n\n  if (type === '_eModeCategories') {\n    if (before.collateralBitmap !== undefined) {\n      before.collateralBitmap_decoded = (\n        await assetIndexesToAsset(\n          client,\n          address,\n          bitMapToIndexes(BigInt(before.collateralBitmap || 0)),\n        )\n      ).toString();\n      before.collateralBitmap = toBinaryString(BigInt(before.collateralBitmap || 0));\n      after.collateralBitmap_decoded = (\n        await assetIndexesToAsset(\n          client,\n          address,\n          bitMapToIndexes(BigInt(after.collateralBitmap || 0)),\n        )\n      ).toString();\n      after.collateralBitmap = toBinaryString(BigInt(after.collateralBitmap || 0));\n    }\n    if (before.borrowableBitmap !== undefined) {\n      before.borrowableBitmap_decoded = (\n        await assetIndexesToAsset(\n          client,\n          address,\n          bitMapToIndexes(BigInt(before.borrowableBitmap || 0)),\n        )\n      ).toString();\n      before.borrowableBitmap = toBinaryString(BigInt(before.borrowableBitmap || 0));\n      after.borrowableBitmap_decoded = (\n        await assetIndexesToAsset(\n          client,\n          address,\n          bitMapToIndexes(BigInt(after.borrowableBitmap || 0)),\n        )\n      ).toString();\n      after.borrowableBitmap = toBinaryString(BigInt(after.borrowableBitmap || 0));\n    }\n  }\n\n  if (type === '_streams') {\n    const asset = await findAsset(client, after.tokenAddress);\n    after.ratePerSecond = prettifyNumber({\n      decimals: asset.decimals,\n      value: after.ratePerSecond,\n      showDecimals: true,\n    });\n    after.remainingBalance = prettifyNumber({\n      showDecimals: true,\n      decimals: asset.decimals,\n      value: after.remainingBalance,\n    });\n  }\n\n  for (const key of Object.keys(before)) {\n    if (before[key] === after[key]) continue;\n\n    const newAccessChain = [...accessChain];\n    newAccessChain.push(key);\n    if (typeof before[key] === 'object') {\n      result += await deepDiff({\n        client,\n        address,\n        before: before[key],\n        after: after[key],\n        accessChain: newAccessChain,\n        type: type,\n      });\n    } else\n      result += `@@ ${type ? `${wrapInQuotes(type, true)} key ` : ''}${wrapInQuotes(\n        resolveChain([...accessChain, key]),\n        !!type,\n      )} @@\\n- ${await enhanceValue({\n        client,\n        address,\n        value: before[key],\n        type,\n        accessChain: newAccessChain,\n      })}\\n+ ${await enhanceValue({\n        client,\n        address,\n        value: after[key],\n        type,\n        accessChain: newAccessChain,\n      })}\\n`;\n  }\n  return result;\n}\n\nasync function enhanceValue({\n  client,\n  address,\n  value,\n  type,\n  accessChain,\n}: {\n  client: Client;\n  address: Hex;\n  value: string;\n  type?: string;\n  accessChain: string[];\n}) {\n  const key = accessChain[accessChain?.length - 1];\n  if (key === 'tokenAddress') {\n    return addAssetSymbol(client, value as Address);\n  }\n  // if(accessChain.includes(''))\n  if (type) {\n    // priceFeeds to enhance with current price\n    if (type === 'assetsSources') {\n      return addAssetPrice(client, value as Address);\n    }\n    // values to be rendered with asset decimals\n    if (\n      [\n        '_balances',\n        'balanceOf',\n        'balances',\n        'allowed',\n        '_allowances',\n        'allowance',\n        '_totalSupply',\n      ].includes(type)\n    ) {\n      const asset = await findAsset(client, address);\n      if (asset) return prettifyNumber({decimals: asset.decimals, value, showDecimals: true});\n    }\n    // values to be rendered with ray decimals\n    if (key && ['_reserves', '_eModeCategories'].includes(type)) {\n      if (['liquidityIndex', 'variableBorrowIndex'].includes(key))\n        return prettifyNumber({decimals: 27, value, showDecimals: true});\n      if (['liquidationThreshold', 'reserveFactor', 'liquidationProtocolFee', 'ltv'].includes(key))\n        return prettifyNumber({decimals: 2, value, suffix: '%', showDecimals: true});\n      if (\n        ['currentLiquidityRate', 'currentVariableBorrowRate', 'currentStableBorrowRate'].includes(\n          key,\n        )\n      )\n        return prettifyNumber({decimals: 25, value, suffix: '%', showDecimals: true});\n      if (['liquidationBonus'].includes(key))\n        return prettifyNumber({\n          decimals: 2,\n          value,\n          suffix: '%',\n          showDecimals: true,\n          patchedValue: BigInt(value) == 0n ? 0n : BigInt(value) - BigInt(1e4),\n        });\n    }\n  }\n  return value;\n}\n\nexport const checkStateChanges: ProposalCheck<any> = {\n  name: 'Reports all state changes',\n  async checkProposal(proposal, simulation, client) {\n    const info: string[] = [];\n    const warnings: string[] = [];\n    const errors: string[] = [];\n    if (!simulation.transaction.status) {\n      const txInfo = simulation.transaction.transaction_info;\n      const reason = txInfo.stack_trace ? txInfo.stack_trace[0].error_reason : 'unknown error';\n      errors.push(`Transaction reverted with reason: ${reason}`);\n    } else {\n      // State diffs in the simulation are an array, so first we organize them by address.\n      const stateDiffs = simulation.transaction.transaction_info.state_diff.reduce(\n        (diffs, diff) => {\n          // TODO: double check if that's safe to skip\n          if (!diff.raw?.[0]) return diffs;\n          const addr = getAddress(diff.raw[0].address);\n          if (!diffs[addr]) diffs[addr] = [diff];\n          else diffs[addr].push(diff);\n          return diffs;\n        },\n        {} as Record<string, StateDiff[]>,\n      );\n\n      if (!Object.keys(stateDiffs).length) {\n        warnings.push('No state changes detected');\n      } else {\n        let stateChanges = '';\n        const warnings = '';\n        // Parse state changes at each address\n        for (const [address, diffs] of Object.entries(stateDiffs)) {\n          const changes = getContractChanges(diffs);\n          stateChanges += await renderContractChanges(simulation, client, address as Hex, changes);\n        }\n\n        info.push(stateChanges);\n      }\n    }\n    return {info, warnings, errors};\n  },\n};\n\nfunction toBinaryString(value: bigint) {\n  return `0b` + value.toString(2);\n}\n","import * as pools from '@bgd-labs/aave-address-book';\nimport {getBits} from '../../utils/storageSlots';\n\nexport function getDecodedReserveData(contractAddress: string, data?: bigint) {\n  if (!data) return data;\n  if (\n    [\n      pools.AaveV2EthereumAMM.POOL,\n      pools.AaveV2Ethereum.POOL,\n      pools.AaveV2Polygon.POOL,\n      pools.AaveV2Avalanche.POOL,\n    ]\n      .map((address) => address.toLowerCase())\n      .includes(contractAddress.toLowerCase())\n  )\n    return decodeReserveDataV2(data);\n  return decodeReserveDataV3(data);\n}\n\nfunction decodeReserveDataV2(data: bigint) {\n  const ltv = getBits(data, 0n, 15n);\n  const liquidationThreshold = getBits(data, 16n, 31n);\n  const liquidationBonus = getBits(data, 32n, 47n);\n  const decimals = getBits(data, 48n, 55n);\n  const active = Number(getBits(data, 56n, 56n));\n  const frozen = Number(getBits(data, 57n, 57n));\n  const borrowingEnabled = Number(getBits(data, 58n, 58n));\n  const stableBorrowingEnabled = Number(getBits(data, 59n, 59n));\n  const reserveFactor = getBits(data, 64n, 79n);\n  return {\n    ltv,\n    liquidationThreshold,\n    liquidationBonus,\n    decimals,\n    active: !!active,\n    frozen: !!frozen,\n    borrowingEnabled: !!borrowingEnabled,\n    stableBorrowingEnabled: !!stableBorrowingEnabled,\n    reserveFactor,\n  };\n}\n\nexport function decodeReserveDataV3(data: bigint) {\n  const ltv = getBits(data, 0n, 15n);\n  const liquidationThreshold = getBits(data, 16n, 31n);\n  const liquidationBonus = getBits(data, 32n, 47n);\n  const decimals = getBits(data, 48n, 55n);\n  const active = Number(getBits(data, 56n, 56n));\n  const frozen = Number(getBits(data, 57n, 57n));\n  const borrowingEnabled = Number(getBits(data, 58n, 58n));\n  const stableRateBorrowingEnabled = Number(getBits(data, 59n, 59n));\n  const paused = Number(getBits(data, 60n, 60n));\n  const borrowingInIsolation = Number(getBits(data, 61n, 61n));\n  const siloedBorrowingEnabled = Number(getBits(data, 62n, 62n));\n  const flashloaningEnabled = Number(getBits(data, 63n, 63n));\n  const reserveFactor = getBits(data, 64n, 79n);\n  const borrowCap = getBits(data, 80n, 115n);\n  const supplyCap = getBits(data, 116n, 151n);\n  const liquidationProtocolFee = getBits(data, 152n, 167n);\n  const eModeCategory = getBits(data, 168n, 175n);\n  const unbackedMintCap = getBits(data, 176n, 211n);\n  const debtCeiling = getBits(data, 212n, 251n);\n  const virtualAccountingEnabled = Number(getBits(data, 252n, 252n));\n\n  return {\n    ltv,\n    liquidationThreshold,\n    liquidationBonus,\n    decimals,\n    active: !!active,\n    frozen: !!frozen,\n    borrowingEnabled: !!borrowingEnabled,\n    stableRateBorrowingEnabled,\n    paused,\n    borrowingInIsolation,\n    reserveFactor,\n    borrowCap,\n    supplyCap,\n    liquidationProtocolFee,\n    eModeCategory,\n    unbackedMintCap,\n    debtCeiling,\n    siloedBorrowingEnabled: !!siloedBorrowingEnabled,\n    flashloaningEnabled: !!flashloaningEnabled,\n    virtualAccountingEnabled: !!virtualAccountingEnabled,\n  };\n}\n","// Based on https://github.com/Uniswap/governance-seatbelt/blob/main/checks/check-targets-verified-etherscan.ts\n// adjusted for viem & aave governance v3\nimport type {Client, Hex} from 'viem';\nimport {getBytecode} from 'viem/actions';\nimport {type TenderlySimulationResponse} from '../../utils/tenderlyClient';\nimport {isKnownAddress} from '../utils/checkAddress';\nimport {flagKnownAddress} from '../utils/markdownUtils';\nimport type {ProposalCheck} from './types';\nimport {GetPayloadReturnType} from '@bgd-labs/aave-v3-governance-cache';\n\n/**\n * Check all targets with code are verified on Etherscan\n */\nexport const checkTargetsVerifiedEtherscan: ProposalCheck<GetPayloadReturnType> = {\n  name: 'Check all targets are verified on Etherscan',\n  async checkProposal(proposal, sim, client) {\n    const allTargets = proposal.payload.actions.map((action) => action.target);\n    const uniqueTargets = allTargets.filter((addr, i, targets) => targets.indexOf(addr) === i);\n    const info = await checkVerificationStatuses(sim, uniqueTargets, client);\n    return {info, warnings: [], errors: []};\n  },\n};\n\n/**\n * Check all touched contracts with code are verified on Etherscan\n */\nexport const checkTouchedContractsVerifiedEtherscan: ProposalCheck<any> = {\n  name: 'Check all touched contracts are verified on Etherscan',\n  async checkProposal(proposal, sim, client) {\n    const info = await checkVerificationStatuses(sim, sim.transaction.addresses, client);\n    return {info, warnings: [], errors: []};\n  },\n};\n\n/**\n * For a given simulation response, check verification status of a set of addresses\n */\nasync function checkVerificationStatuses(\n  sim: TenderlySimulationResponse,\n  addresses: Hex[],\n  client: Client,\n): Promise<string[]> {\n  const info: string[] = []; // prepare output\n  for (const addr of addresses) {\n    const isAddrKnown = isKnownAddress(addr, client.chain!.id);\n    const status = await checkVerificationStatus(sim, addr, client);\n    if (status === 'eoa') {\n      info.push(`- ${addr}: EOA (verification not applicable)`);\n    } else if (status === 'verified') {\n      const contract = getContract(sim, addr);\n      info.push(\n        `- ${addr}: Contract (verified) (${contract?.contract_name}) ${flagKnownAddress(isAddrKnown)}`,\n      );\n    } else {\n      info.push(`- ${addr}: Contract (not verified) ${flagKnownAddress(isAddrKnown)}`);\n    }\n  }\n  return info;\n}\n\n/**\n * For a given address, check if it's an EOA, a verified contract, or an unverified contract\n */\nasync function checkVerificationStatus(\n  sim: TenderlySimulationResponse,\n  addr: Hex,\n  client: Client,\n): Promise<'verified' | 'eoa' | 'unverified'> {\n  // If an address exists in the contracts array, it's verified on Etherscan\n  const contract = getContract(sim, addr);\n  if (contract) return 'verified';\n  const stateDiff = getStateDiff(sim, addr);\n  if (stateDiff) return 'unverified';\n  // Otherwise, check if there's code at the address. Addresses with code not in the contracts array are not verified\n  const code = await getBytecode(client, {address: addr});\n  return code === undefined ? 'eoa' : 'unverified';\n}\n\nfunction getContract(sim: TenderlySimulationResponse, addr: string) {\n  return sim.contracts.find((item) => item.address === addr);\n}\n\nfunction getStateDiff(sim: TenderlySimulationResponse, addr: string) {\n  return sim.transaction.transaction_info.state_diff?.find(\n    (diff) => diff.raw?.[0]?.address.toLowerCase() === addr.toLowerCase(),\n  );\n}\n","import type {Client} from 'viem';\nimport type {TenderlySimulationResponse} from '../utils/tenderlyClient';\nimport {checkLogs} from './checks/logs';\nimport {\n  checkTargetsNoSelfdestruct,\n  checkTouchedContractsNoSelfdestruct,\n} from './checks/selfDestruct';\nimport {checkStateChanges} from './checks/state';\nimport {\n  checkTargetsVerifiedEtherscan,\n  checkTouchedContractsVerifiedEtherscan,\n} from './checks/targetsVerified';\nimport {HUMAN_READABLE_PAYLOAD_STATE} from './payloadsController';\nimport {renderCheckResult, renderUnixTime, toTxLink} from './utils/markdownUtils';\nimport {GetPayloadReturnType} from '@bgd-labs/aave-v3-governance-cache';\n\ntype GenerateReportRequest = {\n  payloadId: number;\n  payloadInfo: GetPayloadReturnType;\n  simulation: TenderlySimulationResponse;\n  client: Client;\n};\n\nexport async function generateReport({\n  payloadId,\n  payloadInfo,\n  simulation,\n  client,\n}: GenerateReportRequest) {\n  const {\n    payload,\n    logs: {executedLog, queuedLog, createdLog},\n  } = payloadInfo;\n  // generate file header\n  let report = `## Payload ${payloadId} on ${client.chain!.name}\n\n- Simulation: [https://dashboard.tenderly.co/me/simulator/${\n    simulation.simulation.id\n  }](https://dashboard.tenderly.co/me/simulator/${simulation.simulation.id})\n- creator: ${payload.creator}\n- maximumAccessLevelRequired: ${payload.maximumAccessLevelRequired}\n- state: ${payload.state}(${(HUMAN_READABLE_PAYLOAD_STATE as any)[payload.state]})\n- actions: ${JSON.stringify(payload.actions, (key, value) => (typeof value === 'bigint' ? value.toString() : value))}\n- createdAt: [${renderUnixTime(payload.createdAt)}](${toTxLink(createdLog.transactionHash, false, client)})\\n`;\n  if (queuedLog) {\n    report += `- queuedAt: [${renderUnixTime(payload.queuedAt)}](${toTxLink(\n      queuedLog.transactionHash,\n      false,\n      client,\n    )})\\n`;\n    if (executedLog) {\n      report += `- executedAt: [${renderUnixTime(payload.executedAt)}, timestamp: ${executedLog.timestamp}, block: ${executedLog.blockNumber}](${toTxLink(\n        executedLog.transactionHash,\n        false,\n        client,\n      )})\\n`;\n    } else {\n      report += `- earliest execution at: [${renderUnixTime(\n        payload.queuedAt + payload.delay,\n      )}](https://www.epochconverter.com/countdown?q=${payload.queuedAt + payload.delay})\\n`;\n      const timestamp = Math.floor(new Date(simulation.transaction.timestamp).getTime() / 1000);\n      report += `- simulatedExecutionAt: ${renderUnixTime(\n        timestamp,\n      )}, timestamp: ${timestamp}, block: ${simulation.transaction.block_number}`;\n    }\n  }\n\n  report += '\\n';\n\n  const checks = [\n    checkStateChanges,\n    checkLogs,\n    checkTargetsVerifiedEtherscan,\n    checkTouchedContractsVerifiedEtherscan,\n    checkTargetsNoSelfdestruct,\n    checkTouchedContractsNoSelfdestruct,\n  ];\n\n  for (const check of checks) {\n    const result = await check.checkProposal(payloadInfo, simulation, client);\n    report += renderCheckResult(check, result);\n  }\n\n  return report;\n}\n","import type {Client} from 'viem';\nimport type {TenderlySimulationResponse} from '../utils/tenderlyClient';\nimport {checkLogs} from './checks/logs';\nimport {checkTouchedContractsNoSelfdestruct} from './checks/selfDestruct';\nimport {checkStateChanges} from './checks/state';\nimport {checkTouchedContractsVerifiedEtherscan} from './checks/targetsVerified';\nimport {HUMAN_READABLE_STATE} from './governance';\nimport {renderCheckResult, renderUnixTime, toTxLink} from './utils/markdownUtils';\nimport {GetProposalReturnType} from '@bgd-labs/aave-v3-governance-cache';\n\ntype GenerateReportRequest = {\n  proposalId: bigint;\n  proposalInfo: GetProposalReturnType;\n  simulation: TenderlySimulationResponse;\n  client: Client;\n  formattedPayloads?: string[];\n};\n\nexport async function generateProposalReport({\n  proposalId,\n  proposalInfo,\n  simulation,\n  client,\n  formattedPayloads,\n}: GenerateReportRequest) {\n  const {\n    proposal,\n    logs: {executedLog, queuedLog, createdLog, payloadSentLog, votingActivatedLog},\n    ipfs,\n  } = proposalInfo;\n  // generate file header\n  let report = `## Proposal ${proposalId}\n\n- Simulation: [https://dashboard.tenderly.co/me/simulator/${\n    simulation.simulation.id\n  }](https://dashboard.tenderly.co/me/simulator/${simulation.simulation.id})\n- state: ${HUMAN_READABLE_STATE[proposal.state as keyof typeof HUMAN_READABLE_STATE]}\n- creator: ${proposal.creator}\n- maximumAccessLevelRequired: ${proposal.accessLevel}\n- payloads: \n  ${\n    formattedPayloads\n      ? formattedPayloads.map((payload) => `  - ${payload}\\n`).join()\n      : JSON.stringify(proposal.payloads, (key, value) =>\n          typeof value === 'bigint' ? value.toString() : value,\n        )\n  }\n- createdAt: [${renderUnixTime(proposal.creationTime)}](${toTxLink(createdLog.transactionHash, false, client)})\\n`;\n  if (queuedLog) {\n    report += `- queuedAt: [${renderUnixTime(proposal.queuingTime)}](${toTxLink(\n      queuedLog.transactionHash,\n      false,\n      client,\n    )})\\n`;\n  }\n  if (executedLog) {\n    report += `- executedAt: [${renderUnixTime(executedLog.timestamp)}, timestamp: ${executedLog.timestamp}, block: ${executedLog.blockNumber}](${toTxLink(\n      executedLog.transactionHash,\n      false,\n      client,\n    )})\\n`;\n  } else {\n    const timestamp = Math.floor(new Date(simulation.transaction.timestamp).getTime() / 1000);\n    report += `- simulatedExecutionAt: ${renderUnixTime(\n      timestamp,\n    )}, timestamp: ${timestamp}, block: ${simulation.transaction.block_number}`;\n  }\n  report += '\\n';\n\n  report += `### Ipfs\n\n<details>\n  <summary>${ipfs?.title || 'problem fetching ipfs metadata'}</summary>\n  \n  ${ipfs?.description || 'problem fetching ipfs metadata'}\n</details>\\n\\n`;\n\n  // check if simulation was successful\n\n  const checks = [\n    checkStateChanges,\n    checkLogs,\n    checkTouchedContractsVerifiedEtherscan,\n    checkTouchedContractsNoSelfdestruct,\n  ];\n\n  for (const check of checks) {\n    const result = await check.checkProposal(proposalInfo, simulation, client);\n    report += renderCheckResult(check, result);\n  }\n\n  return report;\n}\n","import type {Client, Hex} from 'viem';\nimport {logInfo} from '../utils/logger';\nimport type {TenderlySimulationResponse} from '../utils/tenderlyClient';\nimport {generateReport} from './generatePayloadReport';\nimport {generateProposalReport} from './generateProposalReport';\nimport {getGovernance} from './governance';\nimport {getPayloadsController} from './payloadsController';\nimport {refreshCache} from '@bgd-labs/aave-v3-governance-cache/refreshCache';\nimport {GetPayloadReturnType} from '@bgd-labs/aave-v3-governance-cache';\nimport {customStorageProvider} from '@bgd-labs/aave-v3-governance-cache/customStorageProvider';\nimport {fileSystemStorageAdapter} from '@bgd-labs/aave-v3-governance-cache/fileSystemStorageAdapter';\nimport {getClient} from '../utils/getClient';\n\nconst localCacheAdapter = customStorageProvider(fileSystemStorageAdapter);\n/**\n * Reference implementation, unused\n * @param governanceAddress\n * @param client\n * @param proposalId\n * @returns\n */\nexport async function simulateProposal(governanceAddress: Hex, client: Client, proposalId: bigint) {\n  logInfo('General', `Running simulation for ${proposalId}`);\n  const governance = getGovernance({address: governanceAddress, client});\n  await refreshCache(localCacheAdapter);\n  const proposal = await localCacheAdapter.getProposal({\n    chainId: client.chain!.id,\n    governance: governanceAddress,\n    proposalId,\n  });\n  const result = await governance.simulateProposalExecutionOnTenderly(proposalId, proposal.logs);\n  console.log(\n    await generateProposalReport({\n      simulation: result,\n      proposalId: proposalId,\n      proposalInfo: proposal,\n      client,\n    }),\n  );\n  const payloads: {\n    payload: GetPayloadReturnType;\n    simulation: TenderlySimulationResponse;\n  }[] = [];\n  for (const payload of proposal.proposal.payloads) {\n    const client = getClient(Number(payload.chain))!;\n    const controllerContract = getPayloadsController(payload.payloadsController, client);\n    const cache = await localCacheAdapter.getPayload({\n      payloadId: payload.payloadId,\n      chainId: Number(payload.chain),\n      payloadsController: payload.payloadsController,\n    });\n    try {\n      const result = await controllerContract.simulatePayloadExecutionOnTenderly(\n        payload.payloadId,\n        cache.logs,\n      );\n      console.log(\n        await generateReport({\n          simulation: result,\n          payloadId: payload.payloadId,\n          payloadInfo: cache,\n          client: getClient(Number(payload.chain))!,\n        }),\n      );\n      payloads.push({payload: cache, simulation: result});\n    } catch (e) {\n      console.log('error simulating payload');\n      console.log(e);\n    }\n  }\n  return {proposal, payloads};\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport type {Command} from '@commander-js/extra-typings';\nimport bs58 from 'bs58';\nimport {validateAIPHeader} from '../ipfs/aipValidation';\nimport {logError} from '../utils/logger';\nimport {Hash} from '../ipfs/onlyHash';\n\n// https://ethereum.stackexchange.com/questions/44506/ipfs-hash-algorithm\nasync function getHash(data: string): Promise<string> {\n  return Hash.of(data);\n}\n\nasync function uploadToPinata(source: string) {\n  const PINATA_KEY = process.env.PINATA_KEY;\n  if (!PINATA_KEY) throw new Error('PINATA_KEY env must be set');\n  const PINATA_SECRET = process.env.PINATA_SECRET;\n  if (!PINATA_SECRET) throw new Error('PINATA_SECRET env must be set');\n  const data = new FormData();\n  data.append('file', new Blob([source]));\n  const res = await fetch('https://api.pinata.cloud/pinning/pinFileToIPFS', {\n    method: 'POST',\n    body: data,\n    headers: {\n      pinata_api_key: PINATA_KEY,\n      pinata_secret_api_key: PINATA_SECRET,\n    },\n  });\n\n  if (!res.ok) {\n    throw Error(await res.text());\n  }\n\n  const result = await res.json();\n\n  if (result.error) throw {message: result.error};\n  return result;\n}\n\nasync function uploadToTheGraph(source: string) {\n  const data = new FormData();\n  data.append('file', new Blob([source]));\n  const res = await fetch('https://api.thegraph.com/ipfs/api/v0/add', {\n    method: 'POST',\n    body: data,\n  });\n  return await res.json();\n}\n\nexport function addCommand(program: Command) {\n  program\n    .command('ipfs')\n    .description('generates the ipfs hash for specified source')\n    .argument('<source>')\n    .option('-u, --upload')\n    .option('--verbose')\n    .action(async (source, {upload, verbose}) => {\n      const filePath = path.join(process.cwd(), source);\n      if (!fs.existsSync(filePath)) {\n        logError('Upload', `Cannot find file at: ${filePath}`);\n        throw new Error('FILE_NOT_FOUND');\n      }\n      const content = fs.readFileSync(filePath, 'utf8');\n      validateAIPHeader(content);\n\n      const hash = await getHash(content);\n      const bs58Hash = `0x${Buffer.from(bs58.decode(hash)).slice(2).toString('hex')}`;\n\n      if (upload) {\n        const [pinata, thegraph] = await Promise.all([\n          uploadToPinata(content),\n          uploadToTheGraph(content),\n        ]);\n        if (verbose) {\n          console.log('pinata response', pinata);\n          console.log('thegraph response', thegraph);\n        }\n      }\n\n      // log as hex to console so foundry can read the content\n      console.log(bs58Hash);\n    });\n}\n","import matter from 'gray-matter';\nimport {type ZodError, z} from 'zod';\nimport {logError} from '../utils/logger';\n\nconst aipType = z.object({\n  discussions: z.string(),\n  title: z.string(),\n  author: z.string(),\n  snapshot: z.string().optional(),\n});\n\n/**\n * Validates the aip header and returns the aip title\n * @param content\n * @returns string aip title\n */\nexport function validateAIPHeader(content: string) {\n  const fm = matter(content);\n  try {\n    aipType.parse(fm.data);\n  } catch (e) {\n    logError('AIP', 'AIP validation failed');\n    (e as ZodError).issues.map((issue) =>\n      logError(\n        'AIP',\n        `On field ${issue.path[0]} received ${(issue as any).received} but expected ${(issue as any).expected}`,\n      ),\n    );\n    throw e;\n  }\n  return fm.data.title;\n}\n","// Based on https://github.com/alanshaw/ipfs-only-hash/blob/master/index.js\n// added types and updated dependencies\nimport {importer, ImporterOptions} from 'ipfs-unixfs-importer';\nimport {MemoryBlockstore} from 'blockstore-core';\n\nexport const Hash = {\n  of: async (content: string | Uint8Array, options: ImporterOptions = {}) => {\n    options = options || {};\n\n    if (typeof content === 'string') {\n      content = new TextEncoder().encode(content);\n    }\n\n    let lastCid;\n    for await (const {cid} of importer([{content}], new MemoryBlockstore(), {\n      cidVersion: 0,\n      rawLeaves: false,\n    })) {\n      lastCid = cid;\n    }\n\n    return `${lastCid}`;\n  },\n};\n","import fs from 'node:fs';\nimport type {Command} from '@commander-js/extra-typings';\nimport {generateCapoReport} from '../reports/capo-report';\nimport {readJsonFile, readJsonString} from '../utils/json';\n\nexport function addCommand(program: Command) {\n  program\n    .command('capo-report')\n    .description('generate a capo report')\n    .argument('<source>')\n    .option('-o, --out <string>', 'output path')\n    .option('--stringMode', 'expects input to be a string, not paths')\n    .action(async (_source, options) => {\n      const source = options.stringMode ? readJsonString(_source) : readJsonFile(_source);\n      const content = await generateCapoReport(source);\n      if (options.out) {\n        fs.writeFileSync(options.out, content);\n      } else {\n        console.log(content);\n      }\n    });\n}\n","import {formatUnits} from 'viem';\nimport {CapoSnapshot} from './snapshot-types';\n\ntype Price = {\n  sourcePrice: string;\n  referencePrice: string;\n  diff: string;\n  dayToDayGrowth: string;\n  smoothedGrowth: string;\n  date: string;\n};\n\nexport async function generateCapoReport(snapshot: CapoSnapshot) {\n  // map to dates and formatted values\n\n  let prices: Price[] = [];\n\n  let maxDayToDayGrowth = 0;\n  let maxSmoothedGrowth = 0;\n\n  for (const key in snapshot.prices) {\n    const price = snapshot.prices[key];\n\n    const sourcePrice = formatUnits(BigInt(price.sourcePrice), snapshot.decimals);\n    const referencePrice = formatUnits(BigInt(price.referencePrice), snapshot.decimals);\n    const dayToDayGrowth = (price.dayToDayGrowth / 100).toFixed(2);\n    const smoothedGrowth = (price.smoothedGrowth / 100).toFixed(2);\n    const diff = (\n      (100 * (Number(sourcePrice) - Number(referencePrice))) /\n      ((Number(sourcePrice) + Number(referencePrice)) / 2)\n    ).toFixed(2);\n\n    const formattedDate = formatTimestamp(price.timestamp);\n\n    prices.push({\n      sourcePrice,\n      referencePrice,\n      diff,\n      dayToDayGrowth,\n      smoothedGrowth,\n      date: formattedDate,\n    });\n\n    maxDayToDayGrowth = Math.max(maxDayToDayGrowth, price.dayToDayGrowth);\n    maxSmoothedGrowth = Math.max(maxSmoothedGrowth, price.smoothedGrowth);\n  }\n\n  prices = prices.slice(snapshot.minSnapshotDelay);\n\n  // generate md report\n  let content = '';\n  content += `# Capo Report\\n\\n`;\n  content += `| ${snapshot.source} | ${snapshot.reference} | Diff | Date | ${snapshot.minSnapshotDelay}-day growth in yearly % |\\n`;\n  content += `| --- | --- | --- | --- | --- |\\n`;\n  prices.forEach((price) => {\n    content += `| ${price.sourcePrice} | ${price.referencePrice} | ${price.diff}% | ${price.date} | ${price.smoothedGrowth}% |\\n`;\n  });\n  content += `\\n\\n`;\n  content += `* ${snapshot.minSnapshotDelay}-day growth is calculated as an annualized percentage relative to the value of the rate ${snapshot.minSnapshotDelay} days prior. \\n`;\n  const maxYearlyGrowthPercent = (snapshot.maxYearlyGrowthPercent / 100).toFixed(2);\n  const maxDayToDayGrowthPercent = (maxDayToDayGrowth / 100).toFixed(2);\n  const maxSmoothedGrowthPercent = (maxSmoothedGrowth / 100).toFixed(2);\n\n  content += `\\n\\n`;\n  content += `| Max Yearly % | Max Day-to-day yearly % | Max ${snapshot.minSnapshotDelay}-day yearly % | \\n`;\n  content += `| --- | --- | --- |\\n`;\n  content += `| ${maxYearlyGrowthPercent}% | ${maxDayToDayGrowthPercent}% | ${maxSmoothedGrowthPercent}% | \\n`;\n  content += `\\n\\n`;\n\n  content += `* Max day-to-day yearly % indicates the maximum growth between two emissions as an annualized percentage. \\n`;\n\n  return content;\n}\n\nfunction formatTimestamp(timestampInSec: number) {\n  // Create a new Date object from the timestamp in seconds\n  const date = new Date(timestampInSec * 1000);\n\n  // Use the Intl.DateTimeFormat API to format the date\n  return new Intl.DateTimeFormat('en-GB', {\n    year: 'numeric',\n    month: 'short',\n    day: '2-digit',\n    timeZone: 'GMT',\n  }).format(date);\n}\n"],"mappings":"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","names":["i","j","fs","path","key","diff","formatUnits","formatUnits","getContract","key","formatUnits","getContract","formatUnits","ORDER","OMIT_KEYS","diff","formatUnits","ORDER","OMIT_KEYS","diff","path","input","program","fs","path","path","http","AaveSafetyModule","AaveV3Ethereum","GovernanceV3Ethereum","fromHex","getContract","toHex","getBlock","http","createClient","fromHex","pad","toHex","createClient","http","toHex","pad","fromHex","GovernanceV3Ethereum","toHex","getBlock","getContract","getBlock","fromHex","toHex","AaveSafetyModule","AaveV3Ethereum","GovernanceV3Ethereum","addresses","address","encodeFunctionData","getContract","getBlock","getTransaction","SLOTS","getContract","getBlock","encodeFunctionData","getTransaction","addCommand","program","path","http","encodeAbiParameters","encodeFunctionData","getContract","getAddress","name","getAddress","getAddress","getAddress","addresses","addr","getAddress","diff","getAddress","warnings","getBytecode","addresses","getContract","getBytecode","diff","client","result","getBlock","customStorageProvider","fileSystemStorageAdapter","refreshCache","localCacheAdapter","customStorageProvider","fileSystemStorageAdapter","addCommand","program","refreshCache","localCacheAdapter","getContract","encodeFunctionData","getBlock","encodeAbiParameters","fs","path","addCommand","program","path","fs","bs58","fs","formatUnits","diff","addCommand","program","fs","addCommand"]}