"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod2) => function __require6() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));

  // node_modules/abitype/dist/esm/version.js
  var version;
  var init_version = __esm({
    "node_modules/abitype/dist/esm/version.js"() {
      "use strict";
      version = "1.0.6";
    }
  });

  // node_modules/abitype/dist/esm/errors.js
  var BaseError;
  var init_errors = __esm({
    "node_modules/abitype/dist/esm/errors.js"() {
      "use strict";
      init_version();
      BaseError = class _BaseError2 extends Error {
        constructor(shortMessage, args = {}) {
          const details = args.cause instanceof _BaseError2 ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
          const docsPath7 = args.cause instanceof _BaseError2 ? args.cause.docsPath || args.docsPath : args.docsPath;
          const message = [
            shortMessage || "An error occurred.",
            "",
            ...args.metaMessages ? [...args.metaMessages, ""] : [],
            ...docsPath7 ? [`Docs: https://abitype.dev${docsPath7}`] : [],
            ...details ? [`Details: ${details}`] : [],
            `Version: abitype@${version}`
          ].join("\n");
          super(message);
          Object.defineProperty(this, "details", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "docsPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "metaMessages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "shortMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AbiTypeError"
          });
          if (args.cause)
            this.cause = args.cause;
          this.details = details;
          this.docsPath = docsPath7;
          this.metaMessages = args.metaMessages;
          this.shortMessage = shortMessage;
        }
      };
    }
  });

  // node_modules/abitype/dist/esm/regex.js
  function execTyped(regex, string) {
    const match = regex.exec(string);
    return match?.groups;
  }
  var bytesRegex, integerRegex, isTupleRegex;
  var init_regex = __esm({
    "node_modules/abitype/dist/esm/regex.js"() {
      "use strict";
      bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
      integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
      isTupleRegex = /^\(.+?\).*?$/;
    }
  });

  // node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js
  function formatAbiParameter(abiParameter) {
    let type = abiParameter.type;
    if (tupleRegex.test(abiParameter.type) && "components" in abiParameter) {
      type = "(";
      const length = abiParameter.components.length;
      for (let i = 0; i < length; i++) {
        const component = abiParameter.components[i];
        type += formatAbiParameter(component);
        if (i < length - 1)
          type += ", ";
      }
      const result = execTyped(tupleRegex, abiParameter.type);
      type += `)${result?.array ?? ""}`;
      return formatAbiParameter({
        ...abiParameter,
        type
      });
    }
    if ("indexed" in abiParameter && abiParameter.indexed)
      type = `${type} indexed`;
    if (abiParameter.name)
      return `${type} ${abiParameter.name}`;
    return type;
  }
  var tupleRegex;
  var init_formatAbiParameter = __esm({
    "node_modules/abitype/dist/esm/human-readable/formatAbiParameter.js"() {
      "use strict";
      init_regex();
      tupleRegex = /^tuple(?<array>(\[(\d*)\])*)$/;
    }
  });

  // node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js
  function formatAbiParameters(abiParameters) {
    let params = "";
    const length = abiParameters.length;
    for (let i = 0; i < length; i++) {
      const abiParameter = abiParameters[i];
      params += formatAbiParameter(abiParameter);
      if (i !== length - 1)
        params += ", ";
    }
    return params;
  }
  var init_formatAbiParameters = __esm({
    "node_modules/abitype/dist/esm/human-readable/formatAbiParameters.js"() {
      "use strict";
      init_formatAbiParameter();
    }
  });

  // node_modules/abitype/dist/esm/human-readable/formatAbiItem.js
  function formatAbiItem(abiItem) {
    if (abiItem.type === "function")
      return `function ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== "nonpayable" ? ` ${abiItem.stateMutability}` : ""}${abiItem.outputs.length ? ` returns (${formatAbiParameters(abiItem.outputs)})` : ""}`;
    if (abiItem.type === "event")
      return `event ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;
    if (abiItem.type === "error")
      return `error ${abiItem.name}(${formatAbiParameters(abiItem.inputs)})`;
    if (abiItem.type === "constructor")
      return `constructor(${formatAbiParameters(abiItem.inputs)})${abiItem.stateMutability === "payable" ? " payable" : ""}`;
    if (abiItem.type === "fallback")
      return "fallback()";
    return "receive() external payable";
  }
  var init_formatAbiItem = __esm({
    "node_modules/abitype/dist/esm/human-readable/formatAbiItem.js"() {
      "use strict";
      init_formatAbiParameters();
    }
  });

  // node_modules/abitype/dist/esm/human-readable/runtime/signatures.js
  function isErrorSignature(signature) {
    return errorSignatureRegex.test(signature);
  }
  function execErrorSignature(signature) {
    return execTyped(errorSignatureRegex, signature);
  }
  function isEventSignature(signature) {
    return eventSignatureRegex.test(signature);
  }
  function execEventSignature(signature) {
    return execTyped(eventSignatureRegex, signature);
  }
  function isFunctionSignature(signature) {
    return functionSignatureRegex.test(signature);
  }
  function execFunctionSignature(signature) {
    return execTyped(functionSignatureRegex, signature);
  }
  function isStructSignature(signature) {
    return structSignatureRegex.test(signature);
  }
  function execStructSignature(signature) {
    return execTyped(structSignatureRegex, signature);
  }
  function isConstructorSignature(signature) {
    return constructorSignatureRegex.test(signature);
  }
  function execConstructorSignature(signature) {
    return execTyped(constructorSignatureRegex, signature);
  }
  function isFallbackSignature(signature) {
    return fallbackSignatureRegex.test(signature);
  }
  function isReceiveSignature(signature) {
    return receiveSignatureRegex.test(signature);
  }
  var errorSignatureRegex, eventSignatureRegex, functionSignatureRegex, structSignatureRegex, constructorSignatureRegex, fallbackSignatureRegex, receiveSignatureRegex, modifiers, eventModifiers, functionModifiers;
  var init_signatures = __esm({
    "node_modules/abitype/dist/esm/human-readable/runtime/signatures.js"() {
      "use strict";
      init_regex();
      errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
      eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
      functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
      structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;
      constructorSignatureRegex = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
      fallbackSignatureRegex = /^fallback\(\) external(?:\s(?<stateMutability>payable{1}))?$/;
      receiveSignatureRegex = /^receive\(\) external payable$/;
      modifiers = /* @__PURE__ */ new Set([
        "memory",
        "indexed",
        "storage",
        "calldata"
      ]);
      eventModifiers = /* @__PURE__ */ new Set(["indexed"]);
      functionModifiers = /* @__PURE__ */ new Set([
        "calldata",
        "memory",
        "storage"
      ]);
    }
  });

  // node_modules/abitype/dist/esm/human-readable/errors/abiItem.js
  var UnknownTypeError, UnknownSolidityTypeError;
  var init_abiItem = __esm({
    "node_modules/abitype/dist/esm/human-readable/errors/abiItem.js"() {
      "use strict";
      init_errors();
      UnknownTypeError = class extends BaseError {
        constructor({ type }) {
          super("Unknown type.", {
            metaMessages: [
              `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
            ]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "UnknownTypeError"
          });
        }
      };
      UnknownSolidityTypeError = class extends BaseError {
        constructor({ type }) {
          super("Unknown type.", {
            metaMessages: [`Type "${type}" is not a valid ABI type.`]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "UnknownSolidityTypeError"
          });
        }
      };
    }
  });

  // node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js
  var InvalidAbiParametersError, InvalidParameterError, SolidityProtectedKeywordError, InvalidModifierError, InvalidFunctionModifierError, InvalidAbiTypeParameterError;
  var init_abiParameter = __esm({
    "node_modules/abitype/dist/esm/human-readable/errors/abiParameter.js"() {
      "use strict";
      init_errors();
      InvalidAbiParametersError = class extends BaseError {
        constructor({ params }) {
          super("Failed to parse ABI parameters.", {
            details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,
            docsPath: "/api/human#parseabiparameters-1"
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidAbiParametersError"
          });
        }
      };
      InvalidParameterError = class extends BaseError {
        constructor({ param }) {
          super("Invalid ABI parameter.", {
            details: param
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidParameterError"
          });
        }
      };
      SolidityProtectedKeywordError = class extends BaseError {
        constructor({ param, name }) {
          super("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
              `"${name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
            ]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SolidityProtectedKeywordError"
          });
        }
      };
      InvalidModifierError = class extends BaseError {
        constructor({ param, type, modifier }) {
          super("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
              `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`
            ]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidModifierError"
          });
        }
      };
      InvalidFunctionModifierError = class extends BaseError {
        constructor({ param, type, modifier }) {
          super("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
              `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`,
              `Data location can only be specified for array, struct, or mapping types, but "${modifier}" was given.`
            ]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidFunctionModifierError"
          });
        }
      };
      InvalidAbiTypeParameterError = class extends BaseError {
        constructor({ abiParameter }) {
          super("Invalid ABI parameter.", {
            details: JSON.stringify(abiParameter, null, 2),
            metaMessages: ["ABI parameter type is invalid."]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidAbiTypeParameterError"
          });
        }
      };
    }
  });

  // node_modules/abitype/dist/esm/human-readable/errors/signature.js
  var InvalidSignatureError, UnknownSignatureError, InvalidStructSignatureError;
  var init_signature = __esm({
    "node_modules/abitype/dist/esm/human-readable/errors/signature.js"() {
      "use strict";
      init_errors();
      InvalidSignatureError = class extends BaseError {
        constructor({ signature, type }) {
          super(`Invalid ${type} signature.`, {
            details: signature
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidSignatureError"
          });
        }
      };
      UnknownSignatureError = class extends BaseError {
        constructor({ signature }) {
          super("Unknown signature.", {
            details: signature
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "UnknownSignatureError"
          });
        }
      };
      InvalidStructSignatureError = class extends BaseError {
        constructor({ signature }) {
          super("Invalid struct signature.", {
            details: signature,
            metaMessages: ["No properties exist."]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidStructSignatureError"
          });
        }
      };
    }
  });

  // node_modules/abitype/dist/esm/human-readable/errors/struct.js
  var CircularReferenceError;
  var init_struct = __esm({
    "node_modules/abitype/dist/esm/human-readable/errors/struct.js"() {
      "use strict";
      init_errors();
      CircularReferenceError = class extends BaseError {
        constructor({ type }) {
          super("Circular reference detected.", {
            metaMessages: [`Struct "${type}" is a circular reference.`]
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CircularReferenceError"
          });
        }
      };
    }
  });

  // node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js
  var InvalidParenthesisError;
  var init_splitParameters = __esm({
    "node_modules/abitype/dist/esm/human-readable/errors/splitParameters.js"() {
      "use strict";
      init_errors();
      InvalidParenthesisError = class extends BaseError {
        constructor({ current, depth }) {
          super("Unbalanced parentheses.", {
            metaMessages: [
              `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
            ],
            details: `Depth "${depth}"`
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InvalidParenthesisError"
          });
        }
      };
    }
  });

  // node_modules/abitype/dist/esm/human-readable/runtime/cache.js
  function getParameterCacheKey(param, type) {
    if (type)
      return `${type}:${param}`;
    return param;
  }
  var parameterCache;
  var init_cache = __esm({
    "node_modules/abitype/dist/esm/human-readable/runtime/cache.js"() {
      "use strict";
      parameterCache = /* @__PURE__ */ new Map([
        // Unnamed
        ["address", { type: "address" }],
        ["bool", { type: "bool" }],
        ["bytes", { type: "bytes" }],
        ["bytes32", { type: "bytes32" }],
        ["int", { type: "int256" }],
        ["int256", { type: "int256" }],
        ["string", { type: "string" }],
        ["uint", { type: "uint256" }],
        ["uint8", { type: "uint8" }],
        ["uint16", { type: "uint16" }],
        ["uint24", { type: "uint24" }],
        ["uint32", { type: "uint32" }],
        ["uint64", { type: "uint64" }],
        ["uint96", { type: "uint96" }],
        ["uint112", { type: "uint112" }],
        ["uint160", { type: "uint160" }],
        ["uint192", { type: "uint192" }],
        ["uint256", { type: "uint256" }],
        // Named
        ["address owner", { type: "address", name: "owner" }],
        ["address to", { type: "address", name: "to" }],
        ["bool approved", { type: "bool", name: "approved" }],
        ["bytes _data", { type: "bytes", name: "_data" }],
        ["bytes data", { type: "bytes", name: "data" }],
        ["bytes signature", { type: "bytes", name: "signature" }],
        ["bytes32 hash", { type: "bytes32", name: "hash" }],
        ["bytes32 r", { type: "bytes32", name: "r" }],
        ["bytes32 root", { type: "bytes32", name: "root" }],
        ["bytes32 s", { type: "bytes32", name: "s" }],
        ["string name", { type: "string", name: "name" }],
        ["string symbol", { type: "string", name: "symbol" }],
        ["string tokenURI", { type: "string", name: "tokenURI" }],
        ["uint tokenId", { type: "uint256", name: "tokenId" }],
        ["uint8 v", { type: "uint8", name: "v" }],
        ["uint256 balance", { type: "uint256", name: "balance" }],
        ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
        ["uint256 value", { type: "uint256", name: "value" }],
        // Indexed
        [
          "event:address indexed from",
          { type: "address", name: "from", indexed: true }
        ],
        ["event:address indexed to", { type: "address", name: "to", indexed: true }],
        [
          "event:uint indexed tokenId",
          { type: "uint256", name: "tokenId", indexed: true }
        ],
        [
          "event:uint256 indexed tokenId",
          { type: "uint256", name: "tokenId", indexed: true }
        ]
      ]);
    }
  });

  // node_modules/abitype/dist/esm/human-readable/runtime/utils.js
  function parseSignature(signature, structs = {}) {
    if (isFunctionSignature(signature)) {
      const match = execFunctionSignature(signature);
      if (!match)
        throw new InvalidSignatureError({ signature, type: "function" });
      const inputParams = splitParameters(match.parameters);
      const inputs = [];
      const inputLength = inputParams.length;
      for (let i = 0; i < inputLength; i++) {
        inputs.push(parseAbiParameter(inputParams[i], {
          modifiers: functionModifiers,
          structs,
          type: "function"
        }));
      }
      const outputs = [];
      if (match.returns) {
        const outputParams = splitParameters(match.returns);
        const outputLength = outputParams.length;
        for (let i = 0; i < outputLength; i++) {
          outputs.push(parseAbiParameter(outputParams[i], {
            modifiers: functionModifiers,
            structs,
            type: "function"
          }));
        }
      }
      return {
        name: match.name,
        type: "function",
        stateMutability: match.stateMutability ?? "nonpayable",
        inputs,
        outputs
      };
    }
    if (isEventSignature(signature)) {
      const match = execEventSignature(signature);
      if (!match)
        throw new InvalidSignatureError({ signature, type: "event" });
      const params = splitParameters(match.parameters);
      const abiParameters = [];
      const length = params.length;
      for (let i = 0; i < length; i++) {
        abiParameters.push(parseAbiParameter(params[i], {
          modifiers: eventModifiers,
          structs,
          type: "event"
        }));
      }
      return { name: match.name, type: "event", inputs: abiParameters };
    }
    if (isErrorSignature(signature)) {
      const match = execErrorSignature(signature);
      if (!match)
        throw new InvalidSignatureError({ signature, type: "error" });
      const params = splitParameters(match.parameters);
      const abiParameters = [];
      const length = params.length;
      for (let i = 0; i < length; i++) {
        abiParameters.push(parseAbiParameter(params[i], { structs, type: "error" }));
      }
      return { name: match.name, type: "error", inputs: abiParameters };
    }
    if (isConstructorSignature(signature)) {
      const match = execConstructorSignature(signature);
      if (!match)
        throw new InvalidSignatureError({ signature, type: "constructor" });
      const params = splitParameters(match.parameters);
      const abiParameters = [];
      const length = params.length;
      for (let i = 0; i < length; i++) {
        abiParameters.push(parseAbiParameter(params[i], { structs, type: "constructor" }));
      }
      return {
        type: "constructor",
        stateMutability: match.stateMutability ?? "nonpayable",
        inputs: abiParameters
      };
    }
    if (isFallbackSignature(signature))
      return { type: "fallback" };
    if (isReceiveSignature(signature))
      return {
        type: "receive",
        stateMutability: "payable"
      };
    throw new UnknownSignatureError({ signature });
  }
  function parseAbiParameter(param, options2) {
    const parameterCacheKey = getParameterCacheKey(param, options2?.type);
    if (parameterCache.has(parameterCacheKey))
      return parameterCache.get(parameterCacheKey);
    const isTuple = isTupleRegex.test(param);
    const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);
    if (!match)
      throw new InvalidParameterError({ param });
    if (match.name && isSolidityKeyword(match.name))
      throw new SolidityProtectedKeywordError({ param, name: match.name });
    const name = match.name ? { name: match.name } : {};
    const indexed = match.modifier === "indexed" ? { indexed: true } : {};
    const structs = options2?.structs ?? {};
    let type;
    let components = {};
    if (isTuple) {
      type = "tuple";
      const params = splitParameters(match.type);
      const components_ = [];
      const length = params.length;
      for (let i = 0; i < length; i++) {
        components_.push(parseAbiParameter(params[i], { structs }));
      }
      components = { components: components_ };
    } else if (match.type in structs) {
      type = "tuple";
      components = { components: structs[match.type] };
    } else if (dynamicIntegerRegex.test(match.type)) {
      type = `${match.type}256`;
    } else {
      type = match.type;
      if (!(options2?.type === "struct") && !isSolidityType(type))
        throw new UnknownSolidityTypeError({ type });
    }
    if (match.modifier) {
      if (!options2?.modifiers?.has?.(match.modifier))
        throw new InvalidModifierError({
          param,
          type: options2?.type,
          modifier: match.modifier
        });
      if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))
        throw new InvalidFunctionModifierError({
          param,
          type: options2?.type,
          modifier: match.modifier
        });
    }
    const abiParameter = {
      type: `${type}${match.array ?? ""}`,
      ...name,
      ...indexed,
      ...components
    };
    parameterCache.set(parameterCacheKey, abiParameter);
    return abiParameter;
  }
  function splitParameters(params, result = [], current = "", depth = 0) {
    const length = params.trim().length;
    for (let i = 0; i < length; i++) {
      const char = params[i];
      const tail = params.slice(i + 1);
      switch (char) {
        case ",":
          return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);
        case "(":
          return splitParameters(tail, result, `${current}${char}`, depth + 1);
        case ")":
          return splitParameters(tail, result, `${current}${char}`, depth - 1);
        default:
          return splitParameters(tail, result, `${current}${char}`, depth);
      }
    }
    if (current === "")
      return result;
    if (depth !== 0)
      throw new InvalidParenthesisError({ current, depth });
    result.push(current.trim());
    return result;
  }
  function isSolidityType(type) {
    return type === "address" || type === "bool" || type === "function" || type === "string" || bytesRegex.test(type) || integerRegex.test(type);
  }
  function isSolidityKeyword(name) {
    return name === "address" || name === "bool" || name === "function" || name === "string" || name === "tuple" || bytesRegex.test(name) || integerRegex.test(name) || protectedKeywordsRegex.test(name);
  }
  function isValidDataLocation(type, isArray) {
    return isArray || type === "bytes" || type === "string" || type === "tuple";
  }
  var abiParameterWithoutTupleRegex, abiParameterWithTupleRegex, dynamicIntegerRegex, protectedKeywordsRegex;
  var init_utils = __esm({
    "node_modules/abitype/dist/esm/human-readable/runtime/utils.js"() {
      "use strict";
      init_regex();
      init_abiItem();
      init_abiParameter();
      init_signature();
      init_splitParameters();
      init_cache();
      init_signatures();
      abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
      abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
      dynamicIntegerRegex = /^u?int$/;
      protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
    }
  });

  // node_modules/abitype/dist/esm/human-readable/runtime/structs.js
  function parseStructs(signatures) {
    const shallowStructs = {};
    const signaturesLength = signatures.length;
    for (let i = 0; i < signaturesLength; i++) {
      const signature = signatures[i];
      if (!isStructSignature(signature))
        continue;
      const match = execStructSignature(signature);
      if (!match)
        throw new InvalidSignatureError({ signature, type: "struct" });
      const properties = match.properties.split(";");
      const components = [];
      const propertiesLength = properties.length;
      for (let k = 0; k < propertiesLength; k++) {
        const property = properties[k];
        const trimmed = property.trim();
        if (!trimmed)
          continue;
        const abiParameter = parseAbiParameter(trimmed, {
          type: "struct"
        });
        components.push(abiParameter);
      }
      if (!components.length)
        throw new InvalidStructSignatureError({ signature });
      shallowStructs[match.name] = components;
    }
    const resolvedStructs = {};
    const entries = Object.entries(shallowStructs);
    const entriesLength = entries.length;
    for (let i = 0; i < entriesLength; i++) {
      const [name, parameters] = entries[i];
      resolvedStructs[name] = resolveStructs(parameters, shallowStructs);
    }
    return resolvedStructs;
  }
  function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
    const components = [];
    const length = abiParameters.length;
    for (let i = 0; i < length; i++) {
      const abiParameter = abiParameters[i];
      const isTuple = isTupleRegex.test(abiParameter.type);
      if (isTuple)
        components.push(abiParameter);
      else {
        const match = execTyped(typeWithoutTupleRegex, abiParameter.type);
        if (!match?.type)
          throw new InvalidAbiTypeParameterError({ abiParameter });
        const { array, type } = match;
        if (type in structs) {
          if (ancestors.has(type))
            throw new CircularReferenceError({ type });
          components.push({
            ...abiParameter,
            type: `tuple${array ?? ""}`,
            components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))
          });
        } else {
          if (isSolidityType(type))
            components.push(abiParameter);
          else
            throw new UnknownTypeError({ type });
        }
      }
    }
    return components;
  }
  var typeWithoutTupleRegex;
  var init_structs = __esm({
    "node_modules/abitype/dist/esm/human-readable/runtime/structs.js"() {
      "use strict";
      init_regex();
      init_abiItem();
      init_abiParameter();
      init_signature();
      init_struct();
      init_signatures();
      init_utils();
      typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;
    }
  });

  // node_modules/abitype/dist/esm/human-readable/parseAbi.js
  function parseAbi(signatures) {
    const structs = parseStructs(signatures);
    const abi = [];
    const length = signatures.length;
    for (let i = 0; i < length; i++) {
      const signature = signatures[i];
      if (isStructSignature(signature))
        continue;
      abi.push(parseSignature(signature, structs));
    }
    return abi;
  }
  var init_parseAbi = __esm({
    "node_modules/abitype/dist/esm/human-readable/parseAbi.js"() {
      "use strict";
      init_signatures();
      init_structs();
      init_utils();
    }
  });

  // node_modules/abitype/dist/esm/human-readable/parseAbiParameters.js
  function parseAbiParameters(params) {
    const abiParameters = [];
    if (typeof params === "string") {
      const parameters = splitParameters(params);
      const length = parameters.length;
      for (let i = 0; i < length; i++) {
        abiParameters.push(parseAbiParameter(parameters[i], { modifiers }));
      }
    } else {
      const structs = parseStructs(params);
      const length = params.length;
      for (let i = 0; i < length; i++) {
        const signature = params[i];
        if (isStructSignature(signature))
          continue;
        const parameters = splitParameters(signature);
        const length2 = parameters.length;
        for (let k = 0; k < length2; k++) {
          abiParameters.push(parseAbiParameter(parameters[k], { modifiers, structs }));
        }
      }
    }
    if (abiParameters.length === 0)
      throw new InvalidAbiParametersError({ params });
    return abiParameters;
  }
  var init_parseAbiParameters = __esm({
    "node_modules/abitype/dist/esm/human-readable/parseAbiParameters.js"() {
      "use strict";
      init_abiParameter();
      init_signatures();
      init_structs();
      init_utils();
      init_utils();
    }
  });

  // node_modules/abitype/dist/esm/exports/index.js
  var init_exports = __esm({
    "node_modules/abitype/dist/esm/exports/index.js"() {
      "use strict";
      init_formatAbiItem();
      init_parseAbi();
      init_parseAbiParameters();
    }
  });

  // node_modules/viem/_esm/utils/abi/formatAbiItem.js
  function formatAbiItem2(abiItem, { includeName = false } = {}) {
    if (abiItem.type !== "function" && abiItem.type !== "event" && abiItem.type !== "error")
      throw new InvalidDefinitionTypeError(abiItem.type);
    return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`;
  }
  function formatAbiParams(params, { includeName = false } = {}) {
    if (!params)
      return "";
    return params.map((param) => formatAbiParam(param, { includeName })).join(includeName ? ", " : ",");
  }
  function formatAbiParam(param, { includeName }) {
    if (param.type.startsWith("tuple")) {
      return `(${formatAbiParams(param.components, { includeName })})${param.type.slice("tuple".length)}`;
    }
    return param.type + (includeName && param.name ? ` ${param.name}` : "");
  }
  var init_formatAbiItem2 = __esm({
    "node_modules/viem/_esm/utils/abi/formatAbiItem.js"() {
      "use strict";
      init_abi();
    }
  });

  // node_modules/viem/_esm/utils/data/isHex.js
  function isHex(value, { strict = true } = {}) {
    if (!value)
      return false;
    if (typeof value !== "string")
      return false;
    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith("0x");
  }
  var init_isHex = __esm({
    "node_modules/viem/_esm/utils/data/isHex.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/data/size.js
  function size(value) {
    if (isHex(value, { strict: false }))
      return Math.ceil((value.length - 2) / 2);
    return value.length;
  }
  var init_size = __esm({
    "node_modules/viem/_esm/utils/data/size.js"() {
      "use strict";
      init_isHex();
    }
  });

  // node_modules/viem/_esm/errors/version.js
  var version2;
  var init_version2 = __esm({
    "node_modules/viem/_esm/errors/version.js"() {
      "use strict";
      version2 = "2.21.48";
    }
  });

  // node_modules/viem/_esm/errors/base.js
  function walk(err, fn) {
    if (fn?.(err))
      return err;
    if (err && typeof err === "object" && "cause" in err && err.cause !== void 0)
      return walk(err.cause, fn);
    return fn ? null : err;
  }
  var errorConfig, BaseError2;
  var init_base = __esm({
    "node_modules/viem/_esm/errors/base.js"() {
      "use strict";
      init_version2();
      errorConfig = {
        getDocsUrl: ({ docsBaseUrl, docsPath: docsPath7 = "", docsSlug }) => docsPath7 ? `${docsBaseUrl ?? "https://viem.sh"}${docsPath7}${docsSlug ? `#${docsSlug}` : ""}` : void 0,
        version: `viem@${version2}`
      };
      BaseError2 = class _BaseError2 extends Error {
        constructor(shortMessage, args = {}) {
          const details = (() => {
            if (args.cause instanceof _BaseError2)
              return args.cause.details;
            if (args.cause?.message)
              return args.cause.message;
            return args.details;
          })();
          const docsPath7 = (() => {
            if (args.cause instanceof _BaseError2)
              return args.cause.docsPath || args.docsPath;
            return args.docsPath;
          })();
          const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath: docsPath7 });
          const message = [
            shortMessage || "An error occurred.",
            "",
            ...args.metaMessages ? [...args.metaMessages, ""] : [],
            ...docsUrl ? [`Docs: ${docsUrl}`] : [],
            ...details ? [`Details: ${details}`] : [],
            ...errorConfig.version ? [`Version: ${errorConfig.version}`] : []
          ].join("\n");
          super(message, args.cause ? { cause: args.cause } : void 0);
          Object.defineProperty(this, "details", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "docsPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "metaMessages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "shortMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "BaseError"
          });
          this.details = details;
          this.docsPath = docsPath7;
          this.metaMessages = args.metaMessages;
          this.name = args.name ?? this.name;
          this.shortMessage = shortMessage;
          this.version = version2;
        }
        walk(fn) {
          return walk(this, fn);
        }
      };
    }
  });

  // node_modules/viem/_esm/errors/abi.js
  var AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError, AbiDecodingDataSizeTooSmallError, AbiDecodingZeroDataError, AbiEncodingArrayLengthMismatchError, AbiEncodingBytesSizeMismatchError, AbiEncodingLengthMismatchError, AbiErrorSignatureNotFoundError, AbiEventSignatureEmptyTopicsError, AbiEventSignatureNotFoundError, AbiEventNotFoundError, AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, AbiItemAmbiguityError, BytesSizeMismatchError, DecodeLogDataMismatch, DecodeLogTopicsMismatch, InvalidAbiEncodingTypeError, InvalidAbiDecodingTypeError, InvalidArrayError, InvalidDefinitionTypeError, UnsupportedPackedAbiType;
  var init_abi = __esm({
    "node_modules/viem/_esm/errors/abi.js"() {
      "use strict";
      init_formatAbiItem2();
      init_size();
      init_base();
      AbiConstructorNotFoundError = class extends BaseError2 {
        constructor({ docsPath: docsPath7 }) {
          super([
            "A constructor was not found on the ABI.",
            "Make sure you are using the correct ABI and that the constructor exists on it."
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiConstructorNotFoundError"
          });
        }
      };
      AbiConstructorParamsNotFoundError = class extends BaseError2 {
        constructor({ docsPath: docsPath7 }) {
          super([
            "Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.",
            "Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists."
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiConstructorParamsNotFoundError"
          });
        }
      };
      AbiDecodingDataSizeTooSmallError = class extends BaseError2 {
        constructor({ data, params, size: size5 }) {
          super([`Data size of ${size5} bytes is too small for given parameters.`].join("\n"), {
            metaMessages: [
              `Params: (${formatAbiParams(params, { includeName: true })})`,
              `Data:   ${data} (${size5} bytes)`
            ],
            name: "AbiDecodingDataSizeTooSmallError"
          });
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.data = data;
          this.params = params;
          this.size = size5;
        }
      };
      AbiDecodingZeroDataError = class extends BaseError2 {
        constructor() {
          super('Cannot decode zero data ("0x") with ABI parameters.', {
            name: "AbiDecodingZeroDataError"
          });
        }
      };
      AbiEncodingArrayLengthMismatchError = class extends BaseError2 {
        constructor({ expectedLength, givenLength, type }) {
          super([
            `ABI encoding array length mismatch for type ${type}.`,
            `Expected length: ${expectedLength}`,
            `Given length: ${givenLength}`
          ].join("\n"), { name: "AbiEncodingArrayLengthMismatchError" });
        }
      };
      AbiEncodingBytesSizeMismatchError = class extends BaseError2 {
        constructor({ expectedSize, value }) {
          super(`Size of bytes "${value}" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`, { name: "AbiEncodingBytesSizeMismatchError" });
        }
      };
      AbiEncodingLengthMismatchError = class extends BaseError2 {
        constructor({ expectedLength, givenLength }) {
          super([
            "ABI encoding params/values length mismatch.",
            `Expected length (params): ${expectedLength}`,
            `Given length (values): ${givenLength}`
          ].join("\n"), { name: "AbiEncodingLengthMismatchError" });
        }
      };
      AbiErrorSignatureNotFoundError = class extends BaseError2 {
        constructor(signature, { docsPath: docsPath7 }) {
          super([
            `Encoded error signature "${signature}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the error exists on it.",
            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiErrorSignatureNotFoundError"
          });
          Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.signature = signature;
        }
      };
      AbiEventSignatureEmptyTopicsError = class extends BaseError2 {
        constructor({ docsPath: docsPath7 }) {
          super("Cannot extract event signature from empty topics.", {
            docsPath: docsPath7,
            name: "AbiEventSignatureEmptyTopicsError"
          });
        }
      };
      AbiEventSignatureNotFoundError = class extends BaseError2 {
        constructor(signature, { docsPath: docsPath7 }) {
          super([
            `Encoded event signature "${signature}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the event exists on it.",
            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiEventSignatureNotFoundError"
          });
        }
      };
      AbiEventNotFoundError = class extends BaseError2 {
        constructor(eventName, { docsPath: docsPath7 } = {}) {
          super([
            `Event ${eventName ? `"${eventName}" ` : ""}not found on ABI.`,
            "Make sure you are using the correct ABI and that the event exists on it."
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiEventNotFoundError"
          });
        }
      };
      AbiFunctionNotFoundError = class extends BaseError2 {
        constructor(functionName, { docsPath: docsPath7 } = {}) {
          super([
            `Function ${functionName ? `"${functionName}" ` : ""}not found on ABI.`,
            "Make sure you are using the correct ABI and that the function exists on it."
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiFunctionNotFoundError"
          });
        }
      };
      AbiFunctionOutputsNotFoundError = class extends BaseError2 {
        constructor(functionName, { docsPath: docsPath7 }) {
          super([
            `Function "${functionName}" does not contain any \`outputs\` on ABI.`,
            "Cannot decode function result without knowing what the parameter types are.",
            "Make sure you are using the correct ABI and that the function exists on it."
          ].join("\n"), {
            docsPath: docsPath7,
            name: "AbiFunctionOutputsNotFoundError"
          });
        }
      };
      AbiItemAmbiguityError = class extends BaseError2 {
        constructor(x, y) {
          super("Found ambiguous types in overloaded ABI items.", {
            metaMessages: [
              `\`${x.type}\` in \`${formatAbiItem2(x.abiItem)}\`, and`,
              `\`${y.type}\` in \`${formatAbiItem2(y.abiItem)}\``,
              "",
              "These types encode differently and cannot be distinguished at runtime.",
              "Remove one of the ambiguous items in the ABI."
            ],
            name: "AbiItemAmbiguityError"
          });
        }
      };
      BytesSizeMismatchError = class extends BaseError2 {
        constructor({ expectedSize, givenSize }) {
          super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {
            name: "BytesSizeMismatchError"
          });
        }
      };
      DecodeLogDataMismatch = class extends BaseError2 {
        constructor({ abiItem, data, params, size: size5 }) {
          super([
            `Data size of ${size5} bytes is too small for non-indexed event parameters.`
          ].join("\n"), {
            metaMessages: [
              `Params: (${formatAbiParams(params, { includeName: true })})`,
              `Data:   ${data} (${size5} bytes)`
            ],
            name: "DecodeLogDataMismatch"
          });
          Object.defineProperty(this, "abiItem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "params", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "size", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.abiItem = abiItem;
          this.data = data;
          this.params = params;
          this.size = size5;
        }
      };
      DecodeLogTopicsMismatch = class extends BaseError2 {
        constructor({ abiItem, param }) {
          super([
            `Expected a topic for indexed event parameter${param.name ? ` "${param.name}"` : ""} on event "${formatAbiItem2(abiItem, { includeName: true })}".`
          ].join("\n"), { name: "DecodeLogTopicsMismatch" });
          Object.defineProperty(this, "abiItem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.abiItem = abiItem;
        }
      };
      InvalidAbiEncodingTypeError = class extends BaseError2 {
        constructor(type, { docsPath: docsPath7 }) {
          super([
            `Type "${type}" is not a valid encoding type.`,
            "Please provide a valid ABI type."
          ].join("\n"), { docsPath: docsPath7, name: "InvalidAbiEncodingType" });
        }
      };
      InvalidAbiDecodingTypeError = class extends BaseError2 {
        constructor(type, { docsPath: docsPath7 }) {
          super([
            `Type "${type}" is not a valid decoding type.`,
            "Please provide a valid ABI type."
          ].join("\n"), { docsPath: docsPath7, name: "InvalidAbiDecodingType" });
        }
      };
      InvalidArrayError = class extends BaseError2 {
        constructor(value) {
          super([`Value "${value}" is not a valid array.`].join("\n"), {
            name: "InvalidArrayError"
          });
        }
      };
      InvalidDefinitionTypeError = class extends BaseError2 {
        constructor(type) {
          super([
            `"${type}" is not a valid definition type.`,
            'Valid types: "function", "event", "error"'
          ].join("\n"), { name: "InvalidDefinitionTypeError" });
        }
      };
      UnsupportedPackedAbiType = class extends BaseError2 {
        constructor(type) {
          super(`Type "${type}" is not supported for packed encoding.`, {
            name: "UnsupportedPackedAbiType"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/errors/data.js
  var SliceOffsetOutOfBoundsError, SizeExceedsPaddingSizeError, InvalidBytesLengthError;
  var init_data = __esm({
    "node_modules/viem/_esm/errors/data.js"() {
      "use strict";
      init_base();
      SliceOffsetOutOfBoundsError = class extends BaseError2 {
        constructor({ offset, position, size: size5 }) {
          super(`Slice ${position === "start" ? "starting" : "ending"} at offset "${offset}" is out-of-bounds (size: ${size5}).`, { name: "SliceOffsetOutOfBoundsError" });
        }
      };
      SizeExceedsPaddingSizeError = class extends BaseError2 {
        constructor({ size: size5, targetSize, type }) {
          super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size5}) exceeds padding size (${targetSize}).`, { name: "SizeExceedsPaddingSizeError" });
        }
      };
      InvalidBytesLengthError = class extends BaseError2 {
        constructor({ size: size5, targetSize, type }) {
          super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size5} ${type} long.`, { name: "InvalidBytesLengthError" });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/data/pad.js
  function pad(hexOrBytes, { dir, size: size5 = 32 } = {}) {
    if (typeof hexOrBytes === "string")
      return padHex(hexOrBytes, { dir, size: size5 });
    return padBytes(hexOrBytes, { dir, size: size5 });
  }
  function padHex(hex_, { dir, size: size5 = 32 } = {}) {
    if (size5 === null)
      return hex_;
    const hex = hex_.replace("0x", "");
    if (hex.length > size5 * 2)
      throw new SizeExceedsPaddingSizeError({
        size: Math.ceil(hex.length / 2),
        targetSize: size5,
        type: "hex"
      });
    return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size5 * 2, "0")}`;
  }
  function padBytes(bytes4, { dir, size: size5 = 32 } = {}) {
    if (size5 === null)
      return bytes4;
    if (bytes4.length > size5)
      throw new SizeExceedsPaddingSizeError({
        size: bytes4.length,
        targetSize: size5,
        type: "bytes"
      });
    const paddedBytes = new Uint8Array(size5);
    for (let i = 0; i < size5; i++) {
      const padEnd = dir === "right";
      paddedBytes[padEnd ? i : size5 - i - 1] = bytes4[padEnd ? i : bytes4.length - i - 1];
    }
    return paddedBytes;
  }
  var init_pad = __esm({
    "node_modules/viem/_esm/utils/data/pad.js"() {
      "use strict";
      init_data();
    }
  });

  // node_modules/viem/_esm/errors/encoding.js
  var IntegerOutOfRangeError, InvalidBytesBooleanError, InvalidHexBooleanError, InvalidHexValueError, SizeOverflowError;
  var init_encoding = __esm({
    "node_modules/viem/_esm/errors/encoding.js"() {
      "use strict";
      init_base();
      IntegerOutOfRangeError = class extends BaseError2 {
        constructor({ max, min, signed, size: size5, value }) {
          super(`Number "${value}" is not in safe ${size5 ? `${size5 * 8}-bit ${signed ? "signed" : "unsigned"} ` : ""}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: "IntegerOutOfRangeError" });
        }
      };
      InvalidBytesBooleanError = class extends BaseError2 {
        constructor(bytes4) {
          super(`Bytes value "${bytes4}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {
            name: "InvalidBytesBooleanError"
          });
        }
      };
      InvalidHexBooleanError = class extends BaseError2 {
        constructor(hex) {
          super(`Hex value "${hex}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`, { name: "InvalidHexBooleanError" });
        }
      };
      InvalidHexValueError = class extends BaseError2 {
        constructor(value) {
          super(`Hex value "${value}" is an odd length (${value.length}). It must be an even length.`, { name: "InvalidHexValueError" });
        }
      };
      SizeOverflowError = class extends BaseError2 {
        constructor({ givenSize, maxSize }) {
          super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: "SizeOverflowError" });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/data/trim.js
  function trim(hexOrBytes, { dir = "left" } = {}) {
    let data = typeof hexOrBytes === "string" ? hexOrBytes.replace("0x", "") : hexOrBytes;
    let sliceLength = 0;
    for (let i = 0; i < data.length - 1; i++) {
      if (data[dir === "left" ? i : data.length - i - 1].toString() === "0")
        sliceLength++;
      else
        break;
    }
    data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
    if (typeof hexOrBytes === "string") {
      if (data.length === 1 && dir === "right")
        data = `${data}0`;
      return `0x${data.length % 2 === 1 ? `0${data}` : data}`;
    }
    return data;
  }
  var init_trim = __esm({
    "node_modules/viem/_esm/utils/data/trim.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/encoding/fromHex.js
  function assertSize(hexOrBytes, { size: size5 }) {
    if (size(hexOrBytes) > size5)
      throw new SizeOverflowError({
        givenSize: size(hexOrBytes),
        maxSize: size5
      });
  }
  function fromHex(hex, toOrOpts) {
    const opts = typeof toOrOpts === "string" ? { to: toOrOpts } : toOrOpts;
    const to = opts.to;
    if (to === "number")
      return hexToNumber(hex, opts);
    if (to === "bigint")
      return hexToBigInt(hex, opts);
    if (to === "string")
      return hexToString(hex, opts);
    if (to === "boolean")
      return hexToBool(hex, opts);
    return hexToBytes(hex, opts);
  }
  function hexToBigInt(hex, opts = {}) {
    const { signed } = opts;
    if (opts.size)
      assertSize(hex, { size: opts.size });
    const value = BigInt(hex);
    if (!signed)
      return value;
    const size5 = (hex.length - 2) / 2;
    const max = (1n << BigInt(size5) * 8n - 1n) - 1n;
    if (value <= max)
      return value;
    return value - BigInt(`0x${"f".padStart(size5 * 2, "f")}`) - 1n;
  }
  function hexToBool(hex_, opts = {}) {
    let hex = hex_;
    if (opts.size) {
      assertSize(hex, { size: opts.size });
      hex = trim(hex);
    }
    if (trim(hex) === "0x00")
      return false;
    if (trim(hex) === "0x01")
      return true;
    throw new InvalidHexBooleanError(hex);
  }
  function hexToNumber(hex, opts = {}) {
    return Number(hexToBigInt(hex, opts));
  }
  function hexToString(hex, opts = {}) {
    let bytes4 = hexToBytes(hex);
    if (opts.size) {
      assertSize(bytes4, { size: opts.size });
      bytes4 = trim(bytes4, { dir: "right" });
    }
    return new TextDecoder().decode(bytes4);
  }
  var init_fromHex = __esm({
    "node_modules/viem/_esm/utils/encoding/fromHex.js"() {
      "use strict";
      init_encoding();
      init_size();
      init_trim();
      init_toBytes();
    }
  });

  // node_modules/viem/_esm/utils/encoding/toHex.js
  function toHex(value, opts = {}) {
    if (typeof value === "number" || typeof value === "bigint")
      return numberToHex(value, opts);
    if (typeof value === "string") {
      return stringToHex(value, opts);
    }
    if (typeof value === "boolean")
      return boolToHex(value, opts);
    return bytesToHex(value, opts);
  }
  function boolToHex(value, opts = {}) {
    const hex = `0x${Number(value)}`;
    if (typeof opts.size === "number") {
      assertSize(hex, { size: opts.size });
      return pad(hex, { size: opts.size });
    }
    return hex;
  }
  function bytesToHex(value, opts = {}) {
    let string = "";
    for (let i = 0; i < value.length; i++) {
      string += hexes[value[i]];
    }
    const hex = `0x${string}`;
    if (typeof opts.size === "number") {
      assertSize(hex, { size: opts.size });
      return pad(hex, { dir: "right", size: opts.size });
    }
    return hex;
  }
  function numberToHex(value_, opts = {}) {
    const { signed, size: size5 } = opts;
    const value = BigInt(value_);
    let maxValue;
    if (size5) {
      if (signed)
        maxValue = (1n << BigInt(size5) * 8n - 1n) - 1n;
      else
        maxValue = 2n ** (BigInt(size5) * 8n) - 1n;
    } else if (typeof value_ === "number") {
      maxValue = BigInt(Number.MAX_SAFE_INTEGER);
    }
    const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
    if (maxValue && value > maxValue || value < minValue) {
      const suffix = typeof value_ === "bigint" ? "n" : "";
      throw new IntegerOutOfRangeError({
        max: maxValue ? `${maxValue}${suffix}` : void 0,
        min: `${minValue}${suffix}`,
        signed,
        size: size5,
        value: `${value_}${suffix}`
      });
    }
    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size5 * 8)) + BigInt(value) : value).toString(16)}`;
    if (size5)
      return pad(hex, { size: size5 });
    return hex;
  }
  function stringToHex(value_, opts = {}) {
    const value = encoder.encode(value_);
    return bytesToHex(value, opts);
  }
  var hexes, encoder;
  var init_toHex = __esm({
    "node_modules/viem/_esm/utils/encoding/toHex.js"() {
      "use strict";
      init_encoding();
      init_pad();
      init_fromHex();
      hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
      encoder = /* @__PURE__ */ new TextEncoder();
    }
  });

  // node_modules/viem/_esm/utils/encoding/toBytes.js
  function toBytes(value, opts = {}) {
    if (typeof value === "number" || typeof value === "bigint")
      return numberToBytes(value, opts);
    if (typeof value === "boolean")
      return boolToBytes(value, opts);
    if (isHex(value))
      return hexToBytes(value, opts);
    return stringToBytes(value, opts);
  }
  function boolToBytes(value, opts = {}) {
    const bytes4 = new Uint8Array(1);
    bytes4[0] = Number(value);
    if (typeof opts.size === "number") {
      assertSize(bytes4, { size: opts.size });
      return pad(bytes4, { size: opts.size });
    }
    return bytes4;
  }
  function charCodeToBase16(char) {
    if (char >= charCodeMap.zero && char <= charCodeMap.nine)
      return char - charCodeMap.zero;
    if (char >= charCodeMap.A && char <= charCodeMap.F)
      return char - (charCodeMap.A - 10);
    if (char >= charCodeMap.a && char <= charCodeMap.f)
      return char - (charCodeMap.a - 10);
    return void 0;
  }
  function hexToBytes(hex_, opts = {}) {
    let hex = hex_;
    if (opts.size) {
      assertSize(hex, { size: opts.size });
      hex = pad(hex, { dir: "right", size: opts.size });
    }
    let hexString = hex.slice(2);
    if (hexString.length % 2)
      hexString = `0${hexString}`;
    const length = hexString.length / 2;
    const bytes4 = new Uint8Array(length);
    for (let index2 = 0, j = 0; index2 < length; index2++) {
      const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));
      const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));
      if (nibbleLeft === void 0 || nibbleRight === void 0) {
        throw new BaseError2(`Invalid byte sequence ("${hexString[j - 2]}${hexString[j - 1]}" in "${hexString}").`);
      }
      bytes4[index2] = nibbleLeft * 16 + nibbleRight;
    }
    return bytes4;
  }
  function numberToBytes(value, opts) {
    const hex = numberToHex(value, opts);
    return hexToBytes(hex);
  }
  function stringToBytes(value, opts = {}) {
    const bytes4 = encoder2.encode(value);
    if (typeof opts.size === "number") {
      assertSize(bytes4, { size: opts.size });
      return pad(bytes4, { dir: "right", size: opts.size });
    }
    return bytes4;
  }
  var encoder2, charCodeMap;
  var init_toBytes = __esm({
    "node_modules/viem/_esm/utils/encoding/toBytes.js"() {
      "use strict";
      init_base();
      init_isHex();
      init_pad();
      init_fromHex();
      init_toHex();
      encoder2 = /* @__PURE__ */ new TextEncoder();
      charCodeMap = {
        zero: 48,
        nine: 57,
        A: 65,
        F: 70,
        a: 97,
        f: 102
      };
    }
  });

  // node_modules/@noble/hashes/esm/_assert.js
  function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`positive integer expected, not ${n}`);
  }
  function isBytes(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function bytes(b, ...lengths) {
    if (!isBytes(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  function hash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(h.outputLen);
    number(h.blockLen);
  }
  function exists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }
  var init_assert = __esm({
    "node_modules/@noble/hashes/esm/_assert.js"() {
      "use strict";
    }
  });

  // node_modules/@noble/hashes/esm/_u64.js
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l } = fromBig(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  var U32_MASK64, _32n, rotlSH, rotlSL, rotlBH, rotlBL;
  var init_u64 = __esm({
    "node_modules/@noble/hashes/esm/_u64.js"() {
      "use strict";
      U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
      _32n = /* @__PURE__ */ BigInt(32);
      rotlSH = (h, l, s) => h << s | l >>> 32 - s;
      rotlSL = (h, l, s) => l << s | h >>> 32 - s;
      rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
      rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    }
  });

  // node_modules/@noble/hashes/esm/cryptoNode.js
  var nc, crypto;
  var init_cryptoNode = __esm({
    "node_modules/@noble/hashes/esm/cryptoNode.js"() {
      "use strict";
      nc = __toESM(__require("node:crypto"), 1);
      crypto = nc && typeof nc === "object" && "webcrypto" in nc ? nc.webcrypto : nc && typeof nc === "object" && "randomBytes" in nc ? nc : void 0;
    }
  });

  // node_modules/@noble/hashes/esm/utils.js
  function byteSwap32(arr) {
    for (let i = 0; i < arr.length; i++) {
      arr[i] = byteSwap(arr[i]);
    }
  }
  function utf8ToBytes(str2) {
    if (typeof str2 !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
    return new Uint8Array(new TextEncoder().encode(str2));
  }
  function toBytes2(data) {
    if (typeof data === "string")
      data = utf8ToBytes(data);
    bytes(data);
    return data;
  }
  function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      bytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad4 = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad4);
      pad4 += a.length;
    }
    return res;
  }
  function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes(bytesLength = 32) {
    if (crypto && typeof crypto.getRandomValues === "function") {
      return crypto.getRandomValues(new Uint8Array(bytesLength));
    }
    if (crypto && typeof crypto.randomBytes === "function") {
      return crypto.randomBytes(bytesLength);
    }
    throw new Error("crypto.getRandomValues must be defined");
  }
  var u32, createView, rotr, isLE, byteSwap, Hash, toStr;
  var init_utils2 = __esm({
    "node_modules/@noble/hashes/esm/utils.js"() {
      "use strict";
      init_cryptoNode();
      init_assert();
      u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
      createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
      rotr = (word, shift) => word << 32 - shift | word >>> shift;
      isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
      byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
      Hash = class {
        // Safe version that clones internal state
        clone() {
          return this._cloneInto();
        }
      };
      toStr = {}.toString;
    }
  });

  // node_modules/@noble/hashes/esm/sha3.js
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round];
      s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
  }
  var SHA3_PI, SHA3_ROTL, _SHA3_IOTA, _0n, _1n, _2n, _7n, _256n, _0x71n, SHA3_IOTA_H, SHA3_IOTA_L, rotlH, rotlL, Keccak, gen, sha3_224, sha3_256, sha3_384, sha3_512, keccak_224, keccak_256, keccak_384, keccak_512, genShake, shake128, shake256;
  var init_sha3 = __esm({
    "node_modules/@noble/hashes/esm/sha3.js"() {
      "use strict";
      init_assert();
      init_u64();
      init_utils2();
      SHA3_PI = [];
      SHA3_ROTL = [];
      _SHA3_IOTA = [];
      _0n = /* @__PURE__ */ BigInt(0);
      _1n = /* @__PURE__ */ BigInt(1);
      _2n = /* @__PURE__ */ BigInt(2);
      _7n = /* @__PURE__ */ BigInt(7);
      _256n = /* @__PURE__ */ BigInt(256);
      _0x71n = /* @__PURE__ */ BigInt(113);
      for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI.push(2 * (5 * y + x));
        SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
        let t = _0n;
        for (let j = 0; j < 7; j++) {
          R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
          if (R & _2n)
            t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
        }
        _SHA3_IOTA.push(t);
      }
      [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
      rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
      rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
      Keccak = class _Keccak2 extends Hash {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
          super();
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          number(outputLen);
          if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error("Sha3 supports only keccak-f1600 function");
          this.state = new Uint8Array(200);
          this.state32 = u32(this.state);
        }
        keccak() {
          if (!isLE)
            byteSwap32(this.state32);
          keccakP(this.state32, this.rounds);
          if (!isLE)
            byteSwap32(this.state32);
          this.posOut = 0;
          this.pos = 0;
        }
        update(data) {
          exists(this);
          const { blockLen, state } = this;
          data = toBytes2(data);
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
              state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
              this.keccak();
          }
          return this;
        }
        finish() {
          if (this.finished)
            return;
          this.finished = true;
          const { state, suffix, pos, blockLen } = this;
          state[pos] ^= suffix;
          if ((suffix & 128) !== 0 && pos === blockLen - 1)
            this.keccak();
          state[blockLen - 1] ^= 128;
          this.keccak();
        }
        writeInto(out) {
          exists(this, false);
          bytes(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen } = this;
          for (let pos = 0, len = out.length; pos < len; ) {
            if (this.posOut >= blockLen)
              this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
          }
          return out;
        }
        xofInto(out) {
          if (!this.enableXOF)
            throw new Error("XOF is not possible for this instance");
          return this.writeInto(out);
        }
        xof(bytes4) {
          number(bytes4);
          return this.xofInto(new Uint8Array(bytes4));
        }
        digestInto(out) {
          output(out, this);
          if (this.finished)
            throw new Error("digest() was already called");
          this.writeInto(out);
          this.destroy();
          return out;
        }
        digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
          this.destroyed = true;
          this.state.fill(0);
        }
        _cloneInto(to) {
          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
          to || (to = new _Keccak2(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
        }
      };
      gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
      sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
      sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
      sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
      sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
      keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
      keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
      keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
      keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
      genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
      shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
      shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);
    }
  });

  // node_modules/viem/_esm/utils/hash/keccak256.js
  function keccak256(value, to_) {
    const to = to_ || "hex";
    const bytes4 = keccak_256(isHex(value, { strict: false }) ? toBytes(value) : value);
    if (to === "bytes")
      return bytes4;
    return toHex(bytes4);
  }
  var init_keccak256 = __esm({
    "node_modules/viem/_esm/utils/hash/keccak256.js"() {
      "use strict";
      init_sha3();
      init_isHex();
      init_toBytes();
      init_toHex();
    }
  });

  // node_modules/viem/_esm/utils/hash/hashSignature.js
  function hashSignature(sig) {
    return hash2(sig);
  }
  var hash2;
  var init_hashSignature = __esm({
    "node_modules/viem/_esm/utils/hash/hashSignature.js"() {
      "use strict";
      init_toBytes();
      init_keccak256();
      hash2 = (value) => keccak256(toBytes(value));
    }
  });

  // node_modules/viem/_esm/utils/hash/normalizeSignature.js
  function normalizeSignature(signature) {
    let active = true;
    let current = "";
    let level = 0;
    let result = "";
    let valid = false;
    for (let i = 0; i < signature.length; i++) {
      const char = signature[i];
      if (["(", ")", ","].includes(char))
        active = true;
      if (char === "(")
        level++;
      if (char === ")")
        level--;
      if (!active)
        continue;
      if (level === 0) {
        if (char === " " && ["event", "function", ""].includes(result))
          result = "";
        else {
          result += char;
          if (char === ")") {
            valid = true;
            break;
          }
        }
        continue;
      }
      if (char === " ") {
        if (signature[i - 1] !== "," && current !== "," && current !== ",(") {
          current = "";
          active = false;
        }
        continue;
      }
      result += char;
      current += char;
    }
    if (!valid)
      throw new BaseError2("Unable to normalize signature.");
    return result;
  }
  var init_normalizeSignature = __esm({
    "node_modules/viem/_esm/utils/hash/normalizeSignature.js"() {
      "use strict";
      init_base();
    }
  });

  // node_modules/viem/_esm/utils/hash/toSignature.js
  var toSignature;
  var init_toSignature = __esm({
    "node_modules/viem/_esm/utils/hash/toSignature.js"() {
      "use strict";
      init_exports();
      init_normalizeSignature();
      toSignature = (def) => {
        const def_ = (() => {
          if (typeof def === "string")
            return def;
          return formatAbiItem(def);
        })();
        return normalizeSignature(def_);
      };
    }
  });

  // node_modules/viem/_esm/utils/hash/toSignatureHash.js
  function toSignatureHash(fn) {
    return hashSignature(toSignature(fn));
  }
  var init_toSignatureHash = __esm({
    "node_modules/viem/_esm/utils/hash/toSignatureHash.js"() {
      "use strict";
      init_hashSignature();
      init_toSignature();
    }
  });

  // node_modules/viem/_esm/utils/hash/toEventSelector.js
  var toEventSelector;
  var init_toEventSelector = __esm({
    "node_modules/viem/_esm/utils/hash/toEventSelector.js"() {
      "use strict";
      init_toSignatureHash();
      toEventSelector = toSignatureHash;
    }
  });

  // node_modules/viem/_esm/errors/address.js
  var InvalidAddressError;
  var init_address = __esm({
    "node_modules/viem/_esm/errors/address.js"() {
      "use strict";
      init_base();
      InvalidAddressError = class extends BaseError2 {
        constructor({ address }) {
          super(`Address "${address}" is invalid.`, {
            metaMessages: [
              "- Address must be a hex value of 20 bytes (40 hex characters).",
              "- Address must match its checksum counterpart."
            ],
            name: "InvalidAddressError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/lru.js
  var LruMap;
  var init_lru = __esm({
    "node_modules/viem/_esm/utils/lru.js"() {
      "use strict";
      LruMap = class extends Map {
        constructor(size5) {
          super();
          Object.defineProperty(this, "maxSize", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.maxSize = size5;
        }
        get(key) {
          const value = super.get(key);
          if (super.has(key) && value !== void 0) {
            this.delete(key);
            super.set(key, value);
          }
          return value;
        }
        set(key, value) {
          super.set(key, value);
          if (this.maxSize && this.size > this.maxSize) {
            const firstKey = this.keys().next().value;
            if (firstKey)
              this.delete(firstKey);
          }
          return this;
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/address/getAddress.js
  function checksumAddress(address_, chainId) {
    if (checksumAddressCache.has(`${address_}.${chainId}`))
      return checksumAddressCache.get(`${address_}.${chainId}`);
    const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();
    const hash4 = keccak256(stringToBytes(hexAddress), "bytes");
    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split("");
    for (let i = 0; i < 40; i += 2) {
      if (hash4[i >> 1] >> 4 >= 8 && address[i]) {
        address[i] = address[i].toUpperCase();
      }
      if ((hash4[i >> 1] & 15) >= 8 && address[i + 1]) {
        address[i + 1] = address[i + 1].toUpperCase();
      }
    }
    const result = `0x${address.join("")}`;
    checksumAddressCache.set(`${address_}.${chainId}`, result);
    return result;
  }
  function getAddress(address, chainId) {
    if (!isAddress(address, { strict: false }))
      throw new InvalidAddressError({ address });
    return checksumAddress(address, chainId);
  }
  var checksumAddressCache;
  var init_getAddress = __esm({
    "node_modules/viem/_esm/utils/address/getAddress.js"() {
      "use strict";
      init_address();
      init_toBytes();
      init_keccak256();
      init_lru();
      init_isAddress();
      checksumAddressCache = /* @__PURE__ */ new LruMap(8192);
    }
  });

  // node_modules/viem/_esm/utils/address/isAddress.js
  function isAddress(address, options2) {
    const { strict = true } = options2 ?? {};
    const cacheKey3 = `${address}.${strict}`;
    if (isAddressCache.has(cacheKey3))
      return isAddressCache.get(cacheKey3);
    const result = (() => {
      if (!addressRegex.test(address))
        return false;
      if (address.toLowerCase() === address)
        return true;
      if (strict)
        return checksumAddress(address) === address;
      return true;
    })();
    isAddressCache.set(cacheKey3, result);
    return result;
  }
  var addressRegex, isAddressCache;
  var init_isAddress = __esm({
    "node_modules/viem/_esm/utils/address/isAddress.js"() {
      "use strict";
      init_lru();
      init_getAddress();
      addressRegex = /^0x[a-fA-F0-9]{40}$/;
      isAddressCache = /* @__PURE__ */ new LruMap(8192);
    }
  });

  // node_modules/viem/_esm/utils/data/concat.js
  function concat(values) {
    if (typeof values[0] === "string")
      return concatHex(values);
    return concatBytes2(values);
  }
  function concatBytes2(values) {
    let length = 0;
    for (const arr of values) {
      length += arr.length;
    }
    const result = new Uint8Array(length);
    let offset = 0;
    for (const arr of values) {
      result.set(arr, offset);
      offset += arr.length;
    }
    return result;
  }
  function concatHex(values) {
    return `0x${values.reduce((acc, x) => acc + x.replace("0x", ""), "")}`;
  }
  var init_concat = __esm({
    "node_modules/viem/_esm/utils/data/concat.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/data/slice.js
  function slice(value, start, end, { strict } = {}) {
    if (isHex(value, { strict: false }))
      return sliceHex(value, start, end, {
        strict
      });
    return sliceBytes(value, start, end, {
      strict
    });
  }
  function assertStartOffset(value, start) {
    if (typeof start === "number" && start > 0 && start > size(value) - 1)
      throw new SliceOffsetOutOfBoundsError({
        offset: start,
        position: "start",
        size: size(value)
      });
  }
  function assertEndOffset(value, start, end) {
    if (typeof start === "number" && typeof end === "number" && size(value) !== end - start) {
      throw new SliceOffsetOutOfBoundsError({
        offset: end,
        position: "end",
        size: size(value)
      });
    }
  }
  function sliceBytes(value_, start, end, { strict } = {}) {
    assertStartOffset(value_, start);
    const value = value_.slice(start, end);
    if (strict)
      assertEndOffset(value, start, end);
    return value;
  }
  function sliceHex(value_, start, end, { strict } = {}) {
    assertStartOffset(value_, start);
    const value = `0x${value_.replace("0x", "").slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;
    if (strict)
      assertEndOffset(value, start, end);
    return value;
  }
  var init_slice = __esm({
    "node_modules/viem/_esm/utils/data/slice.js"() {
      "use strict";
      init_data();
      init_isHex();
      init_size();
    }
  });

  // node_modules/viem/_esm/utils/abi/encodeAbiParameters.js
  function encodeAbiParameters(params, values) {
    if (params.length !== values.length)
      throw new AbiEncodingLengthMismatchError({
        expectedLength: params.length,
        givenLength: values.length
      });
    const preparedParams = prepareParams({
      params,
      values
    });
    const data = encodeParams(preparedParams);
    if (data.length === 0)
      return "0x";
    return data;
  }
  function prepareParams({ params, values }) {
    const preparedParams = [];
    for (let i = 0; i < params.length; i++) {
      preparedParams.push(prepareParam({ param: params[i], value: values[i] }));
    }
    return preparedParams;
  }
  function prepareParam({ param, value }) {
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents) {
      const [length, type] = arrayComponents;
      return encodeArray(value, { length, param: { ...param, type } });
    }
    if (param.type === "tuple") {
      return encodeTuple(value, {
        param
      });
    }
    if (param.type === "address") {
      return encodeAddress(value);
    }
    if (param.type === "bool") {
      return encodeBool(value);
    }
    if (param.type.startsWith("uint") || param.type.startsWith("int")) {
      const signed = param.type.startsWith("int");
      return encodeNumber(value, { signed });
    }
    if (param.type.startsWith("bytes")) {
      return encodeBytes(value, { param });
    }
    if (param.type === "string") {
      return encodeString(value);
    }
    throw new InvalidAbiEncodingTypeError(param.type, {
      docsPath: "/docs/contract/encodeAbiParameters"
    });
  }
  function encodeParams(preparedParams) {
    let staticSize = 0;
    for (let i = 0; i < preparedParams.length; i++) {
      const { dynamic, encoded } = preparedParams[i];
      if (dynamic)
        staticSize += 32;
      else
        staticSize += size(encoded);
    }
    const staticParams = [];
    const dynamicParams = [];
    let dynamicSize = 0;
    for (let i = 0; i < preparedParams.length; i++) {
      const { dynamic, encoded } = preparedParams[i];
      if (dynamic) {
        staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }));
        dynamicParams.push(encoded);
        dynamicSize += size(encoded);
      } else {
        staticParams.push(encoded);
      }
    }
    return concat([...staticParams, ...dynamicParams]);
  }
  function encodeAddress(value) {
    if (!isAddress(value))
      throw new InvalidAddressError({ address: value });
    return { dynamic: false, encoded: padHex(value.toLowerCase()) };
  }
  function encodeArray(value, { length, param }) {
    const dynamic = length === null;
    if (!Array.isArray(value))
      throw new InvalidArrayError(value);
    if (!dynamic && value.length !== length)
      throw new AbiEncodingArrayLengthMismatchError({
        expectedLength: length,
        givenLength: value.length,
        type: `${param.type}[${length}]`
      });
    let dynamicChild = false;
    const preparedParams = [];
    for (let i = 0; i < value.length; i++) {
      const preparedParam = prepareParam({ param, value: value[i] });
      if (preparedParam.dynamic)
        dynamicChild = true;
      preparedParams.push(preparedParam);
    }
    if (dynamic || dynamicChild) {
      const data = encodeParams(preparedParams);
      if (dynamic) {
        const length2 = numberToHex(preparedParams.length, { size: 32 });
        return {
          dynamic: true,
          encoded: preparedParams.length > 0 ? concat([length2, data]) : length2
        };
      }
      if (dynamicChild)
        return { dynamic: true, encoded: data };
    }
    return {
      dynamic: false,
      encoded: concat(preparedParams.map(({ encoded }) => encoded))
    };
  }
  function encodeBytes(value, { param }) {
    const [, paramSize] = param.type.split("bytes");
    const bytesSize = size(value);
    if (!paramSize) {
      let value_ = value;
      if (bytesSize % 32 !== 0)
        value_ = padHex(value_, {
          dir: "right",
          size: Math.ceil((value.length - 2) / 2 / 32) * 32
        });
      return {
        dynamic: true,
        encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_])
      };
    }
    if (bytesSize !== Number.parseInt(paramSize))
      throw new AbiEncodingBytesSizeMismatchError({
        expectedSize: Number.parseInt(paramSize),
        value
      });
    return { dynamic: false, encoded: padHex(value, { dir: "right" }) };
  }
  function encodeBool(value) {
    if (typeof value !== "boolean")
      throw new BaseError2(`Invalid boolean value: "${value}" (type: ${typeof value}). Expected: \`true\` or \`false\`.`);
    return { dynamic: false, encoded: padHex(boolToHex(value)) };
  }
  function encodeNumber(value, { signed }) {
    return {
      dynamic: false,
      encoded: numberToHex(value, {
        size: 32,
        signed
      })
    };
  }
  function encodeString(value) {
    const hexValue = stringToHex(value);
    const partsLength = Math.ceil(size(hexValue) / 32);
    const parts = [];
    for (let i = 0; i < partsLength; i++) {
      parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {
        dir: "right"
      }));
    }
    return {
      dynamic: true,
      encoded: concat([
        padHex(numberToHex(size(hexValue), { size: 32 })),
        ...parts
      ])
    };
  }
  function encodeTuple(value, { param }) {
    let dynamic = false;
    const preparedParams = [];
    for (let i = 0; i < param.components.length; i++) {
      const param_ = param.components[i];
      const index2 = Array.isArray(value) ? i : param_.name;
      const preparedParam = prepareParam({
        param: param_,
        value: value[index2]
      });
      preparedParams.push(preparedParam);
      if (preparedParam.dynamic)
        dynamic = true;
    }
    return {
      dynamic,
      encoded: dynamic ? encodeParams(preparedParams) : concat(preparedParams.map(({ encoded }) => encoded))
    };
  }
  function getArrayComponents(type) {
    const matches = type.match(/^(.*)\[(\d+)?\]$/);
    return matches ? (
      // Return `null` if the array is dynamic.
      [matches[2] ? Number(matches[2]) : null, matches[1]]
    ) : void 0;
  }
  var init_encodeAbiParameters = __esm({
    "node_modules/viem/_esm/utils/abi/encodeAbiParameters.js"() {
      "use strict";
      init_abi();
      init_address();
      init_base();
      init_isAddress();
      init_concat();
      init_pad();
      init_size();
      init_slice();
      init_toHex();
    }
  });

  // node_modules/viem/_esm/utils/hash/toFunctionSelector.js
  var toFunctionSelector;
  var init_toFunctionSelector = __esm({
    "node_modules/viem/_esm/utils/hash/toFunctionSelector.js"() {
      "use strict";
      init_slice();
      init_toSignatureHash();
      toFunctionSelector = (fn) => slice(toSignatureHash(fn), 0, 4);
    }
  });

  // node_modules/viem/_esm/utils/abi/getAbiItem.js
  function getAbiItem(parameters) {
    const { abi, args = [], name } = parameters;
    const isSelector = isHex(name, { strict: false });
    const abiItems = abi.filter((abiItem) => {
      if (isSelector) {
        if (abiItem.type === "function")
          return toFunctionSelector(abiItem) === name;
        if (abiItem.type === "event")
          return toEventSelector(abiItem) === name;
        return false;
      }
      return "name" in abiItem && abiItem.name === name;
    });
    if (abiItems.length === 0)
      return void 0;
    if (abiItems.length === 1)
      return abiItems[0];
    let matchedAbiItem = void 0;
    for (const abiItem of abiItems) {
      if (!("inputs" in abiItem))
        continue;
      if (!args || args.length === 0) {
        if (!abiItem.inputs || abiItem.inputs.length === 0)
          return abiItem;
        continue;
      }
      if (!abiItem.inputs)
        continue;
      if (abiItem.inputs.length === 0)
        continue;
      if (abiItem.inputs.length !== args.length)
        continue;
      const matched = args.every((arg, index2) => {
        const abiParameter = "inputs" in abiItem && abiItem.inputs[index2];
        if (!abiParameter)
          return false;
        return isArgOfType(arg, abiParameter);
      });
      if (matched) {
        if (matchedAbiItem && "inputs" in matchedAbiItem && matchedAbiItem.inputs) {
          const ambiguousTypes = getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);
          if (ambiguousTypes)
            throw new AbiItemAmbiguityError({
              abiItem,
              type: ambiguousTypes[0]
            }, {
              abiItem: matchedAbiItem,
              type: ambiguousTypes[1]
            });
        }
        matchedAbiItem = abiItem;
      }
    }
    if (matchedAbiItem)
      return matchedAbiItem;
    return abiItems[0];
  }
  function isArgOfType(arg, abiParameter) {
    const argType = typeof arg;
    const abiParameterType = abiParameter.type;
    switch (abiParameterType) {
      case "address":
        return isAddress(arg, { strict: false });
      case "bool":
        return argType === "boolean";
      case "function":
        return argType === "string";
      case "string":
        return argType === "string";
      default: {
        if (abiParameterType === "tuple" && "components" in abiParameter)
          return Object.values(abiParameter.components).every((component, index2) => {
            return isArgOfType(Object.values(arg)[index2], component);
          });
        if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))
          return argType === "number" || argType === "bigint";
        if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))
          return argType === "string" || arg instanceof Uint8Array;
        if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(abiParameterType)) {
          return Array.isArray(arg) && arg.every((x) => isArgOfType(x, {
            ...abiParameter,
            // Pop off `[]` or `[M]` from end of type
            type: abiParameterType.replace(/(\[[0-9]{0,}\])$/, "")
          }));
        }
        return false;
      }
    }
  }
  function getAmbiguousTypes(sourceParameters, targetParameters, args) {
    for (const parameterIndex in sourceParameters) {
      const sourceParameter = sourceParameters[parameterIndex];
      const targetParameter = targetParameters[parameterIndex];
      if (sourceParameter.type === "tuple" && targetParameter.type === "tuple" && "components" in sourceParameter && "components" in targetParameter)
        return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);
      const types = [sourceParameter.type, targetParameter.type];
      const ambiguous = (() => {
        if (types.includes("address") && types.includes("bytes20"))
          return true;
        if (types.includes("address") && types.includes("string"))
          return isAddress(args[parameterIndex], { strict: false });
        if (types.includes("address") && types.includes("bytes"))
          return isAddress(args[parameterIndex], { strict: false });
        return false;
      })();
      if (ambiguous)
        return types;
    }
    return;
  }
  var init_getAbiItem = __esm({
    "node_modules/viem/_esm/utils/abi/getAbiItem.js"() {
      "use strict";
      init_abi();
      init_isHex();
      init_isAddress();
      init_toEventSelector();
      init_toFunctionSelector();
    }
  });

  // node_modules/viem/_esm/accounts/utils/parseAccount.js
  function parseAccount(account) {
    if (typeof account === "string")
      return { address: account, type: "json-rpc" };
    return account;
  }
  var init_parseAccount = __esm({
    "node_modules/viem/_esm/accounts/utils/parseAccount.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/abi/prepareEncodeFunctionData.js
  function prepareEncodeFunctionData(parameters) {
    const { abi, args, functionName } = parameters;
    let abiItem = abi[0];
    if (functionName) {
      const item = getAbiItem({
        abi,
        args,
        name: functionName
      });
      if (!item)
        throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath2 });
      abiItem = item;
    }
    if (abiItem.type !== "function")
      throw new AbiFunctionNotFoundError(void 0, { docsPath: docsPath2 });
    return {
      abi: [abiItem],
      functionName: toFunctionSelector(formatAbiItem2(abiItem))
    };
  }
  var docsPath2;
  var init_prepareEncodeFunctionData = __esm({
    "node_modules/viem/_esm/utils/abi/prepareEncodeFunctionData.js"() {
      "use strict";
      init_abi();
      init_toFunctionSelector();
      init_formatAbiItem2();
      init_getAbiItem();
      docsPath2 = "/docs/contract/encodeFunctionData";
    }
  });

  // node_modules/viem/_esm/utils/abi/encodeFunctionData.js
  function encodeFunctionData(parameters) {
    const { args } = parameters;
    const { abi, functionName } = (() => {
      if (parameters.abi.length === 1 && parameters.functionName?.startsWith("0x"))
        return parameters;
      return prepareEncodeFunctionData(parameters);
    })();
    const abiItem = abi[0];
    const signature = functionName;
    const data = "inputs" in abiItem && abiItem.inputs ? encodeAbiParameters(abiItem.inputs, args ?? []) : void 0;
    return concatHex([signature, data ?? "0x"]);
  }
  var init_encodeFunctionData = __esm({
    "node_modules/viem/_esm/utils/abi/encodeFunctionData.js"() {
      "use strict";
      init_concat();
      init_encodeAbiParameters();
      init_prepareEncodeFunctionData();
    }
  });

  // node_modules/viem/_esm/constants/solidity.js
  var panicReasons, solidityError, solidityPanic;
  var init_solidity = __esm({
    "node_modules/viem/_esm/constants/solidity.js"() {
      "use strict";
      panicReasons = {
        1: "An `assert` condition failed.",
        17: "Arithmetic operation resulted in underflow or overflow.",
        18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
        33: "Attempted to convert to an invalid type.",
        34: "Attempted to access a storage byte array that is incorrectly encoded.",
        49: "Performed `.pop()` on an empty array",
        50: "Array index is out of bounds.",
        65: "Allocated too much memory or created an array which is too large.",
        81: "Attempted to call a zero-initialized variable of internal function type."
      };
      solidityError = {
        inputs: [
          {
            name: "message",
            type: "string"
          }
        ],
        name: "Error",
        type: "error"
      };
      solidityPanic = {
        inputs: [
          {
            name: "reason",
            type: "uint256"
          }
        ],
        name: "Panic",
        type: "error"
      };
    }
  });

  // node_modules/viem/_esm/errors/cursor.js
  var NegativeOffsetError, PositionOutOfBoundsError, RecursiveReadLimitExceededError;
  var init_cursor = __esm({
    "node_modules/viem/_esm/errors/cursor.js"() {
      "use strict";
      init_base();
      NegativeOffsetError = class extends BaseError2 {
        constructor({ offset }) {
          super(`Offset \`${offset}\` cannot be negative.`, {
            name: "NegativeOffsetError"
          });
        }
      };
      PositionOutOfBoundsError = class extends BaseError2 {
        constructor({ length, position }) {
          super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`, { name: "PositionOutOfBoundsError" });
        }
      };
      RecursiveReadLimitExceededError = class extends BaseError2 {
        constructor({ count, limit }) {
          super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`, { name: "RecursiveReadLimitExceededError" });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/cursor.js
  function createCursor(bytes4, { recursiveReadLimit = 8192 } = {}) {
    const cursor = Object.create(staticCursor);
    cursor.bytes = bytes4;
    cursor.dataView = new DataView(bytes4.buffer, bytes4.byteOffset, bytes4.byteLength);
    cursor.positionReadCount = /* @__PURE__ */ new Map();
    cursor.recursiveReadLimit = recursiveReadLimit;
    return cursor;
  }
  var staticCursor;
  var init_cursor2 = __esm({
    "node_modules/viem/_esm/utils/cursor.js"() {
      "use strict";
      init_cursor();
      staticCursor = {
        bytes: new Uint8Array(),
        dataView: new DataView(new ArrayBuffer(0)),
        position: 0,
        positionReadCount: /* @__PURE__ */ new Map(),
        recursiveReadCount: 0,
        recursiveReadLimit: Number.POSITIVE_INFINITY,
        assertReadLimit() {
          if (this.recursiveReadCount >= this.recursiveReadLimit)
            throw new RecursiveReadLimitExceededError({
              count: this.recursiveReadCount + 1,
              limit: this.recursiveReadLimit
            });
        },
        assertPosition(position) {
          if (position < 0 || position > this.bytes.length - 1)
            throw new PositionOutOfBoundsError({
              length: this.bytes.length,
              position
            });
        },
        decrementPosition(offset) {
          if (offset < 0)
            throw new NegativeOffsetError({ offset });
          const position = this.position - offset;
          this.assertPosition(position);
          this.position = position;
        },
        getReadCount(position) {
          return this.positionReadCount.get(position || this.position) || 0;
        },
        incrementPosition(offset) {
          if (offset < 0)
            throw new NegativeOffsetError({ offset });
          const position = this.position + offset;
          this.assertPosition(position);
          this.position = position;
        },
        inspectByte(position_) {
          const position = position_ ?? this.position;
          this.assertPosition(position);
          return this.bytes[position];
        },
        inspectBytes(length, position_) {
          const position = position_ ?? this.position;
          this.assertPosition(position + length - 1);
          return this.bytes.subarray(position, position + length);
        },
        inspectUint8(position_) {
          const position = position_ ?? this.position;
          this.assertPosition(position);
          return this.bytes[position];
        },
        inspectUint16(position_) {
          const position = position_ ?? this.position;
          this.assertPosition(position + 1);
          return this.dataView.getUint16(position);
        },
        inspectUint24(position_) {
          const position = position_ ?? this.position;
          this.assertPosition(position + 2);
          return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
        },
        inspectUint32(position_) {
          const position = position_ ?? this.position;
          this.assertPosition(position + 3);
          return this.dataView.getUint32(position);
        },
        pushByte(byte) {
          this.assertPosition(this.position);
          this.bytes[this.position] = byte;
          this.position++;
        },
        pushBytes(bytes4) {
          this.assertPosition(this.position + bytes4.length - 1);
          this.bytes.set(bytes4, this.position);
          this.position += bytes4.length;
        },
        pushUint8(value) {
          this.assertPosition(this.position);
          this.bytes[this.position] = value;
          this.position++;
        },
        pushUint16(value) {
          this.assertPosition(this.position + 1);
          this.dataView.setUint16(this.position, value);
          this.position += 2;
        },
        pushUint24(value) {
          this.assertPosition(this.position + 2);
          this.dataView.setUint16(this.position, value >> 8);
          this.dataView.setUint8(this.position + 2, value & ~4294967040);
          this.position += 3;
        },
        pushUint32(value) {
          this.assertPosition(this.position + 3);
          this.dataView.setUint32(this.position, value);
          this.position += 4;
        },
        readByte() {
          this.assertReadLimit();
          this._touch();
          const value = this.inspectByte();
          this.position++;
          return value;
        },
        readBytes(length, size5) {
          this.assertReadLimit();
          this._touch();
          const value = this.inspectBytes(length);
          this.position += size5 ?? length;
          return value;
        },
        readUint8() {
          this.assertReadLimit();
          this._touch();
          const value = this.inspectUint8();
          this.position += 1;
          return value;
        },
        readUint16() {
          this.assertReadLimit();
          this._touch();
          const value = this.inspectUint16();
          this.position += 2;
          return value;
        },
        readUint24() {
          this.assertReadLimit();
          this._touch();
          const value = this.inspectUint24();
          this.position += 3;
          return value;
        },
        readUint32() {
          this.assertReadLimit();
          this._touch();
          const value = this.inspectUint32();
          this.position += 4;
          return value;
        },
        get remaining() {
          return this.bytes.length - this.position;
        },
        setPosition(position) {
          const oldPosition = this.position;
          this.assertPosition(position);
          this.position = position;
          return () => this.position = oldPosition;
        },
        _touch() {
          if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
            return;
          const count = this.getReadCount();
          this.positionReadCount.set(this.position, count + 1);
          if (count > 0)
            this.recursiveReadCount++;
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/encoding/fromBytes.js
  function bytesToBigInt(bytes4, opts = {}) {
    if (typeof opts.size !== "undefined")
      assertSize(bytes4, { size: opts.size });
    const hex = bytesToHex(bytes4, opts);
    return hexToBigInt(hex, opts);
  }
  function bytesToBool(bytes_, opts = {}) {
    let bytes4 = bytes_;
    if (typeof opts.size !== "undefined") {
      assertSize(bytes4, { size: opts.size });
      bytes4 = trim(bytes4);
    }
    if (bytes4.length > 1 || bytes4[0] > 1)
      throw new InvalidBytesBooleanError(bytes4);
    return Boolean(bytes4[0]);
  }
  function bytesToNumber(bytes4, opts = {}) {
    if (typeof opts.size !== "undefined")
      assertSize(bytes4, { size: opts.size });
    const hex = bytesToHex(bytes4, opts);
    return hexToNumber(hex, opts);
  }
  function bytesToString(bytes_, opts = {}) {
    let bytes4 = bytes_;
    if (typeof opts.size !== "undefined") {
      assertSize(bytes4, { size: opts.size });
      bytes4 = trim(bytes4, { dir: "right" });
    }
    return new TextDecoder().decode(bytes4);
  }
  var init_fromBytes = __esm({
    "node_modules/viem/_esm/utils/encoding/fromBytes.js"() {
      "use strict";
      init_encoding();
      init_trim();
      init_fromHex();
      init_toHex();
    }
  });

  // node_modules/viem/_esm/utils/abi/decodeAbiParameters.js
  function decodeAbiParameters(params, data) {
    const bytes4 = typeof data === "string" ? hexToBytes(data) : data;
    const cursor = createCursor(bytes4);
    if (size(bytes4) === 0 && params.length > 0)
      throw new AbiDecodingZeroDataError();
    if (size(data) && size(data) < 32)
      throw new AbiDecodingDataSizeTooSmallError({
        data: typeof data === "string" ? data : bytesToHex(data),
        params,
        size: size(data)
      });
    let consumed = 0;
    const values = [];
    for (let i = 0; i < params.length; ++i) {
      const param = params[i];
      cursor.setPosition(consumed);
      const [data2, consumed_] = decodeParameter(cursor, param, {
        staticPosition: 0
      });
      consumed += consumed_;
      values.push(data2);
    }
    return values;
  }
  function decodeParameter(cursor, param, { staticPosition }) {
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents) {
      const [length, type] = arrayComponents;
      return decodeArray(cursor, { ...param, type }, { length, staticPosition });
    }
    if (param.type === "tuple")
      return decodeTuple(cursor, param, { staticPosition });
    if (param.type === "address")
      return decodeAddress(cursor);
    if (param.type === "bool")
      return decodeBool(cursor);
    if (param.type.startsWith("bytes"))
      return decodeBytes(cursor, param, { staticPosition });
    if (param.type.startsWith("uint") || param.type.startsWith("int"))
      return decodeNumber(cursor, param);
    if (param.type === "string")
      return decodeString(cursor, { staticPosition });
    throw new InvalidAbiDecodingTypeError(param.type, {
      docsPath: "/docs/contract/decodeAbiParameters"
    });
  }
  function decodeAddress(cursor) {
    const value = cursor.readBytes(32);
    return [checksumAddress(bytesToHex(sliceBytes(value, -20))), 32];
  }
  function decodeArray(cursor, param, { length, staticPosition }) {
    if (!length) {
      const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));
      const start = staticPosition + offset;
      const startOfData = start + sizeOfLength;
      cursor.setPosition(start);
      const length2 = bytesToNumber(cursor.readBytes(sizeOfLength));
      const dynamicChild = hasDynamicChild(param);
      let consumed2 = 0;
      const value2 = [];
      for (let i = 0; i < length2; ++i) {
        cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed2));
        const [data, consumed_] = decodeParameter(cursor, param, {
          staticPosition: startOfData
        });
        consumed2 += consumed_;
        value2.push(data);
      }
      cursor.setPosition(staticPosition + 32);
      return [value2, 32];
    }
    if (hasDynamicChild(param)) {
      const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));
      const start = staticPosition + offset;
      const value2 = [];
      for (let i = 0; i < length; ++i) {
        cursor.setPosition(start + i * 32);
        const [data] = decodeParameter(cursor, param, {
          staticPosition: start
        });
        value2.push(data);
      }
      cursor.setPosition(staticPosition + 32);
      return [value2, 32];
    }
    let consumed = 0;
    const value = [];
    for (let i = 0; i < length; ++i) {
      const [data, consumed_] = decodeParameter(cursor, param, {
        staticPosition: staticPosition + consumed
      });
      consumed += consumed_;
      value.push(data);
    }
    return [value, consumed];
  }
  function decodeBool(cursor) {
    return [bytesToBool(cursor.readBytes(32), { size: 32 }), 32];
  }
  function decodeBytes(cursor, param, { staticPosition }) {
    const [_, size5] = param.type.split("bytes");
    if (!size5) {
      const offset = bytesToNumber(cursor.readBytes(32));
      cursor.setPosition(staticPosition + offset);
      const length = bytesToNumber(cursor.readBytes(32));
      if (length === 0) {
        cursor.setPosition(staticPosition + 32);
        return ["0x", 32];
      }
      const data = cursor.readBytes(length);
      cursor.setPosition(staticPosition + 32);
      return [bytesToHex(data), 32];
    }
    const value = bytesToHex(cursor.readBytes(Number.parseInt(size5), 32));
    return [value, 32];
  }
  function decodeNumber(cursor, param) {
    const signed = param.type.startsWith("int");
    const size5 = Number.parseInt(param.type.split("int")[1] || "256");
    const value = cursor.readBytes(32);
    return [
      size5 > 48 ? bytesToBigInt(value, { signed }) : bytesToNumber(value, { signed }),
      32
    ];
  }
  function decodeTuple(cursor, param, { staticPosition }) {
    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);
    const value = hasUnnamedChild ? [] : {};
    let consumed = 0;
    if (hasDynamicChild(param)) {
      const offset = bytesToNumber(cursor.readBytes(sizeOfOffset));
      const start = staticPosition + offset;
      for (let i = 0; i < param.components.length; ++i) {
        const component = param.components[i];
        cursor.setPosition(start + consumed);
        const [data, consumed_] = decodeParameter(cursor, component, {
          staticPosition: start
        });
        consumed += consumed_;
        value[hasUnnamedChild ? i : component?.name] = data;
      }
      cursor.setPosition(staticPosition + 32);
      return [value, 32];
    }
    for (let i = 0; i < param.components.length; ++i) {
      const component = param.components[i];
      const [data, consumed_] = decodeParameter(cursor, component, {
        staticPosition
      });
      value[hasUnnamedChild ? i : component?.name] = data;
      consumed += consumed_;
    }
    return [value, consumed];
  }
  function decodeString(cursor, { staticPosition }) {
    const offset = bytesToNumber(cursor.readBytes(32));
    const start = staticPosition + offset;
    cursor.setPosition(start);
    const length = bytesToNumber(cursor.readBytes(32));
    if (length === 0) {
      cursor.setPosition(staticPosition + 32);
      return ["", 32];
    }
    const data = cursor.readBytes(length, 32);
    const value = bytesToString(trim(data));
    cursor.setPosition(staticPosition + 32);
    return [value, 32];
  }
  function hasDynamicChild(param) {
    const { type } = param;
    if (type === "string")
      return true;
    if (type === "bytes")
      return true;
    if (type.endsWith("[]"))
      return true;
    if (type === "tuple")
      return param.components?.some(hasDynamicChild);
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents && hasDynamicChild({ ...param, type: arrayComponents[1] }))
      return true;
    return false;
  }
  var sizeOfLength, sizeOfOffset;
  var init_decodeAbiParameters = __esm({
    "node_modules/viem/_esm/utils/abi/decodeAbiParameters.js"() {
      "use strict";
      init_abi();
      init_getAddress();
      init_cursor2();
      init_size();
      init_slice();
      init_trim();
      init_fromBytes();
      init_toBytes();
      init_toHex();
      init_encodeAbiParameters();
      sizeOfLength = 32;
      sizeOfOffset = 32;
    }
  });

  // node_modules/viem/_esm/utils/abi/decodeErrorResult.js
  function decodeErrorResult(parameters) {
    const { abi, data } = parameters;
    const signature = slice(data, 0, 4);
    if (signature === "0x")
      throw new AbiDecodingZeroDataError();
    const abi_ = [...abi || [], solidityError, solidityPanic];
    const abiItem = abi_.find((x) => x.type === "error" && signature === toFunctionSelector(formatAbiItem2(x)));
    if (!abiItem)
      throw new AbiErrorSignatureNotFoundError(signature, {
        docsPath: "/docs/contract/decodeErrorResult"
      });
    return {
      abiItem,
      args: "inputs" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? decodeAbiParameters(abiItem.inputs, slice(data, 4)) : void 0,
      errorName: abiItem.name
    };
  }
  var init_decodeErrorResult = __esm({
    "node_modules/viem/_esm/utils/abi/decodeErrorResult.js"() {
      "use strict";
      init_solidity();
      init_abi();
      init_slice();
      init_toFunctionSelector();
      init_decodeAbiParameters();
      init_formatAbiItem2();
    }
  });

  // node_modules/viem/_esm/utils/stringify.js
  var stringify;
  var init_stringify = __esm({
    "node_modules/viem/_esm/utils/stringify.js"() {
      "use strict";
      stringify = (value, replacer, space) => JSON.stringify(value, (key, value_) => {
        const value2 = typeof value_ === "bigint" ? value_.toString() : value_;
        return typeof replacer === "function" ? replacer(key, value2) : value2;
      }, space);
    }
  });

  // node_modules/viem/_esm/utils/abi/formatAbiItemWithArgs.js
  function formatAbiItemWithArgs({ abiItem, args, includeFunctionName = true, includeName = false }) {
    if (!("name" in abiItem))
      return;
    if (!("inputs" in abiItem))
      return;
    if (!abiItem.inputs)
      return;
    return `${includeFunctionName ? abiItem.name : ""}(${abiItem.inputs.map((input, i) => `${includeName && input.name ? `${input.name}: ` : ""}${typeof args[i] === "object" ? stringify(args[i]) : args[i]}`).join(", ")})`;
  }
  var init_formatAbiItemWithArgs = __esm({
    "node_modules/viem/_esm/utils/abi/formatAbiItemWithArgs.js"() {
      "use strict";
      init_stringify();
    }
  });

  // node_modules/viem/_esm/constants/unit.js
  var etherUnits, gweiUnits;
  var init_unit = __esm({
    "node_modules/viem/_esm/constants/unit.js"() {
      "use strict";
      etherUnits = {
        gwei: 9,
        wei: 18
      };
      gweiUnits = {
        ether: -9,
        wei: 9
      };
    }
  });

  // node_modules/viem/_esm/utils/unit/formatUnits.js
  function formatUnits(value, decimals) {
    let display = value.toString();
    const negative = display.startsWith("-");
    if (negative)
      display = display.slice(1);
    display = display.padStart(decimals, "0");
    let [integer, fraction] = [
      display.slice(0, display.length - decimals),
      display.slice(display.length - decimals)
    ];
    fraction = fraction.replace(/(0+)$/, "");
    return `${negative ? "-" : ""}${integer || "0"}${fraction ? `.${fraction}` : ""}`;
  }
  var init_formatUnits = __esm({
    "node_modules/viem/_esm/utils/unit/formatUnits.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/unit/formatEther.js
  function formatEther(wei, unit = "wei") {
    return formatUnits(wei, etherUnits[unit]);
  }
  var init_formatEther = __esm({
    "node_modules/viem/_esm/utils/unit/formatEther.js"() {
      "use strict";
      init_unit();
      init_formatUnits();
    }
  });

  // node_modules/viem/_esm/utils/unit/formatGwei.js
  function formatGwei(wei, unit = "wei") {
    return formatUnits(wei, gweiUnits[unit]);
  }
  var init_formatGwei = __esm({
    "node_modules/viem/_esm/utils/unit/formatGwei.js"() {
      "use strict";
      init_unit();
      init_formatUnits();
    }
  });

  // node_modules/viem/_esm/errors/stateOverride.js
  function prettyStateMapping(stateMapping) {
    return stateMapping.reduce((pretty, { slot, value }) => {
      return `${pretty}        ${slot}: ${value}
`;
    }, "");
  }
  function prettyStateOverride(stateOverride) {
    return stateOverride.reduce((pretty, { address, ...state }) => {
      let val = `${pretty}    ${address}:
`;
      if (state.nonce)
        val += `      nonce: ${state.nonce}
`;
      if (state.balance)
        val += `      balance: ${state.balance}
`;
      if (state.code)
        val += `      code: ${state.code}
`;
      if (state.state) {
        val += "      state:\n";
        val += prettyStateMapping(state.state);
      }
      if (state.stateDiff) {
        val += "      stateDiff:\n";
        val += prettyStateMapping(state.stateDiff);
      }
      return val;
    }, "  State Override:\n").slice(0, -1);
  }
  var AccountStateConflictError, StateAssignmentConflictError;
  var init_stateOverride = __esm({
    "node_modules/viem/_esm/errors/stateOverride.js"() {
      "use strict";
      init_base();
      AccountStateConflictError = class extends BaseError2 {
        constructor({ address }) {
          super(`State for account "${address}" is set multiple times.`, {
            name: "AccountStateConflictError"
          });
        }
      };
      StateAssignmentConflictError = class extends BaseError2 {
        constructor() {
          super("state and stateDiff are set on the same account.", {
            name: "StateAssignmentConflictError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/errors/transaction.js
  function prettyPrint(args) {
    const entries = Object.entries(args).map(([key, value]) => {
      if (value === void 0 || value === false)
        return null;
      return [key, value];
    }).filter(Boolean);
    const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);
    return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join("\n");
  }
  var FeeConflictError, InvalidSerializableTransactionError, TransactionExecutionError, TransactionNotFoundError, TransactionReceiptNotFoundError;
  var init_transaction = __esm({
    "node_modules/viem/_esm/errors/transaction.js"() {
      "use strict";
      init_formatEther();
      init_formatGwei();
      init_base();
      FeeConflictError = class extends BaseError2 {
        constructor() {
          super([
            "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.",
            "Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."
          ].join("\n"), { name: "FeeConflictError" });
        }
      };
      InvalidSerializableTransactionError = class extends BaseError2 {
        constructor({ transaction }) {
          super("Cannot infer a transaction type from provided transaction.", {
            metaMessages: [
              "Provided Transaction:",
              "{",
              prettyPrint(transaction),
              "}",
              "",
              "To infer the type, either provide:",
              "- a `type` to the Transaction, or",
              "- an EIP-1559 Transaction with `maxFeePerGas`, or",
              "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
              "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
              "- an EIP-7702 Transaction with `authorizationList`, or",
              "- a Legacy Transaction with `gasPrice`"
            ],
            name: "InvalidSerializableTransactionError"
          });
        }
      };
      TransactionExecutionError = class extends BaseError2 {
        constructor(cause, { account, docsPath: docsPath7, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
          const prettyArgs = prettyPrint({
            chain: chain && `${chain?.name} (id: ${chain?.id})`,
            from: account?.address,
            to,
            value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
            data,
            gas,
            gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
            maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
            nonce
          });
          super(cause.shortMessage, {
            cause,
            docsPath: docsPath7,
            metaMessages: [
              ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
              "Request Arguments:",
              prettyArgs
            ].filter(Boolean),
            name: "TransactionExecutionError"
          });
          Object.defineProperty(this, "cause", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.cause = cause;
        }
      };
      TransactionNotFoundError = class extends BaseError2 {
        constructor({ blockHash, blockNumber, blockTag, hash: hash4, index: index2 }) {
          let identifier = "Transaction";
          if (blockTag && index2 !== void 0)
            identifier = `Transaction at block time "${blockTag}" at index "${index2}"`;
          if (blockHash && index2 !== void 0)
            identifier = `Transaction at block hash "${blockHash}" at index "${index2}"`;
          if (blockNumber && index2 !== void 0)
            identifier = `Transaction at block number "${blockNumber}" at index "${index2}"`;
          if (hash4)
            identifier = `Transaction with hash "${hash4}"`;
          super(`${identifier} could not be found.`, {
            name: "TransactionNotFoundError"
          });
        }
      };
      TransactionReceiptNotFoundError = class extends BaseError2 {
        constructor({ hash: hash4 }) {
          super(`Transaction receipt with hash "${hash4}" could not be found. The Transaction may not be processed on a block yet.`, {
            name: "TransactionReceiptNotFoundError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/errors/utils.js
  var getContractAddress, getUrl;
  var init_utils3 = __esm({
    "node_modules/viem/_esm/errors/utils.js"() {
      "use strict";
      getContractAddress = (address) => address;
      getUrl = (url) => url;
    }
  });

  // node_modules/viem/_esm/errors/contract.js
  var CallExecutionError, ContractFunctionExecutionError, ContractFunctionRevertedError, ContractFunctionZeroDataError, CounterfactualDeploymentFailedError, RawContractError;
  var init_contract = __esm({
    "node_modules/viem/_esm/errors/contract.js"() {
      "use strict";
      init_parseAccount();
      init_solidity();
      init_decodeErrorResult();
      init_formatAbiItem2();
      init_formatAbiItemWithArgs();
      init_getAbiItem();
      init_formatEther();
      init_formatGwei();
      init_abi();
      init_base();
      init_stateOverride();
      init_transaction();
      init_utils3();
      CallExecutionError = class extends BaseError2 {
        constructor(cause, { account: account_, docsPath: docsPath7, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride }) {
          const account = account_ ? parseAccount(account_) : void 0;
          let prettyArgs = prettyPrint({
            from: account?.address,
            to,
            value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
            data,
            gas,
            gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
            maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
            nonce
          });
          if (stateOverride) {
            prettyArgs += `
${prettyStateOverride(stateOverride)}`;
          }
          super(cause.shortMessage, {
            cause,
            docsPath: docsPath7,
            metaMessages: [
              ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
              "Raw Call Arguments:",
              prettyArgs
            ].filter(Boolean),
            name: "CallExecutionError"
          });
          Object.defineProperty(this, "cause", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.cause = cause;
        }
      };
      ContractFunctionExecutionError = class extends BaseError2 {
        constructor(cause, { abi, args, contractAddress, docsPath: docsPath7, functionName, sender }) {
          const abiItem = getAbiItem({ abi, args, name: functionName });
          const formattedArgs = abiItem ? formatAbiItemWithArgs({
            abiItem,
            args,
            includeFunctionName: false,
            includeName: false
          }) : void 0;
          const functionWithParams = abiItem ? formatAbiItem2(abiItem, { includeName: true }) : void 0;
          const prettyArgs = prettyPrint({
            address: contractAddress && getContractAddress(contractAddress),
            function: functionWithParams,
            args: formattedArgs && formattedArgs !== "()" && `${[...Array(functionName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}`,
            sender
          });
          super(cause.shortMessage || `An unknown error occurred while executing the contract function "${functionName}".`, {
            cause,
            docsPath: docsPath7,
            metaMessages: [
              ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
              prettyArgs && "Contract Call:",
              prettyArgs
            ].filter(Boolean),
            name: "ContractFunctionExecutionError"
          });
          Object.defineProperty(this, "abi", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "args", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "cause", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "contractAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "formattedArgs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "functionName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "sender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.abi = abi;
          this.args = args;
          this.cause = cause;
          this.contractAddress = contractAddress;
          this.functionName = functionName;
          this.sender = sender;
        }
      };
      ContractFunctionRevertedError = class extends BaseError2 {
        constructor({ abi, data, functionName, message }) {
          let cause;
          let decodedData = void 0;
          let metaMessages;
          let reason;
          if (data && data !== "0x") {
            try {
              decodedData = decodeErrorResult({ abi, data });
              const { abiItem, errorName, args: errorArgs } = decodedData;
              if (errorName === "Error") {
                reason = errorArgs[0];
              } else if (errorName === "Panic") {
                const [firstArg] = errorArgs;
                reason = panicReasons[firstArg];
              } else {
                const errorWithParams = abiItem ? formatAbiItem2(abiItem, { includeName: true }) : void 0;
                const formattedArgs = abiItem && errorArgs ? formatAbiItemWithArgs({
                  abiItem,
                  args: errorArgs,
                  includeFunctionName: false,
                  includeName: false
                }) : void 0;
                metaMessages = [
                  errorWithParams ? `Error: ${errorWithParams}` : "",
                  formattedArgs && formattedArgs !== "()" ? `       ${[...Array(errorName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}` : ""
                ];
              }
            } catch (err) {
              cause = err;
            }
          } else if (message)
            reason = message;
          let signature;
          if (cause instanceof AbiErrorSignatureNotFoundError) {
            signature = cause.signature;
            metaMessages = [
              `Unable to decode signature "${signature}" as it was not found on the provided ABI.`,
              "Make sure you are using the correct ABI and that the error exists on it.",
              `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
            ];
          }
          super(reason && reason !== "execution reverted" || signature ? [
            `The contract function "${functionName}" reverted with the following ${signature ? "signature" : "reason"}:`,
            reason || signature
          ].join("\n") : `The contract function "${functionName}" reverted.`, {
            cause,
            metaMessages,
            name: "ContractFunctionRevertedError"
          });
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "reason", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.data = decodedData;
          this.reason = reason;
          this.signature = signature;
        }
      };
      ContractFunctionZeroDataError = class extends BaseError2 {
        constructor({ functionName }) {
          super(`The contract function "${functionName}" returned no data ("0x").`, {
            metaMessages: [
              "This could be due to any of the following:",
              `  - The contract does not have the function "${functionName}",`,
              "  - The parameters passed to the contract function may be invalid, or",
              "  - The address is not a contract."
            ],
            name: "ContractFunctionZeroDataError"
          });
        }
      };
      CounterfactualDeploymentFailedError = class extends BaseError2 {
        constructor({ factory }) {
          super(`Deployment for counterfactual contract call failed${factory ? ` for factory "${factory}".` : ""}`, {
            metaMessages: [
              "Please ensure:",
              "- The `factory` is a valid contract deployment factory (ie. Create2 Factory, ERC-4337 Factory, etc).",
              "- The `factoryData` is a valid encoded function call for contract deployment function on the factory."
            ],
            name: "CounterfactualDeploymentFailedError"
          });
        }
      };
      RawContractError = class extends BaseError2 {
        constructor({ data, message }) {
          super(message || "", { name: "RawContractError" });
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 3
          });
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.data = data;
        }
      };
    }
  });

  // node_modules/viem/_esm/errors/request.js
  var HttpRequestError, RpcRequestError, TimeoutError;
  var init_request = __esm({
    "node_modules/viem/_esm/errors/request.js"() {
      "use strict";
      init_stringify();
      init_base();
      init_utils3();
      HttpRequestError = class extends BaseError2 {
        constructor({ body, cause, details, headers, status, url }) {
          super("HTTP request failed.", {
            cause,
            details,
            metaMessages: [
              status && `Status: ${status}`,
              `URL: ${getUrl(url)}`,
              body && `Request body: ${stringify(body)}`
            ].filter(Boolean),
            name: "HttpRequestError"
          });
          Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.body = body;
          this.headers = headers;
          this.status = status;
          this.url = url;
        }
      };
      RpcRequestError = class extends BaseError2 {
        constructor({ body, error, url }) {
          super("RPC Request failed.", {
            cause: error,
            details: error.message,
            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],
            name: "RpcRequestError"
          });
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.code = error.code;
        }
      };
      TimeoutError = class extends BaseError2 {
        constructor({ body, url }) {
          super("The request took too long to respond.", {
            details: "The request timed out.",
            metaMessages: [`URL: ${getUrl(url)}`, `Request body: ${stringify(body)}`],
            name: "TimeoutError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/errors/rpc.js
  var unknownErrorCode, RpcError, ProviderRpcError, ParseRpcError, InvalidRequestRpcError, MethodNotFoundRpcError, InvalidParamsRpcError, InternalRpcError, InvalidInputRpcError, ResourceNotFoundRpcError, ResourceUnavailableRpcError, TransactionRejectedRpcError, MethodNotSupportedRpcError, LimitExceededRpcError, JsonRpcVersionUnsupportedError, UserRejectedRequestError, UnauthorizedProviderError, UnsupportedProviderMethodError, ProviderDisconnectedError, ChainDisconnectedError, SwitchChainError, UnknownRpcError;
  var init_rpc = __esm({
    "node_modules/viem/_esm/errors/rpc.js"() {
      "use strict";
      init_base();
      init_request();
      unknownErrorCode = -1;
      RpcError = class extends BaseError2 {
        constructor(cause, { code, docsPath: docsPath7, metaMessages, name, shortMessage }) {
          super(shortMessage, {
            cause,
            docsPath: docsPath7,
            metaMessages: metaMessages || cause?.metaMessages,
            name: name || "RpcError"
          });
          Object.defineProperty(this, "code", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.name = name || cause.name;
          this.code = cause instanceof RpcRequestError ? cause.code : code ?? unknownErrorCode;
        }
      };
      ProviderRpcError = class extends RpcError {
        constructor(cause, options2) {
          super(cause, options2);
          Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          this.data = options2.data;
        }
      };
      ParseRpcError = class _ParseRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _ParseRpcError.code,
            name: "ParseRpcError",
            shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
          });
        }
      };
      Object.defineProperty(ParseRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32700
      });
      InvalidRequestRpcError = class _InvalidRequestRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _InvalidRequestRpcError.code,
            name: "InvalidRequestRpcError",
            shortMessage: "JSON is not a valid request object."
          });
        }
      };
      Object.defineProperty(InvalidRequestRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32600
      });
      MethodNotFoundRpcError = class _MethodNotFoundRpcError extends RpcError {
        constructor(cause, { method } = {}) {
          super(cause, {
            code: _MethodNotFoundRpcError.code,
            name: "MethodNotFoundRpcError",
            shortMessage: `The method${method ? ` "${method}"` : ""} does not exist / is not available.`
          });
        }
      };
      Object.defineProperty(MethodNotFoundRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32601
      });
      InvalidParamsRpcError = class _InvalidParamsRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _InvalidParamsRpcError.code,
            name: "InvalidParamsRpcError",
            shortMessage: [
              "Invalid parameters were provided to the RPC method.",
              "Double check you have provided the correct parameters."
            ].join("\n")
          });
        }
      };
      Object.defineProperty(InvalidParamsRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32602
      });
      InternalRpcError = class _InternalRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _InternalRpcError.code,
            name: "InternalRpcError",
            shortMessage: "An internal error was received."
          });
        }
      };
      Object.defineProperty(InternalRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32603
      });
      InvalidInputRpcError = class _InvalidInputRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _InvalidInputRpcError.code,
            name: "InvalidInputRpcError",
            shortMessage: [
              "Missing or invalid parameters.",
              "Double check you have provided the correct parameters."
            ].join("\n")
          });
        }
      };
      Object.defineProperty(InvalidInputRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32e3
      });
      ResourceNotFoundRpcError = class _ResourceNotFoundRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _ResourceNotFoundRpcError.code,
            name: "ResourceNotFoundRpcError",
            shortMessage: "Requested resource not found."
          });
          Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ResourceNotFoundRpcError"
          });
        }
      };
      Object.defineProperty(ResourceNotFoundRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32001
      });
      ResourceUnavailableRpcError = class _ResourceUnavailableRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _ResourceUnavailableRpcError.code,
            name: "ResourceUnavailableRpcError",
            shortMessage: "Requested resource not available."
          });
        }
      };
      Object.defineProperty(ResourceUnavailableRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32002
      });
      TransactionRejectedRpcError = class _TransactionRejectedRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _TransactionRejectedRpcError.code,
            name: "TransactionRejectedRpcError",
            shortMessage: "Transaction creation failed."
          });
        }
      };
      Object.defineProperty(TransactionRejectedRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32003
      });
      MethodNotSupportedRpcError = class _MethodNotSupportedRpcError extends RpcError {
        constructor(cause, { method } = {}) {
          super(cause, {
            code: _MethodNotSupportedRpcError.code,
            name: "MethodNotSupportedRpcError",
            shortMessage: `Method${method ? ` "${method}"` : ""} is not implemented.`
          });
        }
      };
      Object.defineProperty(MethodNotSupportedRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32004
      });
      LimitExceededRpcError = class _LimitExceededRpcError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _LimitExceededRpcError.code,
            name: "LimitExceededRpcError",
            shortMessage: "Request exceeds defined limit."
          });
        }
      };
      Object.defineProperty(LimitExceededRpcError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32005
      });
      JsonRpcVersionUnsupportedError = class _JsonRpcVersionUnsupportedError extends RpcError {
        constructor(cause) {
          super(cause, {
            code: _JsonRpcVersionUnsupportedError.code,
            name: "JsonRpcVersionUnsupportedError",
            shortMessage: "Version of JSON-RPC protocol is not supported."
          });
        }
      };
      Object.defineProperty(JsonRpcVersionUnsupportedError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: -32006
      });
      UserRejectedRequestError = class _UserRejectedRequestError extends ProviderRpcError {
        constructor(cause) {
          super(cause, {
            code: _UserRejectedRequestError.code,
            name: "UserRejectedRequestError",
            shortMessage: "User rejected the request."
          });
        }
      };
      Object.defineProperty(UserRejectedRequestError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 4001
      });
      UnauthorizedProviderError = class _UnauthorizedProviderError extends ProviderRpcError {
        constructor(cause) {
          super(cause, {
            code: _UnauthorizedProviderError.code,
            name: "UnauthorizedProviderError",
            shortMessage: "The requested method and/or account has not been authorized by the user."
          });
        }
      };
      Object.defineProperty(UnauthorizedProviderError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 4100
      });
      UnsupportedProviderMethodError = class _UnsupportedProviderMethodError extends ProviderRpcError {
        constructor(cause, { method } = {}) {
          super(cause, {
            code: _UnsupportedProviderMethodError.code,
            name: "UnsupportedProviderMethodError",
            shortMessage: `The Provider does not support the requested method${method ? ` " ${method}"` : ""}.`
          });
        }
      };
      Object.defineProperty(UnsupportedProviderMethodError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 4200
      });
      ProviderDisconnectedError = class _ProviderDisconnectedError extends ProviderRpcError {
        constructor(cause) {
          super(cause, {
            code: _ProviderDisconnectedError.code,
            name: "ProviderDisconnectedError",
            shortMessage: "The Provider is disconnected from all chains."
          });
        }
      };
      Object.defineProperty(ProviderDisconnectedError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 4900
      });
      ChainDisconnectedError = class _ChainDisconnectedError extends ProviderRpcError {
        constructor(cause) {
          super(cause, {
            code: _ChainDisconnectedError.code,
            name: "ChainDisconnectedError",
            shortMessage: "The Provider is not connected to the requested chain."
          });
        }
      };
      Object.defineProperty(ChainDisconnectedError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 4901
      });
      SwitchChainError = class _SwitchChainError extends ProviderRpcError {
        constructor(cause) {
          super(cause, {
            code: _SwitchChainError.code,
            name: "SwitchChainError",
            shortMessage: "An error occurred when attempting to switch chain."
          });
        }
      };
      Object.defineProperty(SwitchChainError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 4902
      });
      UnknownRpcError = class extends RpcError {
        constructor(cause) {
          super(cause, {
            name: "UnknownRpcError",
            shortMessage: "An unknown RPC error occurred."
          });
        }
      };
    }
  });

  // node_modules/@noble/hashes/esm/_md.js
  function setBigUint64(view, byteOffset, value, isLE4) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE4);
    const _32n4 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n4 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE4 ? 4 : 0;
    const l = isLE4 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE4);
    view.setUint32(byteOffset + l, wl, isLE4);
  }
  var Chi, Maj, HashMD;
  var init_md = __esm({
    "node_modules/@noble/hashes/esm/_md.js"() {
      "use strict";
      init_assert();
      init_utils2();
      Chi = (a, b, c) => a & b ^ ~a & c;
      Maj = (a, b, c) => a & b ^ a & c ^ b & c;
      HashMD = class extends Hash {
        constructor(blockLen, outputLen, padOffset, isLE4) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE4;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = createView(this.buffer);
        }
        update(data) {
          exists(this);
          const { view, buffer: buffer2, blockLen } = this;
          data = toBytes2(data);
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            if (take === blockLen) {
              const dataView = createView(data);
              for (; blockLen <= len - pos; pos += blockLen)
                this.process(dataView, pos);
              continue;
            }
            buffer2.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
              this.process(view, 0);
              this.pos = 0;
            }
          }
          this.length += data.length;
          this.roundClean();
          return this;
        }
        digestInto(out) {
          exists(this);
          output(out, this);
          this.finished = true;
          const { buffer: buffer2, view, blockLen, isLE: isLE4 } = this;
          let { pos } = this;
          buffer2[pos++] = 128;
          this.buffer.subarray(pos).fill(0);
          if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
          }
          for (let i = pos; i < blockLen; i++)
            buffer2[i] = 0;
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE4);
          this.process(view, 0);
          const oview = createView(out);
          const len = this.outputLen;
          if (len % 4)
            throw new Error("_sha2: outputLen should be aligned to 32bit");
          const outLen = len / 4;
          const state = this.get();
          if (outLen > state.length)
            throw new Error("_sha2: outputLen bigger than state");
          for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE4);
        }
        digest() {
          const { buffer: buffer2, outputLen } = this;
          this.digestInto(buffer2);
          const res = buffer2.slice(0, outputLen);
          this.destroy();
          return res;
        }
        _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen)
            to.buffer.set(buffer2);
          return to;
        }
      };
    }
  });

  // node_modules/@noble/hashes/esm/sha256.js
  var SHA256_K, SHA256_IV, SHA256_W, SHA256, sha256;
  var init_sha256 = __esm({
    "node_modules/@noble/hashes/esm/sha256.js"() {
      "use strict";
      init_md();
      init_utils2();
      SHA256_K = /* @__PURE__ */ new Uint32Array([
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ]);
      SHA256_IV = /* @__PURE__ */ new Uint32Array([
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ]);
      SHA256_W = /* @__PURE__ */ new Uint32Array(64);
      SHA256 = class extends HashMD {
        constructor() {
          super(64, 32, 8, false);
          this.A = SHA256_IV[0] | 0;
          this.B = SHA256_IV[1] | 0;
          this.C = SHA256_IV[2] | 0;
          this.D = SHA256_IV[3] | 0;
          this.E = SHA256_IV[4] | 0;
          this.F = SHA256_IV[5] | 0;
          this.G = SHA256_IV[6] | 0;
          this.H = SHA256_IV[7] | 0;
        }
        get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
          }
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          F = F + this.F | 0;
          G = G + this.G | 0;
          H = H + this.H | 0;
          this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
          SHA256_W.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
        }
      };
      sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());
    }
  });

  // node_modules/@noble/hashes/esm/hmac.js
  var HMAC, hmac;
  var init_hmac = __esm({
    "node_modules/@noble/hashes/esm/hmac.js"() {
      "use strict";
      init_assert();
      init_utils2();
      HMAC = class extends Hash {
        constructor(hash4, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          hash(hash4);
          const key = toBytes2(_key);
          this.iHash = hash4.create();
          if (typeof this.iHash.update !== "function")
            throw new Error("Expected instance of class which extends utils.Hash");
          this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const blockLen = this.blockLen;
          const pad4 = new Uint8Array(blockLen);
          pad4.set(key.length > blockLen ? hash4.create().update(key).digest() : key);
          for (let i = 0; i < pad4.length; i++)
            pad4[i] ^= 54;
          this.iHash.update(pad4);
          this.oHash = hash4.create();
          for (let i = 0; i < pad4.length; i++)
            pad4[i] ^= 54 ^ 92;
          this.oHash.update(pad4);
          pad4.fill(0);
        }
        update(buf) {
          exists(this);
          this.iHash.update(buf);
          return this;
        }
        digestInto(out) {
          exists(this);
          bytes(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
        }
        digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
        }
        _cloneInto(to) {
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
        }
        destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
        }
      };
      hmac = (hash4, key, message) => new HMAC(hash4, key).update(message).digest();
      hmac.create = (hash4, key) => new HMAC(hash4, key);
    }
  });

  // node_modules/@noble/curves/esm/abstract/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    aInRange: () => aInRange,
    abool: () => abool,
    abytes: () => abytes,
    bitGet: () => bitGet,
    bitLen: () => bitLen,
    bitMask: () => bitMask,
    bitSet: () => bitSet,
    bytesToHex: () => bytesToHex2,
    bytesToNumberBE: () => bytesToNumberBE,
    bytesToNumberLE: () => bytesToNumberLE,
    concatBytes: () => concatBytes3,
    createHmacDrbg: () => createHmacDrbg,
    ensureBytes: () => ensureBytes,
    equalBytes: () => equalBytes,
    hexToBytes: () => hexToBytes2,
    hexToNumber: () => hexToNumber2,
    inRange: () => inRange,
    isBytes: () => isBytes2,
    memoized: () => memoized,
    notImplemented: () => notImplemented,
    numberToBytesBE: () => numberToBytesBE,
    numberToBytesLE: () => numberToBytesLE,
    numberToHexUnpadded: () => numberToHexUnpadded,
    numberToVarBytesBE: () => numberToVarBytesBE,
    utf8ToBytes: () => utf8ToBytes2,
    validateObject: () => validateObject
  });
  function isBytes2(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function abytes(item) {
    if (!isBytes2(item))
      throw new Error("Uint8Array expected");
  }
  function abool(title, value) {
    if (typeof value !== "boolean")
      throw new Error(`${title} must be valid boolean, got "${value}".`);
  }
  function bytesToHex2(bytes4) {
    abytes(bytes4);
    let hex = "";
    for (let i = 0; i < bytes4.length; i++) {
      hex += hexes2[bytes4[i]];
    }
    return hex;
  }
  function numberToHexUnpadded(num2) {
    const hex = num2.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber2(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    return BigInt(hex === "" ? "0" : `0x${hex}`);
  }
  function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
      return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
      return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
      return char - (asciis._a - 10);
    return;
  }
  function hexToBytes2(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex.charCodeAt(hi));
      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex[hi] + hex[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array[ai] = n1 * 16 + n2;
    }
    return array;
  }
  function bytesToNumberBE(bytes4) {
    return hexToNumber2(bytesToHex2(bytes4));
  }
  function bytesToNumberLE(bytes4) {
    abytes(bytes4);
    return hexToNumber2(bytesToHex2(Uint8Array.from(bytes4).reverse()));
  }
  function numberToBytesBE(n, len) {
    return hexToBytes2(n.toString(16).padStart(len * 2, "0"));
  }
  function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
  }
  function numberToVarBytesBE(n) {
    return hexToBytes2(numberToHexUnpadded(n));
  }
  function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") {
      try {
        res = hexToBytes2(hex);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
      }
    } else if (isBytes2(hex)) {
      res = Uint8Array.from(hex);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
  }
  function concatBytes3(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      abytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad4 = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad4);
      pad4 += a.length;
    }
    return res;
  }
  function equalBytes(a, b) {
    if (a.length !== b.length)
      return false;
    let diff2 = 0;
    for (let i = 0; i < a.length; i++)
      diff2 |= a[i] ^ b[i];
    return diff2 === 0;
  }
  function utf8ToBytes2(str2) {
    if (typeof str2 !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
    return new Uint8Array(new TextEncoder().encode(str2));
  }
  function inRange(n, min, max) {
    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
  }
  function aInRange(title, n, min, max) {
    if (!inRange(n, min, max))
      throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);
  }
  function bitLen(n) {
    let len;
    for (len = 0; n > _0n2; n >>= _1n2, len += 1)
      ;
    return len;
  }
  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n2;
  }
  function bitSet(n, pos, value) {
    return n | (value ? _1n2 : _0n2) << BigInt(pos);
  }
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen4 = () => {
      if (i++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len += v.length;
      }
      return concatBytes3(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen4())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
      const checkVal = validatorFns[type];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
      }
    };
    for (const [fieldName, type] of Object.entries(validators))
      checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
      checkField(fieldName, type, true);
    return object;
  }
  function memoized(fn) {
    const map = /* @__PURE__ */ new WeakMap();
    return (arg, ...args) => {
      const val = map.get(arg);
      if (val !== void 0)
        return val;
      const computed = fn(arg, ...args);
      map.set(arg, computed);
      return computed;
    };
  }
  var _0n2, _1n2, _2n2, hexes2, asciis, isPosBig, bitMask, u8n, u8fr, validatorFns, notImplemented;
  var init_utils4 = __esm({
    "node_modules/@noble/curves/esm/abstract/utils.js"() {
      "use strict";
      _0n2 = /* @__PURE__ */ BigInt(0);
      _1n2 = /* @__PURE__ */ BigInt(1);
      _2n2 = /* @__PURE__ */ BigInt(2);
      hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
      asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
      isPosBig = (n) => typeof n === "bigint" && _0n2 <= n;
      bitMask = (n) => (_2n2 << BigInt(n - 1)) - _1n2;
      u8n = (data) => new Uint8Array(data);
      u8fr = (arr) => Uint8Array.from(arr);
      validatorFns = {
        bigint: (val) => typeof val === "bigint",
        function: (val) => typeof val === "function",
        boolean: (val) => typeof val === "boolean",
        string: (val) => typeof val === "string",
        stringOrUint8Array: (val) => typeof val === "string" || isBytes2(val),
        isSafeInteger: (val) => Number.isSafeInteger(val),
        array: (val) => Array.isArray(val),
        field: (val, object) => object.Fp.isValid(val),
        hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
      };
      notImplemented = () => {
        throw new Error("not implemented");
      };
    }
  });

  // node_modules/@noble/curves/esm/abstract/modular.js
  function mod(a, b) {
    const result = a % b;
    return result >= _0n3 ? result : b + result;
  }
  function pow(num2, power, modulo) {
    if (modulo <= _0n3 || power < _0n3)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n3)
      return _0n3;
    let res = _1n3;
    while (power > _0n3) {
      if (power & _1n3)
        res = res * num2 % modulo;
      num2 = num2 * num2 % modulo;
      power >>= _1n3;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n3) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number4, modulo) {
    if (number4 === _0n3 || modulo <= _0n3) {
      throw new Error(`invert: expected positive integers, got n=${number4} mod=${modulo}`);
    }
    let a = mod(number4, modulo);
    let b = modulo;
    let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
    while (a !== _0n3) {
      const q = b / a;
      const r = b % a;
      const m = x - u * q;
      const n = y - v * q;
      b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n3)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n3) / _2n3;
    let Q, S, Z;
    for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)
      ;
    for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n3) / _4n;
      return function tonelliFast(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n3) / _2n3;
    return function tonelliSlow(Fp2, n) {
      if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
        throw new Error("Cannot find square root");
      let r = S;
      let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
      let x = Fp2.pow(n, Q1div2);
      let b = Fp2.pow(n, Q);
      while (!Fp2.eql(b, Fp2.ONE)) {
        if (Fp2.eql(b, Fp2.ZERO))
          return Fp2.ZERO;
        let m = 1;
        for (let t2 = Fp2.sqr(b); m < r; m++) {
          if (Fp2.eql(t2, Fp2.ONE))
            break;
          t2 = Fp2.sqr(t2);
        }
        const ge = Fp2.pow(g, _1n3 << BigInt(r - m - 1));
        g = Fp2.sqr(ge);
        x = Fp2.mul(x, ge);
        b = Fp2.mul(b, g);
        r = m;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n3) / _4n;
      return function sqrt3mod4(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp2, n) {
        const n2 = Fp2.mul(n, _2n3);
        const v = Fp2.pow(n2, c1);
        const nv = Fp2.mul(n, v);
        const i = Fp2.mul(Fp2.mul(nv, _2n3), v);
        const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _16n === _9n) {
    }
    return tonelliShanks(P);
  }
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
      map[val] = "function";
      return map;
    }, initial);
    return validateObject(field, opts);
  }
  function FpPow(f, num2, power) {
    if (power < _0n3)
      throw new Error("Expected power > 0");
    if (power === _0n3)
      return f.ONE;
    if (power === _1n3)
      return num2;
    let p = f.ONE;
    let d = num2;
    while (power > _0n3) {
      if (power & _1n3)
        p = f.mul(p, d);
      d = f.sqr(d);
      power >>= _1n3;
    }
    return p;
  }
  function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num2, i) => {
      if (f.is0(num2))
        return acc;
      tmp[i] = acc;
      return f.mul(acc, num2);
    }, f.ONE);
    const inverted = f.inv(lastMultiplied);
    nums.reduceRight((acc, num2, i) => {
      if (f.is0(num2))
        return acc;
      tmp[i] = f.mul(acc, tmp[i]);
      return f.mul(acc, num2);
    }, inverted);
    return tmp;
  }
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER4, bitLen2, isLE4 = false, redef = {}) {
    if (ORDER4 <= _0n3)
      throw new Error(`Expected Field ORDER > 0, got ${ORDER4}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER4, bitLen2);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER4);
    const f = Object.freeze({
      ORDER: ORDER4,
      BITS,
      BYTES,
      MASK: bitMask(BITS),
      ZERO: _0n3,
      ONE: _1n3,
      create: (num2) => mod(num2, ORDER4),
      isValid: (num2) => {
        if (typeof num2 !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num2}`);
        return _0n3 <= num2 && num2 < ORDER4;
      },
      is0: (num2) => num2 === _0n3,
      isOdd: (num2) => (num2 & _1n3) === _1n3,
      neg: (num2) => mod(-num2, ORDER4),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num2) => mod(num2 * num2, ORDER4),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER4),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER4),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER4),
      pow: (num2, power) => FpPow(f, num2, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER4), ORDER4),
      // Same as above, but doesn't normalize
      sqrN: (num2) => num2 * num2,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num2) => invert(num2, ORDER4),
      sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
      invertBatch: (lst) => FpInvertBatch(f, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b, c) => c ? b : a,
      toBytes: (num2) => isLE4 ? numberToBytesLE(num2, BYTES) : numberToBytesBE(num2, BYTES),
      fromBytes: (bytes4) => {
        if (bytes4.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes4.length}`);
        return isLE4 ? bytesToNumberLE(bytes4) : bytesToNumberBE(bytes4);
      }
    });
    return Object.freeze(f);
  }
  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  function mapHashToField(key, fieldOrder, isLE4 = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    if (len < 16 || len < minLen || len > 1024)
      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num2 = isLE4 ? bytesToNumberBE(key) : bytesToNumberLE(key);
    const reduced = mod(num2, fieldOrder - _1n3) + _1n3;
    return isLE4 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
  }
  var _0n3, _1n3, _2n3, _3n, _4n, _5n, _8n, _9n, _16n, FIELD_FIELDS;
  var init_modular = __esm({
    "node_modules/@noble/curves/esm/abstract/modular.js"() {
      "use strict";
      init_utils4();
      _0n3 = BigInt(0);
      _1n3 = BigInt(1);
      _2n3 = BigInt(2);
      _3n = BigInt(3);
      _4n = BigInt(4);
      _5n = BigInt(5);
      _8n = BigInt(8);
      _9n = BigInt(9);
      _16n = BigInt(16);
      FIELD_FIELDS = [
        "create",
        "isValid",
        "is0",
        "neg",
        "inv",
        "sqrt",
        "sqr",
        "eql",
        "add",
        "sub",
        "mul",
        "pow",
        "div",
        "addN",
        "subN",
        "mulN",
        "sqrN"
      ];
    }
  });

  // node_modules/@noble/curves/esm/abstract/curve.js
  function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const validateW = (W) => {
      if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
        throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);
    };
    const opts = (W) => {
      validateW(W);
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder(elm, n) {
        let p = c.ZERO;
        let d = elm;
        while (n > _0n4) {
          if (n & _1n4)
            p = p.add(d);
          d = d.double();
          n >>= _1n4;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base2 = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base2 = p;
          points.push(base2);
          for (let i = 1; i < windowSize; i++) {
            base2 = base2.add(p);
            points.push(base2);
          }
          p = base2.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f = c.BASE;
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset = window2 * windowSize;
          let wbits = Number(n & mask);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n4;
          }
          const offset1 = offset;
          const offset2 = offset + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f = f.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        }
        return { p, f };
      },
      wNAFCached(P, n, transform) {
        const W = pointWindowSizes.get(P) || 1;
        let comp = pointPrecomputes.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1)
            pointPrecomputes.set(P, transform(comp));
        }
        return this.wNAF(W, comp, n);
      },
      // We calculate precomputes for elliptic curve point multiplication
      // using windowed method. This specifies window size and
      // stores precomputed values. Usually only base point would be precomputed.
      setWindowSize(P, W) {
        validateW(W);
        pointWindowSizes.set(P, W);
        pointPrecomputes.delete(P);
      }
    };
  }
  function pippenger(c, field, points, scalars) {
    if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)
      throw new Error("arrays of points and scalars must have equal length");
    scalars.forEach((s, i) => {
      if (!field.isValid(s))
        throw new Error(`wrong scalar at index ${i}`);
    });
    points.forEach((p, i) => {
      if (!(p instanceof c))
        throw new Error(`wrong point at index ${i}`);
    });
    const wbits = bitLen(BigInt(points.length));
    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;
    const MASK = (1 << windowSize) - 1;
    const buckets = new Array(MASK + 1).fill(c.ZERO);
    const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;
    let sum = c.ZERO;
    for (let i = lastBits; i >= 0; i -= windowSize) {
      buckets.fill(c.ZERO);
      for (let j = 0; j < scalars.length; j++) {
        const scalar = scalars[j];
        const wbits2 = Number(scalar >> BigInt(i) & BigInt(MASK));
        buckets[wbits2] = buckets[wbits2].add(points[j]);
      }
      let resI = c.ZERO;
      for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {
        sumI = sumI.add(buckets[j]);
        resI = resI.add(sumI);
      }
      sum = sum.add(resI);
      if (i !== 0)
        for (let j = 0; j < windowSize; j++)
          sum = sum.double();
    }
    return sum;
  }
  function validateBasic(curve) {
    validateField(curve.Fp);
    validateObject(curve, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...nLength(curve.n, curve.nBitLength),
      ...curve,
      ...{ p: curve.Fp.ORDER }
    });
  }
  var _0n4, _1n4, pointPrecomputes, pointWindowSizes;
  var init_curve = __esm({
    "node_modules/@noble/curves/esm/abstract/curve.js"() {
      "use strict";
      init_modular();
      init_utils4();
      _0n4 = BigInt(0);
      _1n4 = BigInt(1);
      pointPrecomputes = /* @__PURE__ */ new WeakMap();
      pointWindowSizes = /* @__PURE__ */ new WeakMap();
    }
  });

  // node_modules/@noble/curves/esm/abstract/weierstrass.js
  function validateSigVerOpts(opts) {
    if (opts.lowS !== void 0)
      abool("lowS", opts.lowS);
    if (opts.prehash !== void 0)
      abool("prehash", opts.prehash);
  }
  function validatePointOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      a: "field",
      b: "field"
    }, {
      allowedPrivateKeyLengths: "array",
      wrapPrivateKey: "boolean",
      isTorsionFree: "function",
      clearCofactor: "function",
      allowInfinityPoint: "boolean",
      fromBytes: "function",
      toBytes: "function"
    });
    const { endo, Fp: Fp2, a } = opts;
    if (endo) {
      if (!Fp2.eql(a, Fp2.ZERO)) {
        throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
      }
      if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
        throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
      }
    }
    return Object.freeze({ ...opts });
  }
  function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp: Fp2 } = CURVE;
    const Fn = Field(CURVE.n, CURVE.nBitLength);
    const toBytes5 = CURVE.toBytes || ((_c, point, _isCompressed) => {
      const a = point.toAffine();
      return concatBytes3(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes4) => {
      const tail = bytes4.subarray(1);
      const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
      const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
      return { x, y };
    });
    function weierstrassEquation(x) {
      const { a, b } = CURVE;
      const x2 = Fp2.sqr(x);
      const x3 = Fp2.mul(x2, x);
      return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b);
    }
    if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
      throw new Error("bad generator point: equation left != right");
    function isWithinCurveOrder(num2) {
      return inRange(num2, _1n5, CURVE.n);
    }
    function normPrivateKeyToScalar(key) {
      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
      if (lengths && typeof key !== "bigint") {
        if (isBytes2(key))
          key = bytesToHex2(key);
        if (typeof key !== "string" || !lengths.includes(key.length))
          throw new Error("Invalid key");
        key = key.padStart(nByteLength * 2, "0");
      }
      let num2;
      try {
        num2 = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
      } catch (error) {
        throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
      }
      if (wrapPrivateKey)
        num2 = mod(num2, N);
      aInRange("private key", num2, _1n5, N);
      return num2;
    }
    function assertPrjPoint(other) {
      if (!(other instanceof Point2))
        throw new Error("ProjectivePoint expected");
    }
    const toAffineMemo = memoized((p, iz) => {
      const { px: x, py: y, pz: z } = p;
      if (Fp2.eql(z, Fp2.ONE))
        return { x, y };
      const is0 = p.is0();
      if (iz == null)
        iz = is0 ? Fp2.ONE : Fp2.inv(z);
      const ax = Fp2.mul(x, iz);
      const ay = Fp2.mul(y, iz);
      const zz = Fp2.mul(z, iz);
      if (is0)
        return { x: Fp2.ZERO, y: Fp2.ZERO };
      if (!Fp2.eql(zz, Fp2.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    });
    const assertValidMemo = memoized((p) => {
      if (p.is0()) {
        if (CURVE.allowInfinityPoint && !Fp2.is0(p.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = p.toAffine();
      if (!Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp2.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp2.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!p.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
      return true;
    });
    class Point2 {
      constructor(px, py, pz) {
        this.px = px;
        this.py = py;
        this.pz = pz;
        if (px == null || !Fp2.isValid(px))
          throw new Error("x required");
        if (py == null || !Fp2.isValid(py))
          throw new Error("y required");
        if (pz == null || !Fp2.isValid(pz))
          throw new Error("z required");
        Object.freeze(this);
      }
      // Does not validate if the point is on-curve.
      // Use fromHex instead, or call assertValidity() later.
      static fromAffine(p) {
        const { x, y } = p || {};
        if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("invalid affine point");
        if (p instanceof Point2)
          throw new Error("projective point not allowed");
        const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
        if (is0(x) && is0(y))
          return Point2.ZERO;
        return new Point2(x, y, Fp2.ONE);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      /**
       * Takes a bunch of Projective Points but executes only one
       * inversion on all of them. Inversion is very slow operation,
       * so this improves performance massively.
       * Optimization: converts a list of projective points to a list of identical points with Z=1.
       */
      static normalizeZ(points) {
        const toInv = Fp2.invertBatch(points.map((p) => p.pz));
        return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
      }
      /**
       * Converts hash string or Uint8Array to Point.
       * @param hex short/long ECDSA hex
       */
      static fromHex(hex) {
        const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
        P.assertValidity();
        return P;
      }
      // Multiplies generator point by privateKey.
      static fromPrivateKey(privateKey) {
        return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
      }
      // Multiscalar Multiplication
      static msm(points, scalars) {
        return pippenger(Point2, Fn, points, scalars);
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        wnaf.setWindowSize(this, windowSize);
      }
      // A point on curve is valid if it conforms to equation.
      assertValidity() {
        assertValidMemo(this);
      }
      hasEvenY() {
        const { y } = this.toAffine();
        if (Fp2.isOdd)
          return !Fp2.isOdd(y);
        throw new Error("Field doesn't support isOdd");
      }
      /**
       * Compare one point to another.
       */
      equals(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
        const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
        return U1 && U2;
      }
      /**
       * Flips point to one corresponding to (x, -y) in Affine coordinates.
       */
      negate() {
        return new Point2(this.px, Fp2.neg(this.py), this.pz);
      }
      // Renes-Costello-Batina exception-free doubling formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 3
      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
      double() {
        const { a, b } = CURVE;
        const b3 = Fp2.mul(b, _3n2);
        const { px: X1, py: Y1, pz: Z1 } = this;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        let t0 = Fp2.mul(X1, X1);
        let t1 = Fp2.mul(Y1, Y1);
        let t2 = Fp2.mul(Z1, Z1);
        let t3 = Fp2.mul(X1, Y1);
        t3 = Fp2.add(t3, t3);
        Z3 = Fp2.mul(X1, Z1);
        Z3 = Fp2.add(Z3, Z3);
        X3 = Fp2.mul(a, Z3);
        Y3 = Fp2.mul(b3, t2);
        Y3 = Fp2.add(X3, Y3);
        X3 = Fp2.sub(t1, Y3);
        Y3 = Fp2.add(t1, Y3);
        Y3 = Fp2.mul(X3, Y3);
        X3 = Fp2.mul(t3, X3);
        Z3 = Fp2.mul(b3, Z3);
        t2 = Fp2.mul(a, t2);
        t3 = Fp2.sub(t0, t2);
        t3 = Fp2.mul(a, t3);
        t3 = Fp2.add(t3, Z3);
        Z3 = Fp2.add(t0, t0);
        t0 = Fp2.add(Z3, t0);
        t0 = Fp2.add(t0, t2);
        t0 = Fp2.mul(t0, t3);
        Y3 = Fp2.add(Y3, t0);
        t2 = Fp2.mul(Y1, Z1);
        t2 = Fp2.add(t2, t2);
        t0 = Fp2.mul(t2, t3);
        X3 = Fp2.sub(X3, t0);
        Z3 = Fp2.mul(t2, t1);
        Z3 = Fp2.add(Z3, Z3);
        Z3 = Fp2.add(Z3, Z3);
        return new Point2(X3, Y3, Z3);
      }
      // Renes-Costello-Batina exception-free addition formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 1
      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
      add(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        const a = CURVE.a;
        const b3 = Fp2.mul(CURVE.b, _3n2);
        let t0 = Fp2.mul(X1, X2);
        let t1 = Fp2.mul(Y1, Y2);
        let t2 = Fp2.mul(Z1, Z2);
        let t3 = Fp2.add(X1, Y1);
        let t4 = Fp2.add(X2, Y2);
        t3 = Fp2.mul(t3, t4);
        t4 = Fp2.add(t0, t1);
        t3 = Fp2.sub(t3, t4);
        t4 = Fp2.add(X1, Z1);
        let t5 = Fp2.add(X2, Z2);
        t4 = Fp2.mul(t4, t5);
        t5 = Fp2.add(t0, t2);
        t4 = Fp2.sub(t4, t5);
        t5 = Fp2.add(Y1, Z1);
        X3 = Fp2.add(Y2, Z2);
        t5 = Fp2.mul(t5, X3);
        X3 = Fp2.add(t1, t2);
        t5 = Fp2.sub(t5, X3);
        Z3 = Fp2.mul(a, t4);
        X3 = Fp2.mul(b3, t2);
        Z3 = Fp2.add(X3, Z3);
        X3 = Fp2.sub(t1, Z3);
        Z3 = Fp2.add(t1, Z3);
        Y3 = Fp2.mul(X3, Z3);
        t1 = Fp2.add(t0, t0);
        t1 = Fp2.add(t1, t0);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.mul(b3, t4);
        t1 = Fp2.add(t1, t2);
        t2 = Fp2.sub(t0, t2);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.add(t4, t2);
        t0 = Fp2.mul(t1, t4);
        Y3 = Fp2.add(Y3, t0);
        t0 = Fp2.mul(t5, t4);
        X3 = Fp2.mul(t3, X3);
        X3 = Fp2.sub(X3, t0);
        t0 = Fp2.mul(t3, t1);
        Z3 = Fp2.mul(t5, Z3);
        Z3 = Fp2.add(Z3, t0);
        return new Point2(X3, Y3, Z3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      is0() {
        return this.equals(Point2.ZERO);
      }
      wNAF(n) {
        return wnaf.wNAFCached(this, n, Point2.normalizeZ);
      }
      /**
       * Non-constant-time multiplication. Uses double-and-add algorithm.
       * It's faster, but should only be used when you don't care about
       * an exposed private key e.g. sig verification, which works over *public* keys.
       */
      multiplyUnsafe(sc) {
        aInRange("scalar", sc, _0n5, CURVE.n);
        const I = Point2.ZERO;
        if (sc === _0n5)
          return I;
        if (sc === _1n5)
          return this;
        const { endo } = CURVE;
        if (!endo)
          return wnaf.unsafeLadder(this, sc);
        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
        let k1p = I;
        let k2p = I;
        let d = this;
        while (k1 > _0n5 || k2 > _0n5) {
          if (k1 & _1n5)
            k1p = k1p.add(d);
          if (k2 & _1n5)
            k2p = k2p.add(d);
          d = d.double();
          k1 >>= _1n5;
          k2 >>= _1n5;
        }
        if (k1neg)
          k1p = k1p.negate();
        if (k2neg)
          k2p = k2p.negate();
        k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        return k1p.add(k2p);
      }
      /**
       * Constant time multiplication.
       * Uses wNAF method. Windowed method may be 10% faster,
       * but takes 2x longer to generate and consumes 2x memory.
       * Uses precomputes when available.
       * Uses endomorphism for Koblitz curves.
       * @param scalar by which the point would be multiplied
       * @returns New point
       */
      multiply(scalar) {
        const { endo, n: N } = CURVE;
        aInRange("scalar", scalar, _1n5, N);
        let point, fake;
        if (endo) {
          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
          let { p: k1p, f: f1p } = this.wNAF(k1);
          let { p: k2p, f: f2p } = this.wNAF(k2);
          k1p = wnaf.constTimeNegate(k1neg, k1p);
          k2p = wnaf.constTimeNegate(k2neg, k2p);
          k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          point = k1p.add(k2p);
          fake = f1p.add(f2p);
        } else {
          const { p, f } = this.wNAF(scalar);
          point = p;
          fake = f;
        }
        return Point2.normalizeZ([point, fake])[0];
      }
      /**
       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
       * Not using Strauss-Shamir trick: precomputation tables are faster.
       * The trick could be useful if both P and Q are not G (not in our case).
       * @returns non-zero affine point
       */
      multiplyAndAddUnsafe(Q, a, b) {
        const G = Point2.BASE;
        const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
        const sum = mul(this, a).add(mul(Q, b));
        return sum.is0() ? void 0 : sum;
      }
      // Converts Projective point to affine (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      // (x, y, z) ∋ (x=x/z, y=y/z)
      toAffine(iz) {
        return toAffineMemo(this, iz);
      }
      isTorsionFree() {
        const { h: cofactor, isTorsionFree } = CURVE;
        if (cofactor === _1n5)
          return true;
        if (isTorsionFree)
          return isTorsionFree(Point2, this);
        throw new Error("isTorsionFree() has not been declared for the elliptic curve");
      }
      clearCofactor() {
        const { h: cofactor, clearCofactor } = CURVE;
        if (cofactor === _1n5)
          return this;
        if (clearCofactor)
          return clearCofactor(Point2, this);
        return this.multiplyUnsafe(CURVE.h);
      }
      toRawBytes(isCompressed = true) {
        abool("isCompressed", isCompressed);
        this.assertValidity();
        return toBytes5(Point2, this, isCompressed);
      }
      toHex(isCompressed = true) {
        abool("isCompressed", isCompressed);
        return bytesToHex2(this.toRawBytes(isCompressed));
      }
    }
    Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
    Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
      CURVE,
      ProjectivePoint: Point2,
      normPrivateKeyToScalar,
      weierstrassEquation,
      isWithinCurveOrder
    };
  }
  function validateOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      hash: "hash",
      hmac: "function",
      randomBytes: "function"
    }, {
      bits2int: "function",
      bits2int_modN: "function",
      lowS: "boolean"
    });
    return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp2.BYTES + 1;
    const uncompressedLen = 2 * Fp2.BYTES + 1;
    function modN2(a) {
      return mod(a, CURVE_ORDER);
    }
    function invN(a) {
      return invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
      ...CURVE,
      toBytes(_c, point, isCompressed) {
        const a = point.toAffine();
        const x = Fp2.toBytes(a.x);
        const cat = concatBytes3;
        abool("isCompressed", isCompressed);
        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
        } else {
          return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
        }
      },
      fromBytes(bytes4) {
        const len = bytes4.length;
        const head = bytes4[0];
        const tail = bytes4.subarray(1);
        if (len === compressedLen && (head === 2 || head === 3)) {
          const x = bytesToNumberBE(tail);
          if (!inRange(x, _1n5, Fp2.ORDER))
            throw new Error("Point is not on curve");
          const y2 = weierstrassEquation(x);
          let y;
          try {
            y = Fp2.sqrt(y2);
          } catch (sqrtError) {
            const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
            throw new Error("Point is not on curve" + suffix);
          }
          const isYOdd = (y & _1n5) === _1n5;
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp2.neg(y);
          return { x, y };
        } else if (len === uncompressedLen && head === 4) {
          const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
          const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
          return { x, y };
        } else {
          throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
      }
    });
    const numToNByteStr = (num2) => bytesToHex2(numberToBytesBE(num2, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number4) {
      const HALF = CURVE_ORDER >> _1n5;
      return number4 > HALF;
    }
    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
    }
    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
    class Signature {
      constructor(r, s, recovery) {
        this.r = r;
        this.s = s;
        this.recovery = recovery;
        this.assertValidity();
      }
      // pair (bytes of r, bytes of s)
      static fromCompact(hex) {
        const l = CURVE.nByteLength;
        hex = ensureBytes("compactSignature", hex, l * 2);
        return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
      }
      // DER encoded ECDSA signature
      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
      static fromDER(hex) {
        const { r, s } = DER.toSig(ensureBytes("DER", hex));
        return new Signature(r, s);
      }
      assertValidity() {
        aInRange("r", this.r, _1n5, CURVE_ORDER);
        aInRange("s", this.s, _1n5, CURVE_ORDER);
      }
      addRecoveryBit(recovery) {
        return new Signature(this.r, this.s, recovery);
      }
      recoverPublicKey(msgHash) {
        const { r, s, recovery: rec } = this;
        const h = bits2int_modN(ensureBytes("msgHash", msgHash));
        if (rec == null || ![0, 1, 2, 3].includes(rec))
          throw new Error("recovery id invalid");
        const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
        if (radj >= Fp2.ORDER)
          throw new Error("recovery id 2 or 3 invalid");
        const prefix = (rec & 1) === 0 ? "02" : "03";
        const R = Point2.fromHex(prefix + numToNByteStr(radj));
        const ir = invN(radj);
        const u1 = modN2(-h * ir);
        const u2 = modN2(s * ir);
        const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
          throw new Error("point at infinify");
        Q.assertValidity();
        return Q;
      }
      // Signatures should be low-s, to prevent malleability.
      hasHighS() {
        return isBiggerThanHalfOrder(this.s);
      }
      normalizeS() {
        return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
      }
      // DER-encoded
      toDERRawBytes() {
        return hexToBytes2(this.toDERHex());
      }
      toDERHex() {
        return DER.hexFromSig({ r: this.r, s: this.s });
      }
      // padded bytes of r, then padded bytes of s
      toCompactRawBytes() {
        return hexToBytes2(this.toCompactHex());
      }
      toCompactHex() {
        return numToNByteStr(this.r) + numToNByteStr(this.s);
      }
    }
    const utils = {
      isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error) {
          return false;
        }
      },
      normPrivateKeyToScalar,
      /**
       * Produces cryptographically secure private key from random of size
       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
       */
      randomPrivateKey: () => {
        const length = getMinHashLength(CURVE.n);
        return mapHashToField(CURVE.randomBytes(length), CURVE.n);
      },
      /**
       * Creates precompute table for an arbitrary EC point. Makes point "cached".
       * Allows to massively speed-up `point.multiply(scalar)`.
       * @returns cached point
       * @example
       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
       * fast.multiply(privKey); // much faster ECDH now
       */
      precompute(windowSize = 8, point = Point2.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    function getPublicKey(privateKey, isCompressed = true) {
      return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    function isProbPub(item) {
      const arr = isBytes2(item);
      const str2 = typeof item === "string";
      const len = (arr || str2) && item.length;
      if (arr)
        return len === compressedLen || len === uncompressedLen;
      if (str2)
        return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point2)
        return true;
      return false;
    }
    function getSharedSecret(privateA, publicB, isCompressed = true) {
      if (isProbPub(privateA))
        throw new Error("first arg must be private key");
      if (!isProbPub(publicB))
        throw new Error("second arg must be public key");
      const b = Point2.fromHex(publicB);
      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    const bits2int = CURVE.bits2int || function(bytes4) {
      const num2 = bytesToNumberBE(bytes4);
      const delta = bytes4.length * 8 - CURVE.nBitLength;
      return delta > 0 ? num2 >> BigInt(delta) : num2;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes4) {
      return modN2(bits2int(bytes4));
    };
    const ORDER_MASK = bitMask(CURVE.nBitLength);
    function int2octets(num2) {
      aInRange(`num < 2^${CURVE.nBitLength}`, num2, _0n5, ORDER_MASK);
      return numberToBytesBE(num2, CURVE.nByteLength);
    }
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
      if (["recovered", "canonical"].some((k) => k in opts))
        throw new Error("sign() legacy options not supported");
      const { hash: hash4, randomBytes: randomBytes2 } = CURVE;
      let { lowS, prehash, extraEntropy: ent } = opts;
      if (lowS == null)
        lowS = true;
      msgHash = ensureBytes("msgHash", msgHash);
      validateSigVerOpts(opts);
      if (prehash)
        msgHash = ensureBytes("prehashed msgHash", hash4(msgHash));
      const h1int = bits2int_modN(msgHash);
      const d = normPrivateKeyToScalar(privateKey);
      const seedArgs = [int2octets(d), int2octets(h1int)];
      if (ent != null && ent !== false) {
        const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
        seedArgs.push(ensureBytes("extraEntropy", e));
      }
      const seed = concatBytes3(...seedArgs);
      const m = h1int;
      function k2sig(kBytes) {
        const k = bits2int(kBytes);
        if (!isWithinCurveOrder(k))
          return;
        const ik = invN(k);
        const q = Point2.BASE.multiply(k).toAffine();
        const r = modN2(q.x);
        if (r === _0n5)
          return;
        const s = modN2(ik * modN2(m + r * d));
        if (s === _0n5)
          return;
        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
        let normS = s;
        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s);
          recovery ^= 1;
        }
        return new Signature(r, normS, recovery);
      }
      return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    function sign(msgHash, privKey, opts = defaultSigOpts) {
      const { seed, k2sig } = prepSig(msgHash, privKey, opts);
      const C = CURVE;
      const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
      return drbg(seed, k2sig);
    }
    Point2.BASE._setWindowSize(8);
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
      const sg = signature;
      msgHash = ensureBytes("msgHash", msgHash);
      publicKey = ensureBytes("publicKey", publicKey);
      if ("strict" in opts)
        throw new Error("options.strict was renamed to lowS");
      validateSigVerOpts(opts);
      const { lowS, prehash } = opts;
      let _sig = void 0;
      let P;
      try {
        if (typeof sg === "string" || isBytes2(sg)) {
          try {
            _sig = Signature.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER.Err))
              throw derError;
            _sig = Signature.fromCompact(sg);
          }
        } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
          const { r: r2, s: s2 } = sg;
          _sig = new Signature(r2, s2);
        } else {
          throw new Error("PARSE");
        }
        P = Point2.fromHex(publicKey);
      } catch (error) {
        if (error.message === "PARSE")
          throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
        return false;
      }
      if (lowS && _sig.hasHighS())
        return false;
      if (prehash)
        msgHash = CURVE.hash(msgHash);
      const { r, s } = _sig;
      const h = bits2int_modN(msgHash);
      const is = invN(s);
      const u1 = modN2(h * is);
      const u2 = modN2(r * is);
      const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
      if (!R)
        return false;
      const v = modN2(R.x);
      return v === r;
    }
    return {
      CURVE,
      getPublicKey,
      getSharedSecret,
      sign,
      verify,
      ProjectivePoint: Point2,
      Signature,
      utils
    };
  }
  function SWUFpSqrtRatio(Fp2, Z) {
    const q = Fp2.ORDER;
    let l = _0n5;
    for (let o = q - _1n5; o % _2n4 === _0n5; o /= _2n4)
      l += _1n5;
    const c1 = l;
    const _2n_pow_c1_1 = _2n4 << c1 - _1n5 - _1n5;
    const _2n_pow_c1 = _2n_pow_c1_1 * _2n4;
    const c2 = (q - _1n5) / _2n_pow_c1;
    const c3 = (c2 - _1n5) / _2n4;
    const c4 = _2n_pow_c1 - _1n5;
    const c5 = _2n_pow_c1_1;
    const c6 = Fp2.pow(Z, c2);
    const c7 = Fp2.pow(Z, (c2 + _1n5) / _2n4);
    let sqrtRatio = (u, v) => {
      let tv1 = c6;
      let tv2 = Fp2.pow(v, c4);
      let tv3 = Fp2.sqr(tv2);
      tv3 = Fp2.mul(tv3, v);
      let tv5 = Fp2.mul(u, tv3);
      tv5 = Fp2.pow(tv5, c3);
      tv5 = Fp2.mul(tv5, tv2);
      tv2 = Fp2.mul(tv5, v);
      tv3 = Fp2.mul(tv5, u);
      let tv4 = Fp2.mul(tv3, tv2);
      tv5 = Fp2.pow(tv4, c5);
      let isQR = Fp2.eql(tv5, Fp2.ONE);
      tv2 = Fp2.mul(tv3, c7);
      tv5 = Fp2.mul(tv4, tv1);
      tv3 = Fp2.cmov(tv2, tv3, isQR);
      tv4 = Fp2.cmov(tv5, tv4, isQR);
      for (let i = c1; i > _1n5; i--) {
        let tv52 = i - _2n4;
        tv52 = _2n4 << tv52 - _1n5;
        let tvv5 = Fp2.pow(tv4, tv52);
        const e1 = Fp2.eql(tvv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, tv1);
        tv1 = Fp2.mul(tv1, tv1);
        tvv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, e1);
        tv4 = Fp2.cmov(tvv5, tv4, e1);
      }
      return { isValid: isQR, value: tv3 };
    };
    if (Fp2.ORDER % _4n2 === _3n2) {
      const c12 = (Fp2.ORDER - _3n2) / _4n2;
      const c22 = Fp2.sqrt(Fp2.neg(Z));
      sqrtRatio = (u, v) => {
        let tv1 = Fp2.sqr(v);
        const tv2 = Fp2.mul(u, v);
        tv1 = Fp2.mul(tv1, tv2);
        let y1 = Fp2.pow(tv1, c12);
        y1 = Fp2.mul(y1, tv2);
        const y2 = Fp2.mul(y1, c22);
        const tv3 = Fp2.mul(Fp2.sqr(y1), v);
        const isQR = Fp2.eql(tv3, u);
        let y = Fp2.cmov(y2, y1, isQR);
        return { isValid: isQR, value: y };
      };
    }
    return sqrtRatio;
  }
  function mapToCurveSimpleSWU(Fp2, opts) {
    validateField(Fp2);
    if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
      throw new Error("mapToCurveSimpleSWU: invalid opts");
    const sqrtRatio = SWUFpSqrtRatio(Fp2, opts.Z);
    if (!Fp2.isOdd)
      throw new Error("Fp.isOdd is not implemented!");
    return (u) => {
      let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
      tv1 = Fp2.sqr(u);
      tv1 = Fp2.mul(tv1, opts.Z);
      tv2 = Fp2.sqr(tv1);
      tv2 = Fp2.add(tv2, tv1);
      tv3 = Fp2.add(tv2, Fp2.ONE);
      tv3 = Fp2.mul(tv3, opts.B);
      tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
      tv4 = Fp2.mul(tv4, opts.A);
      tv2 = Fp2.sqr(tv3);
      tv6 = Fp2.sqr(tv4);
      tv5 = Fp2.mul(tv6, opts.A);
      tv2 = Fp2.add(tv2, tv5);
      tv2 = Fp2.mul(tv2, tv3);
      tv6 = Fp2.mul(tv6, tv4);
      tv5 = Fp2.mul(tv6, opts.B);
      tv2 = Fp2.add(tv2, tv5);
      x = Fp2.mul(tv1, tv3);
      const { isValid, value } = sqrtRatio(tv2, tv6);
      y = Fp2.mul(tv1, u);
      y = Fp2.mul(y, value);
      x = Fp2.cmov(x, tv3, isValid);
      y = Fp2.cmov(y, value, isValid);
      const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
      y = Fp2.cmov(Fp2.neg(y), y, e1);
      x = Fp2.div(x, tv4);
      return { x, y };
    };
  }
  var b2n, h2b, DER, _0n5, _1n5, _2n4, _3n2, _4n2;
  var init_weierstrass = __esm({
    "node_modules/@noble/curves/esm/abstract/weierstrass.js"() {
      "use strict";
      init_curve();
      init_modular();
      init_utils4();
      init_utils4();
      ({ bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports);
      DER = {
        // asn.1 DER encoding utils
        Err: class DERErr extends Error {
          constructor(m = "") {
            super(m);
          }
        },
        // Basic building block is TLV (Tag-Length-Value)
        _tlv: {
          encode: (tag, data) => {
            const { Err: E } = DER;
            if (tag < 0 || tag > 256)
              throw new E("tlv.encode: wrong tag");
            if (data.length & 1)
              throw new E("tlv.encode: unpadded data");
            const dataLen = data.length / 2;
            const len = numberToHexUnpadded(dataLen);
            if (len.length / 2 & 128)
              throw new E("tlv.encode: long form length too big");
            const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
            return `${numberToHexUnpadded(tag)}${lenLen}${len}${data}`;
          },
          // v - value, l - left bytes (unparsed)
          decode(tag, data) {
            const { Err: E } = DER;
            let pos = 0;
            if (tag < 0 || tag > 256)
              throw new E("tlv.encode: wrong tag");
            if (data.length < 2 || data[pos++] !== tag)
              throw new E("tlv.decode: wrong tlv");
            const first = data[pos++];
            const isLong = !!(first & 128);
            let length = 0;
            if (!isLong)
              length = first;
            else {
              const lenLen = first & 127;
              if (!lenLen)
                throw new E("tlv.decode(long): indefinite length not supported");
              if (lenLen > 4)
                throw new E("tlv.decode(long): byte length is too big");
              const lengthBytes = data.subarray(pos, pos + lenLen);
              if (lengthBytes.length !== lenLen)
                throw new E("tlv.decode: length bytes not complete");
              if (lengthBytes[0] === 0)
                throw new E("tlv.decode(long): zero leftmost byte");
              for (const b of lengthBytes)
                length = length << 8 | b;
              pos += lenLen;
              if (length < 128)
                throw new E("tlv.decode(long): not minimal encoding");
            }
            const v = data.subarray(pos, pos + length);
            if (v.length !== length)
              throw new E("tlv.decode: wrong value length");
            return { v, l: data.subarray(pos + length) };
          }
        },
        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
        // since we always use positive integers here. It must always be empty:
        // - add zero byte if exists
        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
        _int: {
          encode(num2) {
            const { Err: E } = DER;
            if (num2 < _0n5)
              throw new E("integer: negative integers are not allowed");
            let hex = numberToHexUnpadded(num2);
            if (Number.parseInt(hex[0], 16) & 8)
              hex = "00" + hex;
            if (hex.length & 1)
              throw new E("unexpected assertion");
            return hex;
          },
          decode(data) {
            const { Err: E } = DER;
            if (data[0] & 128)
              throw new E("Invalid signature integer: negative");
            if (data[0] === 0 && !(data[1] & 128))
              throw new E("Invalid signature integer: unnecessary leading zero");
            return b2n(data);
          }
        },
        toSig(hex) {
          const { Err: E, _int: int, _tlv: tlv } = DER;
          const data = typeof hex === "string" ? h2b(hex) : hex;
          abytes(data);
          const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
          if (seqLeftBytes.length)
            throw new E("Invalid signature: left bytes after parsing");
          const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
          const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
          if (sLeftBytes.length)
            throw new E("Invalid signature: left bytes after parsing");
          return { r: int.decode(rBytes), s: int.decode(sBytes) };
        },
        hexFromSig(sig) {
          const { _tlv: tlv, _int: int } = DER;
          const seq = `${tlv.encode(2, int.encode(sig.r))}${tlv.encode(2, int.encode(sig.s))}`;
          return tlv.encode(48, seq);
        }
      };
      _0n5 = BigInt(0);
      _1n5 = BigInt(1);
      _2n4 = BigInt(2);
      _3n2 = BigInt(3);
      _4n2 = BigInt(4);
    }
  });

  // node_modules/@noble/curves/esm/_shortw_utils.js
  function getHash(hash4) {
    return {
      hash: hash4,
      hmac: (key, ...msgs) => hmac(hash4, key, concatBytes(...msgs)),
      randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create = (hash4) => weierstrass({ ...curveDef, ...getHash(hash4) });
    return Object.freeze({ ...create(defHash), create });
  }
  var init_shortw_utils = __esm({
    "node_modules/@noble/curves/esm/_shortw_utils.js"() {
      "use strict";
      init_hmac();
      init_utils2();
      init_weierstrass();
    }
  });

  // node_modules/@noble/curves/esm/abstract/hash-to-curve.js
  function i2osp(value, length) {
    anum(value);
    anum(length);
    if (value < 0 || value >= 1 << 8 * length) {
      throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    }
    const res = Array.from({ length }).fill(0);
    for (let i = length - 1; i >= 0; i--) {
      res[i] = value & 255;
      value >>>= 8;
    }
    return new Uint8Array(res);
  }
  function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
      arr[i] = a[i] ^ b[i];
    }
    return arr;
  }
  function anum(item) {
    if (!Number.isSafeInteger(item))
      throw new Error("number expected");
  }
  function expand_message_xmd(msg, DST, lenInBytes, H) {
    abytes(msg);
    abytes(DST);
    anum(lenInBytes);
    if (DST.length > 255)
      DST = H(concatBytes3(utf8ToBytes2("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (lenInBytes > 65535 || ell > 255)
      throw new Error("expand_message_xmd: invalid lenInBytes");
    const DST_prime = concatBytes3(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2);
    const b = new Array(ell);
    const b_0 = H(concatBytes3(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H(concatBytes3(b_0, i2osp(1, 1), DST_prime));
    for (let i = 1; i <= ell; i++) {
      const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
      b[i] = H(concatBytes3(...args));
    }
    const pseudo_random_bytes = concatBytes3(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
  }
  function expand_message_xof(msg, DST, lenInBytes, k, H) {
    abytes(msg);
    abytes(DST);
    anum(lenInBytes);
    if (DST.length > 255) {
      const dkLen = Math.ceil(2 * k / 8);
      DST = H.create({ dkLen }).update(utf8ToBytes2("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
      throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
  }
  function hash_to_field(msg, count, options2) {
    validateObject(options2, {
      DST: "stringOrUint8Array",
      p: "bigint",
      m: "isSafeInteger",
      k: "isSafeInteger",
      hash: "hash"
    });
    const { p, k, m, hash: hash4, expand, DST: _DST } = options2;
    abytes(msg);
    anum(count);
    const DST = typeof _DST === "string" ? utf8ToBytes2(_DST) : _DST;
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8);
    const len_in_bytes = count * m * L;
    let prb;
    if (expand === "xmd") {
      prb = expand_message_xmd(msg, DST, len_in_bytes, hash4);
    } else if (expand === "xof") {
      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash4);
    } else if (expand === "_internal_pass") {
      prb = msg;
    } else {
      throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i = 0; i < count; i++) {
      const e = new Array(m);
      for (let j = 0; j < m; j++) {
        const elm_offset = L * (j + i * m);
        const tv = prb.subarray(elm_offset, elm_offset + L);
        e[j] = mod(os2ip(tv), p);
      }
      u[i] = e;
    }
    return u;
  }
  function isogenyMap(field, map) {
    const COEFF = map.map((i) => Array.from(i).reverse());
    return (x, y) => {
      const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
      x = field.div(xNum, xDen);
      y = field.mul(y, field.div(yNum, yDen));
      return { x, y };
    };
  }
  function createHasher(Point2, mapToCurve, def) {
    if (typeof mapToCurve !== "function")
      throw new Error("mapToCurve() must be defined");
    return {
      // Encodes byte string to elliptic curve.
      // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      hashToCurve(msg, options2) {
        const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options2 });
        const u0 = Point2.fromAffine(mapToCurve(u[0]));
        const u1 = Point2.fromAffine(mapToCurve(u[1]));
        const P = u0.add(u1).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Encodes byte string to elliptic curve.
      // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
      encodeToCurve(msg, options2) {
        const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options2 });
        const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
        P.assertValidity();
        return P;
      },
      // Same as encodeToCurve, but without hash
      mapToCurve(scalars) {
        if (!Array.isArray(scalars))
          throw new Error("mapToCurve: expected array of bigints");
        for (const i of scalars)
          if (typeof i !== "bigint")
            throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);
        const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();
        P.assertValidity();
        return P;
      }
    };
  }
  var os2ip;
  var init_hash_to_curve = __esm({
    "node_modules/@noble/curves/esm/abstract/hash-to-curve.js"() {
      "use strict";
      init_modular();
      init_utils4();
      os2ip = bytesToNumberBE;
    }
  });

  // node_modules/@noble/curves/esm/secp256k1.js
  var secp256k1_exports = {};
  __export(secp256k1_exports, {
    encodeToCurve: () => encodeToCurve,
    hashToCurve: () => hashToCurve,
    schnorr: () => schnorr,
    secp256k1: () => secp256k1
  });
  function sqrtMod(y) {
    const P = secp256k1P;
    const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P;
    const b3 = b2 * b2 * y % P;
    const b6 = pow2(b3, _3n3, P) * b3 % P;
    const b9 = pow2(b6, _3n3, P) * b3 % P;
    const b11 = pow2(b9, _2n5, P) * b2 % P;
    const b22 = pow2(b11, _11n, P) * b11 % P;
    const b44 = pow2(b22, _22n, P) * b22 % P;
    const b88 = pow2(b44, _44n, P) * b44 % P;
    const b176 = pow2(b88, _88n, P) * b88 % P;
    const b220 = pow2(b176, _44n, P) * b44 % P;
    const b223 = pow2(b220, _3n3, P) * b3 % P;
    const t1 = pow2(b223, _23n, P) * b22 % P;
    const t2 = pow2(t1, _6n, P) * b2 % P;
    const root = pow2(t2, _2n5, P);
    if (!Fp.eql(Fp.sqr(root), y))
      throw new Error("Cannot find square root");
    return root;
  }
  function taggedHash(tag, ...messages) {
    let tagP = TAGGED_HASH_PREFIXES[tag];
    if (tagP === void 0) {
      const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
      tagP = concatBytes3(tagH, tagH);
      TAGGED_HASH_PREFIXES[tag] = tagP;
    }
    return sha256(concatBytes3(tagP, ...messages));
  }
  function schnorrGetExtPubKey(priv) {
    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
    let p = Point.fromPrivateKey(d_);
    const scalar = p.hasEvenY() ? d_ : modN(-d_);
    return { scalar, bytes: pointToBytes(p) };
  }
  function lift_x(x) {
    aInRange("x", x, _1n6, secp256k1P);
    const xx = modP(x * x);
    const c = modP(xx * x + BigInt(7));
    let y = sqrtMod(c);
    if (y % _2n5 !== _0n6)
      y = modP(-y);
    const p = new Point(x, y, _1n6);
    p.assertValidity();
    return p;
  }
  function challenge(...args) {
    return modN(num(taggedHash("BIP0340/challenge", ...args)));
  }
  function schnorrGetPublicKey(privateKey) {
    return schnorrGetExtPubKey(privateKey).bytes;
  }
  function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
    const m = ensureBytes("message", message);
    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
    const a = ensureBytes("auxRand", auxRand, 32);
    const t = numTo32b(d ^ num(taggedHash("BIP0340/aux", a)));
    const rand = taggedHash("BIP0340/nonce", t, px, m);
    const k_ = modN(num(rand));
    if (k_ === _0n6)
      throw new Error("sign failed: k is zero");
    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
    const e = challenge(rx, px, m);
    const sig = new Uint8Array(64);
    sig.set(rx, 0);
    sig.set(numTo32b(modN(k + e * d)), 32);
    if (!schnorrVerify(sig, m, px))
      throw new Error("sign: Invalid signature produced");
    return sig;
  }
  function schnorrVerify(signature, message, publicKey) {
    const sig = ensureBytes("signature", signature, 64);
    const m = ensureBytes("message", message);
    const pub = ensureBytes("publicKey", publicKey, 32);
    try {
      const P = lift_x(num(pub));
      const r = num(sig.subarray(0, 32));
      if (!inRange(r, _1n6, secp256k1P))
        return false;
      const s = num(sig.subarray(32, 64));
      if (!inRange(s, _1n6, secp256k1N))
        return false;
      const e = challenge(numTo32b(r), pointToBytes(P), m);
      const R = GmulAdd(P, s, modN(-e));
      if (!R || !R.hasEvenY() || R.toAffine().x !== r)
        return false;
      return true;
    } catch (error) {
      return false;
    }
  }
  var secp256k1P, secp256k1N, _1n6, _2n5, divNearest, Fp, secp256k1, _0n6, TAGGED_HASH_PREFIXES, pointToBytes, numTo32b, modP, modN, Point, GmulAdd, num, schnorr, isoMap, mapSWU, htf, hashToCurve, encodeToCurve;
  var init_secp256k1 = __esm({
    "node_modules/@noble/curves/esm/secp256k1.js"() {
      "use strict";
      init_sha256();
      init_utils2();
      init_shortw_utils();
      init_hash_to_curve();
      init_modular();
      init_utils4();
      init_weierstrass();
      secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
      secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
      _1n6 = BigInt(1);
      _2n5 = BigInt(2);
      divNearest = (a, b) => (a + b / _2n5) / b;
      Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
      secp256k1 = createCurve({
        a: BigInt(0),
        // equation params: a, b
        b: BigInt(7),
        // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
        Fp,
        // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
        n: secp256k1N,
        // Curve order, total count of valid points in the field
        // Base point (x, y) aka generator point
        Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
        Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
        h: BigInt(1),
        // Cofactor
        lowS: true,
        // Allow only low-S signatures by default in sign() and verify()
        /**
         * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
         * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
         * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
         * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
         */
        endo: {
          beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
          splitScalar: (k) => {
            const n = secp256k1N;
            const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
            const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
            const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
            const b2 = a1;
            const POW_2_128 = BigInt("0x100000000000000000000000000000000");
            const c1 = divNearest(b2 * k, n);
            const c2 = divNearest(-b1 * k, n);
            let k1 = mod(k - c1 * a1 - c2 * a2, n);
            let k2 = mod(-c1 * b1 - c2 * b2, n);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg)
              k1 = n - k1;
            if (k2neg)
              k2 = n - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) {
              throw new Error("splitScalar: Endomorphism failed, k=" + k);
            }
            return { k1neg, k1, k2neg, k2 };
          }
        }
      }, sha256);
      _0n6 = BigInt(0);
      TAGGED_HASH_PREFIXES = {};
      pointToBytes = (point) => point.toRawBytes(true).slice(1);
      numTo32b = (n) => numberToBytesBE(n, 32);
      modP = (x) => mod(x, secp256k1P);
      modN = (x) => mod(x, secp256k1N);
      Point = secp256k1.ProjectivePoint;
      GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
      num = bytesToNumberBE;
      schnorr = /* @__PURE__ */ (() => ({
        getPublicKey: schnorrGetPublicKey,
        sign: schnorrSign,
        verify: schnorrVerify,
        utils: {
          randomPrivateKey: secp256k1.utils.randomPrivateKey,
          lift_x,
          pointToBytes,
          numberToBytesBE,
          bytesToNumberBE,
          taggedHash,
          mod
        }
      }))();
      isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [
        // xNum
        [
          "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
          "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
          "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
          "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
        ],
        // xDen
        [
          "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
          "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
          // LAST 1
        ],
        // yNum
        [
          "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
          "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
          "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
          "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
        ],
        // yDen
        [
          "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
          "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
          "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
          // LAST 1
        ]
      ].map((i) => i.map((j) => BigInt(j)))))();
      mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {
        A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
        B: BigInt("1771"),
        Z: Fp.create(BigInt("-11"))
      }))();
      htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
        const { x, y } = mapSWU(Fp.create(scalars[0]));
        return isoMap(x, y);
      }, {
        DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
        encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
        p: Fp.ORDER,
        m: 1,
        k: 128,
        expand: "xmd",
        hash: sha256
      }))();
      hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();
      encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();
    }
  });

  // node_modules/viem/_esm/errors/node.js
  var ExecutionRevertedError, FeeCapTooHighError, FeeCapTooLowError, NonceTooHighError, NonceTooLowError, NonceMaxValueError, InsufficientFundsError, IntrinsicGasTooHighError, IntrinsicGasTooLowError, TransactionTypeNotSupportedError, TipAboveFeeCapError, UnknownNodeError;
  var init_node = __esm({
    "node_modules/viem/_esm/errors/node.js"() {
      "use strict";
      init_formatGwei();
      init_base();
      ExecutionRevertedError = class extends BaseError2 {
        constructor({ cause, message } = {}) {
          const reason = message?.replace("execution reverted: ", "")?.replace("execution reverted", "");
          super(`Execution reverted ${reason ? `with reason: ${reason}` : "for an unknown reason"}.`, {
            cause,
            name: "ExecutionRevertedError"
          });
        }
      };
      Object.defineProperty(ExecutionRevertedError, "code", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 3
      });
      Object.defineProperty(ExecutionRevertedError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /execution reverted/
      });
      FeeCapTooHighError = class extends BaseError2 {
        constructor({ cause, maxFeePerGas } = {}) {
          super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
            cause,
            name: "FeeCapTooHighError"
          });
        }
      };
      Object.defineProperty(FeeCapTooHighError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
      });
      FeeCapTooLowError = class extends BaseError2 {
        constructor({ cause, maxFeePerGas } = {}) {
          super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ""} gwei) cannot be lower than the block base fee.`, {
            cause,
            name: "FeeCapTooLowError"
          });
        }
      };
      Object.defineProperty(FeeCapTooLowError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
      });
      NonceTooHighError = class extends BaseError2 {
        constructor({ cause, nonce } = {}) {
          super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is higher than the next one expected.`, { cause, name: "NonceTooHighError" });
        }
      };
      Object.defineProperty(NonceTooHighError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /nonce too high/
      });
      NonceTooLowError = class extends BaseError2 {
        constructor({ cause, nonce } = {}) {
          super([
            `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is lower than the current nonce of the account.`,
            "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
          ].join("\n"), { cause, name: "NonceTooLowError" });
        }
      };
      Object.defineProperty(NonceTooLowError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /nonce too low|transaction already imported|already known/
      });
      NonceMaxValueError = class extends BaseError2 {
        constructor({ cause, nonce } = {}) {
          super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}exceeds the maximum allowed nonce.`, { cause, name: "NonceMaxValueError" });
        }
      };
      Object.defineProperty(NonceMaxValueError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /nonce has max value/
      });
      InsufficientFundsError = class extends BaseError2 {
        constructor({ cause } = {}) {
          super([
            "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
          ].join("\n"), {
            cause,
            metaMessages: [
              "This error could arise when the account does not have enough funds to:",
              " - pay for the total gas fee,",
              " - pay for the value to send.",
              " ",
              "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
              " - `gas` is the amount of gas needed for transaction to execute,",
              " - `gas fee` is the gas fee,",
              " - `value` is the amount of ether to send to the recipient."
            ],
            name: "InsufficientFundsError"
          });
        }
      };
      Object.defineProperty(InsufficientFundsError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /insufficient funds|exceeds transaction sender account balance/
      });
      IntrinsicGasTooHighError = class extends BaseError2 {
        constructor({ cause, gas } = {}) {
          super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
            cause,
            name: "IntrinsicGasTooHighError"
          });
        }
      };
      Object.defineProperty(IntrinsicGasTooHighError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /intrinsic gas too high|gas limit reached/
      });
      IntrinsicGasTooLowError = class extends BaseError2 {
        constructor({ cause, gas } = {}) {
          super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction is too low.`, {
            cause,
            name: "IntrinsicGasTooLowError"
          });
        }
      };
      Object.defineProperty(IntrinsicGasTooLowError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /intrinsic gas too low/
      });
      TransactionTypeNotSupportedError = class extends BaseError2 {
        constructor({ cause }) {
          super("The transaction type is not supported for this chain.", {
            cause,
            name: "TransactionTypeNotSupportedError"
          });
        }
      };
      Object.defineProperty(TransactionTypeNotSupportedError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /transaction type not valid/
      });
      TipAboveFeeCapError = class extends BaseError2 {
        constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {
          super([
            `The provided tip (\`maxPriorityFeePerGas\`${maxPriorityFeePerGas ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ""}).`
          ].join("\n"), {
            cause,
            name: "TipAboveFeeCapError"
          });
        }
      };
      Object.defineProperty(TipAboveFeeCapError, "nodeMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
      });
      UnknownNodeError = class extends BaseError2 {
        constructor({ cause }) {
          super(`An error occurred while executing: ${cause?.shortMessage}`, {
            cause,
            name: "UnknownNodeError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/errors/getNodeError.js
  function getNodeError(err, args) {
    const message = (err.details || "").toLowerCase();
    const executionRevertedError = err instanceof BaseError2 ? err.walk((e) => e?.code === ExecutionRevertedError.code) : err;
    if (executionRevertedError instanceof BaseError2)
      return new ExecutionRevertedError({
        cause: err,
        message: executionRevertedError.details
      });
    if (ExecutionRevertedError.nodeMessage.test(message))
      return new ExecutionRevertedError({
        cause: err,
        message: err.details
      });
    if (FeeCapTooHighError.nodeMessage.test(message))
      return new FeeCapTooHighError({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas
      });
    if (FeeCapTooLowError.nodeMessage.test(message))
      return new FeeCapTooLowError({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas
      });
    if (NonceTooHighError.nodeMessage.test(message))
      return new NonceTooHighError({ cause: err, nonce: args?.nonce });
    if (NonceTooLowError.nodeMessage.test(message))
      return new NonceTooLowError({ cause: err, nonce: args?.nonce });
    if (NonceMaxValueError.nodeMessage.test(message))
      return new NonceMaxValueError({ cause: err, nonce: args?.nonce });
    if (InsufficientFundsError.nodeMessage.test(message))
      return new InsufficientFundsError({ cause: err });
    if (IntrinsicGasTooHighError.nodeMessage.test(message))
      return new IntrinsicGasTooHighError({ cause: err, gas: args?.gas });
    if (IntrinsicGasTooLowError.nodeMessage.test(message))
      return new IntrinsicGasTooLowError({ cause: err, gas: args?.gas });
    if (TransactionTypeNotSupportedError.nodeMessage.test(message))
      return new TransactionTypeNotSupportedError({ cause: err });
    if (TipAboveFeeCapError.nodeMessage.test(message))
      return new TipAboveFeeCapError({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas,
        maxPriorityFeePerGas: args?.maxPriorityFeePerGas
      });
    return new UnknownNodeError({
      cause: err
    });
  }
  var init_getNodeError = __esm({
    "node_modules/viem/_esm/utils/errors/getNodeError.js"() {
      "use strict";
      init_base();
      init_node();
    }
  });

  // node_modules/viem/_esm/utils/formatters/extract.js
  function extract(value_, { format }) {
    if (!format)
      return {};
    const value = {};
    function extract_(formatted2) {
      const keys = Object.keys(formatted2);
      for (const key of keys) {
        if (key in value_)
          value[key] = value_[key];
        if (formatted2[key] && typeof formatted2[key] === "object" && !Array.isArray(formatted2[key]))
          extract_(formatted2[key]);
      }
    }
    const formatted = format(value_ || {});
    extract_(formatted);
    return value;
  }
  var init_extract = __esm({
    "node_modules/viem/_esm/utils/formatters/extract.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/formatters/transactionRequest.js
  function formatTransactionRequest(request) {
    const rpcRequest = {};
    if (typeof request.authorizationList !== "undefined")
      rpcRequest.authorizationList = formatAuthorizationList(request.authorizationList);
    if (typeof request.accessList !== "undefined")
      rpcRequest.accessList = request.accessList;
    if (typeof request.blobVersionedHashes !== "undefined")
      rpcRequest.blobVersionedHashes = request.blobVersionedHashes;
    if (typeof request.blobs !== "undefined") {
      if (typeof request.blobs[0] !== "string")
        rpcRequest.blobs = request.blobs.map((x) => bytesToHex(x));
      else
        rpcRequest.blobs = request.blobs;
    }
    if (typeof request.data !== "undefined")
      rpcRequest.data = request.data;
    if (typeof request.from !== "undefined")
      rpcRequest.from = request.from;
    if (typeof request.gas !== "undefined")
      rpcRequest.gas = numberToHex(request.gas);
    if (typeof request.gasPrice !== "undefined")
      rpcRequest.gasPrice = numberToHex(request.gasPrice);
    if (typeof request.maxFeePerBlobGas !== "undefined")
      rpcRequest.maxFeePerBlobGas = numberToHex(request.maxFeePerBlobGas);
    if (typeof request.maxFeePerGas !== "undefined")
      rpcRequest.maxFeePerGas = numberToHex(request.maxFeePerGas);
    if (typeof request.maxPriorityFeePerGas !== "undefined")
      rpcRequest.maxPriorityFeePerGas = numberToHex(request.maxPriorityFeePerGas);
    if (typeof request.nonce !== "undefined")
      rpcRequest.nonce = numberToHex(request.nonce);
    if (typeof request.to !== "undefined")
      rpcRequest.to = request.to;
    if (typeof request.type !== "undefined")
      rpcRequest.type = rpcTransactionType[request.type];
    if (typeof request.value !== "undefined")
      rpcRequest.value = numberToHex(request.value);
    return rpcRequest;
  }
  function formatAuthorizationList(authorizationList) {
    return authorizationList.map((authorization) => ({
      address: authorization.contractAddress,
      r: authorization.r,
      s: authorization.s,
      chainId: numberToHex(authorization.chainId),
      nonce: numberToHex(authorization.nonce),
      ...typeof authorization.yParity !== "undefined" ? { yParity: numberToHex(authorization.yParity) } : {},
      ...typeof authorization.v !== "undefined" && typeof authorization.yParity === "undefined" ? { v: numberToHex(authorization.v) } : {}
    }));
  }
  var rpcTransactionType;
  var init_transactionRequest = __esm({
    "node_modules/viem/_esm/utils/formatters/transactionRequest.js"() {
      "use strict";
      init_toHex();
      rpcTransactionType = {
        legacy: "0x0",
        eip2930: "0x1",
        eip1559: "0x2",
        eip4844: "0x3",
        eip7702: "0x4"
      };
    }
  });

  // node_modules/viem/_esm/utils/stateOverride.js
  function serializeStateMapping(stateMapping) {
    if (!stateMapping || stateMapping.length === 0)
      return void 0;
    return stateMapping.reduce((acc, { slot, value }) => {
      if (slot.length !== 66)
        throw new InvalidBytesLengthError({
          size: slot.length,
          targetSize: 66,
          type: "hex"
        });
      if (value.length !== 66)
        throw new InvalidBytesLengthError({
          size: value.length,
          targetSize: 66,
          type: "hex"
        });
      acc[slot] = value;
      return acc;
    }, {});
  }
  function serializeAccountStateOverride(parameters) {
    const { balance, nonce, state, stateDiff, code } = parameters;
    const rpcAccountStateOverride = {};
    if (code !== void 0)
      rpcAccountStateOverride.code = code;
    if (balance !== void 0)
      rpcAccountStateOverride.balance = numberToHex(balance);
    if (nonce !== void 0)
      rpcAccountStateOverride.nonce = numberToHex(nonce);
    if (state !== void 0)
      rpcAccountStateOverride.state = serializeStateMapping(state);
    if (stateDiff !== void 0) {
      if (rpcAccountStateOverride.state)
        throw new StateAssignmentConflictError();
      rpcAccountStateOverride.stateDiff = serializeStateMapping(stateDiff);
    }
    return rpcAccountStateOverride;
  }
  function serializeStateOverride(parameters) {
    if (!parameters)
      return void 0;
    const rpcStateOverride = {};
    for (const { address, ...accountState } of parameters) {
      if (!isAddress(address, { strict: false }))
        throw new InvalidAddressError({ address });
      if (rpcStateOverride[address])
        throw new AccountStateConflictError({ address });
      rpcStateOverride[address] = serializeAccountStateOverride(accountState);
    }
    return rpcStateOverride;
  }
  var init_stateOverride2 = __esm({
    "node_modules/viem/_esm/utils/stateOverride.js"() {
      "use strict";
      init_address();
      init_data();
      init_stateOverride();
      init_isAddress();
      init_toHex();
    }
  });

  // node_modules/viem/_esm/constants/number.js
  var maxInt8, maxInt16, maxInt24, maxInt32, maxInt40, maxInt48, maxInt56, maxInt64, maxInt72, maxInt80, maxInt88, maxInt96, maxInt104, maxInt112, maxInt120, maxInt128, maxInt136, maxInt144, maxInt152, maxInt160, maxInt168, maxInt176, maxInt184, maxInt192, maxInt200, maxInt208, maxInt216, maxInt224, maxInt232, maxInt240, maxInt248, maxInt256, minInt8, minInt16, minInt24, minInt32, minInt40, minInt48, minInt56, minInt64, minInt72, minInt80, minInt88, minInt96, minInt104, minInt112, minInt120, minInt128, minInt136, minInt144, minInt152, minInt160, minInt168, minInt176, minInt184, minInt192, minInt200, minInt208, minInt216, minInt224, minInt232, minInt240, minInt248, minInt256, maxUint8, maxUint16, maxUint24, maxUint32, maxUint40, maxUint48, maxUint56, maxUint64, maxUint72, maxUint80, maxUint88, maxUint96, maxUint104, maxUint112, maxUint120, maxUint128, maxUint136, maxUint144, maxUint152, maxUint160, maxUint168, maxUint176, maxUint184, maxUint192, maxUint200, maxUint208, maxUint216, maxUint224, maxUint232, maxUint240, maxUint248, maxUint256;
  var init_number = __esm({
    "node_modules/viem/_esm/constants/number.js"() {
      "use strict";
      maxInt8 = 2n ** (8n - 1n) - 1n;
      maxInt16 = 2n ** (16n - 1n) - 1n;
      maxInt24 = 2n ** (24n - 1n) - 1n;
      maxInt32 = 2n ** (32n - 1n) - 1n;
      maxInt40 = 2n ** (40n - 1n) - 1n;
      maxInt48 = 2n ** (48n - 1n) - 1n;
      maxInt56 = 2n ** (56n - 1n) - 1n;
      maxInt64 = 2n ** (64n - 1n) - 1n;
      maxInt72 = 2n ** (72n - 1n) - 1n;
      maxInt80 = 2n ** (80n - 1n) - 1n;
      maxInt88 = 2n ** (88n - 1n) - 1n;
      maxInt96 = 2n ** (96n - 1n) - 1n;
      maxInt104 = 2n ** (104n - 1n) - 1n;
      maxInt112 = 2n ** (112n - 1n) - 1n;
      maxInt120 = 2n ** (120n - 1n) - 1n;
      maxInt128 = 2n ** (128n - 1n) - 1n;
      maxInt136 = 2n ** (136n - 1n) - 1n;
      maxInt144 = 2n ** (144n - 1n) - 1n;
      maxInt152 = 2n ** (152n - 1n) - 1n;
      maxInt160 = 2n ** (160n - 1n) - 1n;
      maxInt168 = 2n ** (168n - 1n) - 1n;
      maxInt176 = 2n ** (176n - 1n) - 1n;
      maxInt184 = 2n ** (184n - 1n) - 1n;
      maxInt192 = 2n ** (192n - 1n) - 1n;
      maxInt200 = 2n ** (200n - 1n) - 1n;
      maxInt208 = 2n ** (208n - 1n) - 1n;
      maxInt216 = 2n ** (216n - 1n) - 1n;
      maxInt224 = 2n ** (224n - 1n) - 1n;
      maxInt232 = 2n ** (232n - 1n) - 1n;
      maxInt240 = 2n ** (240n - 1n) - 1n;
      maxInt248 = 2n ** (248n - 1n) - 1n;
      maxInt256 = 2n ** (256n - 1n) - 1n;
      minInt8 = -(2n ** (8n - 1n));
      minInt16 = -(2n ** (16n - 1n));
      minInt24 = -(2n ** (24n - 1n));
      minInt32 = -(2n ** (32n - 1n));
      minInt40 = -(2n ** (40n - 1n));
      minInt48 = -(2n ** (48n - 1n));
      minInt56 = -(2n ** (56n - 1n));
      minInt64 = -(2n ** (64n - 1n));
      minInt72 = -(2n ** (72n - 1n));
      minInt80 = -(2n ** (80n - 1n));
      minInt88 = -(2n ** (88n - 1n));
      minInt96 = -(2n ** (96n - 1n));
      minInt104 = -(2n ** (104n - 1n));
      minInt112 = -(2n ** (112n - 1n));
      minInt120 = -(2n ** (120n - 1n));
      minInt128 = -(2n ** (128n - 1n));
      minInt136 = -(2n ** (136n - 1n));
      minInt144 = -(2n ** (144n - 1n));
      minInt152 = -(2n ** (152n - 1n));
      minInt160 = -(2n ** (160n - 1n));
      minInt168 = -(2n ** (168n - 1n));
      minInt176 = -(2n ** (176n - 1n));
      minInt184 = -(2n ** (184n - 1n));
      minInt192 = -(2n ** (192n - 1n));
      minInt200 = -(2n ** (200n - 1n));
      minInt208 = -(2n ** (208n - 1n));
      minInt216 = -(2n ** (216n - 1n));
      minInt224 = -(2n ** (224n - 1n));
      minInt232 = -(2n ** (232n - 1n));
      minInt240 = -(2n ** (240n - 1n));
      minInt248 = -(2n ** (248n - 1n));
      minInt256 = -(2n ** (256n - 1n));
      maxUint8 = 2n ** 8n - 1n;
      maxUint16 = 2n ** 16n - 1n;
      maxUint24 = 2n ** 24n - 1n;
      maxUint32 = 2n ** 32n - 1n;
      maxUint40 = 2n ** 40n - 1n;
      maxUint48 = 2n ** 48n - 1n;
      maxUint56 = 2n ** 56n - 1n;
      maxUint64 = 2n ** 64n - 1n;
      maxUint72 = 2n ** 72n - 1n;
      maxUint80 = 2n ** 80n - 1n;
      maxUint88 = 2n ** 88n - 1n;
      maxUint96 = 2n ** 96n - 1n;
      maxUint104 = 2n ** 104n - 1n;
      maxUint112 = 2n ** 112n - 1n;
      maxUint120 = 2n ** 120n - 1n;
      maxUint128 = 2n ** 128n - 1n;
      maxUint136 = 2n ** 136n - 1n;
      maxUint144 = 2n ** 144n - 1n;
      maxUint152 = 2n ** 152n - 1n;
      maxUint160 = 2n ** 160n - 1n;
      maxUint168 = 2n ** 168n - 1n;
      maxUint176 = 2n ** 176n - 1n;
      maxUint184 = 2n ** 184n - 1n;
      maxUint192 = 2n ** 192n - 1n;
      maxUint200 = 2n ** 200n - 1n;
      maxUint208 = 2n ** 208n - 1n;
      maxUint216 = 2n ** 216n - 1n;
      maxUint224 = 2n ** 224n - 1n;
      maxUint232 = 2n ** 232n - 1n;
      maxUint240 = 2n ** 240n - 1n;
      maxUint248 = 2n ** 248n - 1n;
      maxUint256 = 2n ** 256n - 1n;
    }
  });

  // node_modules/viem/_esm/utils/transaction/assertRequest.js
  function assertRequest(args) {
    const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to } = args;
    const account = account_ ? parseAccount(account_) : void 0;
    if (account && !isAddress(account.address))
      throw new InvalidAddressError({ address: account.address });
    if (to && !isAddress(to))
      throw new InvalidAddressError({ address: to });
    if (typeof gasPrice !== "undefined" && (typeof maxFeePerGas !== "undefined" || typeof maxPriorityFeePerGas !== "undefined"))
      throw new FeeConflictError();
    if (maxFeePerGas && maxFeePerGas > maxUint256)
      throw new FeeCapTooHighError({ maxFeePerGas });
    if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
      throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
  }
  var init_assertRequest = __esm({
    "node_modules/viem/_esm/utils/transaction/assertRequest.js"() {
      "use strict";
      init_parseAccount();
      init_number();
      init_address();
      init_node();
      init_transaction();
      init_isAddress();
    }
  });

  // node_modules/viem/_esm/utils/address/isAddressEqual.js
  function isAddressEqual(a, b) {
    if (!isAddress(a, { strict: false }))
      throw new InvalidAddressError({ address: a });
    if (!isAddress(b, { strict: false }))
      throw new InvalidAddressError({ address: b });
    return a.toLowerCase() === b.toLowerCase();
  }
  var init_isAddressEqual = __esm({
    "node_modules/viem/_esm/utils/address/isAddressEqual.js"() {
      "use strict";
      init_address();
      init_isAddress();
    }
  });

  // node_modules/viem/_esm/utils/abi/decodeFunctionResult.js
  function decodeFunctionResult(parameters) {
    const { abi, args, functionName, data } = parameters;
    let abiItem = abi[0];
    if (functionName) {
      const item = getAbiItem({ abi, args, name: functionName });
      if (!item)
        throw new AbiFunctionNotFoundError(functionName, { docsPath: docsPath4 });
      abiItem = item;
    }
    if (abiItem.type !== "function")
      throw new AbiFunctionNotFoundError(void 0, { docsPath: docsPath4 });
    if (!abiItem.outputs)
      throw new AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath: docsPath4 });
    const values = decodeAbiParameters(abiItem.outputs, data);
    if (values && values.length > 1)
      return values;
    if (values && values.length === 1)
      return values[0];
    return void 0;
  }
  var docsPath4;
  var init_decodeFunctionResult = __esm({
    "node_modules/viem/_esm/utils/abi/decodeFunctionResult.js"() {
      "use strict";
      init_abi();
      init_decodeAbiParameters();
      init_getAbiItem();
      docsPath4 = "/docs/contract/decodeFunctionResult";
    }
  });

  // node_modules/viem/_esm/constants/abis.js
  var multicall3Abi, universalResolverErrors, universalResolverResolveAbi, universalResolverReverseAbi;
  var init_abis = __esm({
    "node_modules/viem/_esm/constants/abis.js"() {
      "use strict";
      multicall3Abi = [
        {
          inputs: [
            {
              components: [
                {
                  name: "target",
                  type: "address"
                },
                {
                  name: "allowFailure",
                  type: "bool"
                },
                {
                  name: "callData",
                  type: "bytes"
                }
              ],
              name: "calls",
              type: "tuple[]"
            }
          ],
          name: "aggregate3",
          outputs: [
            {
              components: [
                {
                  name: "success",
                  type: "bool"
                },
                {
                  name: "returnData",
                  type: "bytes"
                }
              ],
              name: "returnData",
              type: "tuple[]"
            }
          ],
          stateMutability: "view",
          type: "function"
        }
      ];
      universalResolverErrors = [
        {
          inputs: [],
          name: "ResolverNotFound",
          type: "error"
        },
        {
          inputs: [],
          name: "ResolverWildcardNotSupported",
          type: "error"
        },
        {
          inputs: [],
          name: "ResolverNotContract",
          type: "error"
        },
        {
          inputs: [
            {
              name: "returnData",
              type: "bytes"
            }
          ],
          name: "ResolverError",
          type: "error"
        },
        {
          inputs: [
            {
              components: [
                {
                  name: "status",
                  type: "uint16"
                },
                {
                  name: "message",
                  type: "string"
                }
              ],
              name: "errors",
              type: "tuple[]"
            }
          ],
          name: "HttpError",
          type: "error"
        }
      ];
      universalResolverResolveAbi = [
        ...universalResolverErrors,
        {
          name: "resolve",
          type: "function",
          stateMutability: "view",
          inputs: [
            { name: "name", type: "bytes" },
            { name: "data", type: "bytes" }
          ],
          outputs: [
            { name: "", type: "bytes" },
            { name: "address", type: "address" }
          ]
        },
        {
          name: "resolve",
          type: "function",
          stateMutability: "view",
          inputs: [
            { name: "name", type: "bytes" },
            { name: "data", type: "bytes" },
            { name: "gateways", type: "string[]" }
          ],
          outputs: [
            { name: "", type: "bytes" },
            { name: "address", type: "address" }
          ]
        }
      ];
      universalResolverReverseAbi = [
        ...universalResolverErrors,
        {
          name: "reverse",
          type: "function",
          stateMutability: "view",
          inputs: [{ type: "bytes", name: "reverseName" }],
          outputs: [
            { type: "string", name: "resolvedName" },
            { type: "address", name: "resolvedAddress" },
            { type: "address", name: "reverseResolver" },
            { type: "address", name: "resolver" }
          ]
        },
        {
          name: "reverse",
          type: "function",
          stateMutability: "view",
          inputs: [
            { type: "bytes", name: "reverseName" },
            { type: "string[]", name: "gateways" }
          ],
          outputs: [
            { type: "string", name: "resolvedName" },
            { type: "address", name: "resolvedAddress" },
            { type: "address", name: "reverseResolver" },
            { type: "address", name: "resolver" }
          ]
        }
      ];
    }
  });

  // node_modules/viem/_esm/constants/contract.js
  var aggregate3Signature;
  var init_contract2 = __esm({
    "node_modules/viem/_esm/constants/contract.js"() {
      "use strict";
      aggregate3Signature = "0x82ad56cb";
    }
  });

  // node_modules/viem/_esm/constants/contracts.js
  var deploylessCallViaBytecodeBytecode, deploylessCallViaFactoryBytecode;
  var init_contracts = __esm({
    "node_modules/viem/_esm/constants/contracts.js"() {
      "use strict";
      deploylessCallViaBytecodeBytecode = "0x608060405234801561001057600080fd5b5060405161018e38038061018e83398101604081905261002f91610124565b6000808351602085016000f59050803b61004857600080fd5b6000808351602085016000855af16040513d6000823e81610067573d81fd5b3d81f35b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009257600080fd5b81516001600160401b038111156100ab576100ab61006b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d9576100d961006b565b6040528181528382016020018510156100f157600080fd5b60005b82811015610110576020818601810151838301820152016100f4565b506000918101602001919091529392505050565b6000806040838503121561013757600080fd5b82516001600160401b0381111561014d57600080fd5b61015985828601610081565b602085015190935090506001600160401b0381111561017757600080fd5b61018385828601610081565b915050925092905056fe";
      deploylessCallViaFactoryBytecode = "0x608060405234801561001057600080fd5b506040516102c03803806102c083398101604081905261002f916101e6565b836001600160a01b03163b6000036100e457600080836001600160a01b03168360405161005c9190610270565b6000604051808303816000865af19150503d8060008114610099576040519150601f19603f3d011682016040523d82523d6000602084013e61009e565b606091505b50915091508115806100b857506001600160a01b0386163b155b156100e1578060405163101bb98d60e01b81526004016100d8919061028c565b60405180910390fd5b50505b6000808451602086016000885af16040513d6000823e81610103573d81fd5b3d81f35b80516001600160a01b038116811461011e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561015457818101518382015260200161013c565b50506000910152565b600082601f83011261016e57600080fd5b81516001600160401b0381111561018757610187610123565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101b5576101b5610123565b6040528181528382016020018510156101cd57600080fd5b6101de826020830160208701610139565b949350505050565b600080600080608085870312156101fc57600080fd5b61020585610107565b60208601519094506001600160401b0381111561022157600080fd5b61022d8782880161015d565b93505061023c60408601610107565b60608601519092506001600160401b0381111561025857600080fd5b6102648782880161015d565b91505092959194509250565b60008251610282818460208701610139565b9190910192915050565b60208152600082518060208401526102ab816040850160208701610139565b601f01601f1916919091016040019291505056fe";
    }
  });

  // node_modules/viem/_esm/errors/chain.js
  var ChainDoesNotSupportContract, ChainMismatchError, ChainNotFoundError, ClientChainNotConfiguredError;
  var init_chain = __esm({
    "node_modules/viem/_esm/errors/chain.js"() {
      "use strict";
      init_base();
      ChainDoesNotSupportContract = class extends BaseError2 {
        constructor({ blockNumber, chain, contract }) {
          super(`Chain "${chain.name}" does not support contract "${contract.name}".`, {
            metaMessages: [
              "This could be due to any of the following:",
              ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [
                `- The contract "${contract.name}" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`
              ] : [
                `- The chain does not have the contract "${contract.name}" configured.`
              ]
            ],
            name: "ChainDoesNotSupportContract"
          });
        }
      };
      ChainMismatchError = class extends BaseError2 {
        constructor({ chain, currentChainId }) {
          super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} \u2013 ${chain.name}).`, {
            metaMessages: [
              `Current Chain ID:  ${currentChainId}`,
              `Expected Chain ID: ${chain.id} \u2013 ${chain.name}`
            ],
            name: "ChainMismatchError"
          });
        }
      };
      ChainNotFoundError = class extends BaseError2 {
        constructor() {
          super([
            "No chain was provided to the request.",
            "Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."
          ].join("\n"), {
            name: "ChainNotFoundError"
          });
        }
      };
      ClientChainNotConfiguredError = class extends BaseError2 {
        constructor() {
          super("No chain was provided to the Client.", {
            name: "ClientChainNotConfiguredError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/abi/encodeDeployData.js
  function encodeDeployData(parameters) {
    const { abi, args, bytecode } = parameters;
    if (!args || args.length === 0)
      return bytecode;
    const description = abi.find((x) => "type" in x && x.type === "constructor");
    if (!description)
      throw new AbiConstructorNotFoundError({ docsPath: docsPath5 });
    if (!("inputs" in description))
      throw new AbiConstructorParamsNotFoundError({ docsPath: docsPath5 });
    if (!description.inputs || description.inputs.length === 0)
      throw new AbiConstructorParamsNotFoundError({ docsPath: docsPath5 });
    const data = encodeAbiParameters(description.inputs, args);
    return concatHex([bytecode, data]);
  }
  var docsPath5;
  var init_encodeDeployData = __esm({
    "node_modules/viem/_esm/utils/abi/encodeDeployData.js"() {
      "use strict";
      init_abi();
      init_concat();
      init_encodeAbiParameters();
      docsPath5 = "/docs/contract/encodeDeployData";
    }
  });

  // node_modules/viem/_esm/utils/chain/getChainContractAddress.js
  function getChainContractAddress({ blockNumber, chain, contract: name }) {
    const contract = chain?.contracts?.[name];
    if (!contract)
      throw new ChainDoesNotSupportContract({
        chain,
        contract: { name }
      });
    if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber)
      throw new ChainDoesNotSupportContract({
        blockNumber,
        chain,
        contract: {
          name,
          blockCreated: contract.blockCreated
        }
      });
    return contract.address;
  }
  var init_getChainContractAddress = __esm({
    "node_modules/viem/_esm/utils/chain/getChainContractAddress.js"() {
      "use strict";
      init_chain();
    }
  });

  // node_modules/viem/_esm/utils/errors/getCallError.js
  function getCallError(err, { docsPath: docsPath7, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError(err, args);
      if (cause2 instanceof UnknownNodeError)
        return err;
      return cause2;
    })();
    return new CallExecutionError(cause, {
      docsPath: docsPath7,
      ...args
    });
  }
  var init_getCallError = __esm({
    "node_modules/viem/_esm/utils/errors/getCallError.js"() {
      "use strict";
      init_contract();
      init_node();
      init_getNodeError();
    }
  });

  // node_modules/viem/_esm/utils/promise/withResolvers.js
  function withResolvers() {
    let resolve = () => void 0;
    let reject = () => void 0;
    const promise = new Promise((resolve_, reject_) => {
      resolve = resolve_;
      reject = reject_;
    });
    return { promise, resolve, reject };
  }
  var init_withResolvers = __esm({
    "node_modules/viem/_esm/utils/promise/withResolvers.js"() {
      "use strict";
    }
  });

  // node_modules/viem/_esm/utils/promise/createBatchScheduler.js
  function createBatchScheduler({ fn, id, shouldSplitBatch, wait: wait3 = 0, sort }) {
    const exec = async () => {
      const scheduler = getScheduler();
      flush();
      const args = scheduler.map(({ args: args2 }) => args2);
      if (args.length === 0)
        return;
      fn(args).then((data) => {
        if (sort && Array.isArray(data))
          data.sort(sort);
        for (let i = 0; i < scheduler.length; i++) {
          const { resolve } = scheduler[i];
          resolve?.([data[i], data]);
        }
      }).catch((err) => {
        for (let i = 0; i < scheduler.length; i++) {
          const { reject } = scheduler[i];
          reject?.(err);
        }
      });
    };
    const flush = () => schedulerCache.delete(id);
    const getBatchedArgs = () => getScheduler().map(({ args }) => args);
    const getScheduler = () => schedulerCache.get(id) || [];
    const setScheduler = (item) => schedulerCache.set(id, [...getScheduler(), item]);
    return {
      flush,
      async schedule(args) {
        const { promise, resolve, reject } = withResolvers();
        const split4 = shouldSplitBatch?.([...getBatchedArgs(), args]);
        if (split4)
          exec();
        const hasActiveScheduler = getScheduler().length > 0;
        if (hasActiveScheduler) {
          setScheduler({ args, resolve, reject });
          return promise;
        }
        setScheduler({ args, resolve, reject });
        setTimeout(exec, wait3);
        return promise;
      }
    };
  }
  var schedulerCache;
  var init_createBatchScheduler = __esm({
    "node_modules/viem/_esm/utils/promise/createBatchScheduler.js"() {
      "use strict";
      init_withResolvers();
      schedulerCache = /* @__PURE__ */ new Map();
    }
  });

  // node_modules/viem/_esm/errors/ccip.js
  var OffchainLookupError, OffchainLookupResponseMalformedError, OffchainLookupSenderMismatchError;
  var init_ccip = __esm({
    "node_modules/viem/_esm/errors/ccip.js"() {
      "use strict";
      init_stringify();
      init_base();
      init_utils3();
      OffchainLookupError = class extends BaseError2 {
        constructor({ callbackSelector, cause, data, extraData, sender, urls }) {
          super(cause.shortMessage || "An error occurred while fetching for an offchain result.", {
            cause,
            metaMessages: [
              ...cause.metaMessages || [],
              cause.metaMessages?.length ? "" : [],
              "Offchain Gateway Call:",
              urls && [
                "  Gateway URL(s):",
                ...urls.map((url) => `    ${getUrl(url)}`)
              ],
              `  Sender: ${sender}`,
              `  Data: ${data}`,
              `  Callback selector: ${callbackSelector}`,
              `  Extra data: ${extraData}`
            ].flat(),
            name: "OffchainLookupError"
          });
        }
      };
      OffchainLookupResponseMalformedError = class extends BaseError2 {
        constructor({ result, url }) {
          super("Offchain gateway response is malformed. Response data must be a hex value.", {
            metaMessages: [
              `Gateway URL: ${getUrl(url)}`,
              `Response: ${stringify(result)}`
            ],
            name: "OffchainLookupResponseMalformedError"
          });
        }
      };
      OffchainLookupSenderMismatchError = class extends BaseError2 {
        constructor({ sender, to }) {
          super("Reverted sender address does not match target contract address (`to`).", {
            metaMessages: [
              `Contract address: ${to}`,
              `OffchainLookup sender address: ${sender}`
            ],
            name: "OffchainLookupSenderMismatchError"
          });
        }
      };
    }
  });

  // node_modules/viem/_esm/utils/ccip.js
  var ccip_exports = {};
  __export(ccip_exports, {
    ccipRequest: () => ccipRequest,
    offchainLookup: () => offchainLookup,
    offchainLookupAbiItem: () => offchainLookupAbiItem,
    offchainLookupSignature: () => offchainLookupSignature
  });
  async function offchainLookup(client, { blockNumber, blockTag, data, to }) {
    const { args } = decodeErrorResult({
      data,
      abi: [offchainLookupAbiItem]
    });
    const [sender, urls, callData, callbackSelector, extraData] = args;
    const { ccipRead } = client;
    const ccipRequest_ = ccipRead && typeof ccipRead?.request === "function" ? ccipRead.request : ccipRequest;
    try {
      if (!isAddressEqual(to, sender))
        throw new OffchainLookupSenderMismatchError({ sender, to });
      const result = await ccipRequest_({ data: callData, sender, urls });
      const { data: data_ } = await call(client, {
        blockNumber,
        blockTag,
        data: concat([
          callbackSelector,
          encodeAbiParameters([{ type: "bytes" }, { type: "bytes" }], [result, extraData])
        ]),
        to
      });
      return data_;
    } catch (err) {
      throw new OffchainLookupError({
        callbackSelector,
        cause: err,
        data,
        extraData,
        sender,
        urls
      });
    }
  }
  async function ccipRequest({ data, sender, urls }) {
    let error = new Error("An unknown error occurred.");
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      const method = url.includes("{data}") ? "GET" : "POST";
      const body = method === "POST" ? { data, sender } : void 0;
      const headers = method === "POST" ? { "Content-Type": "application/json" } : {};
      try {
        const response = await fetch(url.replace("{sender}", sender).replace("{data}", data), {
          body: JSON.stringify(body),
          headers,
          method
        });
        let result;
        if (response.headers.get("Content-Type")?.startsWith("application/json")) {
          result = (await response.json()).data;
        } else {
          result = await response.text();
        }
        if (!response.ok) {
          error = new HttpRequestError({
            body,
            details: result?.error ? stringify(result.error) : response.statusText,
            headers: response.headers,
            status: response.status,
            url
          });
          continue;
        }
        if (!isHex(result)) {
          error = new OffchainLookupResponseMalformedError({
            result,
            url
          });
          continue;
        }
        return result;
      } catch (err) {
        error = new HttpRequestError({
          body,
          details: err.message,
          url
        });
      }
    }
    throw error;
  }
  var offchainLookupSignature, offchainLookupAbiItem;
  var init_ccip2 = __esm({
    "node_modules/viem/_esm/utils/ccip.js"() {
      "use strict";
      init_call();
      init_ccip();
      init_request();
      init_decodeErrorResult();
      init_encodeAbiParameters();
      init_isAddressEqual();
      init_concat();
      init_isHex();
      init_stringify();
      offchainLookupSignature = "0x556f1830";
      offchainLookupAbiItem = {
        name: "OffchainLookup",
        type: "error",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "urls",
            type: "string[]"
          },
          {
            name: "callData",
            type: "bytes"
          },
          {
            name: "callbackFunction",
            type: "bytes4"
          },
          {
            name: "extraData",
            type: "bytes"
          }
        ]
      };
    }
  });

  // node_modules/viem/_esm/actions/public/call.js
  async function call(client, args) {
    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = "latest", accessList, blobs, code, data: data_, factory, factoryData, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;
    const account = account_ ? parseAccount(account_) : void 0;
    if (code && (factory || factoryData))
      throw new BaseError2("Cannot provide both `code` & `factory`/`factoryData` as parameters.");
    if (code && to)
      throw new BaseError2("Cannot provide both `code` & `to` as parameters.");
    const deploylessCallViaBytecode = code && data_;
    const deploylessCallViaFactory = factory && factoryData && to && data_;
    const deploylessCall = deploylessCallViaBytecode || deploylessCallViaFactory;
    const data = (() => {
      if (deploylessCallViaBytecode)
        return toDeploylessCallViaBytecodeData({
          code,
          data: data_
        });
      if (deploylessCallViaFactory)
        return toDeploylessCallViaFactoryData({
          data: data_,
          factory,
          factoryData,
          to
        });
      return data_;
    })();
    try {
      assertRequest(args);
      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      const rpcStateOverride = serializeStateOverride(stateOverride);
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || formatTransactionRequest;
      const request = format({
        // Pick out extra data that might exist on the chain's transaction request type.
        ...extract(rest, { format: chainFormat }),
        from: account?.address,
        accessList,
        blobs,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to: deploylessCall ? void 0 : to,
        value
      });
      if (batch && shouldPerformMulticall({ request }) && !rpcStateOverride) {
        try {
          return await scheduleMulticall(client, {
            ...request,
            blockNumber,
            blockTag
          });
        } catch (err) {
          if (!(err instanceof ClientChainNotConfiguredError) && !(err instanceof ChainDoesNotSupportContract))
            throw err;
        }
      }
      const response = await client.request({
        method: "eth_call",
        params: rpcStateOverride ? [
          request,
          block,
          rpcStateOverride
        ] : [request, block]
      });
      if (response === "0x")
        return { data: void 0 };
      return { data: response };
    } catch (err) {
      const data2 = getRevertErrorData(err);
      const { offchainLookup: offchainLookup3, offchainLookupSignature: offchainLookupSignature3 } = await Promise.resolve().then(() => (init_ccip2(), ccip_exports));
      if (client.ccipRead !== false && data2?.slice(0, 10) === offchainLookupSignature3 && to)
        return { data: await offchainLookup3(client, { data: data2, to }) };
      if (deploylessCall && data2?.slice(0, 10) === "0x101bb98d")
        throw new CounterfactualDeploymentFailedError({ factory });
      throw getCallError(err, {
        ...args,
        account,
        chain: client.chain
      });
    }
  }
  function shouldPerformMulticall({ request }) {
    const { data, to, ...request_ } = request;
    if (!data)
      return false;
    if (data.startsWith(aggregate3Signature))
      return false;
    if (!to)
      return false;
    if (Object.values(request_).filter((x) => typeof x !== "undefined").length > 0)
      return false;
    return true;
  }
  async function scheduleMulticall(client, args) {
    const { batchSize = 1024, wait: wait3 = 0 } = typeof client.batch?.multicall === "object" ? client.batch.multicall : {};
    const { blockNumber, blockTag = "latest", data, multicallAddress: multicallAddress_, to } = args;
    let multicallAddress = multicallAddress_;
    if (!multicallAddress) {
      if (!client.chain)
        throw new ClientChainNotConfiguredError();
      multicallAddress = getChainContractAddress({
        blockNumber,
        chain: client.chain,
        contract: "multicall3"
      });
    }
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
    const block = blockNumberHex || blockTag;
    const { schedule } = createBatchScheduler({
      id: `${client.uid}.${block}`,
      wait: wait3,
      shouldSplitBatch(args2) {
        const size5 = args2.reduce((size6, { data: data2 }) => size6 + (data2.length - 2), 0);
        return size5 > batchSize * 2;
      },
      fn: async (requests) => {
        const calls = requests.map((request) => ({
          allowFailure: true,
          callData: request.data,
          target: request.to
        }));
        const calldata = encodeFunctionData({
          abi: multicall3Abi,
          args: [calls],
          functionName: "aggregate3"
        });
        const data2 = await client.request({
          method: "eth_call",
          params: [
            {
              data: calldata,
              to: multicallAddress
            },
            block
          ]
        });
        return decodeFunctionResult({
          abi: multicall3Abi,
          args: [calls],
          functionName: "aggregate3",
          data: data2 || "0x"
        });
      }
    });
    const [{ returnData, success }] = await schedule({ data, to });
    if (!success)
      throw new RawContractError({ data: returnData });
    if (returnData === "0x")
      return { data: void 0 };
    return { data: returnData };
  }
  function toDeploylessCallViaBytecodeData(parameters) {
    const { code, data } = parameters;
    return encodeDeployData({
      abi: parseAbi(["constructor(bytes, bytes)"]),
      bytecode: deploylessCallViaBytecodeBytecode,
      args: [code, data]
    });
  }
  function toDeploylessCallViaFactoryData(parameters) {
    const { data, factory, factoryData, to } = parameters;
    return encodeDeployData({
      abi: parseAbi(["constructor(address, bytes, address, bytes)"]),
      bytecode: deploylessCallViaFactoryBytecode,
      args: [to, data, factory, factoryData]
    });
  }
  function getRevertErrorData(err) {
    if (!(err instanceof BaseError2))
      return void 0;
    const error = err.walk();
    return typeof error?.data === "object" ? error.data?.data : error.data;
  }
  var init_call = __esm({
    "node_modules/viem/_esm/actions/public/call.js"() {
      "use strict";
      init_exports();
      init_parseAccount();
      init_abis();
      init_contract2();
      init_contracts();
      init_base();
      init_chain();
      init_contract();
      init_decodeFunctionResult();
      init_encodeDeployData();
      init_encodeFunctionData();
      init_getChainContractAddress();
      init_toHex();
      init_getCallError();
      init_extract();
      init_transactionRequest();
      init_createBatchScheduler();
      init_stateOverride2();
      init_assertRequest();
    }
  });

  // node_modules/dotenv/package.json
  var require_package = __commonJS({
    "node_modules/dotenv/package.json"(exports2, module2) {
      module2.exports = {
        name: "dotenv",
        version: "16.4.5",
        description: "Loads environment variables from .env file",
        main: "lib/main.js",
        types: "lib/main.d.ts",
        exports: {
          ".": {
            types: "./lib/main.d.ts",
            require: "./lib/main.js",
            default: "./lib/main.js"
          },
          "./config": "./config.js",
          "./config.js": "./config.js",
          "./lib/env-options": "./lib/env-options.js",
          "./lib/env-options.js": "./lib/env-options.js",
          "./lib/cli-options": "./lib/cli-options.js",
          "./lib/cli-options.js": "./lib/cli-options.js",
          "./package.json": "./package.json"
        },
        scripts: {
          "dts-check": "tsc --project tests/types/tsconfig.json",
          lint: "standard",
          "lint-readme": "standard-markdown",
          pretest: "npm run lint && npm run dts-check",
          test: "tap tests/*.js --100 -Rspec",
          "test:coverage": "tap --coverage-report=lcov",
          prerelease: "npm test",
          release: "standard-version"
        },
        repository: {
          type: "git",
          url: "git://github.com/motdotla/dotenv.git"
        },
        funding: "https://dotenvx.com",
        keywords: [
          "dotenv",
          "env",
          ".env",
          "environment",
          "variables",
          "config",
          "settings"
        ],
        readmeFilename: "README.md",
        license: "BSD-2-Clause",
        devDependencies: {
          "@definitelytyped/dtslint": "^0.0.133",
          "@types/node": "^18.11.3",
          decache: "^4.6.1",
          sinon: "^14.0.1",
          standard: "^17.0.0",
          "standard-markdown": "^7.1.0",
          "standard-version": "^9.5.0",
          tap: "^16.3.0",
          tar: "^6.1.11",
          typescript: "^4.8.4"
        },
        engines: {
          node: ">=12"
        },
        browser: {
          fs: false
        }
      };
    }
  });

  // node_modules/dotenv/lib/main.js
  var require_main = __commonJS({
    "node_modules/dotenv/lib/main.js"(exports2, module2) {
      "use strict";
      var fs = __require("fs");
      var path2 = __require("path");
      var os = __require("os");
      var crypto2 = __require("crypto");
      var packageJson = require_package();
      var version5 = packageJson.version;
      var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
      function parse2(src) {
        const obj = {};
        let lines = src.toString();
        lines = lines.replace(/\r\n?/mg, "\n");
        let match;
        while ((match = LINE.exec(lines)) != null) {
          const key = match[1];
          let value = match[2] || "";
          value = value.trim();
          const maybeQuote = value[0];
          value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
          if (maybeQuote === '"') {
            value = value.replace(/\\n/g, "\n");
            value = value.replace(/\\r/g, "\r");
          }
          obj[key] = value;
        }
        return obj;
      }
      function _parseVault(options2) {
        const vaultPath = _vaultPath(options2);
        const result = DotenvModule.configDotenv({ path: vaultPath });
        if (!result.parsed) {
          const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
          err.code = "MISSING_DATA";
          throw err;
        }
        const keys = _dotenvKey(options2).split(",");
        const length = keys.length;
        let decrypted;
        for (let i = 0; i < length; i++) {
          try {
            const key = keys[i].trim();
            const attrs = _instructions(result, key);
            decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
            break;
          } catch (error) {
            if (i + 1 >= length) {
              throw error;
            }
          }
        }
        return DotenvModule.parse(decrypted);
      }
      function _log(message) {
        console.log(`[dotenv@${version5}][INFO] ${message}`);
      }
      function _warn(message) {
        console.log(`[dotenv@${version5}][WARN] ${message}`);
      }
      function _debug(message) {
        console.log(`[dotenv@${version5}][DEBUG] ${message}`);
      }
      function _dotenvKey(options2) {
        if (options2 && options2.DOTENV_KEY && options2.DOTENV_KEY.length > 0) {
          return options2.DOTENV_KEY;
        }
        if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
          return process.env.DOTENV_KEY;
        }
        return "";
      }
      function _instructions(result, dotenvKey) {
        let uri;
        try {
          uri = new URL(dotenvKey);
        } catch (error) {
          if (error.code === "ERR_INVALID_URL") {
            const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
            err.code = "INVALID_DOTENV_KEY";
            throw err;
          }
          throw error;
        }
        const key = uri.password;
        if (!key) {
          const err = new Error("INVALID_DOTENV_KEY: Missing key part");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        const environment = uri.searchParams.get("environment");
        if (!environment) {
          const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
        const ciphertext = result.parsed[environmentKey];
        if (!ciphertext) {
          const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
          err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
          throw err;
        }
        return { ciphertext, key };
      }
      function _vaultPath(options2) {
        let possibleVaultPath = null;
        if (options2 && options2.path && options2.path.length > 0) {
          if (Array.isArray(options2.path)) {
            for (const filepath of options2.path) {
              if (fs.existsSync(filepath)) {
                possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
              }
            }
          } else {
            possibleVaultPath = options2.path.endsWith(".vault") ? options2.path : `${options2.path}.vault`;
          }
        } else {
          possibleVaultPath = path2.resolve(process.cwd(), ".env.vault");
        }
        if (fs.existsSync(possibleVaultPath)) {
          return possibleVaultPath;
        }
        return null;
      }
      function _resolveHome(envPath) {
        return envPath[0] === "~" ? path2.join(os.homedir(), envPath.slice(1)) : envPath;
      }
      function _configVault(options2) {
        _log("Loading env from encrypted .env.vault");
        const parsed = DotenvModule._parseVault(options2);
        let processEnv = process.env;
        if (options2 && options2.processEnv != null) {
          processEnv = options2.processEnv;
        }
        DotenvModule.populate(processEnv, parsed, options2);
        return { parsed };
      }
      function configDotenv(options2) {
        const dotenvPath = path2.resolve(process.cwd(), ".env");
        let encoding = "utf8";
        const debug = Boolean(options2 && options2.debug);
        if (options2 && options2.encoding) {
          encoding = options2.encoding;
        } else {
          if (debug) {
            _debug("No encoding is specified. UTF-8 is used by default");
          }
        }
        let optionPaths = [dotenvPath];
        if (options2 && options2.path) {
          if (!Array.isArray(options2.path)) {
            optionPaths = [_resolveHome(options2.path)];
          } else {
            optionPaths = [];
            for (const filepath of options2.path) {
              optionPaths.push(_resolveHome(filepath));
            }
          }
        }
        let lastError;
        const parsedAll = {};
        for (const path3 of optionPaths) {
          try {
            const parsed = DotenvModule.parse(fs.readFileSync(path3, { encoding }));
            DotenvModule.populate(parsedAll, parsed, options2);
          } catch (e) {
            if (debug) {
              _debug(`Failed to load ${path3} ${e.message}`);
            }
            lastError = e;
          }
        }
        let processEnv = process.env;
        if (options2 && options2.processEnv != null) {
          processEnv = options2.processEnv;
        }
        DotenvModule.populate(processEnv, parsedAll, options2);
        if (lastError) {
          return { parsed: parsedAll, error: lastError };
        } else {
          return { parsed: parsedAll };
        }
      }
      function config(options2) {
        if (_dotenvKey(options2).length === 0) {
          return DotenvModule.configDotenv(options2);
        }
        const vaultPath = _vaultPath(options2);
        if (!vaultPath) {
          _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
          return DotenvModule.configDotenv(options2);
        }
        return DotenvModule._configVault(options2);
      }
      function decrypt(encrypted, keyStr) {
        const key = Buffer.from(keyStr.slice(-64), "hex");
        let ciphertext = Buffer.from(encrypted, "base64");
        const nonce = ciphertext.subarray(0, 12);
        const authTag = ciphertext.subarray(-16);
        ciphertext = ciphertext.subarray(12, -16);
        try {
          const aesgcm = crypto2.createDecipheriv("aes-256-gcm", key, nonce);
          aesgcm.setAuthTag(authTag);
          return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
        } catch (error) {
          const isRange = error instanceof RangeError;
          const invalidKeyLength = error.message === "Invalid key length";
          const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
          if (isRange || invalidKeyLength) {
            const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
            err.code = "INVALID_DOTENV_KEY";
            throw err;
          } else if (decryptionFailed) {
            const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
            err.code = "DECRYPTION_FAILED";
            throw err;
          } else {
            throw error;
          }
        }
      }
      function populate(processEnv, parsed, options2 = {}) {
        const debug = Boolean(options2 && options2.debug);
        const override = Boolean(options2 && options2.override);
        if (typeof parsed !== "object") {
          const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
          err.code = "OBJECT_REQUIRED";
          throw err;
        }
        for (const key of Object.keys(parsed)) {
          if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
            if (override === true) {
              processEnv[key] = parsed[key];
            }
            if (debug) {
              if (override === true) {
                _debug(`"${key}" is already defined and WAS overwritten`);
              } else {
                _debug(`"${key}" is already defined and was NOT overwritten`);
              }
            }
          } else {
            processEnv[key] = parsed[key];
          }
        }
      }
      var DotenvModule = {
        configDotenv,
        _configVault,
        _parseVault,
        config,
        decrypt,
        parse: parse2,
        populate
      };
      module2.exports.configDotenv = DotenvModule.configDotenv;
      module2.exports._configVault = DotenvModule._configVault;
      module2.exports._parseVault = DotenvModule._parseVault;
      module2.exports.config = DotenvModule.config;
      module2.exports.decrypt = DotenvModule.decrypt;
      module2.exports.parse = DotenvModule.parse;
      module2.exports.populate = DotenvModule.populate;
      module2.exports = DotenvModule;
    }
  });

  // node_modules/dotenv/lib/env-options.js
  var require_env_options = __commonJS({
    "node_modules/dotenv/lib/env-options.js"(exports2, module2) {
      "use strict";
      var options2 = {};
      if (process.env.DOTENV_CONFIG_ENCODING != null) {
        options2.encoding = process.env.DOTENV_CONFIG_ENCODING;
      }
      if (process.env.DOTENV_CONFIG_PATH != null) {
        options2.path = process.env.DOTENV_CONFIG_PATH;
      }
      if (process.env.DOTENV_CONFIG_DEBUG != null) {
        options2.debug = process.env.DOTENV_CONFIG_DEBUG;
      }
      if (process.env.DOTENV_CONFIG_OVERRIDE != null) {
        options2.override = process.env.DOTENV_CONFIG_OVERRIDE;
      }
      if (process.env.DOTENV_CONFIG_DOTENV_KEY != null) {
        options2.DOTENV_KEY = process.env.DOTENV_CONFIG_DOTENV_KEY;
      }
      module2.exports = options2;
    }
  });

  // node_modules/dotenv/lib/cli-options.js
  var require_cli_options = __commonJS({
    "node_modules/dotenv/lib/cli-options.js"(exports2, module2) {
      "use strict";
      var re = /^dotenv_config_(encoding|path|debug|override|DOTENV_KEY)=(.+)$/;
      module2.exports = function optionMatcher(args) {
        return args.reduce(function(acc, cur) {
          const matches = cur.match(re);
          if (matches) {
            acc[matches[1]] = matches[2];
          }
          return acc;
        }, {});
      };
    }
  });

  // node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/color-name/index.js"(exports2, module2) {
      "use strict";
      module2.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/color-convert/conversions.js"(exports2, module2) {
      "use strict";
      var cssKeywords = require_color_name();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module2.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff2 = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff2 + 1 / 2;
        };
        if (diff2 === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff2 / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
        g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
        b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        const t1 = 2 * l - t2;
        const rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = y ** 3;
        const x2 = x ** 3;
        const z2 = z ** 3;
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/color-convert/route.js"(exports2, module2) {
      "use strict";
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path2 = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path2.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path2;
        return fn;
      }
      module2.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/color-convert/index.js"(exports2, module2) {
      "use strict";
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module2.exports = convert;
    }
  });

  // node_modules/ansi-styles/index.js
  var require_ansi_styles = __commonJS({
    "node_modules/ansi-styles/index.js"(exports2, module2) {
      "use strict";
      var wrapAnsi16 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${code + offset}m`;
      };
      var wrapAnsi256 = (fn, offset) => (...args) => {
        const code = fn(...args);
        return `\x1B[${38 + offset};5;${code}m`;
      };
      var wrapAnsi16m = (fn, offset) => (...args) => {
        const rgb = fn(...args);
        return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
      };
      var ansi2ansi = (n) => n;
      var rgb2rgb = (r, g, b) => [r, g, b];
      var setLazyProperty = (object, property, get) => {
        Object.defineProperty(object, property, {
          get: () => {
            const value = get();
            Object.defineProperty(object, property, {
              value,
              enumerable: true,
              configurable: true
            });
            return value;
          },
          enumerable: true,
          configurable: true
        });
      };
      var colorConvert;
      var makeDynamicStyles = (wrap2, targetSpace, identity, isBackground) => {
        if (colorConvert === void 0) {
          colorConvert = require_color_convert();
        }
        const offset = isBackground ? 10 : 0;
        const styles = {};
        for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
          const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
          if (sourceSpace === targetSpace) {
            styles[name] = wrap2(identity, offset);
          } else if (typeof suite === "object") {
            styles[name] = wrap2(suite[targetSpace], offset);
          }
        }
        return styles;
      };
      function assembleStyles() {
        const codes = /* @__PURE__ */ new Map();
        const styles = {
          modifier: {
            reset: [0, 0],
            // 21 isn't widely supported and 22 does the same thing
            bold: [1, 22],
            dim: [2, 22],
            italic: [3, 23],
            underline: [4, 24],
            inverse: [7, 27],
            hidden: [8, 28],
            strikethrough: [9, 29]
          },
          color: {
            black: [30, 39],
            red: [31, 39],
            green: [32, 39],
            yellow: [33, 39],
            blue: [34, 39],
            magenta: [35, 39],
            cyan: [36, 39],
            white: [37, 39],
            // Bright color
            blackBright: [90, 39],
            redBright: [91, 39],
            greenBright: [92, 39],
            yellowBright: [93, 39],
            blueBright: [94, 39],
            magentaBright: [95, 39],
            cyanBright: [96, 39],
            whiteBright: [97, 39]
          },
          bgColor: {
            bgBlack: [40, 49],
            bgRed: [41, 49],
            bgGreen: [42, 49],
            bgYellow: [43, 49],
            bgBlue: [44, 49],
            bgMagenta: [45, 49],
            bgCyan: [46, 49],
            bgWhite: [47, 49],
            // Bright color
            bgBlackBright: [100, 49],
            bgRedBright: [101, 49],
            bgGreenBright: [102, 49],
            bgYellowBright: [103, 49],
            bgBlueBright: [104, 49],
            bgMagentaBright: [105, 49],
            bgCyanBright: [106, 49],
            bgWhiteBright: [107, 49]
          }
        };
        styles.color.gray = styles.color.blackBright;
        styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
        styles.color.grey = styles.color.blackBright;
        styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
        for (const [groupName, group] of Object.entries(styles)) {
          for (const [styleName, style] of Object.entries(group)) {
            styles[styleName] = {
              open: `\x1B[${style[0]}m`,
              close: `\x1B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
          }
          Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
          });
        }
        Object.defineProperty(styles, "codes", {
          value: codes,
          enumerable: false
        });
        styles.color.close = "\x1B[39m";
        styles.bgColor.close = "\x1B[49m";
        setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
        setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
        setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
        setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
        return styles;
      }
      Object.defineProperty(module2, "exports", {
        enumerable: true,
        get: assembleStyles
      });
    }
  });

  // node_modules/has-flag/index.js
  var require_has_flag = __commonJS({
    "node_modules/has-flag/index.js"(exports2, module2) {
      "use strict";
      module2.exports = (flag, argv = process.argv) => {
        const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
        const position = argv.indexOf(prefix + flag);
        const terminatorPosition = argv.indexOf("--");
        return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
      };
    }
  });

  // node_modules/supports-color/index.js
  var require_supports_color = __commonJS({
    "node_modules/supports-color/index.js"(exports2, module2) {
      "use strict";
      var os = __require("os");
      var tty = __require("tty");
      var hasFlag = require_has_flag();
      var { env } = process;
      var forceColor;
      if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
        forceColor = 0;
      } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
        forceColor = 1;
      }
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          forceColor = 1;
        } else if (env.FORCE_COLOR === "false") {
          forceColor = 0;
        } else {
          forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
        }
      }
      function translateLevel(level) {
        if (level === 0) {
          return false;
        }
        return {
          level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3
        };
      }
      function supportsColor(haveStream, streamIsTTY) {
        if (forceColor === 0) {
          return 0;
        }
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
        if (haveStream && !streamIsTTY && forceColor === void 0) {
          return 0;
        }
        const min = forceColor || 0;
        if (env.TERM === "dumb") {
          return min;
        }
        if (process.platform === "win32") {
          const osRelease = os.release().split(".");
          if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2;
          }
          return 1;
        }
        if ("CI" in env) {
          if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
            return 1;
          }
          return min;
        }
        if ("TEAMCITY_VERSION" in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
        }
        if (env.COLORTERM === "truecolor") {
          return 3;
        }
        if ("TERM_PROGRAM" in env) {
          const version5 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version5 >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        if (/-256(color)?$/i.test(env.TERM)) {
          return 2;
        }
        if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
          return 1;
        }
        if ("COLORTERM" in env) {
          return 1;
        }
        return min;
      }
      function getSupportLevel(stream) {
        const level = supportsColor(stream, stream && stream.isTTY);
        return translateLevel(level);
      }
      module2.exports = {
        supportsColor: getSupportLevel,
        stdout: translateLevel(supportsColor(true, tty.isatty(1))),
        stderr: translateLevel(supportsColor(true, tty.isatty(2)))
      };
    }
  });

  // node_modules/chalk/source/util.js
  var require_util = __commonJS({
    "node_modules/chalk/source/util.js"(exports2, module2) {
      "use strict";
      var stringReplaceAll = (string, substring, replacer) => {
        let index2 = string.indexOf(substring);
        if (index2 === -1) {
          return string;
        }
        const substringLength = substring.length;
        let endIndex = 0;
        let returnValue = "";
        do {
          returnValue += string.substr(endIndex, index2 - endIndex) + substring + replacer;
          endIndex = index2 + substringLength;
          index2 = string.indexOf(substring, endIndex);
        } while (index2 !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index2) => {
        let endIndex = 0;
        let returnValue = "";
        do {
          const gotCR = string[index2 - 1] === "\r";
          returnValue += string.substr(endIndex, (gotCR ? index2 - 1 : index2) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
          endIndex = index2 + 1;
          index2 = string.indexOf("\n", endIndex);
        } while (index2 !== -1);
        returnValue += string.substr(endIndex);
        return returnValue;
      };
      module2.exports = {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      };
    }
  });

  // node_modules/chalk/source/templates.js
  var require_templates = __commonJS({
    "node_modules/chalk/source/templates.js"(exports2, module2) {
      "use strict";
      var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
      var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
      var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
      var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
      var ESCAPES = /* @__PURE__ */ new Map([
        ["n", "\n"],
        ["r", "\r"],
        ["t", "	"],
        ["b", "\b"],
        ["f", "\f"],
        ["v", "\v"],
        ["0", "\0"],
        ["\\", "\\"],
        ["e", "\x1B"],
        ["a", "\x07"]
      ]);
      function unescape(c) {
        const u = c[0] === "u";
        const bracket = c[1] === "{";
        if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
          return String.fromCharCode(parseInt(c.slice(1), 16));
        }
        if (u && bracket) {
          return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
        }
        return ESCAPES.get(c) || c;
      }
      function parseArguments(name, arguments_) {
        const results = [];
        const chunks = arguments_.trim().split(/\s*,\s*/g);
        let matches;
        for (const chunk of chunks) {
          const number4 = Number(chunk);
          if (!Number.isNaN(number4)) {
            results.push(number4);
          } else if (matches = chunk.match(STRING_REGEX)) {
            results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
          } else {
            throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
          }
        }
        return results;
      }
      function parseStyle(style) {
        STYLE_REGEX.lastIndex = 0;
        const results = [];
        let matches;
        while ((matches = STYLE_REGEX.exec(style)) !== null) {
          const name = matches[1];
          if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([name].concat(args));
          } else {
            results.push([name]);
          }
        }
        return results;
      }
      function buildStyle(chalk2, styles) {
        const enabled = {};
        for (const layer of styles) {
          for (const style of layer.styles) {
            enabled[style[0]] = layer.inverse ? null : style.slice(1);
          }
        }
        let current = chalk2;
        for (const [styleName, styles2] of Object.entries(enabled)) {
          if (!Array.isArray(styles2)) {
            continue;
          }
          if (!(styleName in current)) {
            throw new Error(`Unknown Chalk style: ${styleName}`);
          }
          current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
        }
        return current;
      }
      module2.exports = (chalk2, temporary) => {
        const styles = [];
        const chunks = [];
        let chunk = [];
        temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
          if (escapeCharacter) {
            chunk.push(unescape(escapeCharacter));
          } else if (style) {
            const string = chunk.join("");
            chunk = [];
            chunks.push(styles.length === 0 ? string : buildStyle(chalk2, styles)(string));
            styles.push({ inverse, styles: parseStyle(style) });
          } else if (close) {
            if (styles.length === 0) {
              throw new Error("Found extraneous } in Chalk template literal");
            }
            chunks.push(buildStyle(chalk2, styles)(chunk.join("")));
            chunk = [];
            styles.pop();
          } else {
            chunk.push(character);
          }
        });
        chunks.push(chunk.join(""));
        if (styles.length > 0) {
          const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
          throw new Error(errMessage);
        }
        return chunks.join("");
      };
    }
  });

  // node_modules/chalk/source/index.js
  var require_source = __commonJS({
    "node_modules/chalk/source/index.js"(exports2, module2) {
      "use strict";
      var ansiStyles = require_ansi_styles();
      var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
      var {
        stringReplaceAll,
        stringEncaseCRLFWithFirstIndex
      } = require_util();
      var { isArray } = Array;
      var levelMapping = [
        "ansi",
        "ansi",
        "ansi256",
        "ansi16m"
      ];
      var styles = /* @__PURE__ */ Object.create(null);
      var applyOptions = (object, options2 = {}) => {
        if (options2.level && !(Number.isInteger(options2.level) && options2.level >= 0 && options2.level <= 3)) {
          throw new Error("The `level` option should be an integer from 0 to 3");
        }
        const colorLevel = stdoutColor ? stdoutColor.level : 0;
        object.level = options2.level === void 0 ? colorLevel : options2.level;
      };
      var ChalkClass = class {
        constructor(options2) {
          return chalkFactory(options2);
        }
      };
      var chalkFactory = (options2) => {
        const chalk3 = {};
        applyOptions(chalk3, options2);
        chalk3.template = (...arguments_) => chalkTag(chalk3.template, ...arguments_);
        Object.setPrototypeOf(chalk3, Chalk.prototype);
        Object.setPrototypeOf(chalk3.template, chalk3);
        chalk3.template.constructor = () => {
          throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
        };
        chalk3.template.Instance = ChalkClass;
        return chalk3.template;
      };
      function Chalk(options2) {
        return chalkFactory(options2);
      }
      for (const [styleName, style] of Object.entries(ansiStyles)) {
        styles[styleName] = {
          get() {
            const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
            Object.defineProperty(this, styleName, { value: builder });
            return builder;
          }
        };
      }
      styles.visible = {
        get() {
          const builder = createBuilder(this, this._styler, true);
          Object.defineProperty(this, "visible", { value: builder });
          return builder;
        }
      };
      var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
      for (const model of usedModels) {
        styles[model] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      for (const model of usedModels) {
        const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
        styles[bgModel] = {
          get() {
            const { level } = this;
            return function(...arguments_) {
              const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
              return createBuilder(this, styler, this._isEmpty);
            };
          }
        };
      }
      var proto = Object.defineProperties(() => {
      }, {
        ...styles,
        level: {
          enumerable: true,
          get() {
            return this._generator.level;
          },
          set(level) {
            this._generator.level = level;
          }
        }
      });
      var createStyler = (open, close, parent) => {
        let openAll;
        let closeAll;
        if (parent === void 0) {
          openAll = open;
          closeAll = close;
        } else {
          openAll = parent.openAll + open;
          closeAll = close + parent.closeAll;
        }
        return {
          open,
          close,
          openAll,
          closeAll,
          parent
        };
      };
      var createBuilder = (self2, _styler, _isEmpty) => {
        const builder = (...arguments_) => {
          if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
            return applyStyle(builder, chalkTag(builder, ...arguments_));
          }
          return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
        };
        Object.setPrototypeOf(builder, proto);
        builder._generator = self2;
        builder._styler = _styler;
        builder._isEmpty = _isEmpty;
        return builder;
      };
      var applyStyle = (self2, string) => {
        if (self2.level <= 0 || !string) {
          return self2._isEmpty ? "" : string;
        }
        let styler = self2._styler;
        if (styler === void 0) {
          return string;
        }
        const { openAll, closeAll } = styler;
        if (string.indexOf("\x1B") !== -1) {
          while (styler !== void 0) {
            string = stringReplaceAll(string, styler.close, styler.open);
            styler = styler.parent;
          }
        }
        const lfIndex = string.indexOf("\n");
        if (lfIndex !== -1) {
          string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
        }
        return openAll + string + closeAll;
      };
      var template;
      var chalkTag = (chalk3, ...strings) => {
        const [firstString] = strings;
        if (!isArray(firstString) || !isArray(firstString.raw)) {
          return strings.join(" ");
        }
        const arguments_ = strings.slice(1);
        const parts = [firstString.raw[0]];
        for (let i = 1; i < firstString.length; i++) {
          parts.push(
            String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"),
            String(firstString.raw[i])
          );
        }
        if (template === void 0) {
          template = require_templates();
        }
        return template(chalk3, parts.join(""));
      };
      Object.defineProperties(Chalk.prototype, styles);
      var chalk2 = Chalk();
      chalk2.supportsColor = stdoutColor;
      chalk2.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
      chalk2.stderr.supportsColor = stderrColor;
      module2.exports = chalk2;
    }
  });

  // node_modules/deepmerge/dist/cjs.js
  var require_cjs = __commonJS({
    "node_modules/deepmerge/dist/cjs.js"(exports2, module2) {
      "use strict";
      var isMergeableObject = function isMergeableObject2(value) {
        return isNonNullObject(value) && !isSpecial(value);
      };
      function isNonNullObject(value) {
        return !!value && typeof value === "object";
      }
      function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
      }
      var canUseSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
      function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
      }
      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }
      function cloneUnlessOtherwiseSpecified(value, options2) {
        return options2.clone !== false && options2.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options2) : value;
      }
      function defaultArrayMerge(target, source, options2) {
        return target.concat(source).map(function(element) {
          return cloneUnlessOtherwiseSpecified(element, options2);
        });
      }
      function getMergeFunction(key, options2) {
        if (!options2.customMerge) {
          return deepmerge;
        }
        var customMerge = options2.customMerge(key);
        return typeof customMerge === "function" ? customMerge : deepmerge;
      }
      function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
          return Object.propertyIsEnumerable.call(target, symbol);
        }) : [];
      }
      function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
      }
      function propertyIsOnObject(object, property) {
        try {
          return property in object;
        } catch (_) {
          return false;
        }
      }
      function propertyIsUnsafe(target, key) {
        return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
      }
      function mergeObject(target, source, options2) {
        var destination = {};
        if (options2.isMergeableObject(target)) {
          getKeys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options2);
          });
        }
        getKeys(source).forEach(function(key) {
          if (propertyIsUnsafe(target, key)) {
            return;
          }
          if (propertyIsOnObject(target, key) && options2.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options2)(target[key], source[key], options2);
          } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options2);
          }
        });
        return destination;
      }
      function deepmerge(target, source, options2) {
        options2 = options2 || {};
        options2.arrayMerge = options2.arrayMerge || defaultArrayMerge;
        options2.isMergeableObject = options2.isMergeableObject || isMergeableObject;
        options2.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
          return cloneUnlessOtherwiseSpecified(source, options2);
        } else if (sourceIsArray) {
          return options2.arrayMerge(target, source, options2);
        } else {
          return mergeObject(target, source, options2);
        }
      }
      deepmerge.all = function deepmergeAll(array, options2) {
        if (!Array.isArray(array)) {
          throw new Error("first argument should be an array");
        }
        return array.reduce(function(prev, next) {
          return deepmerge(prev, next, options2);
        }, {});
      };
      var deepmerge_1 = deepmerge;
      module2.exports = deepmerge_1;
    }
  });

  // src/reports/diff-reports.ts
  var import_fs2 = __require("fs");

  // src/reports/diff.ts
  function diff(a, b, removeUnchanged) {
    const out = {};
    for (const key in a) {
      if (!b.hasOwnProperty(key)) {
        out[key] = { from: a[key], to: null };
      } else {
        if (typeof a[key] === "object") {
          const tempDiff = diff(a[key], b[key], removeUnchanged);
          if (Object.keys(tempDiff).length > 0) {
            out[key] = tempDiff;
          }
        } else {
          if (b[key] === a[key]) {
            if (!removeUnchanged) out[key] = a[key];
          } else {
            out[key] = { from: a[key], to: b[key] };
          }
        }
      }
    }
    for (const key in b) {
      if (a.hasOwnProperty(key)) continue;
      out[key] = { from: null, to: b[key] };
    }
    return out;
  }

  // node_modules/viem/_esm/index.js
  init_exports();

  // node_modules/viem/_esm/utils/getAction.js
  function getAction(client, actionFn, name) {
    const action_implicit = client[actionFn.name];
    if (typeof action_implicit === "function")
      return action_implicit;
    const action_explicit = client[name];
    if (typeof action_explicit === "function")
      return action_explicit;
    return (params) => actionFn(client, params);
  }

  // node_modules/viem/_esm/utils/abi/encodeEventTopics.js
  init_abi();

  // node_modules/viem/_esm/errors/log.js
  init_base();
  var FilterTypeNotSupportedError = class extends BaseError2 {
    constructor(type) {
      super(`Filter type "${type}" is not supported.`, {
        name: "FilterTypeNotSupportedError"
      });
    }
  };

  // node_modules/viem/_esm/utils/abi/encodeEventTopics.js
  init_toBytes();
  init_keccak256();
  init_toEventSelector();
  init_encodeAbiParameters();
  init_formatAbiItem2();
  init_getAbiItem();
  var docsPath = "/docs/contract/encodeEventTopics";
  function encodeEventTopics(parameters) {
    const { abi, eventName, args } = parameters;
    let abiItem = abi[0];
    if (eventName) {
      const item = getAbiItem({ abi, name: eventName });
      if (!item)
        throw new AbiEventNotFoundError(eventName, { docsPath });
      abiItem = item;
    }
    if (abiItem.type !== "event")
      throw new AbiEventNotFoundError(void 0, { docsPath });
    const definition = formatAbiItem2(abiItem);
    const signature = toEventSelector(definition);
    let topics = [];
    if (args && "inputs" in abiItem) {
      const indexedInputs = abiItem.inputs?.filter((param) => "indexed" in param && param.indexed);
      const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map((x) => args[x.name]) ?? [] : [];
      if (args_.length > 0) {
        topics = indexedInputs?.map((param, i) => {
          if (Array.isArray(args_[i]))
            return args_[i].map((_, j) => encodeArg({ param, value: args_[i][j] }));
          return args_[i] ? encodeArg({ param, value: args_[i] }) : null;
        }) ?? [];
      }
    }
    return [signature, ...topics];
  }
  function encodeArg({ param, value }) {
    if (param.type === "string" || param.type === "bytes")
      return keccak256(toBytes(value));
    if (param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
      throw new FilterTypeNotSupportedError(param.type);
    return encodeAbiParameters([param], [value]);
  }

  // node_modules/viem/_esm/actions/public/createContractEventFilter.js
  init_toHex();

  // node_modules/viem/_esm/utils/filters/createFilterRequestScope.js
  function createFilterRequestScope(client, { method }) {
    const requestMap = {};
    if (client.transport.type === "fallback")
      client.transport.onResponse?.(({ method: method_, response: id, status, transport }) => {
        if (status === "success" && method === method_)
          requestMap[id] = transport.request;
      });
    return (id) => requestMap[id] || client.request;
  }

  // node_modules/viem/_esm/actions/public/createContractEventFilter.js
  async function createContractEventFilter(client, parameters) {
    const { address, abi, args, eventName, fromBlock, strict, toBlock } = parameters;
    const getRequest = createFilterRequestScope(client, {
      method: "eth_newFilter"
    });
    const topics = eventName ? encodeEventTopics({
      abi,
      args,
      eventName
    }) : void 0;
    const id = await client.request({
      method: "eth_newFilter",
      params: [
        {
          address,
          fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
          toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock,
          topics
        }
      ]
    });
    return {
      abi,
      args,
      eventName,
      id,
      request: getRequest(id),
      strict: Boolean(strict),
      type: "event"
    };
  }

  // node_modules/viem/_esm/actions/public/estimateContractGas.js
  init_parseAccount();
  init_encodeFunctionData();

  // node_modules/viem/_esm/utils/errors/getContractError.js
  init_abi();
  init_base();
  init_contract();
  init_rpc();
  var EXECUTION_REVERTED_ERROR_CODE = 3;
  function getContractError(err, { abi, address, args, docsPath: docsPath7, functionName, sender }) {
    const { code, data, message, shortMessage } = err instanceof RawContractError ? err : err instanceof BaseError2 ? err.walk((err2) => "data" in err2) || err.walk() : {};
    const cause = (() => {
      if (err instanceof AbiDecodingZeroDataError)
        return new ContractFunctionZeroDataError({ functionName });
      if ([EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) && (data || message || shortMessage)) {
        return new ContractFunctionRevertedError({
          abi,
          data: typeof data === "object" ? data.data : data,
          functionName,
          message: shortMessage ?? message
        });
      }
      return err;
    })();
    return new ContractFunctionExecutionError(cause, {
      abi,
      args,
      contractAddress: address,
      docsPath: docsPath7,
      functionName,
      sender
    });
  }

  // node_modules/viem/_esm/actions/public/estimateGas.js
  init_parseAccount();
  init_base();

  // node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
  init_getAddress();
  init_keccak256();
  function publicKeyToAddress(publicKey) {
    const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
    return checksumAddress(`0x${address}`);
  }

  // node_modules/viem/_esm/utils/signature/recoverPublicKey.js
  init_isHex();
  init_fromHex();
  init_toHex();
  async function recoverPublicKey({ hash: hash4, signature }) {
    const hashHex = isHex(hash4) ? hash4 : toHex(hash4);
    const { secp256k1: secp256k12 } = await Promise.resolve().then(() => (init_secp256k1(), secp256k1_exports));
    const signature_ = (() => {
      if (typeof signature === "object" && "r" in signature && "s" in signature) {
        const { r, s, v, yParity } = signature;
        const yParityOrV2 = Number(yParity ?? v);
        const recoveryBit2 = toRecoveryBit(yParityOrV2);
        return new secp256k12.Signature(hexToBigInt(r), hexToBigInt(s)).addRecoveryBit(recoveryBit2);
      }
      const signatureHex = isHex(signature) ? signature : toHex(signature);
      const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
      const recoveryBit = toRecoveryBit(yParityOrV);
      return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
    })();
    const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
    return `0x${publicKey}`;
  }
  function toRecoveryBit(yParityOrV) {
    if (yParityOrV === 0 || yParityOrV === 1)
      return yParityOrV;
    if (yParityOrV === 27)
      return 0;
    if (yParityOrV === 28)
      return 1;
    throw new Error("Invalid yParityOrV value");
  }

  // node_modules/viem/_esm/utils/signature/recoverAddress.js
  async function recoverAddress({ hash: hash4, signature }) {
    return publicKeyToAddress(await recoverPublicKey({ hash: hash4, signature }));
  }

  // node_modules/viem/_esm/experimental/eip7702/utils/hashAuthorization.js
  init_concat();
  init_toBytes();
  init_toHex();

  // node_modules/viem/_esm/utils/encoding/toRlp.js
  init_base();
  init_cursor2();
  init_toBytes();
  init_toHex();
  function toRlp(bytes4, to = "hex") {
    const encodable = getEncodable(bytes4);
    const cursor = createCursor(new Uint8Array(encodable.length));
    encodable.encode(cursor);
    if (to === "hex")
      return bytesToHex(cursor.bytes);
    return cursor.bytes;
  }
  function getEncodable(bytes4) {
    if (Array.isArray(bytes4))
      return getEncodableList(bytes4.map((x) => getEncodable(x)));
    return getEncodableBytes(bytes4);
  }
  function getEncodableList(list) {
    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);
    const sizeOfBodyLength = getSizeOfLength(bodyLength);
    const length = (() => {
      if (bodyLength <= 55)
        return 1 + bodyLength;
      return 1 + sizeOfBodyLength + bodyLength;
    })();
    return {
      length,
      encode(cursor) {
        if (bodyLength <= 55) {
          cursor.pushByte(192 + bodyLength);
        } else {
          cursor.pushByte(192 + 55 + sizeOfBodyLength);
          if (sizeOfBodyLength === 1)
            cursor.pushUint8(bodyLength);
          else if (sizeOfBodyLength === 2)
            cursor.pushUint16(bodyLength);
          else if (sizeOfBodyLength === 3)
            cursor.pushUint24(bodyLength);
          else
            cursor.pushUint32(bodyLength);
        }
        for (const { encode: encode2 } of list) {
          encode2(cursor);
        }
      }
    };
  }
  function getEncodableBytes(bytesOrHex) {
    const bytes4 = typeof bytesOrHex === "string" ? hexToBytes(bytesOrHex) : bytesOrHex;
    const sizeOfBytesLength = getSizeOfLength(bytes4.length);
    const length = (() => {
      if (bytes4.length === 1 && bytes4[0] < 128)
        return 1;
      if (bytes4.length <= 55)
        return 1 + bytes4.length;
      return 1 + sizeOfBytesLength + bytes4.length;
    })();
    return {
      length,
      encode(cursor) {
        if (bytes4.length === 1 && bytes4[0] < 128) {
          cursor.pushBytes(bytes4);
        } else if (bytes4.length <= 55) {
          cursor.pushByte(128 + bytes4.length);
          cursor.pushBytes(bytes4);
        } else {
          cursor.pushByte(128 + 55 + sizeOfBytesLength);
          if (sizeOfBytesLength === 1)
            cursor.pushUint8(bytes4.length);
          else if (sizeOfBytesLength === 2)
            cursor.pushUint16(bytes4.length);
          else if (sizeOfBytesLength === 3)
            cursor.pushUint24(bytes4.length);
          else
            cursor.pushUint32(bytes4.length);
          cursor.pushBytes(bytes4);
        }
      }
    };
  }
  function getSizeOfLength(length) {
    if (length < 2 ** 8)
      return 1;
    if (length < 2 ** 16)
      return 2;
    if (length < 2 ** 24)
      return 3;
    if (length < 2 ** 32)
      return 4;
    throw new BaseError2("Length is too large.");
  }

  // node_modules/viem/_esm/experimental/eip7702/utils/hashAuthorization.js
  init_keccak256();
  function hashAuthorization(parameters) {
    const { chainId, contractAddress, nonce, to } = parameters;
    const hash4 = keccak256(concatHex([
      "0x05",
      toRlp([
        chainId ? numberToHex(chainId) : "0x",
        contractAddress,
        nonce ? numberToHex(nonce) : "0x"
      ])
    ]));
    if (to === "bytes")
      return hexToBytes(hash4);
    return hash4;
  }

  // node_modules/viem/_esm/experimental/eip7702/utils/recoverAuthorizationAddress.js
  async function recoverAuthorizationAddress(parameters) {
    const { authorization, signature } = parameters;
    return recoverAddress({
      hash: hashAuthorization(authorization),
      signature: signature ?? authorization
    });
  }

  // node_modules/viem/_esm/actions/public/estimateGas.js
  init_toHex();

  // node_modules/viem/_esm/errors/estimateGas.js
  init_formatEther();
  init_formatGwei();
  init_base();
  init_transaction();
  var EstimateGasExecutionError = class extends BaseError2 {
    constructor(cause, { account, docsPath: docsPath7, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
      const prettyArgs = prettyPrint({
        from: account?.address,
        to,
        value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
        data,
        gas,
        gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
        maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
        maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
        nonce
      });
      super(cause.shortMessage, {
        cause,
        docsPath: docsPath7,
        metaMessages: [
          ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
          "Estimate Gas Arguments:",
          prettyArgs
        ].filter(Boolean),
        name: "EstimateGasExecutionError"
      });
      Object.defineProperty(this, "cause", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      this.cause = cause;
    }
  };

  // node_modules/viem/_esm/utils/errors/getEstimateGasError.js
  init_node();
  init_getNodeError();
  function getEstimateGasError(err, { docsPath: docsPath7, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError(err, args);
      if (cause2 instanceof UnknownNodeError)
        return err;
      return cause2;
    })();
    return new EstimateGasExecutionError(cause, {
      docsPath: docsPath7,
      ...args
    });
  }

  // node_modules/viem/_esm/actions/public/estimateGas.js
  init_extract();
  init_transactionRequest();
  init_stateOverride2();
  init_assertRequest();

  // node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js
  init_parseAccount();

  // node_modules/viem/_esm/errors/fee.js
  init_formatGwei();
  init_base();
  var BaseFeeScalarError = class extends BaseError2 {
    constructor() {
      super("`baseFeeMultiplier` must be greater than 1.", {
        name: "BaseFeeScalarError"
      });
    }
  };
  var Eip1559FeesNotSupportedError = class extends BaseError2 {
    constructor() {
      super("Chain does not support EIP-1559 fees.", {
        name: "Eip1559FeesNotSupportedError"
      });
    }
  };
  var MaxFeePerGasTooLowError = class extends BaseError2 {
    constructor({ maxPriorityFeePerGas }) {
      super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${formatGwei(maxPriorityFeePerGas)} gwei).`, { name: "MaxFeePerGasTooLowError" });
    }
  };

  // node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js
  init_fromHex();

  // node_modules/viem/_esm/errors/block.js
  init_base();
  var BlockNotFoundError = class extends BaseError2 {
    constructor({ blockHash, blockNumber }) {
      let identifier = "Block";
      if (blockHash)
        identifier = `Block at hash "${blockHash}"`;
      if (blockNumber)
        identifier = `Block at number "${blockNumber}"`;
      super(`${identifier} could not be found.`, { name: "BlockNotFoundError" });
    }
  };

  // node_modules/viem/_esm/actions/public/getBlock.js
  init_toHex();

  // node_modules/viem/_esm/utils/formatters/transaction.js
  init_fromHex();
  var transactionType = {
    "0x0": "legacy",
    "0x1": "eip2930",
    "0x2": "eip1559",
    "0x3": "eip4844",
    "0x4": "eip7702"
  };
  function formatTransaction(transaction) {
    const transaction_ = {
      ...transaction,
      blockHash: transaction.blockHash ? transaction.blockHash : null,
      blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
      chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
      gas: transaction.gas ? BigInt(transaction.gas) : void 0,
      gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
      maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
      maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
      nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
      to: transaction.to ? transaction.to : null,
      transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
      type: transaction.type ? transactionType[transaction.type] : void 0,
      typeHex: transaction.type ? transaction.type : void 0,
      value: transaction.value ? BigInt(transaction.value) : void 0,
      v: transaction.v ? BigInt(transaction.v) : void 0
    };
    if (transaction.authorizationList)
      transaction_.authorizationList = formatAuthorizationList2(transaction.authorizationList);
    transaction_.yParity = (() => {
      if (transaction.yParity)
        return Number(transaction.yParity);
      if (typeof transaction_.v === "bigint") {
        if (transaction_.v === 0n || transaction_.v === 27n)
          return 0;
        if (transaction_.v === 1n || transaction_.v === 28n)
          return 1;
        if (transaction_.v >= 35n)
          return transaction_.v % 2n === 0n ? 1 : 0;
      }
      return void 0;
    })();
    if (transaction_.type === "legacy") {
      delete transaction_.accessList;
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
      delete transaction_.yParity;
    }
    if (transaction_.type === "eip2930") {
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
    }
    if (transaction_.type === "eip1559") {
      delete transaction_.maxFeePerBlobGas;
    }
    return transaction_;
  }
  function formatAuthorizationList2(authorizationList) {
    return authorizationList.map((authorization) => ({
      contractAddress: authorization.address,
      chainId: Number(authorization.chainId),
      nonce: Number(authorization.nonce),
      r: authorization.r,
      s: authorization.s,
      yParity: Number(authorization.yParity)
    }));
  }

  // node_modules/viem/_esm/utils/formatters/block.js
  function formatBlock(block) {
    const transactions = (block.transactions ?? []).map((transaction) => {
      if (typeof transaction === "string")
        return transaction;
      return formatTransaction(transaction);
    });
    return {
      ...block,
      baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
      blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
      difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
      excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
      gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
      gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
      hash: block.hash ? block.hash : null,
      logsBloom: block.logsBloom ? block.logsBloom : null,
      nonce: block.nonce ? block.nonce : null,
      number: block.number ? BigInt(block.number) : null,
      size: block.size ? BigInt(block.size) : void 0,
      timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
      transactions,
      totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
    };
  }

  // node_modules/viem/_esm/actions/public/getBlock.js
  async function getBlock(client, { blockHash, blockNumber, blockTag: blockTag_, includeTransactions: includeTransactions_ } = {}) {
    const blockTag = blockTag_ ?? "latest";
    const includeTransactions = includeTransactions_ ?? false;
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let block = null;
    if (blockHash) {
      block = await client.request({
        method: "eth_getBlockByHash",
        params: [blockHash, includeTransactions]
      }, { dedupe: true });
    } else {
      block = await client.request({
        method: "eth_getBlockByNumber",
        params: [blockNumberHex || blockTag, includeTransactions]
      }, { dedupe: Boolean(blockNumberHex) });
    }
    if (!block)
      throw new BlockNotFoundError({ blockHash, blockNumber });
    const format = client.chain?.formatters?.block?.format || formatBlock;
    return format(block);
  }

  // node_modules/viem/_esm/actions/public/getGasPrice.js
  async function getGasPrice(client) {
    const gasPrice = await client.request({
      method: "eth_gasPrice"
    });
    return BigInt(gasPrice);
  }

  // node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js
  async function internal_estimateMaxPriorityFeePerGas(client, args) {
    const { block: block_, chain = client.chain, request } = args || {};
    try {
      const maxPriorityFeePerGas = chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee;
      if (typeof maxPriorityFeePerGas === "function") {
        const block = block_ || await getAction(client, getBlock, "getBlock")({});
        const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({
          block,
          client,
          request
        });
        if (maxPriorityFeePerGas_ === null)
          throw new Error();
        return maxPriorityFeePerGas_;
      }
      if (typeof maxPriorityFeePerGas !== "undefined")
        return maxPriorityFeePerGas;
      const maxPriorityFeePerGasHex = await client.request({
        method: "eth_maxPriorityFeePerGas"
      });
      return hexToBigInt(maxPriorityFeePerGasHex);
    } catch {
      const [block, gasPrice] = await Promise.all([
        block_ ? Promise.resolve(block_) : getAction(client, getBlock, "getBlock")({}),
        getAction(client, getGasPrice, "getGasPrice")({})
      ]);
      if (typeof block.baseFeePerGas !== "bigint")
        throw new Eip1559FeesNotSupportedError();
      const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;
      if (maxPriorityFeePerGas < 0n)
        return 0n;
      return maxPriorityFeePerGas;
    }
  }

  // node_modules/viem/_esm/actions/public/estimateFeesPerGas.js
  async function internal_estimateFeesPerGas(client, args) {
    const { block: block_, chain = client.chain, request, type = "eip1559" } = args || {};
    const baseFeeMultiplier = await (async () => {
      if (typeof chain?.fees?.baseFeeMultiplier === "function")
        return chain.fees.baseFeeMultiplier({
          block: block_,
          client,
          request
        });
      return chain?.fees?.baseFeeMultiplier ?? 1.2;
    })();
    if (baseFeeMultiplier < 1)
      throw new BaseFeeScalarError();
    const decimals = baseFeeMultiplier.toString().split(".")[1]?.length ?? 0;
    const denominator = 10 ** decimals;
    const multiply = (base2) => base2 * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);
    const block = block_ ? block_ : await getAction(client, getBlock, "getBlock")({});
    if (typeof chain?.fees?.estimateFeesPerGas === "function") {
      const fees2 = await chain.fees.estimateFeesPerGas({
        block: block_,
        client,
        multiply,
        request,
        type
      });
      if (fees2 !== null)
        return fees2;
    }
    if (type === "eip1559") {
      if (typeof block.baseFeePerGas !== "bigint")
        throw new Eip1559FeesNotSupportedError();
      const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === "bigint" ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas(client, {
        block,
        chain,
        request
      });
      const baseFeePerGas = multiply(block.baseFeePerGas);
      const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;
      return {
        maxFeePerGas,
        maxPriorityFeePerGas
      };
    }
    const gasPrice = request?.gasPrice ?? multiply(await getAction(client, getGasPrice, "getGasPrice")({}));
    return {
      gasPrice
    };
  }

  // node_modules/viem/_esm/actions/public/getTransactionCount.js
  init_fromHex();
  init_toHex();
  async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
    const count = await client.request({
      method: "eth_getTransactionCount",
      params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
    }, { dedupe: Boolean(blockNumber) });
    return hexToNumber(count);
  }

  // node_modules/viem/_esm/utils/blob/blobsToCommitments.js
  init_toBytes();
  init_toHex();
  function blobsToCommitments(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes(x)) : parameters.blobs;
    const commitments = [];
    for (const blob of blobs)
      commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
    return to === "bytes" ? commitments : commitments.map((x) => bytesToHex(x));
  }

  // node_modules/viem/_esm/utils/blob/blobsToProofs.js
  init_toBytes();
  init_toHex();
  function blobsToProofs(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes(x)) : parameters.blobs;
    const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x) => hexToBytes(x)) : parameters.commitments;
    const proofs = [];
    for (let i = 0; i < blobs.length; i++) {
      const blob = blobs[i];
      const commitment = commitments[i];
      proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
    }
    return to === "bytes" ? proofs : proofs.map((x) => bytesToHex(x));
  }

  // node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js
  init_toHex();

  // node_modules/viem/_esm/utils/hash/sha256.js
  init_sha256();
  init_isHex();
  init_toBytes();
  init_toHex();
  function sha2562(value, to_) {
    const to = to_ || "hex";
    const bytes4 = sha256(isHex(value, { strict: false }) ? toBytes(value) : value);
    if (to === "bytes")
      return bytes4;
    return toHex(bytes4);
  }

  // node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js
  function commitmentToVersionedHash(parameters) {
    const { commitment, version: version5 = 1 } = parameters;
    const to = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
    const versionedHash = sha2562(commitment, "bytes");
    versionedHash.set([version5], 0);
    return to === "bytes" ? versionedHash : bytesToHex(versionedHash);
  }

  // node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js
  function commitmentsToVersionedHashes(parameters) {
    const { commitments, version: version5 } = parameters;
    const to = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
    const hashes = [];
    for (const commitment of commitments) {
      hashes.push(commitmentToVersionedHash({
        commitment,
        to,
        version: version5
      }));
    }
    return hashes;
  }

  // node_modules/viem/_esm/constants/blob.js
  var blobsPerTransaction = 6;
  var bytesPerFieldElement = 32;
  var fieldElementsPerBlob = 4096;
  var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
  var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
  1 - // zero byte (0x00) appended to each field element.
  1 * fieldElementsPerBlob * blobsPerTransaction;

  // node_modules/viem/_esm/errors/blob.js
  init_base();
  var BlobSizeTooLargeError = class extends BaseError2 {
    constructor({ maxSize, size: size5 }) {
      super("Blob size is too large.", {
        metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size5} bytes`],
        name: "BlobSizeTooLargeError"
      });
    }
  };
  var EmptyBlobError = class extends BaseError2 {
    constructor() {
      super("Blob data must not be empty.", { name: "EmptyBlobError" });
    }
  };

  // node_modules/viem/_esm/utils/blob/toBlobs.js
  init_cursor2();
  init_size();
  init_toBytes();
  init_toHex();
  function toBlobs(parameters) {
    const to = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
    const data = typeof parameters.data === "string" ? hexToBytes(parameters.data) : parameters.data;
    const size_ = size(data);
    if (!size_)
      throw new EmptyBlobError();
    if (size_ > maxBytesPerTransaction)
      throw new BlobSizeTooLargeError({
        maxSize: maxBytesPerTransaction,
        size: size_
      });
    const blobs = [];
    let active = true;
    let position = 0;
    while (active) {
      const blob = createCursor(new Uint8Array(bytesPerBlob));
      let size5 = 0;
      while (size5 < fieldElementsPerBlob) {
        const bytes4 = data.slice(position, position + (bytesPerFieldElement - 1));
        blob.pushByte(0);
        blob.pushBytes(bytes4);
        if (bytes4.length < 31) {
          blob.pushByte(128);
          active = false;
          break;
        }
        size5++;
        position += 31;
      }
      blobs.push(blob);
    }
    return to === "bytes" ? blobs.map((x) => x.bytes) : blobs.map((x) => bytesToHex(x.bytes));
  }

  // node_modules/viem/_esm/utils/blob/toBlobSidecars.js
  function toBlobSidecars(parameters) {
    const { data, kzg, to } = parameters;
    const blobs = parameters.blobs ?? toBlobs({ data, to });
    const commitments = parameters.commitments ?? blobsToCommitments({ blobs, kzg, to });
    const proofs = parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg, to });
    const sidecars = [];
    for (let i = 0; i < blobs.length; i++)
      sidecars.push({
        blob: blobs[i],
        commitment: commitments[i],
        proof: proofs[i]
      });
    return sidecars;
  }

  // node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js
  init_assertRequest();

  // node_modules/viem/_esm/utils/transaction/getTransactionType.js
  init_transaction();
  function getTransactionType(transaction) {
    if (transaction.type)
      return transaction.type;
    if (typeof transaction.authorizationList !== "undefined")
      return "eip7702";
    if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
      return "eip4844";
    if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
      return "eip1559";
    }
    if (typeof transaction.gasPrice !== "undefined") {
      if (typeof transaction.accessList !== "undefined")
        return "eip2930";
      return "legacy";
    }
    throw new InvalidSerializableTransactionError({ transaction });
  }

  // node_modules/viem/_esm/actions/public/getChainId.js
  init_fromHex();
  async function getChainId(client) {
    const chainIdHex = await client.request({
      method: "eth_chainId"
    }, { dedupe: true });
    return hexToNumber(chainIdHex);
  }

  // node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js
  var defaultParameters = [
    "blobVersionedHashes",
    "chainId",
    "fees",
    "gas",
    "nonce",
    "type"
  ];
  async function prepareTransactionRequest(client, args) {
    const { account: account_ = client.account, blobs, chain, gas, kzg, nonce, nonceManager, parameters = defaultParameters, type } = args;
    const account = account_ ? parseAccount(account_) : account_;
    const request = { ...args, ...account ? { from: account?.address } : {} };
    let block;
    async function getBlock3() {
      if (block)
        return block;
      block = await getAction(client, getBlock, "getBlock")({ blockTag: "latest" });
      return block;
    }
    let chainId;
    async function getChainId3() {
      if (chainId)
        return chainId;
      if (chain)
        return chain.id;
      if (typeof args.chainId !== "undefined")
        return args.chainId;
      const chainId_ = await getAction(client, getChainId, "getChainId")({});
      chainId = chainId_;
      return chainId;
    }
    if ((parameters.includes("blobVersionedHashes") || parameters.includes("sidecars")) && blobs && kzg) {
      const commitments = blobsToCommitments({ blobs, kzg });
      if (parameters.includes("blobVersionedHashes")) {
        const versionedHashes = commitmentsToVersionedHashes({
          commitments,
          to: "hex"
        });
        request.blobVersionedHashes = versionedHashes;
      }
      if (parameters.includes("sidecars")) {
        const proofs = blobsToProofs({ blobs, commitments, kzg });
        const sidecars = toBlobSidecars({
          blobs,
          commitments,
          proofs,
          to: "hex"
        });
        request.sidecars = sidecars;
      }
    }
    if (parameters.includes("chainId"))
      request.chainId = await getChainId3();
    if (parameters.includes("nonce") && typeof nonce === "undefined" && account) {
      if (nonceManager) {
        const chainId2 = await getChainId3();
        request.nonce = await nonceManager.consume({
          address: account.address,
          chainId: chainId2,
          client
        });
      } else {
        request.nonce = await getAction(client, getTransactionCount, "getTransactionCount")({
          address: account.address,
          blockTag: "pending"
        });
      }
    }
    if ((parameters.includes("fees") || parameters.includes("type")) && typeof type === "undefined") {
      try {
        request.type = getTransactionType(request);
      } catch {
        const block2 = await getBlock3();
        request.type = typeof block2?.baseFeePerGas === "bigint" ? "eip1559" : "legacy";
      }
    }
    if (parameters.includes("fees")) {
      if (request.type !== "legacy" && request.type !== "eip2930") {
        if (typeof request.maxFeePerGas === "undefined" || typeof request.maxPriorityFeePerGas === "undefined") {
          const block2 = await getBlock3();
          const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas(client, {
            block: block2,
            chain,
            request
          });
          if (typeof args.maxPriorityFeePerGas === "undefined" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)
            throw new MaxFeePerGasTooLowError({
              maxPriorityFeePerGas
            });
          request.maxPriorityFeePerGas = maxPriorityFeePerGas;
          request.maxFeePerGas = maxFeePerGas;
        }
      } else {
        if (typeof args.maxFeePerGas !== "undefined" || typeof args.maxPriorityFeePerGas !== "undefined")
          throw new Eip1559FeesNotSupportedError();
        const block2 = await getBlock3();
        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {
          block: block2,
          chain,
          request,
          type: "legacy"
        });
        request.gasPrice = gasPrice_;
      }
    }
    if (parameters.includes("gas") && typeof gas === "undefined")
      request.gas = await getAction(client, estimateGas, "estimateGas")({
        ...request,
        account: account ? { address: account.address, type: "json-rpc" } : account
      });
    assertRequest(request);
    delete request.parameters;
    return request;
  }

  // node_modules/viem/_esm/actions/public/getBalance.js
  init_toHex();
  async function getBalance(client, { address, blockNumber, blockTag = "latest" }) {
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
    const balance = await client.request({
      method: "eth_getBalance",
      params: [address, blockNumberHex || blockTag]
    });
    return BigInt(balance);
  }

  // node_modules/viem/_esm/actions/public/estimateGas.js
  async function estimateGas(client, args) {
    const { account: account_ = client.account } = args;
    const account = account_ ? parseAccount(account_) : void 0;
    try {
      let estimateGas_rpc2 = function(parameters) {
        const { block: block2, request: request2, rpcStateOverride: rpcStateOverride2 } = parameters;
        return client.request({
          method: "eth_estimateGas",
          params: rpcStateOverride2 ? [request2, block2 ?? "latest", rpcStateOverride2] : block2 ? [request2, block2] : [request2]
        });
      };
      var estimateGas_rpc = estimateGas_rpc2;
      const { accessList, authorizationList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, stateOverride, ...rest } = await prepareTransactionRequest(client, {
        ...args,
        parameters: (
          // Some RPC Providers do not compute versioned hashes from blobs. We will need
          // to compute them.
          account?.type === "local" ? void 0 : ["blobVersionedHashes"]
        )
      });
      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      const rpcStateOverride = serializeStateOverride(stateOverride);
      const to = await (async () => {
        if (rest.to)
          return rest.to;
        if (authorizationList && authorizationList.length > 0)
          return await recoverAuthorizationAddress({
            authorization: authorizationList[0]
          }).catch(() => {
            throw new BaseError2("`to` is required. Could not infer from `authorizationList`");
          });
        return void 0;
      })();
      assertRequest(args);
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || formatTransactionRequest;
      const request = format({
        // Pick out extra data that might exist on the chain's transaction request type.
        ...extract(rest, { format: chainFormat }),
        from: account?.address,
        accessList,
        authorizationList,
        blobs,
        blobVersionedHashes,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      let estimate = BigInt(await estimateGas_rpc2({ block, request, rpcStateOverride }));
      if (authorizationList) {
        const value2 = await getBalance(client, { address: request.from });
        const estimates = await Promise.all(authorizationList.map(async (authorization) => {
          const { contractAddress } = authorization;
          const estimate2 = await estimateGas_rpc2({
            block,
            request: {
              authorizationList: void 0,
              data,
              from: account?.address,
              to: contractAddress,
              value: numberToHex(value2)
            },
            rpcStateOverride
          }).catch(() => 100000n);
          return 2n * BigInt(estimate2);
        }));
        estimate += estimates.reduce((acc, curr) => acc + curr, 0n);
      }
      return estimate;
    } catch (err) {
      throw getEstimateGasError(err, {
        ...args,
        account,
        chain: client.chain
      });
    }
  }

  // node_modules/viem/_esm/actions/public/estimateContractGas.js
  async function estimateContractGas(client, parameters) {
    const { abi, address, args, functionName, ...request } = parameters;
    const data = encodeFunctionData({
      abi,
      args,
      functionName
    });
    try {
      const gas = await getAction(client, estimateGas, "estimateGas")({
        data,
        to: address,
        ...request
      });
      return gas;
    } catch (error) {
      const account = request.account ? parseAccount(request.account) : void 0;
      throw getContractError(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/estimateContractGas",
        functionName,
        sender: account?.address
      });
    }
  }

  // node_modules/viem/_esm/actions/public/getContractEvents.js
  init_getAbiItem();

  // node_modules/viem/_esm/utils/abi/parseEventLogs.js
  init_abi();
  init_isAddressEqual();
  init_toBytes();
  init_keccak256();
  init_toEventSelector();

  // node_modules/viem/_esm/utils/abi/decodeEventLog.js
  init_abi();
  init_size();
  init_toEventSelector();
  init_cursor();
  init_decodeAbiParameters();
  init_formatAbiItem2();
  var docsPath3 = "/docs/contract/decodeEventLog";
  function decodeEventLog(parameters) {
    const { abi, data, strict: strict_, topics } = parameters;
    const strict = strict_ ?? true;
    const [signature, ...argTopics] = topics;
    if (!signature)
      throw new AbiEventSignatureEmptyTopicsError({ docsPath: docsPath3 });
    const abiItem = (() => {
      if (abi.length === 1)
        return abi[0];
      return abi.find((x) => x.type === "event" && signature === toEventSelector(formatAbiItem2(x)));
    })();
    if (!(abiItem && "name" in abiItem) || abiItem.type !== "event")
      throw new AbiEventSignatureNotFoundError(signature, { docsPath: docsPath3 });
    const { name, inputs } = abiItem;
    const isUnnamed = inputs?.some((x) => !("name" in x && x.name));
    let args = isUnnamed ? [] : {};
    const indexedInputs = inputs.filter((x) => "indexed" in x && x.indexed);
    for (let i = 0; i < indexedInputs.length; i++) {
      const param = indexedInputs[i];
      const topic = argTopics[i];
      if (!topic)
        throw new DecodeLogTopicsMismatch({
          abiItem,
          param
        });
      args[isUnnamed ? i : param.name || i] = decodeTopic({ param, value: topic });
    }
    const nonIndexedInputs = inputs.filter((x) => !("indexed" in x && x.indexed));
    if (nonIndexedInputs.length > 0) {
      if (data && data !== "0x") {
        try {
          const decodedData = decodeAbiParameters(nonIndexedInputs, data);
          if (decodedData) {
            if (isUnnamed)
              args = [...args, ...decodedData];
            else {
              for (let i = 0; i < nonIndexedInputs.length; i++) {
                args[nonIndexedInputs[i].name] = decodedData[i];
              }
            }
          }
        } catch (err) {
          if (strict) {
            if (err instanceof AbiDecodingDataSizeTooSmallError || err instanceof PositionOutOfBoundsError)
              throw new DecodeLogDataMismatch({
                abiItem,
                data,
                params: nonIndexedInputs,
                size: size(data)
              });
            throw err;
          }
        }
      } else if (strict) {
        throw new DecodeLogDataMismatch({
          abiItem,
          data: "0x",
          params: nonIndexedInputs,
          size: 0
        });
      }
    }
    return {
      eventName: name,
      args: Object.values(args).length > 0 ? args : void 0
    };
  }
  function decodeTopic({ param, value }) {
    if (param.type === "string" || param.type === "bytes" || param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
      return value;
    const decodedArg = decodeAbiParameters([param], value) || [];
    return decodedArg[0];
  }

  // node_modules/viem/_esm/utils/abi/parseEventLogs.js
  function parseEventLogs(parameters) {
    const { abi, args, logs, strict = true } = parameters;
    const eventName = (() => {
      if (!parameters.eventName)
        return void 0;
      if (Array.isArray(parameters.eventName))
        return parameters.eventName;
      return [parameters.eventName];
    })();
    return logs.map((log) => {
      try {
        const abiItem = abi.find((abiItem2) => abiItem2.type === "event" && log.topics[0] === toEventSelector(abiItem2));
        if (!abiItem)
          return null;
        const event = decodeEventLog({
          ...log,
          abi: [abiItem],
          strict
        });
        if (eventName && !eventName.includes(event.eventName))
          return null;
        if (!includesArgs({
          args: event.args,
          inputs: abiItem.inputs,
          matchArgs: args
        }))
          return null;
        return { ...event, ...log };
      } catch (err) {
        let eventName2;
        let isUnnamed;
        if (err instanceof AbiEventSignatureNotFoundError)
          return null;
        if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {
          if (strict)
            return null;
          eventName2 = err.abiItem.name;
          isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
        }
        return { ...log, args: isUnnamed ? [] : {}, eventName: eventName2 };
      }
    }).filter(Boolean);
  }
  function includesArgs(parameters) {
    const { args, inputs, matchArgs } = parameters;
    if (!matchArgs)
      return true;
    if (!args)
      return false;
    function isEqual(input, value, arg) {
      try {
        if (input.type === "address")
          return isAddressEqual(value, arg);
        if (input.type === "string" || input.type === "bytes")
          return keccak256(toBytes(value)) === arg;
        return value === arg;
      } catch {
        return false;
      }
    }
    if (Array.isArray(args) && Array.isArray(matchArgs)) {
      return matchArgs.every((value, index2) => {
        if (value === null || value === void 0)
          return true;
        const input = inputs[index2];
        if (!input)
          return false;
        const value_ = Array.isArray(value) ? value : [value];
        return value_.some((value2) => isEqual(input, value2, args[index2]));
      });
    }
    if (typeof args === "object" && !Array.isArray(args) && typeof matchArgs === "object" && !Array.isArray(matchArgs))
      return Object.entries(matchArgs).every(([key, value]) => {
        if (value === null || value === void 0)
          return true;
        const input = inputs.find((input2) => input2.name === key);
        if (!input)
          return false;
        const value_ = Array.isArray(value) ? value : [value];
        return value_.some((value2) => isEqual(input, value2, args[key]));
      });
    return false;
  }

  // node_modules/viem/_esm/actions/public/getLogs.js
  init_toHex();

  // node_modules/viem/_esm/utils/formatters/log.js
  function formatLog(log, { args, eventName } = {}) {
    return {
      ...log,
      blockHash: log.blockHash ? log.blockHash : null,
      blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
      logIndex: log.logIndex ? Number(log.logIndex) : null,
      transactionHash: log.transactionHash ? log.transactionHash : null,
      transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
      ...eventName ? { args, eventName } : {}
    };
  }

  // node_modules/viem/_esm/actions/public/getLogs.js
  async function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_ } = {}) {
    const strict = strict_ ?? false;
    const events = events_ ?? (event ? [event] : void 0);
    let topics = [];
    if (events) {
      const encoded = events.flatMap((event2) => encodeEventTopics({
        abi: [event2],
        eventName: event2.name,
        args: events_ ? void 0 : args
      }));
      topics = [encoded];
      if (event)
        topics = topics[0];
    }
    let logs;
    if (blockHash) {
      logs = await client.request({
        method: "eth_getLogs",
        params: [{ address, topics, blockHash }]
      });
    } else {
      logs = await client.request({
        method: "eth_getLogs",
        params: [
          {
            address,
            topics,
            fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock
          }
        ]
      });
    }
    const formattedLogs = logs.map((log) => formatLog(log));
    if (!events)
      return formattedLogs;
    return parseEventLogs({
      abi: events,
      args,
      logs: formattedLogs,
      strict
    });
  }

  // node_modules/viem/_esm/actions/public/getContractEvents.js
  async function getContractEvents(client, parameters) {
    const { abi, address, args, blockHash, eventName, fromBlock, toBlock, strict } = parameters;
    const event = eventName ? getAbiItem({ abi, name: eventName }) : void 0;
    const events = !event ? abi.filter((x) => x.type === "event") : void 0;
    return getAction(client, getLogs, "getLogs")({
      address,
      args,
      blockHash,
      event,
      events,
      fromBlock,
      toBlock,
      strict
    });
  }

  // node_modules/viem/_esm/actions/public/readContract.js
  init_decodeFunctionResult();
  init_encodeFunctionData();
  init_call();
  async function readContract(client, parameters) {
    const { abi, address, args, functionName, ...rest } = parameters;
    const calldata = encodeFunctionData({
      abi,
      args,
      functionName
    });
    try {
      const { data } = await getAction(client, call, "call")({
        ...rest,
        data: calldata,
        to: address
      });
      return decodeFunctionResult({
        abi,
        args,
        functionName,
        data: data || "0x"
      });
    } catch (error) {
      throw getContractError(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/readContract",
        functionName
      });
    }
  }

  // node_modules/viem/_esm/actions/public/simulateContract.js
  init_parseAccount();
  init_decodeFunctionResult();
  init_encodeFunctionData();
  init_call();
  async function simulateContract(client, parameters) {
    const { abi, address, args, dataSuffix, functionName, ...callRequest } = parameters;
    const account = callRequest.account ? parseAccount(callRequest.account) : client.account;
    const calldata = encodeFunctionData({ abi, args, functionName });
    try {
      const { data } = await getAction(client, call, "call")({
        batch: false,
        data: `${calldata}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        ...callRequest,
        account
      });
      const result = decodeFunctionResult({
        abi,
        args,
        functionName,
        data: data || "0x"
      });
      const minimizedAbi = abi.filter((abiItem) => "name" in abiItem && abiItem.name === parameters.functionName);
      return {
        result,
        request: {
          abi: minimizedAbi,
          address,
          args,
          dataSuffix,
          functionName,
          ...callRequest,
          account
        }
      };
    } catch (error) {
      throw getContractError(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/simulateContract",
        functionName,
        sender: account?.address
      });
    }
  }

  // node_modules/viem/_esm/actions/public/watchContractEvent.js
  init_abi();
  init_rpc();

  // node_modules/viem/_esm/utils/observe.js
  var listenersCache = /* @__PURE__ */ new Map();
  var cleanupCache = /* @__PURE__ */ new Map();
  var callbackCount = 0;
  function observe(observerId, callbacks, fn) {
    const callbackId = ++callbackCount;
    const getListeners = () => listenersCache.get(observerId) || [];
    const unsubscribe = () => {
      const listeners2 = getListeners();
      listenersCache.set(observerId, listeners2.filter((cb) => cb.id !== callbackId));
    };
    const unwatch = () => {
      const cleanup2 = cleanupCache.get(observerId);
      if (getListeners().length === 1 && cleanup2)
        cleanup2();
      unsubscribe();
    };
    const listeners = getListeners();
    listenersCache.set(observerId, [
      ...listeners,
      { id: callbackId, fns: callbacks }
    ]);
    if (listeners && listeners.length > 0)
      return unwatch;
    const emit = {};
    for (const key in callbacks) {
      emit[key] = (...args) => {
        const listeners2 = getListeners();
        if (listeners2.length === 0)
          return;
        for (const listener of listeners2)
          listener.fns[key]?.(...args);
      };
    }
    const cleanup = fn(emit);
    if (typeof cleanup === "function")
      cleanupCache.set(observerId, cleanup);
    return unwatch;
  }

  // node_modules/viem/_esm/utils/wait.js
  async function wait(time) {
    return new Promise((res) => setTimeout(res, time));
  }

  // node_modules/viem/_esm/utils/poll.js
  function poll(fn, { emitOnBegin, initialWaitTime, interval }) {
    let active = true;
    const unwatch = () => active = false;
    const watch = async () => {
      let data = void 0;
      if (emitOnBegin)
        data = await fn({ unpoll: unwatch });
      const initialWait = await initialWaitTime?.(data) ?? interval;
      await wait(initialWait);
      const poll3 = async () => {
        if (!active)
          return;
        await fn({ unpoll: unwatch });
        await wait(interval);
        poll3();
      };
      poll3();
    };
    watch();
    return unwatch;
  }

  // node_modules/viem/_esm/actions/public/watchContractEvent.js
  init_stringify();

  // node_modules/viem/_esm/utils/promise/withCache.js
  var promiseCache = /* @__PURE__ */ new Map();
  var responseCache = /* @__PURE__ */ new Map();
  function getCache(cacheKey3) {
    const buildCache = (cacheKey4, cache) => ({
      clear: () => cache.delete(cacheKey4),
      get: () => cache.get(cacheKey4),
      set: (data) => cache.set(cacheKey4, data)
    });
    const promise = buildCache(cacheKey3, promiseCache);
    const response = buildCache(cacheKey3, responseCache);
    return {
      clear: () => {
        promise.clear();
        response.clear();
      },
      promise,
      response
    };
  }
  async function withCache(fn, { cacheKey: cacheKey3, cacheTime = Number.POSITIVE_INFINITY }) {
    const cache = getCache(cacheKey3);
    const response = cache.response.get();
    if (response && cacheTime > 0) {
      const age = (/* @__PURE__ */ new Date()).getTime() - response.created.getTime();
      if (age < cacheTime)
        return response.data;
    }
    let promise = cache.promise.get();
    if (!promise) {
      promise = fn();
      cache.promise.set(promise);
    }
    try {
      const data = await promise;
      cache.response.set({ created: /* @__PURE__ */ new Date(), data });
      return data;
    } finally {
      cache.promise.clear();
    }
  }

  // node_modules/viem/_esm/actions/public/getBlockNumber.js
  var cacheKey = (id) => `blockNumber.${id}`;
  async function getBlockNumber(client, { cacheTime = client.cacheTime } = {}) {
    const blockNumberHex = await withCache(() => client.request({
      method: "eth_blockNumber"
    }), { cacheKey: cacheKey(client.uid), cacheTime });
    return BigInt(blockNumberHex);
  }

  // node_modules/viem/_esm/actions/public/getFilterChanges.js
  async function getFilterChanges(_client, { filter }) {
    const strict = "strict" in filter && filter.strict;
    const logs = await filter.request({
      method: "eth_getFilterChanges",
      params: [filter.id]
    });
    if (typeof logs[0] === "string")
      return logs;
    const formattedLogs = logs.map((log) => formatLog(log));
    if (!("abi" in filter) || !filter.abi)
      return formattedLogs;
    return parseEventLogs({
      abi: filter.abi,
      logs: formattedLogs,
      strict
    });
  }

  // node_modules/viem/_esm/actions/public/uninstallFilter.js
  async function uninstallFilter(_client, { filter }) {
    return filter.request({
      method: "eth_uninstallFilter",
      params: [filter.id]
    });
  }

  // node_modules/viem/_esm/actions/public/watchContractEvent.js
  function watchContractEvent(client, parameters) {
    const { abi, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ } = parameters;
    const enablePolling = (() => {
      if (typeof poll_ !== "undefined")
        return poll_;
      if (typeof fromBlock === "bigint")
        return true;
      if (client.transport.type === "webSocket")
        return false;
      if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
        return false;
      return true;
    })();
    const pollContractEvent = () => {
      const strict = strict_ ?? false;
      const observerId = stringify([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval,
        strict,
        fromBlock
      ]);
      return observe(observerId, { onLogs, onError }, (emit) => {
        let previousBlockNumber;
        if (fromBlock !== void 0)
          previousBlockNumber = fromBlock - 1n;
        let filter;
        let initialized = false;
        const unwatch = poll(async () => {
          if (!initialized) {
            try {
              filter = await getAction(client, createContractEventFilter, "createContractEventFilter")({
                abi,
                address,
                args,
                eventName,
                strict,
                fromBlock
              });
            } catch {
            }
            initialized = true;
            return;
          }
          try {
            let logs;
            if (filter) {
              logs = await getAction(client, getFilterChanges, "getFilterChanges")({ filter });
            } else {
              const blockNumber = await getAction(client, getBlockNumber, "getBlockNumber")({});
              if (previousBlockNumber && previousBlockNumber < blockNumber) {
                logs = await getAction(client, getContractEvents, "getContractEvents")({
                  abi,
                  address,
                  args,
                  eventName,
                  fromBlock: previousBlockNumber + 1n,
                  toBlock: blockNumber,
                  strict
                });
              } else {
                logs = [];
              }
              previousBlockNumber = blockNumber;
            }
            if (logs.length === 0)
              return;
            if (batch)
              emit.onLogs(logs);
            else
              for (const log of logs)
                emit.onLogs([log]);
          } catch (err) {
            if (filter && err instanceof InvalidInputRpcError)
              initialized = false;
            emit.onError?.(err);
          }
        }, {
          emitOnBegin: true,
          interval: pollingInterval
        });
        return async () => {
          if (filter)
            await getAction(client, uninstallFilter, "uninstallFilter")({ filter });
          unwatch();
        };
      });
    };
    const subscribeContractEvent = () => {
      const strict = strict_ ?? false;
      const observerId = stringify([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval,
        strict
      ]);
      let active = true;
      let unsubscribe = () => active = false;
      return observe(observerId, { onLogs, onError }, (emit) => {
        ;
        (async () => {
          try {
            const transport = (() => {
              if (client.transport.type === "fallback") {
                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                if (!transport2)
                  return client.transport;
                return transport2.value;
              }
              return client.transport;
            })();
            const topics = eventName ? encodeEventTopics({
              abi,
              eventName,
              args
            }) : [];
            const { unsubscribe: unsubscribe_ } = await transport.subscribe({
              params: ["logs", { address, topics }],
              onData(data) {
                if (!active)
                  return;
                const log = data.result;
                try {
                  const { eventName: eventName2, args: args2 } = decodeEventLog({
                    abi,
                    data: log.data,
                    topics: log.topics,
                    strict: strict_
                  });
                  const formatted = formatLog(log, {
                    args: args2,
                    eventName: eventName2
                  });
                  emit.onLogs([formatted]);
                } catch (err) {
                  let eventName2;
                  let isUnnamed;
                  if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {
                    if (strict_)
                      return;
                    eventName2 = err.abiItem.name;
                    isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                  }
                  const formatted = formatLog(log, {
                    args: isUnnamed ? [] : {},
                    eventName: eventName2
                  });
                  emit.onLogs([formatted]);
                }
              },
              onError(error) {
                emit.onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      });
    };
    return enablePolling ? pollContractEvent() : subscribeContractEvent();
  }

  // node_modules/viem/_esm/actions/wallet/writeContract.js
  init_parseAccount();

  // node_modules/viem/_esm/errors/account.js
  init_base();
  var AccountNotFoundError = class extends BaseError2 {
    constructor({ docsPath: docsPath7 } = {}) {
      super([
        "Could not find an Account to execute with this Action.",
        "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client."
      ].join("\n"), {
        docsPath: docsPath7,
        docsSlug: "account",
        name: "AccountNotFoundError"
      });
    }
  };
  var AccountTypeNotSupportedError = class extends BaseError2 {
    constructor({ docsPath: docsPath7, metaMessages, type }) {
      super(`Account type "${type}" is not supported.`, {
        docsPath: docsPath7,
        metaMessages,
        name: "AccountTypeNotSupportedError"
      });
    }
  };

  // node_modules/viem/_esm/actions/wallet/writeContract.js
  init_encodeFunctionData();

  // node_modules/viem/_esm/actions/wallet/sendTransaction.js
  init_parseAccount();
  init_base();

  // node_modules/viem/_esm/utils/chain/assertCurrentChain.js
  init_chain();
  function assertCurrentChain({ chain, currentChainId }) {
    if (!chain)
      throw new ChainNotFoundError();
    if (currentChainId !== chain.id)
      throw new ChainMismatchError({ chain, currentChainId });
  }

  // node_modules/viem/_esm/utils/errors/getTransactionError.js
  init_node();
  init_transaction();
  init_getNodeError();
  function getTransactionError(err, { docsPath: docsPath7, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError(err, args);
      if (cause2 instanceof UnknownNodeError)
        return err;
      return cause2;
    })();
    return new TransactionExecutionError(cause, {
      docsPath: docsPath7,
      ...args
    });
  }

  // node_modules/viem/_esm/actions/wallet/sendTransaction.js
  init_extract();
  init_transactionRequest();
  init_lru();
  init_assertRequest();

  // node_modules/viem/_esm/actions/wallet/sendRawTransaction.js
  async function sendRawTransaction(client, { serializedTransaction }) {
    return client.request({
      method: "eth_sendRawTransaction",
      params: [serializedTransaction]
    }, { retryCount: 0 });
  }

  // node_modules/viem/_esm/actions/wallet/sendTransaction.js
  var supportsWalletNamespace = new LruMap(128);
  async function sendTransaction(client, parameters) {
    const { account: account_ = client.account, chain = client.chain, accessList, authorizationList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, ...rest } = parameters;
    if (typeof account_ === "undefined")
      throw new AccountNotFoundError({
        docsPath: "/docs/actions/wallet/sendTransaction"
      });
    const account = account_ ? parseAccount(account_) : null;
    try {
      assertRequest(parameters);
      const to = await (async () => {
        if (parameters.to)
          return parameters.to;
        if (authorizationList && authorizationList.length > 0)
          return await recoverAuthorizationAddress({
            authorization: authorizationList[0]
          }).catch(() => {
            throw new BaseError2("`to` is required. Could not infer from `authorizationList`.");
          });
        return void 0;
      })();
      if (account?.type === "json-rpc" || account === null) {
        let chainId;
        if (chain !== null) {
          chainId = await getAction(client, getChainId, "getChainId")({});
          assertCurrentChain({
            currentChainId: chainId,
            chain
          });
        }
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || formatTransactionRequest;
        const request = format({
          // Pick out extra data that might exist on the chain's transaction request type.
          ...extract(rest, { format: chainFormat }),
          accessList,
          authorizationList,
          blobs,
          chainId,
          data,
          from: account?.address,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to,
          value
        });
        const isWalletNamespaceSupported = supportsWalletNamespace.get(client.uid);
        const method = isWalletNamespaceSupported ? "wallet_sendTransaction" : "eth_sendTransaction";
        try {
          return await client.request({
            method,
            params: [request]
          }, { retryCount: 0 });
        } catch (e) {
          if (isWalletNamespaceSupported === false)
            throw e;
          const error = e;
          if (error.name === "InvalidInputRpcError" || error.name === "InvalidParamsRpcError" || error.name === "MethodNotFoundRpcError" || error.name === "MethodNotSupportedRpcError") {
            return await client.request({
              method: "wallet_sendTransaction",
              params: [request]
            }, { retryCount: 0 }).then((hash4) => {
              supportsWalletNamespace.set(client.uid, true);
              return hash4;
            }).catch((e2) => {
              const walletNamespaceError = e2;
              if (walletNamespaceError.name === "MethodNotFoundRpcError" || walletNamespaceError.name === "MethodNotSupportedRpcError") {
                supportsWalletNamespace.set(client.uid, false);
                throw error;
              }
              throw walletNamespaceError;
            });
          }
          throw error;
        }
      }
      if (account?.type === "local") {
        const request = await getAction(client, prepareTransactionRequest, "prepareTransactionRequest")({
          account,
          accessList,
          authorizationList,
          blobs,
          chain,
          data,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          nonceManager: account.nonceManager,
          parameters: [...defaultParameters, "sidecars"],
          value,
          ...rest,
          to
        });
        const serializer = chain?.serializers?.transaction;
        const serializedTransaction = await account.signTransaction(request, {
          serializer
        });
        return await getAction(client, sendRawTransaction, "sendRawTransaction")({
          serializedTransaction
        });
      }
      if (account?.type === "smart")
        throw new AccountTypeNotSupportedError({
          metaMessages: [
            "Consider using the `sendUserOperation` Action instead."
          ],
          docsPath: "/docs/actions/bundler/sendUserOperation",
          type: "smart"
        });
      throw new AccountTypeNotSupportedError({
        docsPath: "/docs/actions/wallet/sendTransaction",
        type: account?.type
      });
    } catch (err) {
      if (err instanceof AccountTypeNotSupportedError)
        throw err;
      throw getTransactionError(err, {
        ...parameters,
        account,
        chain: parameters.chain || void 0
      });
    }
  }

  // node_modules/viem/_esm/actions/wallet/writeContract.js
  async function writeContract(client, parameters) {
    const { abi, account: account_ = client.account, address, args, dataSuffix, functionName, ...request } = parameters;
    if (typeof account_ === "undefined")
      throw new AccountNotFoundError({
        docsPath: "/docs/contract/writeContract"
      });
    const account = account_ ? parseAccount(account_) : null;
    const data = encodeFunctionData({
      abi,
      args,
      functionName
    });
    try {
      return await getAction(client, sendTransaction, "sendTransaction")({
        data: `${data}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        account,
        ...request
      });
    } catch (error) {
      throw getContractError(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/writeContract",
        functionName,
        sender: account?.address
      });
    }
  }

  // node_modules/viem/_esm/actions/getContract.js
  function getContract({ abi, address, client: client_ }) {
    const client = client_;
    const [publicClient, walletClient] = (() => {
      if (!client)
        return [void 0, void 0];
      if ("public" in client && "wallet" in client)
        return [client.public, client.wallet];
      if ("public" in client)
        return [client.public, void 0];
      if ("wallet" in client)
        return [void 0, client.wallet];
      return [client, client];
    })();
    const hasPublicClient = publicClient !== void 0 && publicClient !== null;
    const hasWalletClient = walletClient !== void 0 && walletClient !== null;
    const contract = {};
    let hasReadFunction = false;
    let hasWriteFunction = false;
    let hasEvent = false;
    for (const item of abi) {
      if (item.type === "function")
        if (item.stateMutability === "view" || item.stateMutability === "pure")
          hasReadFunction = true;
        else
          hasWriteFunction = true;
      else if (item.type === "event")
        hasEvent = true;
      if (hasReadFunction && hasWriteFunction && hasEvent)
        break;
    }
    if (hasPublicClient) {
      if (hasReadFunction)
        contract.read = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters(parameters);
              return getAction(publicClient, readContract, "readContract")({
                abi,
                address,
                functionName,
                args,
                ...options2
              });
            };
          }
        });
      if (hasWriteFunction)
        contract.simulate = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters(parameters);
              return getAction(publicClient, simulateContract, "simulateContract")({
                abi,
                address,
                functionName,
                args,
                ...options2
              });
            };
          }
        });
      if (hasEvent) {
        contract.createEventFilter = new Proxy({}, {
          get(_, eventName) {
            return (...parameters) => {
              const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
              const { args, options: options2 } = getEventParameters(parameters, abiEvent);
              return getAction(publicClient, createContractEventFilter, "createContractEventFilter")({
                abi,
                address,
                eventName,
                args,
                ...options2
              });
            };
          }
        });
        contract.getEvents = new Proxy({}, {
          get(_, eventName) {
            return (...parameters) => {
              const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
              const { args, options: options2 } = getEventParameters(parameters, abiEvent);
              return getAction(publicClient, getContractEvents, "getContractEvents")({
                abi,
                address,
                eventName,
                args,
                ...options2
              });
            };
          }
        });
        contract.watchEvent = new Proxy({}, {
          get(_, eventName) {
            return (...parameters) => {
              const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
              const { args, options: options2 } = getEventParameters(parameters, abiEvent);
              return getAction(publicClient, watchContractEvent, "watchContractEvent")({
                abi,
                address,
                eventName,
                args,
                ...options2
              });
            };
          }
        });
      }
    }
    if (hasWalletClient) {
      if (hasWriteFunction)
        contract.write = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters(parameters);
              return getAction(walletClient, writeContract, "writeContract")({
                abi,
                address,
                functionName,
                args,
                ...options2
              });
            };
          }
        });
    }
    if (hasPublicClient || hasWalletClient) {
      if (hasWriteFunction)
        contract.estimateGas = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters(parameters);
              const client2 = publicClient ?? walletClient;
              return getAction(client2, estimateContractGas, "estimateContractGas")({
                abi,
                address,
                functionName,
                args,
                ...options2,
                account: options2.account ?? walletClient.account
              });
            };
          }
        });
    }
    contract.address = address;
    contract.abi = abi;
    return contract;
  }
  function getFunctionParameters(values) {
    const hasArgs = values.length && Array.isArray(values[0]);
    const args = hasArgs ? values[0] : [];
    const options2 = (hasArgs ? values[1] : values[0]) ?? {};
    return { args, options: options2 };
  }
  function getEventParameters(values, abiEvent) {
    let hasArgs = false;
    if (Array.isArray(values[0]))
      hasArgs = true;
    else if (values.length === 1) {
      hasArgs = abiEvent.inputs.some((x) => x.indexed);
    } else if (values.length === 2) {
      hasArgs = true;
    }
    const args = hasArgs ? values[0] : void 0;
    const options2 = (hasArgs ? values[1] : values[0]) ?? {};
    return { args, options: options2 };
  }

  // node_modules/viem/_esm/clients/createClient.js
  init_parseAccount();

  // node_modules/viem/_esm/utils/uid.js
  var size2 = 256;
  var index = size2;
  var buffer;
  function uid(length = 11) {
    if (!buffer || index + length > size2 * 2) {
      buffer = "";
      index = 0;
      for (let i = 0; i < size2; i++) {
        buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
      }
    }
    return buffer.substring(index, index++ + length);
  }

  // node_modules/viem/_esm/clients/createClient.js
  function createClient(parameters) {
    const { batch, cacheTime = parameters.pollingInterval ?? 4e3, ccipRead, key = "base", name = "Base Client", pollingInterval = 4e3, type = "base" } = parameters;
    const chain = parameters.chain;
    const account = parameters.account ? parseAccount(parameters.account) : void 0;
    const { config, request, value } = parameters.transport({
      chain,
      pollingInterval
    });
    const transport = { ...config, ...value };
    const client = {
      account,
      batch,
      cacheTime,
      ccipRead,
      chain,
      key,
      name,
      pollingInterval,
      request,
      transport,
      type,
      uid: uid()
    };
    function extend(base2) {
      return (extendFn) => {
        const extended = extendFn(base2);
        for (const key2 in client)
          delete extended[key2];
        const combined = { ...base2, ...extended };
        return Object.assign(combined, { extend: extend(combined) });
      };
    }
    return Object.assign(client, { extend: extend(client) });
  }

  // node_modules/viem/_esm/utils/buildRequest.js
  init_base();
  init_request();
  init_rpc();
  init_toHex();
  init_keccak256();

  // node_modules/viem/_esm/utils/promise/withDedupe.js
  init_lru();
  var promiseCache2 = /* @__PURE__ */ new LruMap(8192);
  function withDedupe(fn, { enabled = true, id }) {
    if (!enabled || !id)
      return fn();
    if (promiseCache2.get(id))
      return promiseCache2.get(id);
    const promise = fn().finally(() => promiseCache2.delete(id));
    promiseCache2.set(id, promise);
    return promise;
  }

  // node_modules/viem/_esm/utils/promise/withRetry.js
  function withRetry(fn, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {
    return new Promise((resolve, reject) => {
      const attemptRetry = async ({ count = 0 } = {}) => {
        const retry = async ({ error }) => {
          const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
          if (delay)
            await wait(delay);
          attemptRetry({ count: count + 1 });
        };
        try {
          const data = await fn();
          resolve(data);
        } catch (err) {
          if (count < retryCount && await shouldRetry2({ count, error: err }))
            return retry({ error: err });
          reject(err);
        }
      };
      attemptRetry();
    });
  }

  // node_modules/viem/_esm/utils/buildRequest.js
  init_stringify();
  function buildRequest(request, options2 = {}) {
    return async (args, overrideOptions = {}) => {
      const { dedupe = false, retryDelay = 150, retryCount = 3, uid: uid2 } = {
        ...options2,
        ...overrideOptions
      };
      const requestId = dedupe ? keccak256(stringToHex(`${uid2}.${stringify(args)}`)) : void 0;
      return withDedupe(() => withRetry(async () => {
        try {
          return await request(args);
        } catch (err_) {
          const err = err_;
          switch (err.code) {
            // -32700
            case ParseRpcError.code:
              throw new ParseRpcError(err);
            // -32600
            case InvalidRequestRpcError.code:
              throw new InvalidRequestRpcError(err);
            // -32601
            case MethodNotFoundRpcError.code:
              throw new MethodNotFoundRpcError(err, { method: args.method });
            // -32602
            case InvalidParamsRpcError.code:
              throw new InvalidParamsRpcError(err);
            // -32603
            case InternalRpcError.code:
              throw new InternalRpcError(err);
            // -32000
            case InvalidInputRpcError.code:
              throw new InvalidInputRpcError(err);
            // -32001
            case ResourceNotFoundRpcError.code:
              throw new ResourceNotFoundRpcError(err);
            // -32002
            case ResourceUnavailableRpcError.code:
              throw new ResourceUnavailableRpcError(err);
            // -32003
            case TransactionRejectedRpcError.code:
              throw new TransactionRejectedRpcError(err);
            // -32004
            case MethodNotSupportedRpcError.code:
              throw new MethodNotSupportedRpcError(err, {
                method: args.method
              });
            // -32005
            case LimitExceededRpcError.code:
              throw new LimitExceededRpcError(err);
            // -32006
            case JsonRpcVersionUnsupportedError.code:
              throw new JsonRpcVersionUnsupportedError(err);
            // 4001
            case UserRejectedRequestError.code:
              throw new UserRejectedRequestError(err);
            // 4100
            case UnauthorizedProviderError.code:
              throw new UnauthorizedProviderError(err);
            // 4200
            case UnsupportedProviderMethodError.code:
              throw new UnsupportedProviderMethodError(err);
            // 4900
            case ProviderDisconnectedError.code:
              throw new ProviderDisconnectedError(err);
            // 4901
            case ChainDisconnectedError.code:
              throw new ChainDisconnectedError(err);
            // 4902
            case SwitchChainError.code:
              throw new SwitchChainError(err);
            // CAIP-25: User Rejected Error
            // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25
            case 5e3:
              throw new UserRejectedRequestError(err);
            default:
              if (err_ instanceof BaseError2)
                throw err_;
              throw new UnknownRpcError(err);
          }
        }
      }, {
        delay: ({ count, error }) => {
          if (error && error instanceof HttpRequestError) {
            const retryAfter = error?.headers?.get("Retry-After");
            if (retryAfter?.match(/\d/))
              return Number.parseInt(retryAfter) * 1e3;
          }
          return ~~(1 << count) * retryDelay;
        },
        retryCount,
        shouldRetry: ({ error }) => shouldRetry(error)
      }), { enabled: dedupe, id: requestId });
    };
  }
  function shouldRetry(error) {
    if ("code" in error && typeof error.code === "number") {
      if (error.code === -1)
        return true;
      if (error.code === LimitExceededRpcError.code)
        return true;
      if (error.code === InternalRpcError.code)
        return true;
      return false;
    }
    if (error instanceof HttpRequestError && error.status) {
      if (error.status === 403)
        return true;
      if (error.status === 408)
        return true;
      if (error.status === 413)
        return true;
      if (error.status === 429)
        return true;
      if (error.status === 500)
        return true;
      if (error.status === 502)
        return true;
      if (error.status === 503)
        return true;
      if (error.status === 504)
        return true;
      return false;
    }
    return true;
  }

  // node_modules/viem/_esm/clients/transports/createTransport.js
  function createTransport({ key, name, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
    const uid2 = uid();
    return {
      config: {
        key,
        name,
        request,
        retryCount,
        retryDelay,
        timeout,
        type
      },
      request: buildRequest(request, { retryCount, retryDelay, uid: uid2 }),
      value
    };
  }

  // node_modules/viem/_esm/clients/transports/http.js
  init_request();

  // node_modules/viem/_esm/errors/transport.js
  init_base();
  var UrlRequiredError = class extends BaseError2 {
    constructor() {
      super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
        docsPath: "/docs/clients/intro",
        name: "UrlRequiredError"
      });
    }
  };

  // node_modules/viem/_esm/clients/transports/http.js
  init_createBatchScheduler();

  // node_modules/viem/_esm/utils/rpc/http.js
  init_request();

  // node_modules/viem/_esm/utils/promise/withTimeout.js
  function withTimeout(fn, { errorInstance = new Error("timed out"), timeout, signal }) {
    return new Promise((resolve, reject) => {
      ;
      (async () => {
        let timeoutId;
        try {
          const controller = new AbortController();
          if (timeout > 0) {
            timeoutId = setTimeout(() => {
              if (signal) {
                controller.abort();
              } else {
                reject(errorInstance);
              }
            }, timeout);
          }
          resolve(await fn({ signal: controller?.signal || null }));
        } catch (err) {
          if (err?.name === "AbortError")
            reject(errorInstance);
          reject(err);
        } finally {
          clearTimeout(timeoutId);
        }
      })();
    });
  }

  // node_modules/viem/_esm/utils/rpc/http.js
  init_stringify();

  // node_modules/viem/_esm/utils/rpc/id.js
  function createIdStore() {
    return {
      current: 0,
      take() {
        return this.current++;
      },
      reset() {
        this.current = 0;
      }
    };
  }
  var idCache = /* @__PURE__ */ createIdStore();

  // node_modules/viem/_esm/utils/rpc/http.js
  function getHttpRpcClient(url, options2 = {}) {
    return {
      async request(params) {
        const { body, onRequest = options2.onRequest, onResponse = options2.onResponse, timeout = options2.timeout ?? 1e4 } = params;
        const fetchOptions = {
          ...options2.fetchOptions ?? {},
          ...params.fetchOptions ?? {}
        };
        const { headers, method, signal: signal_ } = fetchOptions;
        try {
          const response = await withTimeout(async ({ signal }) => {
            const init = {
              ...fetchOptions,
              body: Array.isArray(body) ? stringify(body.map((body2) => ({
                jsonrpc: "2.0",
                id: body2.id ?? idCache.take(),
                ...body2
              }))) : stringify({
                jsonrpc: "2.0",
                id: body.id ?? idCache.take(),
                ...body
              }),
              headers: {
                "Content-Type": "application/json",
                ...headers
              },
              method: method || "POST",
              signal: signal_ || (timeout > 0 ? signal : null)
            };
            const request = new Request(url, init);
            const args = await onRequest?.(request, init) ?? { ...init, url };
            const response2 = await fetch(args.url ?? url, args);
            return response2;
          }, {
            errorInstance: new TimeoutError({ body, url }),
            timeout,
            signal: true
          });
          if (onResponse)
            await onResponse(response);
          let data;
          if (response.headers.get("Content-Type")?.startsWith("application/json"))
            data = await response.json();
          else {
            data = await response.text();
            try {
              data = JSON.parse(data || "{}");
            } catch (err) {
              if (response.ok)
                throw err;
              data = { error: data };
            }
          }
          if (!response.ok) {
            throw new HttpRequestError({
              body,
              details: stringify(data.error) || response.statusText,
              headers: response.headers,
              status: response.status,
              url
            });
          }
          return data;
        } catch (err) {
          if (err instanceof HttpRequestError)
            throw err;
          if (err instanceof TimeoutError)
            throw err;
          throw new HttpRequestError({
            body,
            cause: err,
            url
          });
        }
      }
    };
  }

  // node_modules/viem/_esm/clients/transports/http.js
  function http(url, config = {}) {
    const { batch, fetchOptions, key = "http", name = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay } = config;
    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
      const { batchSize = 1e3, wait: wait3 = 0 } = typeof batch === "object" ? batch : {};
      const retryCount = config.retryCount ?? retryCount_;
      const timeout = timeout_ ?? config.timeout ?? 1e4;
      const url_ = url || chain?.rpcUrls.default.http[0];
      if (!url_)
        throw new UrlRequiredError();
      const rpcClient = getHttpRpcClient(url_, {
        fetchOptions,
        onRequest: onFetchRequest,
        onResponse: onFetchResponse,
        timeout
      });
      return createTransport({
        key,
        name,
        async request({ method, params }) {
          const body = { method, params };
          const { schedule } = createBatchScheduler({
            id: url_,
            wait: wait3,
            shouldSplitBatch(requests) {
              return requests.length > batchSize;
            },
            fn: (body2) => rpcClient.request({
              body: body2
            }),
            sort: (a, b) => a.id - b.id
          });
          const fn = async (body2) => batch ? schedule(body2) : [
            await rpcClient.request({
              body: body2
            })
          ];
          const [{ error, result }] = await fn(body);
          if (error)
            throw new RpcRequestError({
              body,
              error,
              url: url_
            });
          return result;
        },
        retryCount,
        retryDelay,
        timeout,
        type: "http"
      }, {
        fetchOptions,
        url: url_
      });
    };
  }

  // node_modules/viem/_esm/actions/public/getCode.js
  init_toHex();
  async function getCode(client, { address, blockNumber, blockTag = "latest" }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const hex = await client.request({
      method: "eth_getCode",
      params: [address, blockNumberHex || blockTag]
    }, { dedupe: Boolean(blockNumberHex) });
    if (hex === "0x")
      return void 0;
    return hex;
  }

  // node_modules/viem/_esm/actions/public/getProof.js
  init_toHex();

  // node_modules/viem/_esm/utils/regex.js
  var arrayRegex = /^(.*)\[([0-9]*)\]$/;
  var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
  var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;

  // node_modules/viem/_esm/utils/abi/encodePacked.js
  init_abi();
  init_address();
  init_isAddress();
  init_concat();
  init_pad();
  init_toHex();
  function encodePacked(types, values) {
    if (types.length !== values.length)
      throw new AbiEncodingLengthMismatchError({
        expectedLength: types.length,
        givenLength: values.length
      });
    const data = [];
    for (let i = 0; i < types.length; i++) {
      const type = types[i];
      const value = values[i];
      data.push(encode(type, value));
    }
    return concatHex(data);
  }
  function encode(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      if (!isAddress(address))
        throw new InvalidAddressError({ address });
      return pad(address.toLowerCase(), {
        size: isArray ? 32 : null
      });
    }
    if (type === "string")
      return stringToHex(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return pad(boolToHex(value), { size: isArray ? 32 : 1 });
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size5 = Number.parseInt(bits) / 8;
      return numberToHex(value, {
        size: isArray ? 32 : size5,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size5] = bytesMatch;
      if (Number.parseInt(size5) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError({
          expectedSize: Number.parseInt(size5),
          givenSize: (value.length - 2) / 2
        });
      return pad(value, { dir: "right", size: isArray ? 32 : null });
    }
    const arrayMatch = type.match(arrayRegex);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i = 0; i < value.length; i++) {
        data.push(encode(childType, value[i], true));
      }
      if (data.length === 0)
        return "0x";
      return concatHex(data);
    }
    throw new UnsupportedPackedAbiType(type);
  }

  // node_modules/viem/_esm/utils/address/getContractAddress.js
  init_concat();

  // node_modules/viem/_esm/utils/data/isBytes.js
  function isBytes3(value) {
    if (!value)
      return false;
    if (typeof value !== "object")
      return false;
    if (!("BYTES_PER_ELEMENT" in value))
      return false;
    return value.BYTES_PER_ELEMENT === 1 && value.constructor.name === "Uint8Array";
  }

  // node_modules/viem/_esm/utils/address/getContractAddress.js
  init_pad();
  init_slice();
  init_toBytes();
  init_keccak256();
  init_getAddress();
  function getContractAddress2(opts) {
    if (opts.opcode === "CREATE2")
      return getCreate2Address(opts);
    return getCreateAddress(opts);
  }
  function getCreateAddress(opts) {
    const from = toBytes(getAddress(opts.from));
    let nonce = toBytes(opts.nonce);
    if (nonce[0] === 0)
      nonce = new Uint8Array([]);
    return getAddress(`0x${keccak256(toRlp([from, nonce], "bytes")).slice(26)}`);
  }
  function getCreate2Address(opts) {
    const from = toBytes(getAddress(opts.from));
    const salt = pad(isBytes3(opts.salt) ? opts.salt : toBytes(opts.salt), {
      size: 32
    });
    const bytecodeHash = (() => {
      if ("bytecodeHash" in opts) {
        if (isBytes3(opts.bytecodeHash))
          return opts.bytecodeHash;
        return toBytes(opts.bytecodeHash);
      }
      return keccak256(opts.bytecode, "bytes");
    })();
    return getAddress(slice(keccak256(concat([toBytes("0xff"), from, salt, bytecodeHash])), 12));
  }

  // node_modules/viem/_esm/utils/formatters/transactionReceipt.js
  init_fromHex();
  var receiptStatuses = {
    "0x0": "reverted",
    "0x1": "success"
  };
  function formatTransactionReceipt(transactionReceipt) {
    const receipt = {
      ...transactionReceipt,
      blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
      contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
      cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
      effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
      gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
      logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
      to: transactionReceipt.to ? transactionReceipt.to : null,
      transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
      status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
      type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
    };
    if (transactionReceipt.blobGasPrice)
      receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
    if (transactionReceipt.blobGasUsed)
      receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
    return receipt;
  }

  // node_modules/viem/_esm/utils/index.js
  init_fromHex();

  // node_modules/viem/_esm/utils/encoding/fromRlp.js
  init_base();
  init_encoding();
  init_cursor2();
  init_toBytes();
  init_toHex();
  function fromRlp(value, to = "hex") {
    const bytes4 = (() => {
      if (typeof value === "string") {
        if (value.length > 3 && value.length % 2 !== 0)
          throw new InvalidHexValueError(value);
        return hexToBytes(value);
      }
      return value;
    })();
    const cursor = createCursor(bytes4, {
      recursiveReadLimit: Number.POSITIVE_INFINITY
    });
    const result = fromRlpCursor(cursor, to);
    return result;
  }
  function fromRlpCursor(cursor, to = "hex") {
    if (cursor.bytes.length === 0)
      return to === "hex" ? bytesToHex(cursor.bytes) : cursor.bytes;
    const prefix = cursor.readByte();
    if (prefix < 128)
      cursor.decrementPosition(1);
    if (prefix < 192) {
      const length2 = readLength(cursor, prefix, 128);
      const bytes4 = cursor.readBytes(length2);
      return to === "hex" ? bytesToHex(bytes4) : bytes4;
    }
    const length = readLength(cursor, prefix, 192);
    return readList(cursor, length, to);
  }
  function readLength(cursor, prefix, offset) {
    if (offset === 128 && prefix < 128)
      return 1;
    if (prefix <= offset + 55)
      return prefix - offset;
    if (prefix === offset + 55 + 1)
      return cursor.readUint8();
    if (prefix === offset + 55 + 2)
      return cursor.readUint16();
    if (prefix === offset + 55 + 3)
      return cursor.readUint24();
    if (prefix === offset + 55 + 4)
      return cursor.readUint32();
    throw new BaseError2("Invalid RLP prefix");
  }
  function readList(cursor, length, to) {
    const position = cursor.position;
    const value = [];
    while (cursor.position - position < length)
      value.push(fromRlpCursor(cursor, to));
    return value;
  }

  // node_modules/viem/_esm/errors/unit.js
  init_base();
  var InvalidDecimalNumberError = class extends BaseError2 {
    constructor({ value }) {
      super(`Number \`${value}\` is not a valid decimal number.`, {
        name: "InvalidDecimalNumberError"
      });
    }
  };

  // node_modules/viem/_esm/utils/unit/parseUnits.js
  function parseUnits(value, decimals) {
    if (!/^(-?)([0-9]*)\.?([0-9]*)$/.test(value))
      throw new InvalidDecimalNumberError({ value });
    let [integer, fraction = "0"] = value.split(".");
    const negative = integer.startsWith("-");
    if (negative)
      integer = integer.slice(1);
    fraction = fraction.replace(/(0+)$/, "");
    if (decimals === 0) {
      if (Math.round(Number(`.${fraction}`)) === 1)
        integer = `${BigInt(integer) + 1n}`;
      fraction = "";
    } else if (fraction.length > decimals) {
      const [left, unit, right] = [
        fraction.slice(0, decimals - 1),
        fraction.slice(decimals - 1, decimals),
        fraction.slice(decimals)
      ];
      const rounded = Math.round(Number(`${unit}.${right}`));
      if (rounded > 9)
        fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, "0");
      else
        fraction = `${left}${rounded}`;
      if (fraction.length > decimals) {
        fraction = fraction.slice(1);
        integer = `${BigInt(integer) + 1n}`;
      }
      fraction = fraction.slice(0, decimals);
    } else {
      fraction = fraction.padEnd(decimals, "0");
    }
    return BigInt(`${negative ? "-" : ""}${integer}${fraction}`);
  }

  // node_modules/viem/_esm/utils/unit/parseEther.js
  init_unit();
  function parseEther(ether, unit = "wei") {
    return parseUnits(ether, etherUnits[unit]);
  }

  // node_modules/viem/_esm/utils/formatters/proof.js
  function formatStorageProof(storageProof) {
    return storageProof.map((proof) => ({
      ...proof,
      value: BigInt(proof.value)
    }));
  }
  function formatProof(proof) {
    return {
      ...proof,
      balance: proof.balance ? BigInt(proof.balance) : void 0,
      nonce: proof.nonce ? hexToNumber(proof.nonce) : void 0,
      storageProof: proof.storageProof ? formatStorageProof(proof.storageProof) : void 0
    };
  }

  // node_modules/viem/_esm/actions/public/getProof.js
  async function getProof(client, { address, blockNumber, blockTag: blockTag_, storageKeys }) {
    const blockTag = blockTag_ ?? "latest";
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const proof = await client.request({
      method: "eth_getProof",
      params: [address, storageKeys, blockNumberHex || blockTag]
    });
    return formatProof(proof);
  }

  // node_modules/viem/_esm/actions/public/getStorageAt.js
  init_toHex();
  async function getStorageAt(client, { address, blockNumber, blockTag = "latest", slot }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const data = await client.request({
      method: "eth_getStorageAt",
      params: [address, slot, blockNumberHex || blockTag]
    });
    return data;
  }

  // node_modules/viem/_esm/actions/public/getTransaction.js
  init_transaction();
  init_toHex();
  async function getTransaction(client, { blockHash, blockNumber, blockTag: blockTag_, hash: hash4, index: index2 }) {
    const blockTag = blockTag_ || "latest";
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let transaction = null;
    if (hash4) {
      transaction = await client.request({
        method: "eth_getTransactionByHash",
        params: [hash4]
      }, { dedupe: true });
    } else if (blockHash) {
      transaction = await client.request({
        method: "eth_getTransactionByBlockHashAndIndex",
        params: [blockHash, numberToHex(index2)]
      }, { dedupe: true });
    } else if (blockNumberHex || blockTag) {
      transaction = await client.request({
        method: "eth_getTransactionByBlockNumberAndIndex",
        params: [blockNumberHex || blockTag, numberToHex(index2)]
      }, { dedupe: Boolean(blockNumberHex) });
    }
    if (!transaction)
      throw new TransactionNotFoundError({
        blockHash,
        blockNumber,
        blockTag,
        hash: hash4,
        index: index2
      });
    const format = client.chain?.formatters?.transaction?.format || formatTransaction;
    return format(transaction);
  }

  // node_modules/viem/_esm/actions/public/getTransactionReceipt.js
  init_transaction();
  async function getTransactionReceipt(client, { hash: hash4 }) {
    const receipt = await client.request({
      method: "eth_getTransactionReceipt",
      params: [hash4]
    }, { dedupe: true });
    if (!receipt)
      throw new TransactionReceiptNotFoundError({ hash: hash4 });
    const format = client.chain?.formatters?.transactionReceipt?.format || formatTransactionReceipt;
    return format(receipt);
  }

  // node_modules/viem/_esm/actions/wallet/deployContract.js
  init_encodeDeployData();
  function deployContract(walletClient, parameters) {
    const { abi, args, bytecode, ...request } = parameters;
    const calldata = encodeDeployData({ abi, args, bytecode });
    return sendTransaction(walletClient, {
      ...request,
      data: calldata
    });
  }

  // node_modules/viem/_esm/index.js
  init_encodeAbiParameters();
  init_encodeFunctionData();
  init_toHex();
  init_formatUnits();
  init_fromHex();
  init_getAddress();
  init_keccak256();
  init_pad();
  init_trim();

  // src/utils/storageSlots.ts
  function getSolidityStorageSlotBytes(mappingSlot, key) {
    const slot = pad(mappingSlot, { size: 32 });
    return trim(
      keccak256(encodeAbiParameters(parseAbiParameters("bytes32, uint256"), [key, BigInt(slot)]))
    );
  }
  function getSolidityStorageSlotUint(mappingSlot, key) {
    return keccak256(encodeAbiParameters(parseAbiParameters("uint256, uint256"), [key, mappingSlot]));
  }
  function getSolidityStorageSlotAddress(mappingSlot, key) {
    return keccak256(
      encodeAbiParameters(parseAbiParameters("address, uint256"), [key, BigInt(mappingSlot)])
    );
  }
  function getBits(_bigIntValue, startBit, _endBit) {
    let endBit = _endBit;
    const bigIntValue = BigInt(_bigIntValue);
    if (startBit > endBit) {
      throw new Error("Invalid bit range: startBit must be less than or equal to endBit");
    }
    const bitLength = BigInt(bigIntValue.toString(2)).toString().length;
    if (endBit >= bitLength) {
      endBit = BigInt(bitLength - 1);
    }
    const mask = (1n << endBit - startBit + 1n) - 1n;
    const maskedValue = bigIntValue >> startBit & mask;
    return maskedValue.toString();
  }
  function setBits(_bigIntBase, startBit, endBit, _replaceValue) {
    const bigIntBase = BigInt(_bigIntBase);
    const bigIntReplaceValue = BigInt(_replaceValue);
    let mask = BigInt(0);
    for (let i = startBit; i < endBit; i++) {
      mask |= BigInt(1) << BigInt(i);
    }
    const clearedNumber = bigIntBase & ~mask;
    const result = clearedNumber | bigIntReplaceValue << BigInt(startBit);
    return result;
  }
  function bitMapToIndexes(bitmap) {
    const reserveIndexes = [];
    for (let i = 0; bitmap != 0n; i++) {
      if (bitmap & 0x1n) reserveIndexes.push(i);
      bitmap = bitmap >> 1n;
    }
    return reserveIndexes;
  }

  // src/reports/emode.ts
  function renderEModeValue(key, emode, snapshot) {
    if (!emode[key]) return "-";
    if (["reserveFactor", "liquidationProtocolFee", "liquidationThreshold", "ltv"].includes(key))
      return `${formatUnits(BigInt(emode[key]), 2)} %`;
    if (key === "liquidationBonus")
      return emode[key] === 0 ? "0 %" : `${(emode[key] - 1e4) / 100} %`;
    if (key === "borrowableBitmap" || key === "collateralBitmap") {
      const indexes = bitMapToIndexes(BigInt(emode[key]));
      return indexes.map(
        (i) => snapshot.reserves[Object.keys(snapshot.reserves).find((key2) => snapshot.reserves[key2].id === i)].symbol
      ).join(", ");
    }
    return emode[key];
  }
  var ORDER = [
    "eModeCategory",
    "label",
    "ltv",
    "liquidationThreshold",
    "liquidationBonus",
    "priceSource"
  ];
  function sortEmodeKeys(a, b) {
    const indexA = ORDER.indexOf(a);
    const indexB = ORDER.indexOf(b);
    if (indexA !== -1 && indexB !== -1) {
      if (indexA > indexB) {
        return 1;
      }
      if (indexB > indexA) {
        return -1;
      }
    }
    if (indexA !== -1) return -1;
    if (indexB !== -1) return -1;
    return a.localeCompare(b);
  }
  var OMIT_KEYS = ["eModeCategory"];
  function renderEmodeDiff(diff2, pre, post) {
    let content = "| description | value before | value after |\n| --- | --- | --- |\n";
    Object.keys(diff2).filter((key) => !OMIT_KEYS.includes(key)).sort(sortEmodeKeys).map((key) => {
      if (typeof diff2[key] === "object" && diff2[key].hasOwnProperty("from"))
        content += `| eMode.${key} | ${renderEModeValue(
          key,
          {
            ...diff2,
            [key]: diff2[key].from
          },
          pre
        )} | ${renderEModeValue(key, { ...diff2, [key]: diff2[key].to }, post)} |
`;
      else {
        const value = renderEModeValue(key, diff2, pre);
        content += `| eMode.${key} (unchanged) | ${value} | ${value} |
`;
      }
    });
    return content;
  }

  // src/reports/fetch-IR-strategy.ts
  function getStrategyImageUrl(rate) {
    const paramsObj = {
      variableRateSlope1: rate.variableRateSlope1,
      variableRateSlope2: rate.variableRateSlope2,
      optimalUsageRatio: rate.optimalUsageRatio,
      baseVariableBorrowRate: rate.baseVariableBorrowRate,
      maxVariableBorrowRate: rate.maxVariableBorrowRate
    };
    const searchParams = new URLSearchParams(paramsObj);
    return `https://dash.onaave.com/api/static?${searchParams.toString()}`;
  }

  // node_modules/@bgd-labs/aave-address-book/dist/AaveAddressBook.mjs
  var AaveAddressBook_exports = {};
  __export(AaveAddressBook_exports, {
    AaveGovernanceV2: () => AaveGovernanceV2_exports,
    AaveSafetyModule: () => AaveSafetyModule_exports,
    AaveV1: () => AaveV1_exports,
    AaveV2Avalanche: () => AaveV2Avalanche_exports,
    AaveV2Ethereum: () => AaveV2Ethereum_exports,
    AaveV2EthereumAMM: () => AaveV2EthereumAMM_exports,
    AaveV2EthereumArc: () => AaveV2EthereumArc_exports,
    AaveV2Fuji: () => AaveV2Fuji_exports,
    AaveV2Polygon: () => AaveV2Polygon_exports,
    AaveV3Arbitrum: () => AaveV3Arbitrum_exports,
    AaveV3ArbitrumSepolia: () => AaveV3ArbitrumSepolia_exports,
    AaveV3Avalanche: () => AaveV3Avalanche_exports,
    AaveV3BNB: () => AaveV3BNB_exports,
    AaveV3Base: () => AaveV3Base_exports,
    AaveV3BaseSepolia: () => AaveV3BaseSepolia_exports,
    AaveV3BaseSepoliaLido: () => AaveV3BaseSepoliaLido_exports,
    AaveV3Ethereum: () => AaveV3Ethereum_exports,
    AaveV3EthereumEtherFi: () => AaveV3EthereumEtherFi_exports,
    AaveV3EthereumLido: () => AaveV3EthereumLido_exports,
    AaveV3Fantom: () => AaveV3Fantom_exports,
    AaveV3FantomTestnet: () => AaveV3FantomTestnet_exports,
    AaveV3Fuji: () => AaveV3Fuji_exports,
    AaveV3Gnosis: () => AaveV3Gnosis_exports,
    AaveV3Harmony: () => AaveV3Harmony_exports,
    AaveV3Metis: () => AaveV3Metis_exports,
    AaveV3Optimism: () => AaveV3Optimism_exports,
    AaveV3OptimismSepolia: () => AaveV3OptimismSepolia_exports,
    AaveV3Polygon: () => AaveV3Polygon_exports,
    AaveV3Scroll: () => AaveV3Scroll_exports,
    AaveV3ScrollSepolia: () => AaveV3ScrollSepolia_exports,
    AaveV3Sepolia: () => AaveV3Sepolia_exports,
    AaveV3ZkSync: () => AaveV3ZkSync_exports,
    GovernanceV3Arbitrum: () => GovernanceV3Arbitrum_exports,
    GovernanceV3Avalanche: () => GovernanceV3Avalanche_exports,
    GovernanceV3BNB: () => GovernanceV3BNB_exports,
    GovernanceV3Base: () => GovernanceV3Base_exports,
    GovernanceV3Ethereum: () => GovernanceV3Ethereum_exports,
    GovernanceV3Fuji: () => GovernanceV3Fuji_exports,
    GovernanceV3Gnosis: () => GovernanceV3Gnosis_exports,
    GovernanceV3Metis: () => GovernanceV3Metis_exports,
    GovernanceV3Optimism: () => GovernanceV3Optimism_exports,
    GovernanceV3Polygon: () => GovernanceV3Polygon_exports,
    GovernanceV3PolygonZkEvm: () => GovernanceV3PolygonZkEvm_exports,
    GovernanceV3Scroll: () => GovernanceV3Scroll_exports,
    GovernanceV3ZkSync: () => GovernanceV3ZkSync_exports,
    MiscArbitrum: () => MiscArbitrum_exports,
    MiscArbitrumSepolia: () => MiscArbitrumSepolia_exports,
    MiscAvalanche: () => MiscAvalanche_exports,
    MiscBNB: () => MiscBNB_exports,
    MiscBase: () => MiscBase_exports,
    MiscBaseSepolia: () => MiscBaseSepolia_exports,
    MiscEthereum: () => MiscEthereum_exports,
    MiscFantom: () => MiscFantom_exports,
    MiscFuji: () => MiscFuji_exports,
    MiscGnosis: () => MiscGnosis_exports,
    MiscMetis: () => MiscMetis_exports,
    MiscOptimism: () => MiscOptimism_exports,
    MiscOptimismSepolia: () => MiscOptimismSepolia_exports,
    MiscPolygon: () => MiscPolygon_exports,
    MiscPolygonZkEvm: () => MiscPolygonZkEvm_exports,
    MiscScroll: () => MiscScroll_exports,
    MiscSepolia: () => MiscSepolia_exports,
    MiscZkSync: () => MiscZkSync_exports
  });

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Ethereum.mjs
  var GovernanceV3Ethereum_exports = {};
  __export(GovernanceV3Ethereum_exports, {
    CHAIN_ID: () => CHAIN_ID,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE,
    EMERGENCY_REGISTRY: () => EMERGENCY_REGISTRY,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_1,
    EXECUTOR_LVL_2: () => EXECUTOR_LVL_2,
    GOVERNANCE: () => GOVERNANCE,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN,
    GOVERNANCE_POWER_STRATEGY: () => GOVERNANCE_POWER_STRATEGY,
    GOV_DATA_HELPER: () => GOV_DATA_HELPER,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN,
    META_DELEGATE_HELPER: () => META_DELEGATE_HELPER,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER,
    PC_DATA_HELPER: () => PC_DATA_HELPER,
    VM_DATA_HELPER: () => VM_DATA_HELPER,
    VOTING_MACHINE: () => VOTING_MACHINE,
    VOTING_PORTAL_ETH_AVAX: () => VOTING_PORTAL_ETH_AVAX,
    VOTING_PORTAL_ETH_ETH: () => VOTING_PORTAL_ETH_ETH,
    VOTING_PORTAL_ETH_POL: () => VOTING_PORTAL_ETH_POL,
    VOTING_STRATEGY: () => VOTING_STRATEGY
  });
  var CROSS_CHAIN_CONTROLLER = "0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1";
  var GOVERNANCE = "0x9AEE0B04504CeF83A65AC3f0e838D0593BCb2BC7";
  var PAYLOADS_CONTROLLER = "0xdAbad81aF85554E9ae636395611C58F7eC1aAEc5";
  var VOTING_MACHINE = "0x617332a777780F546261247F621051d0b98975Eb";
  var VOTING_PORTAL_ETH_ETH = "0xf23f7De3AC42F22eBDA17e64DC4f51FB66b8E21f";
  var VOTING_PORTAL_ETH_AVAX = "0x33aCEf7365809218485873B7d0d67FeE411B5D79";
  var VOTING_PORTAL_ETH_POL = "0x9b24C168d6A76b5459B1d47071a54962a4df36c3";
  var PC_DATA_HELPER = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GOV_DATA_HELPER = "0x971c82c8316aD611904F95616c21ce90837f1856";
  var VM_DATA_HELPER = "0x77976B51569896523EE215962Ee91ff236Fa50E8";
  var META_DELEGATE_HELPER = "0x94363B11b37BC3ffe43AB09cff5A010352FE85dC";
  var EMERGENCY_REGISTRY = "0x73C6Fb358dDA8e84D50e98A98F7c0dF32e15C7e9";
  var GOVERNANCE_POWER_STRATEGY = "0xa198Fac58E02A5C5F8F7e877895d50cFa9ad1E04";
  var GRANULAR_GUARDIAN = "0x4457cA11E90f416Cc1D3a8E1cA41C0cdEcC251d4";
  var GOVERNANCE_GUARDIAN = "0xCe52ab41C40575B072A18C9700091Ccbe4A06710";
  var EXECUTOR_LVL_1 = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var EXECUTOR_LVL_2 = "0x17Dd33Ed0e3dD2a80E37489B8A63063161BE6957";
  var VOTING_STRATEGY = "0x5642A5A5Ec284B4145563aBF319620204aCCA7f4";
  var DATA_WAREHOUSE = "0x1699FE9CaDC8a0b6c93E06B62Ab4592a0fFEcF61";
  var CHAIN_ID = 1;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Arbitrum.mjs
  var GovernanceV3Arbitrum_exports = {};
  __export(GovernanceV3Arbitrum_exports, {
    CHAIN_ID: () => CHAIN_ID2,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER2,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_12,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN2,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN2,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER2,
    PC_DATA_HELPER: () => PC_DATA_HELPER2
  });
  var CROSS_CHAIN_CONTROLLER2 = "0xCbFB78a3Eeaa611b826E37c80E4126c8787D29f0";
  var PAYLOADS_CONTROLLER2 = "0x89644CA1bB8064760312AE4F03ea41b05dA3637C";
  var PC_DATA_HELPER2 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN2 = "0x4922093c476CfbCF903C7C4082d2D64bAE8A37cE";
  var GOVERNANCE_GUARDIAN2 = "0x1A0581dd5C7C3DA4Ba1CDa7e0BcA7286afc4973b";
  var EXECUTOR_LVL_12 = "0xFF1137243698CaA18EE364Cc966CF0e02A4e6327";
  var CHAIN_ID2 = 42161;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Avalanche.mjs
  var GovernanceV3Avalanche_exports = {};
  __export(GovernanceV3Avalanche_exports, {
    CHAIN_ID: () => CHAIN_ID3,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER3,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE2,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_13,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN3,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN3,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER3,
    PC_DATA_HELPER: () => PC_DATA_HELPER3,
    VM_DATA_HELPER: () => VM_DATA_HELPER2,
    VOTING_MACHINE: () => VOTING_MACHINE2,
    VOTING_STRATEGY: () => VOTING_STRATEGY2
  });
  var CROSS_CHAIN_CONTROLLER3 = "0x27FC7D54C893dA63C0AE6d57e1B2B13A70690928";
  var CL_EMERGENCY_ORACLE = "0x41185495Bc8297a65DC46f94001DC7233775EbEe";
  var VOTING_MACHINE2 = "0x9b6f5ef589A3DD08670Dd146C11C4Fb33E04494F";
  var PAYLOADS_CONTROLLER3 = "0x1140CB7CAfAcC745771C2Ea31e7B5C653c5d0B80";
  var PC_DATA_HELPER3 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var VM_DATA_HELPER2 = "0x77976B51569896523EE215962Ee91ff236Fa50E8";
  var GRANULAR_GUARDIAN3 = "0xc1162BCb2E5E3ca4725512008c7522dF8C8B7B65";
  var GOVERNANCE_GUARDIAN3 = "0x360c0a69Ed2912351227a0b745f890CB2eBDbcFe";
  var EXECUTOR_LVL_13 = "0x3C06dce358add17aAf230f2234bCCC4afd50d090";
  var VOTING_STRATEGY2 = "0x690C218668B440204F369Af1541245d367cc805C";
  var DATA_WAREHOUSE2 = "0x9626F9d60CC0B7e1c9a0A47b7f0bd618fb6f40ff";
  var CHAIN_ID3 = 43114;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Fuji.mjs
  var GovernanceV3Fuji_exports = {};
  __export(GovernanceV3Fuji_exports, {
    CHAIN_ID: () => CHAIN_ID4,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER4,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE3,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_14,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER4,
    VOTING_MACHINE: () => VOTING_MACHINE3,
    VOTING_STRATEGY: () => VOTING_STRATEGY3
  });
  var CROSS_CHAIN_CONTROLLER4 = "0x5488A48E5C22175548E8d68622211F5928cBbf23";
  var VOTING_MACHINE3 = "0x79Edd77c76F95b6b69907CaD1d8241F9DB0e3FD0";
  var PAYLOADS_CONTROLLER4 = "0xf1842f9D6C3D9ec1153d7afCBb9cDBC537Ea5d15";
  var EXECUTOR_LVL_14 = "0xACd2b1bA0B85FaF0f45D4974Ba8ee538E157fBc6";
  var VOTING_STRATEGY3 = "0x8c55a1bf3DC7076522C5cd025f497A498eF90143";
  var DATA_WAREHOUSE3 = "0xDB23939d4C483E748c2487916fB20d7fF7e39588";
  var CHAIN_ID4 = 43113;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Optimism.mjs
  var GovernanceV3Optimism_exports = {};
  __export(GovernanceV3Optimism_exports, {
    CHAIN_ID: () => CHAIN_ID5,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER5,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_15,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN4,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN4,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER5,
    PC_DATA_HELPER: () => PC_DATA_HELPER4
  });
  var CROSS_CHAIN_CONTROLLER5 = "0x48A9FE90bce5EEd790f3F4Ce192d1C0B351fd4Ca";
  var PAYLOADS_CONTROLLER5 = "0x0E1a3Af1f9cC76A62eD31eDedca291E63632e7c4";
  var PC_DATA_HELPER4 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN4 = "0x6c5264C380C7022e54f585c4E354ffb6f221a03b";
  var GOVERNANCE_GUARDIAN4 = "0x360c0a69Ed2912351227a0b745f890CB2eBDbcFe";
  var EXECUTOR_LVL_15 = "0x746c675dAB49Bcd5BB9Dc85161f2d7Eb435009bf";
  var CHAIN_ID5 = 10;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Polygon.mjs
  var GovernanceV3Polygon_exports = {};
  __export(GovernanceV3Polygon_exports, {
    CHAIN_ID: () => CHAIN_ID6,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE2,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER6,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE4,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_16,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN5,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN5,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER6,
    PC_DATA_HELPER: () => PC_DATA_HELPER5,
    VM_DATA_HELPER: () => VM_DATA_HELPER3,
    VOTING_MACHINE: () => VOTING_MACHINE4,
    VOTING_STRATEGY: () => VOTING_STRATEGY4
  });
  var CROSS_CHAIN_CONTROLLER6 = "0xF6B99959F0b5e79E1CC7062E12aF632CEb18eF0d";
  var CL_EMERGENCY_ORACLE2 = "0xDAFA1989A504c48Ee20a582f2891eeB25E2fA23F";
  var VOTING_MACHINE4 = "0xc8a2ADC4261c6b669CdFf69E717E77C9cFeB420d";
  var PAYLOADS_CONTROLLER6 = "0x401B5D0294E23637c18fcc38b1Bca814CDa2637C";
  var PC_DATA_HELPER5 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var VM_DATA_HELPER3 = "0x77976B51569896523EE215962Ee91ff236Fa50E8";
  var GRANULAR_GUARDIAN5 = "0x0D2CccD3dD420dC6DE2f24DB44aA22fADE290a02";
  var GOVERNANCE_GUARDIAN5 = "0x1A0581dd5C7C3DA4Ba1CDa7e0BcA7286afc4973b";
  var EXECUTOR_LVL_16 = "0xDf7d0e6454DB638881302729F5ba99936EaAB233";
  var VOTING_STRATEGY4 = "0x59e6CAD5d7E7b9A26a45a1d1E74C7aF008170042";
  var DATA_WAREHOUSE4 = "0xf41193E25408F652AF878c47E4401A01B5E4B682";
  var CHAIN_ID6 = 137;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Metis.mjs
  var GovernanceV3Metis_exports = {};
  __export(GovernanceV3Metis_exports, {
    CHAIN_ID: () => CHAIN_ID7,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER7,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_17,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN6,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN6,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER7,
    PC_DATA_HELPER: () => PC_DATA_HELPER6
  });
  var CROSS_CHAIN_CONTROLLER7 = "0x6fDaFb26915ABD6065a1E1501a37Ac438D877f70";
  var PAYLOADS_CONTROLLER7 = "0x2233F8A66A728FBa6E1dC95570B25360D07D5524";
  var PC_DATA_HELPER6 = "0x81d32B36380e6266e1BDd490eAC56cdB300afBe0";
  var GRANULAR_GUARDIAN6 = "0x61BE97d3a0550549f67CA7421725fA73Fa2036B5";
  var GOVERNANCE_GUARDIAN6 = "0x360c0a69Ed2912351227a0b745f890CB2eBDbcFe";
  var EXECUTOR_LVL_17 = "0x6fD45D32375d5aDB8D76275A3932c740F03a8718";
  var CHAIN_ID7 = 1088;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Base.mjs
  var GovernanceV3Base_exports = {};
  __export(GovernanceV3Base_exports, {
    CHAIN_ID: () => CHAIN_ID8,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER8,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_18,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN7,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN7,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER8,
    PC_DATA_HELPER: () => PC_DATA_HELPER7
  });
  var CROSS_CHAIN_CONTROLLER8 = "0x529467C76f234F2bD359d7ecF7c660A2846b04e2";
  var PAYLOADS_CONTROLLER8 = "0x2DC219E716793fb4b21548C0f009Ba3Af753ab01";
  var PC_DATA_HELPER7 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN7 = "0xa1c6aF35E0205f42256382C05243C543FEDBf4bB";
  var GOVERNANCE_GUARDIAN7 = "0x360c0a69Ed2912351227a0b745f890CB2eBDbcFe";
  var EXECUTOR_LVL_18 = "0x9390B1735def18560c509E2d0bc090E9d6BA257a";
  var CHAIN_ID8 = 8453;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3BNB.mjs
  var GovernanceV3BNB_exports = {};
  __export(GovernanceV3BNB_exports, {
    CHAIN_ID: () => CHAIN_ID9,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE3,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER9,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_19,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN8,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN8,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER9,
    PC_DATA_HELPER: () => PC_DATA_HELPER8
  });
  var CROSS_CHAIN_CONTROLLER9 = "0x9d33ee6543C9b2C8c183b8fb58fB089266cffA19";
  var CL_EMERGENCY_ORACLE3 = "0xcabb46FfB38c93348Df16558DF156e9f68F9F7F1";
  var PAYLOADS_CONTROLLER9 = "0xE5EF2Dd06755A97e975f7E282f828224F2C3e627";
  var PC_DATA_HELPER8 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN8 = "0xe4FB5e3F506BE0095f38004f993D16fdA8224383";
  var GOVERNANCE_GUARDIAN8 = "0x1A0581dd5C7C3DA4Ba1CDa7e0BcA7286afc4973b";
  var EXECUTOR_LVL_19 = "0x9390B1735def18560c509E2d0bc090E9d6BA257a";
  var CHAIN_ID9 = 56;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Gnosis.mjs
  var GovernanceV3Gnosis_exports = {};
  __export(GovernanceV3Gnosis_exports, {
    CHAIN_ID: () => CHAIN_ID10,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE4,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER10,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_110,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN9,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN9,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER10,
    PC_DATA_HELPER: () => PC_DATA_HELPER9
  });
  var CROSS_CHAIN_CONTROLLER10 = "0x8Dc5310fc9D3D7D1Bb3D1F686899c8F082316c9F";
  var CL_EMERGENCY_ORACLE4 = "0xF937ffAeA1363e4Fa260760bDFA2aA8Fc911F84D";
  var PAYLOADS_CONTROLLER10 = "0x9A1F491B86D09fC1484b5fab10041B189B60756b";
  var PC_DATA_HELPER9 = "0xF1c11BE0b4466728DDb7991A0Ac5265646ec9672";
  var GRANULAR_GUARDIAN9 = "0x4A9F571E3C1f2F13567bb59e38988e74d7d72602";
  var GOVERNANCE_GUARDIAN9 = "0x1A0581dd5C7C3DA4Ba1CDa7e0BcA7286afc4973b";
  var EXECUTOR_LVL_110 = "0x1dF462e2712496373A347f8ad10802a5E95f053D";
  var CHAIN_ID10 = 100;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3Scroll.mjs
  var GovernanceV3Scroll_exports = {};
  __export(GovernanceV3Scroll_exports, {
    CHAIN_ID: () => CHAIN_ID11,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER11,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_111,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN10,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN10,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER11,
    PC_DATA_HELPER: () => PC_DATA_HELPER10
  });
  var CROSS_CHAIN_CONTROLLER11 = "0x03073D3F4769f6b6604d616238fD6c636C99AD0A";
  var PAYLOADS_CONTROLLER11 = "0x6b6B41c0f8C223715f712BE83ceC3c37bbfDC3fE";
  var PC_DATA_HELPER10 = "0xf438e33dCCEE260ee4371F9dceF408b0d7DBe424";
  var GRANULAR_GUARDIAN10 = "0xa835707d28e6C37C49d661742f2Fb5987367cEd4";
  var GOVERNANCE_GUARDIAN10 = "0x1A0581dd5C7C3DA4Ba1CDa7e0BcA7286afc4973b";
  var EXECUTOR_LVL_111 = "0xc1ABF87FfAdf4908f4eC8dc54A25DCFEabAE4A24";
  var CHAIN_ID11 = 534352;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3PolygonZkEvm.mjs
  var GovernanceV3PolygonZkEvm_exports = {};
  __export(GovernanceV3PolygonZkEvm_exports, {
    CHAIN_ID: () => CHAIN_ID12,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER12,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_112,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER12,
    PC_DATA_HELPER: () => PC_DATA_HELPER11
  });
  var CROSS_CHAIN_CONTROLLER12 = "0xed7e0874526B9BB9E36C7e9472ed7ed324CEeE3B";
  var PAYLOADS_CONTROLLER12 = "0xa2d22795E0D85D4Cb14Cbb14Df7bb8fec1016615";
  var PC_DATA_HELPER11 = "0xF1c11BE0b4466728DDb7991A0Ac5265646ec9672";
  var EXECUTOR_LVL_112 = "0xe59470B3BE3293534603487E00A44C72f2CD466d";
  var CHAIN_ID12 = 1101;

  // node_modules/@bgd-labs/aave-address-book/dist/GovernanceV3ZkSync.mjs
  var GovernanceV3ZkSync_exports = {};
  __export(GovernanceV3ZkSync_exports, {
    CHAIN_ID: () => CHAIN_ID13,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER13,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_113,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN11,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN11,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER13,
    PC_DATA_HELPER: () => PC_DATA_HELPER12
  });
  var CROSS_CHAIN_CONTROLLER13 = "0x800813f4714BC7A0a95310e3fB9e4f18872CA92C";
  var PAYLOADS_CONTROLLER13 = "0x2E79349c3F5e4751E87b966812C9E65E805996F1";
  var PC_DATA_HELPER12 = "0xe28A3235DCF1Acb8397B546bd588bAAFD7081505";
  var GRANULAR_GUARDIAN11 = "0xe0e23196D42b54F262a3DE952e6B34B197D1A228";
  var GOVERNANCE_GUARDIAN11 = "0x4257bf0746D783f0D962913d7d8AFA408B62547E";
  var EXECUTOR_LVL_113 = "0x04cE39789e11a49595cD0ECEf6f4Bd54ABF4d020";
  var CHAIN_ID13 = 324;

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV1.mjs
  var AaveV1_exports = {};
  __export(AaveV1_exports, {
    ADDRESSES_PROVIDER: () => ADDRESSES_PROVIDER,
    CHAIN_ID: () => CHAIN_ID14,
    CORE: () => CORE,
    POOL: () => POOL
  });
  var ADDRESSES_PROVIDER = "0x24a42fD28C976A61Df5D00D0599C34c4f90748c8";
  var CORE = "0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3";
  var POOL = "0x398eC7346DcD622eDc5ae82352F02bE94C62d119";
  var CHAIN_ID14 = 1;

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV2EthereumAMM.mjs
  var AaveV2EthereumAMM_exports = {};
  __export(AaveV2EthereumAMM_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER,
    ASSETS: () => ASSETS,
    CHAIN_ID: () => CHAIN_ID15,
    COLLECTOR: () => COLLECTOR,
    CONFIG_ENGINE: () => CONFIG_ENGINE,
    EMERGENCY_ADMIN: () => EMERGENCY_ADMIN,
    LENDING_POOL_COLLATERAL_MANAGER: () => LENDING_POOL_COLLATERAL_MANAGER,
    LENDING_RATE_ORACLE: () => LENDING_RATE_ORACLE,
    MIGRATION_HELPER: () => MIGRATION_HELPER,
    ORACLE: () => ORACLE,
    POOL: () => POOL2,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY,
    POOL_ADMIN: () => POOL_ADMIN,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL,
    POOL_IMPL: () => POOL_IMPL,
    RATES_FACTORY: () => RATES_FACTORY,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER,
    WETH_GATEWAY: () => WETH_GATEWAY
  });
  var POOL_ADDRESSES_PROVIDER = "0xAcc030EF66f9dFEAE9CbB0cd1B25654b82cFA8d5";
  var POOL2 = "0x7937D4799803FbBe595ed57278Bc4cA21f3bFfCB";
  var POOL_IMPL = "0xb9184a4480830bf89B55b73631E287Df9079F466";
  var POOL_CONFIGURATOR = "0x23A875eDe3F1030138701683e42E9b16A7F87768";
  var POOL_CONFIGURATOR_IMPL = "0x9f3Cc7b6f5F75d97735763c22cb280dbF90f17a2";
  var ORACLE = "0xA50ba011c48153De246E5192C8f9258A2ba79Ca9";
  var LENDING_RATE_ORACLE = "0x8A32f49FFbA88aba6EFF96F45D8BD1D4b3f35c7D";
  var AAVE_PROTOCOL_DATA_PROVIDER = "0xc443AD9DDE3cecfB9dfC5736578f447aFE3590ba";
  var LENDING_POOL_COLLATERAL_MANAGER = "0x368e6441bB27159c6e8e6d3bbd9147BEcBA915E3";
  var POOL_ADMIN = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var EMERGENCY_ADMIN = "0x2CFe3ec4d5a6811f4B8067F0DE7e47DfA938Aa30";
  var COLLECTOR = "0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c";
  var CONFIG_ENGINE = "0xcfC26009618ec2Ca8787180116a37Caa354a465C";
  var MIGRATION_HELPER = "0x3cd1dFB81C50A5300C60a181ED145a7286d81e0a";
  var POOL_ADDRESSES_PROVIDER_REGISTRY = "0x52D306e36E3B6B02c153d0266ff0f85d18BCD413";
  var RATES_FACTORY = "0x6e4D068105052C3877116DCF86f5FF36B7eCa2B8";
  var UI_INCENTIVE_DATA_PROVIDER = "0xD01ab9a6577E1D84F142e44D49380e23A340387d";
  var UI_POOL_DATA_PROVIDER = "0x00e50FAB64eBB37b87df06Aa46b8B35d5f1A4e1A";
  var WALLET_BALANCE_PROVIDER = "0x8E8dAd5409E0263a51C0aB5055dA66Be28cFF922";
  var WETH_GATEWAY = "0xbe9a7B3F2f54E18D7C0a17B03ad84Ac2D1D28eAC";
  var CHAIN_ID15 = 1;
  var ASSETS = {
    WETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      A_TOKEN: "0xf9Fb4AD91812b704Ba883B11d2B576E890a6730A",
      V_TOKEN: "0xA4C273d9A0C1fe2674F0E845160d6232768a3064",
      INTEREST_RATE_STRATEGY: "0xdb838A27f91b112D722c854636F2c23720ea007E",
      ORACLE: "0x0000000000000000000000000000000000000000"
    },
    DAI: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      A_TOKEN: "0x79bE75FFC64DD58e66787E4Eae470c8a1FD08ba4",
      V_TOKEN: "0x3F4fA4937E72991367DC32687BC3278f095E7EAa",
      INTEREST_RATE_STRATEGY: "0xA57cDBfE9FA29Ad842f53100d68789999c04AA36",
      ORACLE: "0xd486FE27AAB0b3CAd1462D767292dd7a84F06E58"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      A_TOKEN: "0xd24946147829DEaA935bE2aD85A3291dbf109c80",
      V_TOKEN: "0xCFDC74b97b69319683fec2A4Ef95c4Ab739F1B12",
      INTEREST_RATE_STRATEGY: "0xA57cDBfE9FA29Ad842f53100d68789999c04AA36",
      ORACLE: "0x9f2817536Cfd48BF59243d9D8802a5670F5Be05d"
    },
    USDT: {
      decimals: 6,
      id: 3,
      UNDERLYING: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      A_TOKEN: "0x17a79792Fe6fE5C95dFE95Fe3fCEE3CAf4fE4Cb7",
      V_TOKEN: "0xDcFE9BfC246b02Da384de757464a35eFCa402797",
      INTEREST_RATE_STRATEGY: "0x2223cd25f60F3e4035fcEfE44612773AFEbFd8ab",
      ORACLE: "0xEfF57B0c8987eea8C491bdDD2F64c1c21297Cf74"
    },
    WBTC: {
      decimals: 8,
      id: 4,
      UNDERLYING: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      A_TOKEN: "0x13B2f6928D7204328b0E8E4BCd0379aA06EA21FA",
      V_TOKEN: "0x3b99fdaFdfE70d65101a4ba8cDC35dAFbD26375f",
      INTEREST_RATE_STRATEGY: "0xd102F58BF7B2509A2d8664be7C4A90102526B5c6",
      ORACLE: "0xFD858c8bC5ac5e10f01018bC78471bb0DC392247"
    },
    UNI_DAI_WETH: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11",
      A_TOKEN: "0x9303EabC860a743aABcc3A1629014CaBcc3F8D36",
      V_TOKEN: "0x23bcc861b989762275165d08B127911F09c71628",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x66A6b87A18DB78086acda75b7720DC47CdABcC05"
    },
    UNI_WBTC_WETH: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xBb2b8038a1640196FbE3e38816F3e67Cba72D940",
      A_TOKEN: "0xc58F53A8adff2fB4eb16ED56635772075E2EE123",
      V_TOKEN: "0x02aAeB4C7736177242Ee0f71f6f6A0F057Aba87d",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x7004BB6F2013F13C54899309cCa029B49707E547"
    },
    UNI_AAVE_WETH: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0xDFC14d2Af169B0D36C4EFF567Ada9b2E0CAE044f",
      A_TOKEN: "0xe59d2FF6995a926A574390824a657eEd36801E55",
      V_TOKEN: "0x859ED7D9E92d1fe42fF95C3BC3a62F7cB59C373E",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0xB525547968610395B60085bDc8033FFeaEaa5F64"
    },
    UNI_BAT_WETH: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0xB6909B960DbbE7392D405429eB2b3649752b4838",
      A_TOKEN: "0xA1B0edF4460CC4d8bFAA18Ed871bFF15E5b57Eb4",
      V_TOKEN: "0x3Fbef89A21Dc836275bC912849627b33c61b09b4",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0xB394D8a1CE721630Cbea8Ec110DCEf0D283EDE3a"
    },
    UNI_DAI_USDC: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5",
      A_TOKEN: "0xE340B25fE32B1011616bb8EC495A4d503e322177",
      V_TOKEN: "0x925E3FDd927E20e33C3177C4ff6fb72aD1133C87",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x3B148Fa5E8297DB64262442052b227328730EA81"
    },
    UNI_CRV_WETH: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0x3dA1313aE46132A397D90d95B1424A9A7e3e0fCE",
      A_TOKEN: "0x0ea20e7fFB006d4Cfe84df2F72d8c7bD89247DB0",
      V_TOKEN: "0xF3f1a76cA6356a908CdCdE6b2AC2eaace3739Cd0",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x10F7078e2f29802D2AC78045F61A69aE0883535A"
    },
    UNI_LINK_WETH: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0xa2107FA5B38d9bbd2C461D6EDf11B11A50F6b974",
      A_TOKEN: "0xb8db81B84d30E2387de0FF330420A4AAA6688134",
      V_TOKEN: "0xeDe4052ed8e1F422F4E5062c679f6B18693fEcdc",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x30adCEfA5d483284FD79E1eFd54ED3e0A8eaA632"
    },
    UNI_MKR_WETH: {
      decimals: 18,
      id: 12,
      UNDERLYING: "0xC2aDdA861F89bBB333c90c492cB837741916A225",
      A_TOKEN: "0x370adc71f67f581158Dc56f539dF5F399128Ddf9",
      V_TOKEN: "0xf36C394775285F89bBBDF09533421E3e81e8447c",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0xEBF4A448ff3D835F8FA883941a3E9D5E74B40B5E"
    },
    UNI_REN_WETH: {
      decimals: 18,
      id: 13,
      UNDERLYING: "0x8Bd1661Da98EBDd3BD080F0bE4e6d9bE8cE9858c",
      A_TOKEN: "0xA9e201A4e269d6cd5E9F0FcbcB78520cf815878B",
      V_TOKEN: "0x2A8d5B1c1de15bfcd5EC41368C0295c60D8Da83c",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0xe2f7C06906A9dB063C28EB5c71B6Ab454e5222dD"
    },
    UNI_SNX_WETH: {
      decimals: 18,
      id: 14,
      UNDERLYING: "0x43AE24960e5534731Fc831386c07755A2dc33D47",
      A_TOKEN: "0x38E491A71291CD43E8DE63b7253E482622184894",
      V_TOKEN: "0xfd15008efA339A2390B48d2E0Ca8Abd523b406d3",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x29bfee7E90572Abf1088a58a145a10D051b78E46"
    },
    UNI_UNI_WETH: {
      decimals: 18,
      id: 15,
      UNDERLYING: "0xd3d2E2692501A5c9Ca623199D38826e513033a17",
      A_TOKEN: "0x3D26dcd840fCC8e4B2193AcE8A092e4a65832F9f",
      V_TOKEN: "0x0D878FbB01fbEEa7ddEFb896d56f1D3167af919F",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0xC2E93e8121237A885A00627975eB06C7BF9808d6"
    },
    UNI_USDC_WETH: {
      decimals: 18,
      id: 16,
      UNDERLYING: "0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc",
      A_TOKEN: "0x391E86e2C002C70dEe155eAceB88F7A3c38f5976",
      V_TOKEN: "0x26625d1dDf520fC8D975cc68eC6E0391D9d3Df61",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x71c4a2173CE3620982DC8A7D870297533360Da4E"
    },
    UNI_WBTC_USDC: {
      decimals: 18,
      id: 17,
      UNDERLYING: "0x004375Dff511095CC5A197A54140a24eFEF3A416",
      A_TOKEN: "0x2365a4890eD8965E564B7E2D27C38Ba67Fec4C6F",
      V_TOKEN: "0x36dA0C5dC23397CBf9D13BbD74E93C04f99633Af",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x11f4ba2227F21Dc2A9F0b0e6Ea740369d580a212"
    },
    UNI_YFI_WETH: {
      decimals: 18,
      id: 18,
      UNDERLYING: "0x2fDbAdf3C4D5A8666Bc06645B8358ab803996E28",
      A_TOKEN: "0x5394794Be8b6eD5572FCd6b27103F46b5F390E8f",
      V_TOKEN: "0xDf70Bdf01a3eBcd0D918FF97390852A914a92Df7",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x664223b8Bb0934aE0970e601F452f75AaCe9Aa2A"
    },
    BPT_WBTC_WETH: {
      decimals: 18,
      id: 19,
      UNDERLYING: "0x1efF8aF5D577060BA4ac8A29A13525bb0Ee2A3D5",
      A_TOKEN: "0x358bD0d980E031E23ebA9AA793926857703783BD",
      V_TOKEN: "0xF655DF3832859cfB0AcfD88eDff3452b9Aa6Db24",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x4CA8D8fC2b4fCe8A2dcB71Da884bba042d48E067"
    },
    BPT_BAL_WETH: {
      decimals: 18,
      id: 20,
      UNDERLYING: "0x59A19D8c652FA0284f44113D0ff9aBa70bd46fB4",
      A_TOKEN: "0xd109b2A304587569c84308c55465cd9fF0317bFB",
      V_TOKEN: "0xF41A5Cc7a61519B08056176d7B4b87AB34dF55AD",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x2e4e78936b100be6Ef85BCEf7FB25bC770B02B85"
    },
    GUNI_DAI_USDC: {
      decimals: 18,
      id: 21,
      UNDERLYING: "0x50379f632ca68D36E50cfBC8F78fe16bd1499d1e",
      A_TOKEN: "0xd145c6ae8931ed5Bca9b5f5B7dA5991F5aB63B5c",
      V_TOKEN: "0x40533CC601Ec5b79B00D76348ADc0c81d93d926D",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x7843eA2E3e60b24cc12B56C5627Adc7F9f0749D6"
    },
    GUNI_USDC_USDT: {
      decimals: 18,
      id: 22,
      UNDERLYING: "0xD2eeC91055F07fE24C9cCB25828ecfEFd4be0c41",
      A_TOKEN: "0xCa5DFDABBfFD58cfD49A9f78Ca52eC8e0591a3C5",
      V_TOKEN: "0x0B7c7d9c5548A23D0455d1edeC541cc2AD955a9d",
      INTEREST_RATE_STRATEGY: "0x52E39422cd86a12a13773D86af5FdBF5665989aD",
      ORACLE: "0x399e3bb2BBd49c570aa6edc6ac390E0D0aCbbD5e"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV2EthereumArc.mjs
  var AaveV2EthereumArc_exports = {};
  __export(AaveV2EthereumArc_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER2,
    ASSETS: () => ASSETS2,
    CHAIN_ID: () => CHAIN_ID16,
    COLLECTOR: () => COLLECTOR2,
    EMERGENCY_ADMIN: () => EMERGENCY_ADMIN2,
    LENDING_POOL_COLLATERAL_MANAGER: () => LENDING_POOL_COLLATERAL_MANAGER2,
    LENDING_RATE_ORACLE: () => LENDING_RATE_ORACLE2,
    ORACLE: () => ORACLE2,
    PERMISSION_MANAGER: () => PERMISSION_MANAGER,
    POOL: () => POOL3,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER2,
    POOL_ADMIN: () => POOL_ADMIN2,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR2,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL2,
    POOL_IMPL: () => POOL_IMPL2
  });
  var POOL_ADDRESSES_PROVIDER2 = "0x6FdfafB66d39cD72CFE7984D3Bbcc76632faAb00";
  var POOL3 = "0x37D7306019a38Af123e4b245Eb6C28AF552e0bB0";
  var POOL_IMPL2 = "0xfbF029508c061B440D0cF7Fd639e77Fb2E196241";
  var POOL_CONFIGURATOR2 = "0x4e1c7865e7BE78A7748724Fa0409e88dc14E67aA";
  var POOL_CONFIGURATOR_IMPL2 = "0x8e5E28f273E3a6612A9C5d6F16aa67DA156042F4";
  var ORACLE2 = "0xB8a7bc0d13B1f5460513040a97F404b4fea7D2f3";
  var LENDING_RATE_ORACLE2 = "0xfA3c34d734fe0106C87917683ca45dffBe3b3B00";
  var AAVE_PROTOCOL_DATA_PROVIDER2 = "0x71B53fC437cCD988b1b89B1D4605c3c3d0C810ea";
  var LENDING_POOL_COLLATERAL_MANAGER2 = "0x837696219C9a3775a856BEBC02DB1fA918C8a46e";
  var POOL_ADMIN2 = "0xAce1d11d836cb3F51Ef658FD4D353fFb3c301218";
  var EMERGENCY_ADMIN2 = "0x33B09130b035d6D7e57d76fEa0873d9545FA7557";
  var COLLECTOR2 = "0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c";
  var PERMISSION_MANAGER = "0xF4a1F5fEA79C3609514A417425971FadC10eCfBE";
  var CHAIN_ID16 = 1;
  var ASSETS2 = {
    USDC: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      A_TOKEN: "0xd35f648C3C7f17cd1Ba92e5eac991E3EfcD4566d",
      V_TOKEN: "0xe8D876034F96081063cD57Cd87b94a156b4E03E1",
      INTEREST_RATE_STRATEGY: "0x81D7Bb11D682005B3Fca0Ef48381263BeC9b2d1C",
      ORACLE: "0x986b5E1e1755e3C2440e960477f25201B0a8bbD4"
    },
    WBTC: {
      decimals: 8,
      id: 1,
      UNDERLYING: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      A_TOKEN: "0xe6d6E7dA65A2C18109Ff56B7CBBdc7B706Fc13F8",
      V_TOKEN: "0xc371FB4513c23Fc962fe23B12cFBD75E1D37ED91",
      INTEREST_RATE_STRATEGY: "0x1205ACe6831E5518E00A16f1820cD73ce198bEF6",
      ORACLE: "0xdeb288F737066589598e9214E782fa5A8eD689e8"
    },
    WETH: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      A_TOKEN: "0x319190E3Bbc595602A9E63B2bCfB61c6634355b1",
      V_TOKEN: "0x932167279A4ed3b879bA7eDdC85Aa83551f3989D",
      INTEREST_RATE_STRATEGY: "0xC2B0945C6D0A842eC2a1345f08c4ef2060452B6A",
      ORACLE: "0x0000000000000000000000000000000000000000"
    },
    AAVE: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
      A_TOKEN: "0x89eFaC495C65d43619c661df654ec64fc10C0A75",
      V_TOKEN: "0x0ac4c7790BC96923b71BfCee44a6923fd085E0c8",
      INTEREST_RATE_STRATEGY: "0x5E4b5f5eb05E244632e0eA584525F11Dd03f5B38",
      ORACLE: "0x6Df09E975c830ECae5bd4eD9d90f3A95a4f88012"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV2Ethereum.mjs
  var AaveV2Ethereum_exports = {};
  __export(AaveV2Ethereum_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER3,
    ASSETS: () => ASSETS3,
    CHAIN_ID: () => CHAIN_ID17,
    COLLECTOR: () => COLLECTOR3,
    CONFIG_ENGINE: () => CONFIG_ENGINE2,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER,
    EMERGENCY_ADMIN: () => EMERGENCY_ADMIN3,
    EMISSION_MANAGER: () => EMISSION_MANAGER,
    LENDING_POOL_COLLATERAL_MANAGER: () => LENDING_POOL_COLLATERAL_MANAGER3,
    LENDING_RATE_ORACLE: () => LENDING_RATE_ORACLE3,
    MIGRATION_HELPER: () => MIGRATION_HELPER2,
    ORACLE: () => ORACLE3,
    POOL: () => POOL4,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER3,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY2,
    POOL_ADMIN: () => POOL_ADMIN3,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR3,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL3,
    POOL_IMPL: () => POOL_IMPL3,
    RATES_FACTORY: () => RATES_FACTORY2,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER2,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER2,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER2,
    WETH_GATEWAY: () => WETH_GATEWAY2
  });
  var POOL_ADDRESSES_PROVIDER3 = "0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5";
  var POOL4 = "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9";
  var POOL_IMPL3 = "0x02D84abD89Ee9DB409572f19B6e1596c301F3c81";
  var POOL_CONFIGURATOR3 = "0x311Bb771e4F8952E6Da169b425E7e92d6Ac45756";
  var POOL_CONFIGURATOR_IMPL3 = "0x246ca67522dF5895cD6cf8807Ec161954ea1bA61";
  var ORACLE3 = "0xA50ba011c48153De246E5192C8f9258A2ba79Ca9";
  var LENDING_RATE_ORACLE3 = "0x8A32f49FFbA88aba6EFF96F45D8BD1D4b3f35c7D";
  var AAVE_PROTOCOL_DATA_PROVIDER3 = "0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d";
  var LENDING_POOL_COLLATERAL_MANAGER3 = "0x368e6441bB27159c6e8e6d3bbd9147BEcBA915E3";
  var POOL_ADMIN3 = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var EMERGENCY_ADMIN3 = "0x2CFe3ec4d5a6811f4B8067F0DE7e47DfA938Aa30";
  var COLLECTOR3 = "0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c";
  var DEFAULT_INCENTIVES_CONTROLLER = "0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5";
  var EMISSION_MANAGER = "0xEE56e2B3D491590B5b31738cC34d5232F378a8D5";
  var DEBT_SWAP_ADAPTER = "0xAf5c88245CD02Ff3DF332EF1E1FfD5bc5D1d87cd";
  var CONFIG_ENGINE2 = "0x9eCed0293e7B73CFf4a2b4F9C82aAc8346158bd9";
  var MIGRATION_HELPER2 = "0xB748952c7BC638F31775245964707Bcc5DDFabFC";
  var POOL_ADDRESSES_PROVIDER_REGISTRY2 = "0x52D306e36E3B6B02c153d0266ff0f85d18BCD413";
  var RATES_FACTORY2 = "0xbD37610BBB1ddc2a22797F7e3f531B59902b7bA7";
  var REPAY_WITH_COLLATERAL_ADAPTER = "0x80Aca0C645fEdABaa20fd2Bf0Daf57885A309FE6";
  var SWAP_COLLATERAL_ADAPTER = "0x135896DE8421be2ec868E0b811006171D9df802A";
  var UI_INCENTIVE_DATA_PROVIDER2 = "0xD01ab9a6577E1D84F142e44D49380e23A340387d";
  var UI_POOL_DATA_PROVIDER2 = "0x00e50FAB64eBB37b87df06Aa46b8B35d5f1A4e1A";
  var WALLET_BALANCE_PROVIDER2 = "0x8E8dAd5409E0263a51C0aB5055dA66Be28cFF922";
  var WETH_GATEWAY2 = "0xa0d9C1E9E48Ca30c8d8C3B5D69FF5dc1f6DFfC24";
  var CHAIN_ID17 = 1;
  var ASSETS3 = {
    USDT: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      A_TOKEN: "0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811",
      V_TOKEN: "0x531842cEbbdD378f8ee36D171d6cC9C4fcf475Ec",
      INTEREST_RATE_STRATEGY: "0xa8850b94E4A0B881c3b08aE065D189D87F34F175",
      ORACLE: "0xEfF57B0c8987eea8C491bdDD2F64c1c21297Cf74"
    },
    WBTC: {
      decimals: 8,
      id: 1,
      UNDERLYING: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      A_TOKEN: "0x9ff58f4fFB29fA2266Ab25e75e2A8b3503311656",
      V_TOKEN: "0x9c39809Dec7F95F5e0713634a4D0701329B3b4d2",
      INTEREST_RATE_STRATEGY: "0x32f3A6134590fc2d9440663d35a2F0a6265F04c4",
      ORACLE: "0xFD858c8bC5ac5e10f01018bC78471bb0DC392247"
    },
    WETH: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      A_TOKEN: "0x030bA81f1c18d280636F32af80b9AAd02Cf0854e",
      V_TOKEN: "0xF63B34710400CAd3e044cFfDcAb00a0f32E33eCf",
      INTEREST_RATE_STRATEGY: "0xb8975328Aa52c00B9Ec1e11e518C4900f2e6C62a",
      ORACLE: "0x0000000000000000000000000000000000000000"
    },
    YFI: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e",
      A_TOKEN: "0x5165d24277cD063F5ac44Efd447B27025e888f37",
      V_TOKEN: "0x7EbD09022Be45AD993BAA1CEc61166Fcc8644d97",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x7c5d4F8345e66f68099581Db340cd65B078C41f4"
    },
    ZRX: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xE41d2489571d322189246DaFA5ebDe1F4699F498",
      A_TOKEN: "0xDf7FF54aAcAcbFf42dfe29DD6144A69b629f8C9e",
      V_TOKEN: "0x85791D117A392097590bDeD3bD5abB8d5A20491A",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x2Da4983a622a8498bb1a21FaE9D8F6C664939962"
    },
    UNI: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
      A_TOKEN: "0xB9D7CB55f463405CDfBe4E90a6D2Df01C2B92BF1",
      V_TOKEN: "0x5BdB050A92CADcCfCDcCCBFC17204a1C9cC0Ab73",
      INTEREST_RATE_STRATEGY: "0x87cCa171a2125efca9868F9Bc1FfD7B7c80dC5a3",
      ORACLE: "0xD6aA3D25116d8dA79Ea0246c4826EB951872e02e"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
      A_TOKEN: "0xFFC97d72E13E01096502Cb8Eb52dEe56f74DAD7B",
      V_TOKEN: "0xF7DBA49d571745D9d7fcb56225B05BEA803EBf3C",
      INTEREST_RATE_STRATEGY: "0xd4cA26F2496195C4F886D464D8578368236bB747",
      ORACLE: "0x6Df09E975c830ECae5bd4eD9d90f3A95a4f88012"
    },
    BAT: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x0D8775F648430679A709E98d2b0Cb6250d2887EF",
      A_TOKEN: "0x05Ec93c0365baAeAbF7AefFb0972ea7ECdD39CF1",
      V_TOKEN: "0xfc218A6Dfe6901CB34B1a5281FC6f1b8e7E56877",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x0d16d4528239e9ee52fa531af613AcdB23D88c94"
    },
    BUSD: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x4Fabb145d64652a948d72533023f6E7A623C7C53",
      A_TOKEN: "0xA361718326c15715591c299427c62086F69923D9",
      V_TOKEN: "0xbA429f7011c9fa04cDd46a2Da24dc0FF0aC6099c",
      INTEREST_RATE_STRATEGY: "0x65A3De6d805c2A25A8E53e69da6A5a11848f25b3",
      ORACLE: "0x378E959C0eCBbA793217913cE1D8745f6d6B7aC7"
    },
    DAI: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      A_TOKEN: "0x028171bCA77440897B824Ca71D1c56caC55b68A3",
      V_TOKEN: "0x6C3c78838c761c6Ac7bE9F59fe808ea2A6E4379d",
      INTEREST_RATE_STRATEGY: "0xA939B1f36E9a14B044B8149933184a18E0dFC17D",
      ORACLE: "0xd486FE27AAB0b3CAd1462D767292dd7a84F06E58"
    },
    ENJ: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c",
      A_TOKEN: "0xaC6Df26a590F08dcC95D5a4705ae8abbc88509Ef",
      V_TOKEN: "0x38995F292a6E31b78203254fE1cdd5Ca1010A446",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x24D9aB51950F3d62E9144fdC2f3135DAA6Ce8D1B"
    },
    KNC: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0xdd974D5C2e2928deA5F71b9825b8b646686BD200",
      A_TOKEN: "0x39C6b3e42d6A679d7D776778Fe880BC9487C2EDA",
      V_TOKEN: "0x6B05D1c608015Ccb8e205A690cB86773A96F39f1",
      INTEREST_RATE_STRATEGY: "0xeB65a3163Fd8900F4fE9a044e18966706b69A74D",
      ORACLE: "0x656c0544eF4C98A6a98491833A89204Abb045d6b"
    },
    LINK: {
      decimals: 18,
      id: 12,
      UNDERLYING: "0x514910771AF9Ca656af840dff83E8264EcF986CA",
      A_TOKEN: "0xa06bC25B5805d5F8d82847D191Cb4Af5A3e873E0",
      V_TOKEN: "0x0b8f12b1788BFdE65Aa1ca52E3e9F3Ba401be16D",
      INTEREST_RATE_STRATEGY: "0xED6547b83276B076B771B88FcCbD68BDeDb3927f",
      ORACLE: "0xDC530D9457755926550b59e8ECcdaE7624181557"
    },
    MANA: {
      decimals: 18,
      id: 13,
      UNDERLYING: "0x0F5D2fB29fb7d3CFeE444a200298f468908cC942",
      A_TOKEN: "0xa685a61171bb30d4072B338c80Cb7b2c865c873E",
      V_TOKEN: "0x0A68976301e46Ca6Ce7410DB28883E309EA0D352",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x82A44D92D6c329826dc557c5E1Be6ebeC5D5FeB9"
    },
    MKR: {
      decimals: 18,
      id: 14,
      UNDERLYING: "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
      A_TOKEN: "0xc713e5E149D5D0715DcD1c156a020976e7E56B88",
      V_TOKEN: "0xba728eAd5e496BE00DCF66F650b6d7758eCB50f8",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x24551a8Fb2A7211A25a17B1481f043A8a8adC7f2"
    },
    REN: {
      decimals: 18,
      id: 15,
      UNDERLYING: "0x408e41876cCCDC0F92210600ef50372656052a38",
      A_TOKEN: "0xCC12AbE4ff81c9378D670De1b57F8e0Dd228D77a",
      V_TOKEN: "0xcd9D82d33bd737De215cDac57FE2F7f04DF77FE0",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0x3147D7203354Dc06D9fd350c7a2437bcA92387a4"
    },
    SNX: {
      decimals: 18,
      id: 16,
      UNDERLYING: "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
      A_TOKEN: "0x35f6B052C598d933D69A4EEC4D04c73A191fE6c2",
      V_TOKEN: "0x267EB8Cf715455517F9BD5834AeAE3CeA1EBdbD8",
      INTEREST_RATE_STRATEGY: "0xB2D822cAdb9040F3164829BC34e41a93cA3E01e5",
      ORACLE: "0x79291A9d692Df95334B1a0B3B4AE6bC606782f8c"
    },
    sUSD: {
      decimals: 18,
      id: 17,
      UNDERLYING: "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
      A_TOKEN: "0x6C5024Cd4F8A59110119C56f8933403A539555EB",
      V_TOKEN: "0xdC6a3Ab17299D9C2A412B0e0a4C1f55446AE0817",
      INTEREST_RATE_STRATEGY: "0x2Ce27f7a2DC17614421b9229158DE54A56d013E8",
      ORACLE: "0x00753D870Ceda60b38A9efeb47a724160BD8A749"
    },
    TUSD: {
      decimals: 18,
      id: 18,
      UNDERLYING: "0x0000000000085d4780B73119b644AE5ecd22b376",
      A_TOKEN: "0x101cc05f4A51C0319f570d5E146a8C625198e636",
      V_TOKEN: "0x01C0eb1f8c6F1C1bF74ae028697ce7AA2a8b0E92",
      INTEREST_RATE_STRATEGY: "0x65A3De6d805c2A25A8E53e69da6A5a11848f25b3",
      ORACLE: "0x65f05c3bC078bf24EdeaCFD48D6312c103AC4a61"
    },
    USDC: {
      decimals: 6,
      id: 19,
      UNDERLYING: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      A_TOKEN: "0xBcca60bB61934080951369a648Fb03DF4F96263C",
      V_TOKEN: "0x619beb58998eD2278e08620f97007e1116D5D25b",
      INTEREST_RATE_STRATEGY: "0x6a8C8119b2BA9460162B8C999f5A8C84f28a033f",
      ORACLE: "0x9f2817536Cfd48BF59243d9D8802a5670F5Be05d"
    },
    CRV: {
      decimals: 18,
      id: 20,
      UNDERLYING: "0xD533a949740bb3306d119CC777fa900bA034cd52",
      A_TOKEN: "0x8dAE6Cb04688C62d939ed9B68d32Bc62e49970b1",
      V_TOKEN: "0x00ad8eBF64F141f1C81e9f8f792d3d1631c6c684",
      INTEREST_RATE_STRATEGY: "0x35FE8C9924718f286463e659be35b4122eEe907F",
      ORACLE: "0x8a12Be339B0cD1829b91Adc01977caa5E9ac121e"
    },
    GUSD: {
      decimals: 2,
      id: 21,
      UNDERLYING: "0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd",
      A_TOKEN: "0xD37EE7e4f452C6638c96536e68090De8cBcdb583",
      V_TOKEN: "0x279AF5b99540c1A3A7E3CDd326e19659401eF99e",
      INTEREST_RATE_STRATEGY: "0x11Ef01bc8d774a5FE6F4Bcd4bafd187D27CD99AF",
      ORACLE: "0xEc6f4Cd64d28Ef32507e2dc399948aAe9Bbedd7e"
    },
    BAL: {
      decimals: 18,
      id: 22,
      UNDERLYING: "0xba100000625a3754423978a60c9317c58a424e3D",
      A_TOKEN: "0x272F97b7a56a387aE942350bBC7Df5700f8a4576",
      V_TOKEN: "0x13210D4Fe0d5402bd7Ecbc4B5bC5cFcA3b71adB0",
      INTEREST_RATE_STRATEGY: "0xb873ec463CAC50112B0e14d060fbc4192406279f",
      ORACLE: "0xC1438AA3823A6Ba0C159CfA8D98dF5A994bA120b"
    },
    xSUSHI: {
      decimals: 18,
      id: 23,
      UNDERLYING: "0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272",
      A_TOKEN: "0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a",
      V_TOKEN: "0xfAFEDF95E21184E3d880bd56D4806c4b8d31c69A",
      INTEREST_RATE_STRATEGY: "0x6855E5544Cd803BF24c9612b3F12C009116B0ee1",
      ORACLE: "0xF05D9B6C08757EAcb1fbec18e36A1B7566a13DEB"
    },
    renFIL: {
      decimals: 18,
      id: 24,
      UNDERLYING: "0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5",
      A_TOKEN: "0x514cd6756CCBe28772d4Cb81bC3156BA9d1744aa",
      V_TOKEN: "0x348e2eBD5E962854871874E444F4122399c02755",
      INTEREST_RATE_STRATEGY: "0x311C866D55456e465e314A3E9830276B438A73f0",
      ORACLE: "0x0606Be69451B1C9861Ac6b3626b99093b713E801"
    },
    RAI: {
      decimals: 18,
      id: 25,
      UNDERLYING: "0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919",
      A_TOKEN: "0xc9BC48c72154ef3e5425641a3c747242112a46AF",
      V_TOKEN: "0xB5385132EE8321977FfF44b60cDE9fE9AB0B4e6b",
      INTEREST_RATE_STRATEGY: "0xc83cDb49F234EC6666D7857B3EAa1302b109394C",
      ORACLE: "0x4ad7B025127e89263242aB68F0f9c4E5C033B489"
    },
    AMPL: {
      decimals: 9,
      id: 26,
      UNDERLYING: "0xD46bA6D942050d489DBd938a2C909A5d5039A161",
      A_TOKEN: "0x1E6bb68Acec8fefBD87D192bE09bb274170a0548",
      V_TOKEN: "0xf013D90E4e4E3Baf420dFea60735e75dbd42f1e1",
      INTEREST_RATE_STRATEGY: "0xB2D822cAdb9040F3164829BC34e41a93cA3E01e5",
      ORACLE: "0x492575FDD11a0fCf2C6C719867890a7648d526eB"
    },
    USDP: {
      decimals: 18,
      id: 27,
      UNDERLYING: "0x8E870D67F660D95d5be530380D0eC0bd388289E1",
      A_TOKEN: "0x2e8F4bdbE3d47d7d7DE490437AeA9915D930F1A3",
      V_TOKEN: "0xFDb93B3b10936cf81FA59A02A7523B6e2149b2B7",
      INTEREST_RATE_STRATEGY: "0x2Ce27f7a2DC17614421b9229158DE54A56d013E8",
      ORACLE: "0x776292E6eb3eD2D28C0CFa77BaB9378A771424Be"
    },
    DPI: {
      decimals: 18,
      id: 28,
      UNDERLYING: "0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b",
      A_TOKEN: "0x6F634c6135D2EBD550000ac92F494F9CB8183dAe",
      V_TOKEN: "0x4dDff5885a67E4EffeC55875a3977D7E60F82ae0",
      INTEREST_RATE_STRATEGY: "0xA12D7bB07379ad6de4497B80088e28D4C00932D1",
      ORACLE: "0x2fe9EcF3024B5A63f50Ec0eFC53b8fF2C09F2E93"
    },
    FRAX: {
      decimals: 18,
      id: 29,
      UNDERLYING: "0x853d955aCEf822Db058eb8505911ED77F175b99e",
      A_TOKEN: "0xd4937682df3C8aEF4FE912A96A74121C0829E664",
      V_TOKEN: "0xfE8F19B17fFeF0fDbfe2671F248903055AFAA8Ca",
      INTEREST_RATE_STRATEGY: "0x2Ce27f7a2DC17614421b9229158DE54A56d013E8",
      ORACLE: "0x1f7e2ccd6702a5c587160390A52111aF6020ac92"
    },
    FEI: {
      decimals: 18,
      id: 30,
      UNDERLYING: "0x956F47F50A910163D8BF957Cf5846D573E7f87CA",
      A_TOKEN: "0x683923dB55Fead99A79Fa01A27EeC3cB19679cC3",
      V_TOKEN: "0xC2e10006AccAb7B45D9184FcF5b7EC7763f5BaAe",
      INTEREST_RATE_STRATEGY: "0x795dC59EA6472Dfa4298A454C6E8Dcb005643A13",
      ORACLE: "0xac3AF0f4A52C577Cc2C241dF51a01FDe3D06D93B"
    },
    stETH: {
      decimals: 18,
      id: 31,
      UNDERLYING: "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
      A_TOKEN: "0x1982b2F5814301d4e9a8b0201555376e62F82428",
      V_TOKEN: "0xA9DEAc9f00Dc4310c35603FCD9D34d1A750f81Db",
      INTEREST_RATE_STRATEGY: "0xff04ed5f7a6C3a0F1e5Ea20617F8C6f513D5A77c",
      ORACLE: "0xADE6CBA6c45aa8E9d0337cAc3D2619eabc39D901"
    },
    ENS: {
      decimals: 18,
      id: 32,
      UNDERLYING: "0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",
      A_TOKEN: "0x9a14e23A58edf4EFDcB360f68cd1b95ce2081a2F",
      V_TOKEN: "0x176808047cc9b7A2C9AE202c593ED42dDD7C0D13",
      INTEREST_RATE_STRATEGY: "0x6855E5544Cd803BF24c9612b3F12C009116B0ee1",
      ORACLE: "0xd4641b75015E6536E8102D98479568D05D7123Db"
    },
    UST: {
      decimals: 6,
      id: 33,
      UNDERLYING: "0xa693B19d2931d498c5B318dF961919BB4aee87a5",
      A_TOKEN: "0xc2e2152647F4C26028482Efaf64b2Aa28779EFC4",
      V_TOKEN: "0xaf32001cf2E66C4C3af4205F6EA77112AA4160FE",
      INTEREST_RATE_STRATEGY: "0xc83cDb49F234EC6666D7857B3EAa1302b109394C",
      ORACLE: "0x51d08b4912d33d051b57d784c7CAfC0cD42c0f45"
    },
    CVX: {
      decimals: 18,
      id: 34,
      UNDERLYING: "0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B",
      A_TOKEN: "0x952749E07d7157bb9644A894dFAF3Bad5eF6D918",
      V_TOKEN: "0x4Ae5E4409C6Dbc84A00f9f89e4ba096603fb7d50",
      INTEREST_RATE_STRATEGY: "0x2c206fa2127aB7f1CE3dc987daf683Ed5B9CF069",
      ORACLE: "0xC9CbF687f43176B302F03f5e58470b77D07c61c6"
    },
    ONE_INCH: {
      decimals: 18,
      id: 35,
      UNDERLYING: "0x111111111117dC0aa78b770fA6A738034120C302",
      A_TOKEN: "0xB29130CBcC3F791f077eAdE0266168E808E5151e",
      V_TOKEN: "0xD7896C1B9b4455aFf31473908eB15796ad2295DA",
      INTEREST_RATE_STRATEGY: "0x6855E5544Cd803BF24c9612b3F12C009116B0ee1",
      ORACLE: "0x72AFAECF99C9d9C8215fF44C77B94B99C28741e8"
    },
    LUSD: {
      decimals: 18,
      id: 36,
      UNDERLYING: "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
      A_TOKEN: "0xce1871f791548600cb59efbefFC9c38719142079",
      V_TOKEN: "0x411066489AB40442d6Fc215aD7c64224120D33F2",
      INTEREST_RATE_STRATEGY: "0xe706615371Ba37a3134FEb28D0b4Aac74e5976bb",
      ORACLE: "0x3a1b874ec865c466046cf131516d26Cc228dF0b3"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV2Polygon.mjs
  var AaveV2Polygon_exports = {};
  __export(AaveV2Polygon_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER4,
    ASSETS: () => ASSETS4,
    CHAIN_ID: () => CHAIN_ID18,
    COLLECTOR: () => COLLECTOR4,
    CONFIG_ENGINE: () => CONFIG_ENGINE3,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER2,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER2,
    EMERGENCY_ADMIN: () => EMERGENCY_ADMIN4,
    EMISSION_MANAGER: () => EMISSION_MANAGER2,
    LENDING_POOL_COLLATERAL_MANAGER: () => LENDING_POOL_COLLATERAL_MANAGER4,
    LENDING_RATE_ORACLE: () => LENDING_RATE_ORACLE4,
    MIGRATION_HELPER: () => MIGRATION_HELPER3,
    ORACLE: () => ORACLE4,
    POOL: () => POOL5,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER4,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY3,
    POOL_ADMIN: () => POOL_ADMIN4,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR4,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL4,
    POOL_IMPL: () => POOL_IMPL4,
    RATES_FACTORY: () => RATES_FACTORY3,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER2,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER2,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER3,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER3,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER3,
    WETH_GATEWAY: () => WETH_GATEWAY3
  });
  var POOL_ADDRESSES_PROVIDER4 = "0xd05e3E715d945B59290df0ae8eF85c1BdB684744";
  var POOL5 = "0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf";
  var POOL_IMPL4 = "0x1685D81212580DD4cDA287616C2f6F4794927e18";
  var POOL_CONFIGURATOR4 = "0x26db2B833021583566323E3b8985999981b9F1F3";
  var POOL_CONFIGURATOR_IMPL4 = "0x56C8Aa7e4fCAbaaD5e87d6847D0901134939A13a";
  var ORACLE4 = "0x0229F777B0fAb107F9591a41d5F02E4e98dB6f2d";
  var LENDING_RATE_ORACLE4 = "0x17F73aEaD876CC4059089ff815EDA37052960dFB";
  var AAVE_PROTOCOL_DATA_PROVIDER4 = "0x7551b5D2763519d4e37e8B81929D336De671d46d";
  var LENDING_POOL_COLLATERAL_MANAGER4 = "0xAdDb96Fb6A795faf042DD25BD4710267C41D1F74";
  var POOL_ADMIN4 = "0xDf7d0e6454DB638881302729F5ba99936EaAB233";
  var EMERGENCY_ADMIN4 = "0xCb45E82419baeBCC9bA8b1e5c7858e48A3B26Ea6";
  var COLLECTOR4 = "0xe8599F3cc5D38a9aD6F3684cd5CEa72f10Dbc383";
  var DEFAULT_INCENTIVES_CONTROLLER2 = "0x357D51124f59836DeD84c8a1730D72B749d8BC23";
  var EMISSION_MANAGER2 = "0x2bB25175d9B0F8965780209EB558Cc3b56cA6d32";
  var DEBT_SWAP_ADAPTER2 = "0x63dfa7c09Dc2Ff4030d6B8Dc2ce6262BF898C8A4";
  var CONFIG_ENGINE3 = "0x9eCed0293e7B73CFf4a2b4F9C82aAc8346158bd9";
  var MIGRATION_HELPER3 = "0x3db487975aB1728DB5787b798866c2021B24ec52";
  var POOL_ADDRESSES_PROVIDER_REGISTRY3 = "0x3ac4e9aa29940770aeC38fe853a4bbabb2dA9C19";
  var RATES_FACTORY3 = "0xD05003a24A17d9117B11eC04cF9743b050779c08";
  var REPAY_WITH_COLLATERAL_ADAPTER2 = "0xE84cF064a0a65290Ae5673b500699f3753063936";
  var SWAP_COLLATERAL_ADAPTER2 = "0x35784a624D4FfBC3594f4d16fA3801FeF063241c";
  var UI_INCENTIVE_DATA_PROVIDER3 = "0x645654D59A5226CBab969b1f5431aA47CBf64ab8";
  var UI_POOL_DATA_PROVIDER3 = "0x204f2Eb81D996729829debC819f7992DCEEfE7b1";
  var WALLET_BALANCE_PROVIDER3 = "0x34aa032bC416Cf2CdC45c0C8f065b1F19463D43e";
  var WETH_GATEWAY3 = "0xf1e6d4347105138B51E2bacA9A22fA228309ebB1";
  var CHAIN_ID18 = 137;
  var ASSETS4 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
      A_TOKEN: "0x27F8D03b3a2196956ED754baDc28D73be8830A6e",
      V_TOKEN: "0x75c4d1Fb84429023170086f06E682DcbBF537b7d",
      INTEREST_RATE_STRATEGY: "0xDa6b70b725404A0c6bb116B1584fb88Eb7d7ED6d",
      ORACLE: "0x08EDd9E1DF3b0b8498864C60a2FD6cDb13148885"
    },
    USDC: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
      A_TOKEN: "0x1a13F4Ca1d028320A707D99520AbFefca3998b7F",
      V_TOKEN: "0x248960A9d75EdFa3de94F7193eae3161Eb349a12",
      INTEREST_RATE_STRATEGY: "0x4309B0d719a0Dfb526EE9C0E58b77635B2971cC4",
      ORACLE: "0xB611AA5E98112C7c3711Ca3a5187dC025B83C8e4"
    },
    USDT: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
      A_TOKEN: "0x60D55F02A771d515e077c9C2403a1ef324885CeC",
      V_TOKEN: "0x8038857FD47108A07d1f6Bf652ef1cBeC279A2f3",
      INTEREST_RATE_STRATEGY: "0xAb85FD7DCBFdD40e822321DAc4D5fD3cf08b2542",
      ORACLE: "0xf840c80932908EF206056dF0882bC595e7150607"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
      A_TOKEN: "0x5c2ed810328349100A66B82b78a1791B101C9D61",
      V_TOKEN: "0xF664F50631A6f0D72ecdaa0e49b0c019Fa72a8dC",
      INTEREST_RATE_STRATEGY: "0x3465528BE493a61629234C259b62b9539817d8e7",
      ORACLE: "0xA338e0492B2F944E9F8C0653D3AD1484f2657a37"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
      A_TOKEN: "0x28424507fefb6f7f8E9D3860F56504E4e5f5f390",
      V_TOKEN: "0xeDe17e9d79fc6f9fF9250D9EEfbdB88Cc18038b5",
      INTEREST_RATE_STRATEGY: "0xd141820D89840C9A3b0AE46c041D70B98F15928F",
      ORACLE: "0x0000000000000000000000000000000000000000"
    },
    WPOL: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
      A_TOKEN: "0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4",
      V_TOKEN: "0x59e8E9100cbfCBCBAdf86b9279fa61526bBB8765",
      INTEREST_RATE_STRATEGY: "0xAF5917cFc2F376eCD6c4df91C9AC5965Beaf5AfA",
      ORACLE: "0x327e23A4855b6F663a28c5161541d69Af8973302"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xD6DF932A45C0f255f85145f286eA0b292B21C90B",
      A_TOKEN: "0x1d2a0E5EC8E5bBDCA5CB219e649B565d8e5c3360",
      V_TOKEN: "0x1c313e9d0d826662F5CE692134D938656F681350",
      INTEREST_RATE_STRATEGY: "0xae9b3Eb616ed753dcE96C75B6AE30A60Ff9290B4",
      ORACLE: "0xbE23a3AA13038CfC28aFd0ECe4FdE379fE7fBfc4"
    },
    GHST: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
      A_TOKEN: "0x080b5BF8f360F624628E0fb961F4e67c9e3c7CF1",
      V_TOKEN: "0x36e988a38542C3482013Bb54ee46aC1fb1efedcd",
      INTEREST_RATE_STRATEGY: "0x964a4edc8009cA560dE2cCe1bA6300d48ecc203e",
      ORACLE: "0xe638249AF9642CdA55A92245525268482eE4C67b"
    },
    BAL: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3",
      A_TOKEN: "0xc4195D4060DaEac44058Ed668AA5EfEc50D77ff6",
      V_TOKEN: "0x773E0e32e7b6a00b7cA9daa85dfba9D61B7f2574",
      INTEREST_RATE_STRATEGY: "0xd9b99ccEe49a285dE83d16e0CEA1b4044e233bBE",
      ORACLE: "0x03CD157746c61F44597dD54C6f6702105258C722"
    },
    DPI: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0x85955046DF4668e1DD369D2DE9f3AEB98DD2A369",
      A_TOKEN: "0x81fB82aAcB4aBE262fc57F06fD4c1d2De347D7B1",
      V_TOKEN: "0x43150AA0B7e19293D935A412C8607f9172d3d3f3",
      INTEREST_RATE_STRATEGY: "0x6405F880E431403588e92b241Ca15603047ef8a4",
      ORACLE: "0xC70aAF9092De3a4E5000956E672cDf5E996B4610"
    },
    CRV: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0x172370d5Cd63279eFa6d502DAB29171933a610AF",
      A_TOKEN: "0x3Df8f92b7E798820ddcCA2EBEA7BAbda2c90c4aD",
      V_TOKEN: "0x780BbcBCda2cdb0d2c61fd9BC68c9046B18f3229",
      INTEREST_RATE_STRATEGY: "0xE66886B0e34Dc1C40B2d7BB1ff9137339648deEa",
      ORACLE: "0x1CF68C76803c9A415bE301f50E82e44c64B7F1D4"
    },
    SUSHI: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a",
      A_TOKEN: "0x21eC9431B5B55c5339Eb1AE7582763087F98FAc2",
      V_TOKEN: "0x9CB9fEaFA73bF392C905eEbf5669ad3d073c3DFC",
      INTEREST_RATE_STRATEGY: "0x835699Bf98f6a7fDe5713c42c118Fb80fA059737",
      ORACLE: "0x17414Eb5159A082e8d41D243C1601c2944401431"
    },
    LINK: {
      decimals: 18,
      id: 12,
      UNDERLYING: "0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39",
      A_TOKEN: "0x0Ca2e42e8c21954af73Bc9af1213E4e81D6a669A",
      V_TOKEN: "0xCC71e4A38c974e19bdBC6C0C19b63b8520b1Bb09",
      INTEREST_RATE_STRATEGY: "0xE41515721DF4c6eb221d6Ed25e9Ebe0108e822aA",
      ORACLE: "0xb77fa460604b9C6435A235D057F7D319AC83cb53"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV2Fuji.mjs
  var AaveV2Fuji_exports = {};
  __export(AaveV2Fuji_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER5,
    ASSETS: () => ASSETS5,
    CHAIN_ID: () => CHAIN_ID19,
    COLLECTOR: () => COLLECTOR5,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER3,
    EMERGENCY_ADMIN: () => EMERGENCY_ADMIN5,
    EMISSION_MANAGER: () => EMISSION_MANAGER3,
    FAUCET: () => FAUCET,
    LENDING_POOL_COLLATERAL_MANAGER: () => LENDING_POOL_COLLATERAL_MANAGER5,
    LENDING_RATE_ORACLE: () => LENDING_RATE_ORACLE5,
    ORACLE: () => ORACLE5,
    POOL: () => POOL6,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER5,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY4,
    POOL_ADMIN: () => POOL_ADMIN5,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR5,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL5,
    POOL_IMPL: () => POOL_IMPL5,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER4,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER4,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER4,
    WETH_GATEWAY: () => WETH_GATEWAY4
  });
  var POOL_ADDRESSES_PROVIDER5 = "0x7fdC1FdF79BE3309bf82f4abdAD9f111A6590C0f";
  var POOL6 = "0x76cc67FF2CC77821A70ED14321111Ce381C2594D";
  var POOL_IMPL5 = "0x6C66d96ACCCCC2E6F576813A480AD230D56FB2F1";
  var POOL_CONFIGURATOR5 = "0x4ceBAFAAcc6Cb26FD90E4cDe138Eb812442bb5f3";
  var POOL_CONFIGURATOR_IMPL5 = "0x4f350F6D1688ca1eae4811e182569130a8B6CCaf";
  var ORACLE5 = "0xfa4f5B081632c4709667D467F817C09d9008A46A";
  var LENDING_RATE_ORACLE5 = "0x76Ec7c83aCb6af821E61F1DF1E0aBE684Bc904F8";
  var AAVE_PROTOCOL_DATA_PROVIDER5 = "0x0668EDE013c1c475724523409b8B6bE633469585";
  var LENDING_POOL_COLLATERAL_MANAGER5 = "0x007bbD6A554E27EcdA1D10b40974eb7478799EcB";
  var POOL_ADMIN5 = "0x1128d177BdaA74Ae68EB06e693f4CbA6BF427a5e";
  var EMERGENCY_ADMIN5 = "0x1128d177BdaA74Ae68EB06e693f4CbA6BF427a5e";
  var COLLECTOR5 = "0xB45F5C501A22288dfdb897e5f73E189597e09288";
  var DEFAULT_INCENTIVES_CONTROLLER3 = "0xa1EF206fb9a8D8186157FC817fCddcC47727ED55";
  var EMISSION_MANAGER3 = "0x3b60cABB2C0e9ADe3e364b1F9752342A5D6079e2";
  var FAUCET = "0x90E5BAc5A98fff59617080848959f44eACB4Cd7B";
  var POOL_ADDRESSES_PROVIDER_REGISTRY4 = "0x04A6Fa9999E3C807Ee7b6Ca58eFAb93713d405BF";
  var UI_INCENTIVE_DATA_PROVIDER4 = "0x9842E5B7b7C6cEDfB1952a388e050582Ff95645b";
  var UI_POOL_DATA_PROVIDER4 = "0x88b4013f8C50e61ab027Cc253ab9a50663e2dF45";
  var WALLET_BALANCE_PROVIDER4 = "0x3f5A507B33260a3869878B31FB90F04F451d28e3";
  var WETH_GATEWAY4 = "0x1648C14DbB6ccdd5846969cE23DeEC4C66a03335";
  var CHAIN_ID19 = 43113;
  var ASSETS5 = {
    WETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x9668f5f55f2712Dd2dfa316256609b516292D554",
      A_TOKEN: "0x2B2927e26b433D92fC598EE79Fa351d6591B8F95",
      V_TOKEN: "0xB61CC359E2133b8618cc0319F359F8CA1d3d2b33",
      INTEREST_RATE_STRATEGY: "0x79bA34079AA04E5d5b25C29df03A3736a8eC7817",
      ORACLE: "0x86d67c3D38D2bCeE722E601025C25a575021c6EA"
    },
    USDT: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0x02823f9B469960Bb3b1de0B3746D4b95B7E35543",
      A_TOKEN: "0x5f049c41aF3856cBc171F61FB04D58C1e7445f5F",
      V_TOKEN: "0x6422A7C91A48dD211BF6BdE1Db14d7734f9cbD69",
      INTEREST_RATE_STRATEGY: "0xC49F727470A367f29Bf4F55B53b4531a26E61E05",
      ORACLE: "0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad"
    },
    WBTC: {
      decimals: 8,
      id: 2,
      UNDERLYING: "0x9C1DCacB57ADa1E9e2D3a8280B7cfC7EB936186F",
      A_TOKEN: "0xD5B516FDbfb7264676Fd4901B9dD3F707db68733",
      V_TOKEN: "0xbd0601970fE5b35649Fb92f292cde21f0f52eAE9",
      INTEREST_RATE_STRATEGY: "0xC58e46e20B11192Ecb90a8735362e3b633960bf5",
      ORACLE: "0x31CF013A08c6Ac228C94551d535d5BAfE19c602a"
    },
    WAVAX: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
      A_TOKEN: "0xf8C78Ba24DD965487f4472dfb280c46800a0c9B6",
      V_TOKEN: "0x333f38B8E76077539Cde1d50Fb5dE0AC6F7E6837",
      INTEREST_RATE_STRATEGY: "0xd720420A83FefC64aE9Ff776e5B36621D0989AB7",
      ORACLE: "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV2Avalanche.mjs
  var AaveV2Avalanche_exports = {};
  __export(AaveV2Avalanche_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER6,
    ASSETS: () => ASSETS6,
    CHAIN_ID: () => CHAIN_ID20,
    COLLECTOR: () => COLLECTOR6,
    CONFIG_ENGINE: () => CONFIG_ENGINE4,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER3,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER4,
    EMERGENCY_ADMIN: () => EMERGENCY_ADMIN6,
    EMISSION_MANAGER: () => EMISSION_MANAGER4,
    LENDING_POOL_COLLATERAL_MANAGER: () => LENDING_POOL_COLLATERAL_MANAGER6,
    LENDING_RATE_ORACLE: () => LENDING_RATE_ORACLE6,
    MIGRATION_HELPER: () => MIGRATION_HELPER4,
    ORACLE: () => ORACLE6,
    POOL: () => POOL7,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER6,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY5,
    POOL_ADMIN: () => POOL_ADMIN6,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR6,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL6,
    POOL_IMPL: () => POOL_IMPL6,
    PROOF_OF_RESERVE: () => PROOF_OF_RESERVE,
    PROOF_OF_RESERVE_AGGREGATOR: () => PROOF_OF_RESERVE_AGGREGATOR,
    RATES_FACTORY: () => RATES_FACTORY4,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER3,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER3,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER5,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER5,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER5,
    WETH_GATEWAY: () => WETH_GATEWAY5
  });
  var POOL_ADDRESSES_PROVIDER6 = "0xb6A86025F0FE1862B372cb0ca18CE3EDe02A318f";
  var POOL7 = "0x4F01AeD16D97E3aB5ab2B501154DC9bb0F1A5A2C";
  var POOL_IMPL6 = "0x102Bf2C03c1901AdBA191457A8c4A4eF18b40029";
  var POOL_CONFIGURATOR6 = "0x230B618aD4C475393A7239aE03630042281BD86e";
  var POOL_CONFIGURATOR_IMPL6 = "0x3616f776F2b5fAd02F2478DFd4822Fc70d24399E";
  var ORACLE6 = "0xdC336Cd4769f4cC7E9d726DA53e6d3fC710cEB89";
  var LENDING_RATE_ORACLE6 = "0xc34254642B504484465F38Cb1CC396d45a9c7c80";
  var AAVE_PROTOCOL_DATA_PROVIDER6 = "0x65285E9dfab318f57051ab2b139ccCf232945451";
  var LENDING_POOL_COLLATERAL_MANAGER6 = "0x69A45013F047A65422deFdD0C43f09530D7025c0";
  var POOL_ADMIN6 = "0x3C06dce358add17aAf230f2234bCCC4afd50d090";
  var EMERGENCY_ADMIN6 = "0x56C1a4b54921DEA9A344967a8693C7E661D72968";
  var COLLECTOR6 = "0x5ba7fd868c40c16f7aDfAe6CF87121E13FC2F7a0";
  var DEFAULT_INCENTIVES_CONTROLLER4 = "0x01D83Fe6A10D2f2B7AF17034343746188272cAc9";
  var EMISSION_MANAGER4 = "0x5CfCd7E6D055Ba4f7B998914336254aDE3F69f26";
  var DEBT_SWAP_ADAPTER3 = "0x63dfa7c09Dc2Ff4030d6B8Dc2ce6262BF898C8A4";
  var CONFIG_ENGINE4 = "0x7902F3c60f05b5A6b7e4Ce0Cac11Cb17bC8e607c";
  var MIGRATION_HELPER4 = "0xf50a080aC535e531EC33cC05b227E910De2fb1fA";
  var POOL_ADDRESSES_PROVIDER_REGISTRY5 = "0x4235E22d9C3f28DCDA82b58276cb6370B01265C2";
  var PROOF_OF_RESERVE = "0x7fc3FCb14eF04A48Bb0c12f0c39CD74C249c37d8";
  var PROOF_OF_RESERVE_AGGREGATOR = "0x80f2c02224a2E548FC67c0bF705eBFA825dd5439";
  var RATES_FACTORY4 = "0x6e66E50870A93691C1b953788A3219e01fDdeDD7";
  var REPAY_WITH_COLLATERAL_ADAPTER3 = "0x935b362EE3E1f342cc48118C528AAbee5118F6e6";
  var SWAP_COLLATERAL_ADAPTER3 = "0x2EcF2a2e74B19Aab2a62312167aFF4B78E93B6C5";
  var UI_INCENTIVE_DATA_PROVIDER5 = "0x11979886A6dBAE27D7a72c49fCF3F23240D647bF";
  var UI_POOL_DATA_PROVIDER5 = "0x00e50FAB64eBB37b87df06Aa46b8B35d5f1A4e1A";
  var WALLET_BALANCE_PROVIDER5 = "0x73e4898a1Bfa9f710B6A6AB516403A6299e01fc6";
  var WETH_GATEWAY5 = "0x68c815cB8C8390bc3F2CE99265044dEC9D350C49";
  var CHAIN_ID20 = 43114;
  var ASSETS6 = {
    WETHe: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
      A_TOKEN: "0x53f7c5869a859F0AeC3D334ee8B4Cf01E3492f21",
      V_TOKEN: "0x4e575CacB37bc1b5afEc68a0462c4165A5268983",
      INTEREST_RATE_STRATEGY: "0x6724e923E4bb58fCdF7CEe7A5E7bBb47b99C2647",
      ORACLE: "0x976B3D034E162d8bD72D6b9C989d545b839003b0"
    },
    DAIe: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
      A_TOKEN: "0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a",
      V_TOKEN: "0x1852DC24d1a8956a0B356AA18eDe954c7a0Ca5ae",
      INTEREST_RATE_STRATEGY: "0xd814D29bBd27b97d58255632C498c34b25DC72bD",
      ORACLE: "0xf82da795727633aFA9BB0f1B08A87c0F6A38723f"
    },
    USDTe: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
      A_TOKEN: "0x532E6537FEA298397212F09A61e03311686f548e",
      V_TOKEN: "0xfc1AdA7A288d6fCe0d29CcfAAa57Bc9114bb2DbE",
      INTEREST_RATE_STRATEGY: "0xd814D29bBd27b97d58255632C498c34b25DC72bD",
      ORACLE: "0x39185f2236A6022b682e8BB93C040d125DA093CF"
    },
    USDCe: {
      decimals: 6,
      id: 3,
      UNDERLYING: "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
      A_TOKEN: "0x46A51127C3ce23fb7AB1DE06226147F446e4a857",
      V_TOKEN: "0x848c080d2700CBE1B894a3374AD5E887E5cCb89c",
      INTEREST_RATE_STRATEGY: "0x6b410D0d53Efc7d4cAF23b9df2F38558998A1716",
      ORACLE: "0xD8277249e871BE9A402fa286C2C5ec16046dC512"
    },
    AAVEe: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x63a72806098Bd3D9520cC43356dD78afe5D386D9",
      A_TOKEN: "0xD45B7c061016102f9FA220502908f2c0f1add1D7",
      V_TOKEN: "0x8352E3fd18B8d84D3c8a1b538d788899073c7A8E",
      INTEREST_RATE_STRATEGY: "0x6724e923E4bb58fCdF7CEe7A5E7bBb47b99C2647",
      ORACLE: "0x3CA13391E9fb38a75330fb28f8cc2eB3D9ceceED"
    },
    WBTCe: {
      decimals: 8,
      id: 5,
      UNDERLYING: "0x50b7545627a5162F82A992c33b87aDc75187B218",
      A_TOKEN: "0x686bEF2417b6Dc32C50a3cBfbCC3bb60E1e9a15D",
      V_TOKEN: "0x2dc0E35eC3Ab070B8a175C829e23650Ee604a9eB",
      INTEREST_RATE_STRATEGY: "0x6724e923E4bb58fCdF7CEe7A5E7bBb47b99C2647",
      ORACLE: "0x2779D32d5166BAaa2B2b658333bA7e6Ec0C65743"
    },
    WAVAX: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      A_TOKEN: "0xDFE521292EcE2A4f44242efBcD66Bc594CA9714B",
      V_TOKEN: "0x66A0FE52Fb629a6cB4D10B8580AFDffE888F5Fd4",
      INTEREST_RATE_STRATEGY: "0x6724e923E4bb58fCdF7CEe7A5E7bBb47b99C2647",
      ORACLE: "0x0A77230d17318075983913bC2145DB16C7366156"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Ethereum.mjs
  var AaveV3Ethereum_exports = {};
  __export(AaveV3Ethereum_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER7,
    ACL_ADMIN: () => ACL_ADMIN,
    ACL_MANAGER: () => ACL_MANAGER,
    ASSETS: () => ASSETS7,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD,
    CHAIN_ID: () => CHAIN_ID21,
    COLLECTOR: () => COLLECTOR7,
    CONFIG_ENGINE: () => CONFIG_ENGINE5,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER4,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_1,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER5,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1,
    DELEGATION_AWARE_A_TOKEN_IMPL_REV_1: () => DELEGATION_AWARE_A_TOKEN_IMPL_REV_1,
    EMISSION_MANAGER: () => EMISSION_MANAGER5,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES,
    E_MODES: () => E_MODES,
    FREEZING_STEWARD: () => FREEZING_STEWARD,
    ORACLE: () => ORACLE7,
    POOL: () => POOL8,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER7,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY6,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR7,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL7,
    POOL_IMPL: () => POOL_IMPL7,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER4,
    RISK_STEWARD: () => RISK_STEWARD,
    SAVINGS_DAI_TOKEN_WRAPPER: () => SAVINGS_DAI_TOKEN_WRAPPER,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER4,
    UI_GHO_DATA_PROVIDER: () => UI_GHO_DATA_PROVIDER,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER6,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER6,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER6,
    WETH_GATEWAY: () => WETH_GATEWAY6,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER
  });
  var POOL_ADDRESSES_PROVIDER7 = "0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e";
  var POOL8 = "0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2";
  var POOL_CONFIGURATOR7 = "0x64b761D848206f447Fe2dd461b0c635Ec39EbB27";
  var ORACLE7 = "0x54586bE62E3c3580375aE3723C145253060Ca0C2";
  var ACL_ADMIN = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var ACL_MANAGER = "0xc2aaCf6553D20d1e9d78E365AAba8032af9c85b0";
  var AAVE_PROTOCOL_DATA_PROVIDER7 = "0x41393e5e337606dc3821075Af65AeE84D7688CBD";
  var POOL_IMPL7 = "0xeF434E4573b90b6ECd4a00f4888381e4D0CC5Ccd";
  var POOL_CONFIGURATOR_IMPL7 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER5 = "0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb";
  var EMISSION_MANAGER5 = "0x223d844fc4B006D67c0cDbd39371A9F73f69d974";
  var COLLECTOR7 = "0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c";
  var DEFAULT_A_TOKEN_IMPL_REV_1 = "0x7EfFD7b47Bfd17e52fB7559d3f924201b9DbfF3d";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1 = "0xaC725CB59D16C81061BDeA61041a8A5e73DA9EC6";
  var CAPS_PLUS_RISK_STEWARD = "0x82dcCF206Ae2Ab46E2099e663F70DeE77caE7778";
  var RISK_STEWARD = "0x7C7143f4bE189928A6a98D8686c5e84c893c59c7";
  var FREEZING_STEWARD = "0x2eE68ACb6A1319de1b49DC139894644E424fefD6";
  var DEBT_SWAP_ADAPTER4 = "0xd7852E139a7097E119623de0751AE53a61efb442";
  var DELEGATION_AWARE_A_TOKEN_IMPL_REV_1 = "0x21714092D90c7265F52fdfDae068EC11a23C6248";
  var CONFIG_ENGINE5 = "0xA8e351C7Ab1b75A2134A418701919c462932DF79";
  var POOL_ADDRESSES_PROVIDER_REGISTRY6 = "0xbaA999AC55EAce41CcAE355c77809e68Bb345170";
  var REPAY_WITH_COLLATERAL_ADAPTER4 = "0x35bb522b102326ea3F1141661dF4626C87000e3E";
  var STATIC_A_TOKEN_FACTORY = "0x411D79b8cC43384FDE66CaBf9b6a17180c842511";
  var SWAP_COLLATERAL_ADAPTER4 = "0xADC0A53095A0af87F3aa29FE0715B5c28016364e";
  var UI_GHO_DATA_PROVIDER = "0x379c1EDD1A41218bdbFf960a9d5AD2818Bf61aE8";
  var UI_INCENTIVE_DATA_PROVIDER6 = "0xe3dFf4052F0bF6134ACb73bEaE8fe2317d71F047";
  var UI_POOL_DATA_PROVIDER6 = "0x3F78BBD206e4D3c504Eb854232EdA7e47E9Fd8FC";
  var WALLET_BALANCE_PROVIDER6 = "0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2";
  var WETH_GATEWAY6 = "0xA434D495249abE33E031Fe71a969B81f3c07950D";
  var WITHDRAW_SWAP_ADAPTER = "0x78F8Bd884C3D738B74B420540659c82f392820e0";
  var SAVINGS_DAI_TOKEN_WRAPPER = "0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034";
  var CHAIN_ID21 = 1;
  var ASSETS7 = {
    WETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      A_TOKEN: "0x4d5F47FA6A74757f35C14fD3a6Ef8E3C9BC514E8",
      V_TOKEN: "0xeA51d7853EEFb32b6ee06b1C12E6dcCA88Be0fFE",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419",
      STATIC_A_TOKEN: "0x252231882FB38481497f3C767469106297c8d93b"
    },
    wstETH: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
      A_TOKEN: "0x0B925eD163218f6662a35e0f0371Ac234f9E9371",
      V_TOKEN: "0xC96113eED8cAB59cD8A66813bCB0cEb29F06D2e4",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xB4aB0c94159bc2d8C133946E7241368fc2F2a010",
      STATIC_A_TOKEN: "0x322AA5F5Be95644d6c36544B6c5061F072D16DF5"
    },
    WBTC: {
      decimals: 8,
      id: 2,
      UNDERLYING: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
      A_TOKEN: "0x5Ee5bf7ae06D1Be5997A1A72006FE6C607eC6DE8",
      V_TOKEN: "0x40aAbEf1aa8f0eEc637E0E7d92fbfFB2F26A8b7B",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      STATIC_A_TOKEN: "0xB07E357cc262E92eee03D8B81464D596B258eA7a"
    },
    USDC: {
      decimals: 6,
      id: 3,
      UNDERLYING: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      A_TOKEN: "0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c",
      V_TOKEN: "0x72E95b8931767C79bA4EeE721354d6E99a61D004",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x736bF902680e68989886e9807CD7Db4B3E015d3C",
      STATIC_A_TOKEN: "0x73edDFa87C71ADdC275c2b9890f5c3a8480bC9E6"
    },
    DAI: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x6B175474E89094C44Da98b954EedeAC495271d0F",
      A_TOKEN: "0x018008bfb33d285247A21d44E50697654f754e63",
      V_TOKEN: "0xcF8d0c70c850859266f5C338b38F9D663181C314",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xaEb897E1Dc6BbdceD3B9D551C71a8cf172F27AC4",
      STATIC_A_TOKEN: "0xaf270C38fF895EA3f95Ed488CEACe2386F038249"
    },
    LINK: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0x514910771AF9Ca656af840dff83E8264EcF986CA",
      A_TOKEN: "0x5E8C8A7243651DB1384C0dDfDbE39761E8e7E51a",
      V_TOKEN: "0x4228F8895C7dDA20227F6a5c6751b8Ebf19a6ba8",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x2c1d072e956AFFC0D435Cb7AC38EF18d24d9127c",
      STATIC_A_TOKEN: "0x57bd8C73838d1781b4f6E0d5Cf89eb676488d3df"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
      A_TOKEN: "0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9",
      V_TOKEN: "0xBae535520Abd9f8C85E58929e0006A2c8B372F74",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x547a514d5e3769680Ce22B2361c10Ea13619e8a9",
      STATIC_A_TOKEN: "0xFEB859A50f92C6D5ad7C9eF7C2c060D164B3280f"
    },
    cbETH: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
      A_TOKEN: "0x977b6fc5dE62598B08C85AC8Cf2b745874E8b78c",
      V_TOKEN: "0x0c91bcA95b5FE69164cE583A2ec9429A569798Ed",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x6243d2F41b4ec944F731f647589E28d9745a2674",
      STATIC_A_TOKEN: "0xe2a6863C8f043457B497667Ef3c43073e2D69089"
    },
    USDT: {
      decimals: 6,
      id: 8,
      UNDERLYING: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
      A_TOKEN: "0x23878914EFE38d27C4D67Ab83ed1b93A74D4086a",
      V_TOKEN: "0x6df1C1E379bC5a00a7b4C6e67A203333772f45A8",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xC26D4a1c46d884cfF6dE9800B6aE7A8Cf48B4Ff8",
      STATIC_A_TOKEN: "0x862c57d48becB45583AEbA3f489696D22466Ca1b"
    },
    rETH: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0xae78736Cd615f374D3085123A210448E74Fc6393",
      A_TOKEN: "0xCc9EE9483f662091a1de4795249E24aC0aC2630f",
      V_TOKEN: "0xae8593DD575FE29A9745056aA91C4b746eee62C8",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x5AE8365D0a30D67145f0c55A08760C250559dB64",
      STATIC_A_TOKEN: "0x867Cf025B5dA438c4e215c60B59bBB3aFe896Fda"
    },
    LUSD: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0x5f98805A4E8be255a32880FDeC7F6728C6568bA0",
      A_TOKEN: "0x3Fe6a295459FAe07DF8A0ceCC36F37160FE86AA9",
      V_TOKEN: "0x33652e48e4B74D18520f11BfE58Edd2ED2cEc5A2",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x9eCdfaCca946614cc32aF63F3DBe50959244F3af",
      STATIC_A_TOKEN: "0xDBf5E36569798D1E39eE9d7B1c61A7409a74F23A"
    },
    CRV: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0xD533a949740bb3306d119CC777fa900bA034cd52",
      A_TOKEN: "0x7B95Ec873268a6BFC6427e7a28e396Db9D0ebc65",
      V_TOKEN: "0x1b7D3F4b3c032a5AE656e30eeA4e8E1Ba376068F",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f",
      STATIC_A_TOKEN: "0x149EE12310D499F701B6A5714eDAd2C832008fd2"
    },
    MKR: {
      decimals: 18,
      id: 12,
      UNDERLYING: "0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2",
      A_TOKEN: "0x8A458A9dc9048e005d22849F470891b840296619",
      V_TOKEN: "0x6Efc73E54E41b27d2134fF9f98F15550f30DF9B1",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xec1D1B3b0443256cc3860e24a46F108e699484Aa"
    },
    SNX: {
      decimals: 18,
      id: 13,
      UNDERLYING: "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
      A_TOKEN: "0xC7B4c17861357B8ABB91F25581E7263E08DCB59c",
      V_TOKEN: "0x8d0de040e8aAd872eC3c33A3776dE9152D3c34ca",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699",
      STATIC_A_TOKEN: "0xaECEbdfE454d869A626cAb38226C52a1575D1866"
    },
    BAL: {
      decimals: 18,
      id: 14,
      UNDERLYING: "0xba100000625a3754423978a60c9317c58a424e3D",
      A_TOKEN: "0x2516E7B3F76294e03C42AA4c5b5b4DCE9C436fB8",
      V_TOKEN: "0x3D3efceb4Ff0966D34d9545D3A2fa2dcdBf451f2",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xdF2917806E30300537aEB49A7663062F4d1F2b5F"
    },
    UNI: {
      decimals: 18,
      id: 15,
      UNDERLYING: "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",
      A_TOKEN: "0xF6D2224916DDFbbab6e6bd0D1B7034f4Ae0CaB18",
      V_TOKEN: "0xF64178Ebd2E2719F2B1233bCb5Ef6DB4bCc4d09a",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x553303d460EE0afB37EdFf9bE42922D8FF63220e",
      STATIC_A_TOKEN: "0x78fb5E79D5cb59729D0cd72bEA7879aD2683454D"
    },
    LDO: {
      decimals: 18,
      id: 16,
      UNDERLYING: "0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
      A_TOKEN: "0x9A44fd41566876A39655f74971a3A6eA0a17a454",
      V_TOKEN: "0xc30808705C01289A3D306ca9CAB081Ba9114eC82",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xb01e6C9af83879B8e06a092f0DD94309c0D497E4",
      STATIC_A_TOKEN: "0x1eA6E1ba21601258401d0B9DB24eA0a07948458e"
    },
    ENS: {
      decimals: 18,
      id: 17,
      UNDERLYING: "0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",
      A_TOKEN: "0x545bD6c032eFdde65A377A6719DEF2796C8E0f2e",
      V_TOKEN: "0xd180D7fdD4092f07428eFE801E17BC03576b3192",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x5C00128d4d1c2F4f652C267d7bcdD7aC99C16E16",
      STATIC_A_TOKEN: "0x2767C27Eeaf3566082E74b963B6A0f5c9a46C8a1"
    },
    ONE_INCH: {
      decimals: 18,
      id: 18,
      UNDERLYING: "0x111111111117dC0aa78b770fA6A738034120C302",
      A_TOKEN: "0x71Aef7b30728b9BB371578f36c5A1f1502a5723e",
      V_TOKEN: "0xA38fCa8c6Bf9BdA52E76EB78f08CaA3BE7c5A970",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xc929ad75B72593967DE83E7F7Cda0493458261D9",
      STATIC_A_TOKEN: "0xB490fF18e55b8881C9527FE7E358dd363780449F"
    },
    FRAX: {
      decimals: 18,
      id: 19,
      UNDERLYING: "0x853d955aCEf822Db058eb8505911ED77F175b99e",
      A_TOKEN: "0xd4e245848d6E1220DBE62e155d89fa327E43CB06",
      V_TOKEN: "0x88B8358F5BC87c2D7E116cCA5b65A9eEb2c5EA3F",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x45D270263BBee500CF8adcf2AbC0aC227097b036",
      STATIC_A_TOKEN: "0xEE66abD4D0f9908A48E08AE354B0f425De3e237E"
    },
    GHO: {
      decimals: 18,
      id: 20,
      UNDERLYING: "0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f",
      A_TOKEN: "0x00907f9921424583e7ffBfEdf84F92B7B2Be4977",
      V_TOKEN: "0x786dBff3f1292ae8F92ea68Cf93c30b34B1ed04B",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xD110cac5d8682A3b045D5524a9903E031d70FCCd",
      STATIC_A_TOKEN: "0x048459E4fb3402e58d8900aF7283Ad574B91d742"
    },
    RPL: {
      decimals: 18,
      id: 21,
      UNDERLYING: "0xD33526068D116cE69F19A9ee46F0bd304F21A51f",
      A_TOKEN: "0xB76CF92076adBF1D9C39294FA8e7A67579FDe357",
      V_TOKEN: "0x8988ECA19D502fd8b9CCd03fA3bD20a6f599bc2A",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x4E155eD98aFE9034b7A5962f6C84c86d869daA9d",
      STATIC_A_TOKEN: "0x95EF7cb3494e65dA4926bA330dBf540a13afFD17"
    },
    sDAI: {
      decimals: 18,
      id: 22,
      UNDERLYING: "0x83F20F44975D03b1b09e64809B757c47f942BEeA",
      A_TOKEN: "0x4C612E3B15b96Ff9A6faED838F8d07d479a8dD4c",
      V_TOKEN: "0x8Db9D35e117d8b93C6Ca9b644b25BaD5d9908141",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x29081f7aB5a644716EfcDC10D5c926c5fEe9F72B",
      STATIC_A_TOKEN: "0xFa7E3571786CE9489bBC58d9Cb8ecE8aAe6B56F3"
    },
    STG: {
      decimals: 18,
      id: 23,
      UNDERLYING: "0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6",
      A_TOKEN: "0x1bA9843bD4327c6c77011406dE5fA8749F7E3479",
      V_TOKEN: "0x655568bDd6168325EC7e58Bf39b21A856F906Dc2",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x7A9f34a0Aa917D438e9b6E630067062B7F8f6f3d"
    },
    KNC: {
      decimals: 18,
      id: 24,
      UNDERLYING: "0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202",
      A_TOKEN: "0x5b502e3796385E1e9755d7043B9C945C3aCCeC9C",
      V_TOKEN: "0x253127Ffc04981cEA8932F406710661c2f2c3fD2",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xf8fF43E991A81e6eC886a3D281A2C6cC19aE70Fc"
    },
    FXS: {
      decimals: 18,
      id: 25,
      UNDERLYING: "0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",
      A_TOKEN: "0x82F9c5ad306BBa1AD0De49bB5FA6F01bf61085ef",
      V_TOKEN: "0x68e9f0aD4e6f8F5DB70F6923d4d6d5b225B83b16",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x6Ebc52C8C1089be9eB3945C4350B68B8E4C2233f"
    },
    crvUSD: {
      decimals: 18,
      id: 26,
      UNDERLYING: "0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E",
      A_TOKEN: "0xb82fa9f31612989525992FCfBB09AB22Eff5c85A",
      V_TOKEN: "0x028f7886F3e937f8479efaD64f31B3fE1119857a",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x02AeE5b225366302339748951E1a924617b8814F",
      STATIC_A_TOKEN: "0x848107491E029AFDe0AC543779c7790382f15929"
    },
    PYUSD: {
      decimals: 6,
      id: 27,
      UNDERLYING: "0x6c3ea9036406852006290770BEdFcAbA0e23A0e8",
      A_TOKEN: "0x0C0d01AbF3e6aDfcA0989eBbA9d6e85dD58EaB1E",
      V_TOKEN: "0x57B67e4DE077085Fd0AF2174e9c14871BE664546",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x150bAe7Ce224555D39AfdBc6Cb4B8204E594E022",
      STATIC_A_TOKEN: "0x00F2a835758B33f3aC53516Ebd69f3dc77B0D152"
    },
    weETH: {
      decimals: 18,
      id: 28,
      UNDERLYING: "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",
      A_TOKEN: "0xBdfa7b7893081B35Fb54027489e2Bc7A38275129",
      V_TOKEN: "0x77ad9BF13a52517AD698D65913e8D381300c8Bf3",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xf112aF6F0A332B815fbEf3Ff932c057E570b62d3"
    },
    osETH: {
      decimals: 18,
      id: 29,
      UNDERLYING: "0xf1C9acDc66974dFB6dEcB12aA385b9cD01190E38",
      A_TOKEN: "0x927709711794F3De5DdBF1D176bEE2D55Ba13c21",
      V_TOKEN: "0x8838eefF2af391863E1Bb8b1dF563F86743a8470",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x0A2AF898cEc35197e6944D9E0F525C2626393442",
      STATIC_A_TOKEN: "0xE5248968166206d14ab57345971E32facD839aDA"
    },
    USDe: {
      decimals: 18,
      id: 30,
      UNDERLYING: "0x4c9EDD5852cd905f086C759E8383e09bff1E68B3",
      A_TOKEN: "0x4F5923Fc5FD4a93352581b38B7cD26943012DECF",
      V_TOKEN: "0x015396E1F286289aE23a762088E863b3ec465145",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x55B6C4D3E8A27b8A1F5a263321b602e0fdEEcC17",
      STATIC_A_TOKEN: "0x46e5d6A33C8Bd8eD38F3c95991C78C9B2FF3bC99"
    },
    ETHx: {
      decimals: 18,
      id: 31,
      UNDERLYING: "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b",
      A_TOKEN: "0x1c0E06a0b1A4c160c17545FF2A951bfcA57C0002",
      V_TOKEN: "0x08a8Dc81AeA67F84745623aC6c72CDA3967aab8b",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xD6270dAabFe4862306190298C2B48fed9e15C847",
      STATIC_A_TOKEN: "0x7CC6694CF75C18D488d16FB4bf3c71A3B31cc7FB"
    },
    sUSDe: {
      decimals: 18,
      id: 32,
      UNDERLYING: "0x9D39A5DE30e57443BfF2A8307A4256c8797A3497",
      A_TOKEN: "0x4579a27aF00A62C0EB156349f31B345c08386419",
      V_TOKEN: "0xeFFDE9BFA8EC77c14C364055a200746d6e12BeD6",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xb37aE8aBa6C0C1Bf2c509fc06E11aa4AF29B665A",
      STATIC_A_TOKEN: "0x54D612b000697bd8B0094889D7d6A92bA0Bf2DEa"
    },
    tBTC: {
      decimals: 18,
      id: 33,
      UNDERLYING: "0x18084fbA666a33d37592fA2633fD49a74DD93a88",
      A_TOKEN: "0x10Ac93971cdb1F5c778144084242374473c350Da",
      V_TOKEN: "0xAC50890a80A2731eb1eA2e9B4F29569CeB06D960",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c"
    },
    cbBTC: {
      decimals: 8,
      id: 34,
      UNDERLYING: "0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf",
      A_TOKEN: "0x5c647cE0Ae10658ec44FA4E11A51c96e94efd1Dd",
      V_TOKEN: "0xeB284A70557EFe3591b9e6D9D720040E02c54a4d",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c"
    },
    USDS: {
      decimals: 18,
      id: 35,
      UNDERLYING: "0xdC035D45d973E3EC169d2276DDab16f1e407384F",
      A_TOKEN: "0x32a6268f9Ba3642Dda7892aDd74f1D34469A4259",
      V_TOKEN: "0x490E0E6255bF65b43E2e02F7acB783c5e04572Ff",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x4F01b76391A05d32B20FA2d05dD5963eE8db20E6"
    },
    rsETH: {
      decimals: 18,
      id: 36,
      UNDERLYING: "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
      A_TOKEN: "0x2D62109243b87C4bA3EE7bA1D91B0dD0A074d7b1",
      V_TOKEN: "0x6De3E52A1B7294A34e271a508082b1Ff4a37E30e",
      INTEREST_RATE_STRATEGY: "0x9ec6F08190DeA04A54f8Afc53Db96134e5E3FdFB",
      ORACLE: "0x47F52B2e43D0386cF161e001835b03Ad49889e3b"
    }
  };
  var E_MODES = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "2952790659",
      collateralAssets: [
        "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
        "0xae78736Cd615f374D3085123A210448E74Fc6393",
        "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",
        "0xf1C9acDc66974dFB6dEcB12aA385b9cD01190E38",
        "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b"
      ],
      borrowableBitmap: "2952790659",
      borrowableAssets: [
        "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        "0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",
        "0xae78736Cd615f374D3085123A210448E74Fc6393",
        "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",
        "0xf1C9acDc66974dFB6dEcB12aA385b9cD01190E38",
        "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    },
    "2": {
      label: "sUSDe Stablecoins",
      collateralBitmap: "4294967296",
      collateralAssets: ["0x9D39A5DE30e57443BfF2A8307A4256c8797A3497"],
      borrowableBitmap: "34359738376",
      borrowableAssets: [
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "0xdC035D45d973E3EC169d2276DDab16f1e407384F"
      ],
      ltv: 9e3,
      liquidationThreshold: 9200,
      liquidationBonus: 10300
    },
    "3": {
      label: "rsETH LST main",
      collateralBitmap: "68719476736",
      collateralAssets: ["0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7"],
      borrowableBitmap: "2147483650",
      borrowableAssets: [
        "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        "0xA35b1B31Ce002FBF2058D22F30f95D405200A15b"
      ],
      ltv: 9250,
      liquidationThreshold: 9450,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Sepolia.mjs
  var AaveV3Sepolia_exports = {};
  __export(AaveV3Sepolia_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER8,
    ACL_ADMIN: () => ACL_ADMIN2,
    ACL_MANAGER: () => ACL_MANAGER2,
    ASSETS: () => ASSETS8,
    CHAIN_ID: () => CHAIN_ID22,
    COLLECTOR: () => COLLECTOR8,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_12,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER6,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_12,
    EMISSION_MANAGER: () => EMISSION_MANAGER6,
    FAUCET: () => FAUCET2,
    ORACLE: () => ORACLE8,
    POOL: () => POOL9,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER8,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR8,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL8,
    POOL_IMPL: () => POOL_IMPL8,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY2,
    UI_GHO_DATA_PROVIDER: () => UI_GHO_DATA_PROVIDER2,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER7,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER7,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER7,
    WETH_GATEWAY: () => WETH_GATEWAY7
  });
  var POOL_ADDRESSES_PROVIDER8 = "0x012bAC54348C0E635dCAc9D5FB99f06F24136C9A";
  var POOL9 = "0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951";
  var POOL_CONFIGURATOR8 = "0x7Ee60D184C24Ef7AfC1Ec7Be59A0f448A0abd138";
  var ORACLE8 = "0x2da88497588bf89281816106C7259e31AF45a663";
  var ACL_ADMIN2 = "0xfA0e305E0f46AB04f00ae6b5f4560d61a2183E00";
  var ACL_MANAGER2 = "0x7F2bE3b178deeFF716CD6Ff03Ef79A1dFf360ddD";
  var AAVE_PROTOCOL_DATA_PROVIDER8 = "0x3e9708d80f7B3e43118013075F7e95CE3AB31F31";
  var POOL_IMPL8 = "0x0562453c3DAFBB5e625483af58f4E6D668c44e19";
  var POOL_CONFIGURATOR_IMPL8 = "0x63Dea961A0B2e2dF4F7A4bb61CBc39BF53A6eb32";
  var DEFAULT_INCENTIVES_CONTROLLER6 = "0x4DA5c4da71C5a167171cC839487536d86e083483";
  var EMISSION_MANAGER6 = "0x098a890BAfDf6FB4ACD24bF107D20EA15D229C62";
  var COLLECTOR8 = "0x604264f8017fEF3b11B3dD63537CB501560380B5";
  var DEFAULT_A_TOKEN_IMPL_REV_12 = "0x48424f2779be0f03cDF6F02E17A591A9BF7AF89f";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_12 = "0x54bdE009156053108E73E2401aEA755e38f92098";
  var FAUCET2 = "0xC959483DBa39aa9E78757139af0e9a2EDEb3f42D";
  var UI_INCENTIVE_DATA_PROVIDER7 = "0xBA25de9a7DC623B30799F33B770d31B44c2C3b77";
  var UI_POOL_DATA_PROVIDER7 = "0x69529987FA4A075D0C00B0128fa848dc9ebbE9CE";
  var WALLET_BALANCE_PROVIDER7 = "0xCD4e0d6D2b1252E2A709B8aE97DBA31164C5a709";
  var WETH_GATEWAY7 = "0x387d311e47e80b498169e6fb51d3193167d89F7D";
  var STATIC_A_TOKEN_FACTORY2 = "0xd210dFB43B694430B8d31762B5199e30c31266C8";
  var UI_GHO_DATA_PROVIDER2 = "0x69B9843A16a6E9933125EBD97659BA3CCbE2Ef8A";
  var CHAIN_ID22 = 11155111;
  var ASSETS8 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xFF34B3d4Aee8ddCd6F9AFFFB6Fe49bD371b8a357",
      A_TOKEN: "0x29598b72eb5CeBd806C5dCD549490FdA35B13cD8",
      V_TOKEN: "0x22675C506A8FC26447aFFfa33640f6af5d4D4cF0",
      INTEREST_RATE_STRATEGY: "0xA813CC4d67821fbAcF24659e414A1Cf6c551373c",
      ORACLE: "0x9aF11c35c5d3Ae182C0050438972aac4376f9516",
      STATIC_A_TOKEN: "0xDE46e43F46ff74A23a65EBb0580cbe3dFE684a17"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xf8Fb3713D459D7C1018BD0A49D19b4C44290EBE5",
      A_TOKEN: "0x3FfAf50D4F4E96eB78f2407c090b72e86eCaed24",
      V_TOKEN: "0x34a4d932E722b9dFb492B9D8131127690CE2430B",
      INTEREST_RATE_STRATEGY: "0xCA30c502d52F905FB3D04eE60cA48F5A1A89f8dB",
      ORACLE: "0x14fC51b7df22b4D393cD45504B9f0A3002A63F3F",
      STATIC_A_TOKEN: "0x8227a989709a757f25dF251C3C3e71CA38627836"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x94a9D9AC8a22534E3FaCa9F4e7F2E2cf85d5E4C8",
      A_TOKEN: "0x16dA4541aD1807f4443d92D26044C1147406EB80",
      V_TOKEN: "0x36B5dE936eF1710E1d22EabE5231b28581a92ECc",
      INTEREST_RATE_STRATEGY: "0x5CB1008969a2d5FAcE8eF32732e6A306d0D0EF2A",
      ORACLE: "0x98458D6A99489F15e6eB5aFa67ACFAcf6F211051",
      STATIC_A_TOKEN: "0x8A88124522dbBF1E56352ba3DE1d9F78C143751e"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x29f2D40B0605204364af54EC677bD022dA425d03",
      A_TOKEN: "0x1804Bf30507dc2EB3bDEbbbdd859991EAeF6EefF",
      V_TOKEN: "0xEB016dFd303F19fbDdFb6300eB4AeB2DA7Ceac37",
      INTEREST_RATE_STRATEGY: "0xCA30c502d52F905FB3D04eE60cA48F5A1A89f8dB",
      ORACLE: "0x784B90bA1E9a8cf3C9939c2e072F058B024C4b8a",
      STATIC_A_TOKEN: "0x131a121bda71ED810bCAf2aC9079214925e59C18"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xC558DBdd856501FCd9aaF1E62eae57A9F0629a3c",
      A_TOKEN: "0x5b071b590a59395fE4025A0Ccc1FcC931AAc1830",
      V_TOKEN: "0x22a35DB253f4F6D0029025D6312A3BdAb20C2c6A",
      INTEREST_RATE_STRATEGY: "0xCA30c502d52F905FB3D04eE60cA48F5A1A89f8dB",
      ORACLE: "0xDde0E8E6d3653614878Bf5009EDC317BC129fE2F",
      STATIC_A_TOKEN: "0x162B500569F42D9eCe937e6a61EDfef660A12E98"
    },
    USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0xaA8E23Fb1079EA71e0a56F48a2aA51851D8433D0",
      A_TOKEN: "0xAF0F6e8b0Dc5c913bbF4d14c22B4E78Dd14310B6",
      V_TOKEN: "0x9844386d29EEd970B9F6a2B9a676083b0478210e",
      INTEREST_RATE_STRATEGY: "0x5CB1008969a2d5FAcE8eF32732e6A306d0D0EF2A",
      ORACLE: "0x4e86D3Aa271Fa418F38D7262fdBa2989C94aa5Ba",
      STATIC_A_TOKEN: "0x978206fAe13faF5a8d293FB614326B237684B750"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x88541670E55cC00bEEFD87eB59EDd1b7C511AC9a",
      A_TOKEN: "0x6b8558764d3b7572136F17174Cb9aB1DDc7E1259",
      V_TOKEN: "0xf12fdFc4c631F6D361b48723c2F2800b84B519e6",
      INTEREST_RATE_STRATEGY: "0xCA30c502d52F905FB3D04eE60cA48F5A1A89f8dB",
      ORACLE: "0xda678Ef100c13504edDb8a228A1e8e4CB139f189",
      STATIC_A_TOKEN: "0x56771cEF0cb422e125564CcCC98BB05fdc718E77"
    },
    EURS: {
      decimals: 2,
      id: 7,
      UNDERLYING: "0x6d906e526a4e2Ca02097BA9d0caA3c382F52278E",
      A_TOKEN: "0xB20691021F9AcED8631eDaa3c0Cd2949EB45662D",
      V_TOKEN: "0x94482C7A7477196259D8a0f74fB853277Fa5a75b",
      INTEREST_RATE_STRATEGY: "0x5CB1008969a2d5FAcE8eF32732e6A306d0D0EF2A",
      ORACLE: "0xCbE15C1f40f1D7eE1De3756D1557d5Fdc2A50bBD",
      STATIC_A_TOKEN: "0x72B49a461900e11632C95dfa563e7173438D4e3E"
    },
    GHO: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0xc4bF5CbDaBE595361438F8c6a187bDc330539c60",
      A_TOKEN: "0xd190eF37dB51Bb955A680fF1A85763CC72d083D4",
      V_TOKEN: "0x67ae46EF043F7A4508BD1d6B94DB6c33F0915844",
      INTEREST_RATE_STRATEGY: "0x521247B4d0a51E71DE580dA2cBF99EB40a44b3Bf",
      ORACLE: "0x00f7fecFAEbEd9499e1f3f9d04E755a21E5fc47C"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Polygon.mjs
  var AaveV3Polygon_exports = {};
  __export(AaveV3Polygon_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER9,
    ACL_ADMIN: () => ACL_ADMIN3,
    ACL_MANAGER: () => ACL_MANAGER3,
    ASSETS: () => ASSETS9,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD2,
    CHAIN_ID: () => CHAIN_ID23,
    COLLECTOR: () => COLLECTOR9,
    CONFIG_ENGINE: () => CONFIG_ENGINE6,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER5,
    DEFAULT_A_TOKEN_IMPL_REV_2: () => DEFAULT_A_TOKEN_IMPL_REV_2,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER7,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_2: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_2,
    EMISSION_MANAGER: () => EMISSION_MANAGER7,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES2,
    E_MODES: () => E_MODES2,
    FREEZING_STEWARD: () => FREEZING_STEWARD2,
    ORACLE: () => ORACLE9,
    POOL: () => POOL10,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER9,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY7,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR9,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL9,
    POOL_IMPL: () => POOL_IMPL9,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER5,
    RISK_STEWARD: () => RISK_STEWARD2,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY3,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER5,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER8,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER8,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER8,
    WETH_GATEWAY: () => WETH_GATEWAY8,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER2
  });
  var POOL_ADDRESSES_PROVIDER9 = "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb";
  var POOL10 = "0x794a61358D6845594F94dc1DB02A252b5b4814aD";
  var POOL_CONFIGURATOR9 = "0x8145eddDf43f50276641b55bd3AD95944510021E";
  var ORACLE9 = "0xb023e699F5a33916Ea823A16485e259257cA8Bd1";
  var ACL_ADMIN3 = "0xDf7d0e6454DB638881302729F5ba99936EaAB233";
  var ACL_MANAGER3 = "0xa72636CbcAa8F5FF95B2cc47F3CDEe83F3294a0B";
  var AAVE_PROTOCOL_DATA_PROVIDER9 = "0x7F23D86Ee20D869112572136221e173428DD740B";
  var POOL_IMPL9 = "0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9";
  var POOL_CONFIGURATOR_IMPL9 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER7 = "0x929EC64c34a17401F460460D4B9390518E5B473e";
  var EMISSION_MANAGER7 = "0x048f2228D7Bf6776f99aB50cB1b1eaB4D1d4cA73";
  var COLLECTOR9 = "0xe8599F3cc5D38a9aD6F3684cd5CEa72f10Dbc383";
  var DEFAULT_A_TOKEN_IMPL_REV_2 = "0xCf85FF1c37c594a10195F7A9Ab85CBb0a03f69dE";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_2 = "0x79b5e91037AE441dE0d9e6fd3Fd85b96B83d4E93";
  var CAPS_PLUS_RISK_STEWARD2 = "0xc5de989E0D1BF605d19478Fdd32Aa827a10b464f";
  var RISK_STEWARD2 = "0x88dECc4bf07f5219ea7D1E32fe3762DA28ff7609";
  var FREEZING_STEWARD2 = "0xa7b40ed4dfAC9255EA9Dd218A3874f380D9FbBEB";
  var DEBT_SWAP_ADAPTER5 = "0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034";
  var CONFIG_ENGINE6 = "0x43632469e02CDAaEB4dE3DcBfCAaBEf310975729";
  var POOL_ADDRESSES_PROVIDER_REGISTRY7 = "0x770ef9f4fe897e59daCc474EF11238303F9552b6";
  var REPAY_WITH_COLLATERAL_ADAPTER5 = "0x5d4D4007A4c6336550DdAa2a7c0d5e7972eebd16";
  var STATIC_A_TOKEN_FACTORY3 = "0x397202AB0b4E7C954ac0c493c00749C517210953";
  var SWAP_COLLATERAL_ADAPTER5 = "0xC4aff49fCeD8ac1D818a6DCAB063f9f97E66ec5E";
  var UI_INCENTIVE_DATA_PROVIDER8 = "0x91E04cf78e53aEBe609e8a7f2003e7EECD743F2B";
  var UI_POOL_DATA_PROVIDER8 = "0x68100bD5345eA474D93577127C11F39FF8463e93";
  var WALLET_BALANCE_PROVIDER8 = "0xBc790382B3686abffE4be14A030A96aC6154023a";
  var WETH_GATEWAY8 = "0xF5f61a1ab3488fCB6d86451846bcFa9cdc108eB0";
  var WITHDRAW_SWAP_ADAPTER2 = "0x78F8Bd884C3D738B74B420540659c82f392820e0";
  var CHAIN_ID23 = 137;
  var ASSETS9 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
      A_TOKEN: "0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE",
      V_TOKEN: "0x8619d80FB0141ba7F184CbF22fd724116D9f7ffC",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xF86577E7d27Ed35b85A7645c58bAaA64453fe32B",
      STATIC_A_TOKEN: "0x83c59636e602787A6EEbBdA2915217B416193FcB"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39",
      A_TOKEN: "0x191c10Aa4AF7C30e871E70C95dB0E4eb77237530",
      V_TOKEN: "0x953A573793604aF8d41F306FEb8274190dB4aE0e",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xd9FFdb71EbE7496cC440152d43986Aae0AB76665",
      STATIC_A_TOKEN: "0x37868a45c6741616F9E5a189dC0481AD70056B6a"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
      A_TOKEN: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
      V_TOKEN: "0xFCCf3cAbbe80101232d343252614b6A3eE81C989",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x17E33D122FC34c7ad8FBd4a1995Dff9c8aE675eb",
      STATIC_A_TOKEN: "0x1017F4a86Fc3A3c824346d0b8C5e96A5029bDAf9"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6",
      A_TOKEN: "0x078f358208685046a11C85e8ad32895DED33A249",
      V_TOKEN: "0x92b42c66840C7AD907b4BF74879FF3eF7c529473",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xc907E116054Ad103354f2D350FD2514433D57F6f",
      STATIC_A_TOKEN: "0xbC0f50CCB8514Aa7dFEB297521c4BdEBc9C7d22d"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
      A_TOKEN: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
      V_TOKEN: "0x0c84331e39d6658Cd6e6b9ba04736cC4c4734351",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xF9680D99D6C9589e2a93a78A04A279e509205945",
      STATIC_A_TOKEN: "0xb3D5Af0A52a35692D3FcbE37669b3B8C31dddE7D"
    },
    USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
      A_TOKEN: "0x6ab707Aca953eDAeFBc4fD23bA73294241490620",
      V_TOKEN: "0xfb00AC187a8Eb5AFAE4eACE434F493Eb62672df7",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xaA574f4f6E124E77a7a1B5Ed91c8b407000A7730",
      STATIC_A_TOKEN: "0x87A1fdc4C726c459f597282be639a045062c0E46"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xD6DF932A45C0f255f85145f286eA0b292B21C90B",
      A_TOKEN: "0xf329e36C7bF6E5E86ce2150875a84Ce77f477375",
      V_TOKEN: "0xE80761Ea617F66F96274eA5e8c37f03960ecC679",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x72484B12719E23115761D5DA1646945632979bB6",
      STATIC_A_TOKEN: "0xCA2E1E33E5BCF4978E2d683656E1f5610f8C4A7E"
    },
    WPOL: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
      A_TOKEN: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
      V_TOKEN: "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xAB594600376Ec9fD91F8e885dADF0CE036862dE0",
      STATIC_A_TOKEN: "0x98254592408E389D1dd2dBa318656C2C5c305b4E"
    },
    CRV: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x172370d5Cd63279eFa6d502DAB29171933a610AF",
      A_TOKEN: "0x513c7E3a9c69cA3e22550eF58AC1C0088e918FFf",
      V_TOKEN: "0x77CA01483f379E58174739308945f044e1a764dc",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x336584C8E6Dc19637A5b36206B1c79923111b405",
      STATIC_A_TOKEN: "0x4356941463eD4d75381AC23C9EF799B5d7C52AD8"
    },
    SUSHI: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a",
      A_TOKEN: "0xc45A479877e1e9Dfe9FcD4056c699575a1045dAA",
      V_TOKEN: "0x34e2eD44EF7466D5f9E0b782B5c08b57475e7907",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x49B0c695039243BBfEb8EcD054EB70061fd54aa0",
      STATIC_A_TOKEN: "0xe3eDe71d32240b7EC355F0e5DD1131BBe029F934"
    },
    GHST: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7",
      A_TOKEN: "0x8Eb270e296023E9D92081fdF967dDd7878724424",
      V_TOKEN: "0xCE186F6Cccb0c955445bb9d10C59caE488Fea559",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xDD229Ce42f11D8Ee7fFf29bDB71C7b81352e11be",
      STATIC_A_TOKEN: "0x123319636A6a9c85D9959399304F4cB23F64327e"
    },
    BAL: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3",
      A_TOKEN: "0x8ffDf2DE812095b1D19CB146E4c004587C0A0692",
      V_TOKEN: "0xA8669021776Bc142DfcA87c21b4A52595bCbB40a",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xD106B538F2A868c28Ca1Ec7E298C3325E0251d66",
      STATIC_A_TOKEN: "0x1a8969FD39AbaF228e690B172C4C3Eb7c67F95E1"
    },
    DPI: {
      decimals: 18,
      id: 12,
      UNDERLYING: "0x85955046DF4668e1DD369D2DE9f3AEB98DD2A369",
      A_TOKEN: "0x724dc807b04555b71ed48a6896b6F41593b8C637",
      V_TOKEN: "0xf611aEb5013fD2c0511c9CD55c7dc5C1140741A6",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x2e48b7924FBe04d575BA229A59b64547d9da16e9",
      STATIC_A_TOKEN: "0x73B788ACA5f4F0EeB3c6Da453cDf31041a77b36D"
    },
    EURS: {
      decimals: 2,
      id: 13,
      UNDERLYING: "0xE111178A87A3BFf0c8d18DECBa5798827539Ae99",
      A_TOKEN: "0x38d693cE1dF5AaDF7bC62595A37D667aD57922e5",
      V_TOKEN: "0x5D557B07776D12967914379C71a1310e917C7555",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x73366Fe0AA0Ded304479862808e02506FE556a98",
      STATIC_A_TOKEN: "0x02E26888Ed3240BB38f26A2adF96Af9B52b167ea"
    },
    jEUR: {
      decimals: 18,
      id: 14,
      UNDERLYING: "0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
      A_TOKEN: "0x6533afac2E7BCCB20dca161449A13A32D391fb00",
      V_TOKEN: "0x44705f578135cC5d703b4c9c122528C73Eb87145",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x73366Fe0AA0Ded304479862808e02506FE556a98",
      STATIC_A_TOKEN: "0xD992DaC78Ef3F34614E6a7d325b7b6A320FC0AB5"
    },
    EURA: {
      decimals: 18,
      id: 15,
      UNDERLYING: "0xE0B52e49357Fd4DAf2c15e02058DCE6BC0057db4",
      A_TOKEN: "0x8437d7C167dFB82ED4Cb79CD44B7a32A1dd95c77",
      V_TOKEN: "0x3ca5FA07689F266e907439aFd1fBB59c44fe12f6",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x73366Fe0AA0Ded304479862808e02506FE556a98",
      STATIC_A_TOKEN: "0xd3eb8796Ed36f58E03B7b4b5AD417FA74931d2c4"
    },
    miMATIC: {
      decimals: 18,
      id: 16,
      UNDERLYING: "0xa3Fa99A148fA48D14Ed51d610c367C61876997F1",
      A_TOKEN: "0xeBe517846d0F36eCEd99C735cbF6131e1fEB775D",
      V_TOKEN: "0x18248226C16BF76c032817854E7C83a2113B4f06",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x4ae2Ab1af7e3b0092dbF3A4B20ec3de8fC834873",
      STATIC_A_TOKEN: "0x8486B49433cCed038b51d18Ae3772CDB7E31CA5e"
    },
    stMATIC: {
      decimals: 18,
      id: 17,
      UNDERLYING: "0x3A58a54C066FdC0f2D55FC9C89F0415C92eBf3C4",
      A_TOKEN: "0xEA1132120ddcDDA2F119e99Fa7A27a0d036F7Ac9",
      V_TOKEN: "0x6b030Ff3FB9956B1B69f475B77aE0d3Cf2CC5aFa",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x6D02E35031C4D99ee3A6A2BA47FaD0cFE355cA8f",
      STATIC_A_TOKEN: "0x867A180B7060fDC27610dC9096E93534F638A315"
    },
    MaticX: {
      decimals: 18,
      id: 18,
      UNDERLYING: "0xfa68FB4628DFF1028CFEc22b4162FCcd0d45efb6",
      A_TOKEN: "0x80cA0d8C38d2e2BcbaB66aA1648Bd1C7160500FE",
      V_TOKEN: "0xB5b46F918C2923fC7f26DB76e8a6A6e9C4347Cf9",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xB0A72A5e454890e9715e059e8df8582a6B383DE3",
      STATIC_A_TOKEN: "0xbcDd5709641Af4BE99b1470A2B3A5203539132Ec"
    },
    wstETH: {
      decimals: 18,
      id: 19,
      UNDERLYING: "0x03b54A6e9a984069379fae1a4fC4dBAE93B3bCCD",
      A_TOKEN: "0xf59036CAEBeA7dC4b86638DFA2E3C97dA9FcCd40",
      V_TOKEN: "0x77fA66882a8854d883101Fb8501BD3CaD347Fc32",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0xBD96b5ABBC6048c28184b462167E487533F2e35E",
      STATIC_A_TOKEN: "0x5274453F4CD5dD7280011a1Cca3B9e1b78EC59A6"
    },
    USDCn: {
      decimals: 6,
      id: 20,
      UNDERLYING: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
      A_TOKEN: "0xA4D94019934D8333Ef880ABFFbF2FDd611C762BD",
      V_TOKEN: "0xE701126012EC0290822eEA17B794454d1AF8b030",
      INTEREST_RATE_STRATEGY: "0x56076f960980d453b5B749CB6A1c4D2E4e138B1A",
      ORACLE: "0x17E33D122FC34c7ad8FBd4a1995Dff9c8aE675eb",
      STATIC_A_TOKEN: "0x2dCa80061632f3F87c9cA28364d1d0c30cD79a19"
    }
  };
  var E_MODES2 = {
    "1": {
      label: "Stablecoins",
      collateralBitmap: "1171493",
      collateralAssets: [
        "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
        "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
        "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
        "0xE111178A87A3BFf0c8d18DECBa5798827539Ae99",
        "0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
        "0xE0B52e49357Fd4DAf2c15e02058DCE6BC0057db4",
        "0xa3Fa99A148fA48D14Ed51d610c367C61876997F1",
        "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"
      ],
      borrowableBitmap: "1171493",
      borrowableAssets: [
        "0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063",
        "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
        "0xc2132D05D31c914a87C6611C10748AEb04B58e8F",
        "0xE111178A87A3BFf0c8d18DECBa5798827539Ae99",
        "0x4e3Decbb3645551B8A19f0eA1678079FCB33fB4c",
        "0xE0B52e49357Fd4DAf2c15e02058DCE6BC0057db4",
        "0xa3Fa99A148fA48D14Ed51d610c367C61876997F1",
        "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    },
    "2": {
      label: "MATIC correlated",
      collateralBitmap: "393344",
      collateralAssets: [
        "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
        "0x3A58a54C066FdC0f2D55FC9C89F0415C92eBf3C4",
        "0xfa68FB4628DFF1028CFEc22b4162FCcd0d45efb6"
      ],
      borrowableBitmap: "393344",
      borrowableAssets: [
        "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
        "0x3A58a54C066FdC0f2D55FC9C89F0415C92eBf3C4",
        "0xfa68FB4628DFF1028CFEc22b4162FCcd0d45efb6"
      ],
      ltv: 9250,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    },
    "3": {
      label: "ETH correlated",
      collateralBitmap: "524304",
      collateralAssets: [
        "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
        "0x03b54A6e9a984069379fae1a4fC4dBAE93B3bCCD"
      ],
      borrowableBitmap: "524304",
      borrowableAssets: [
        "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
        "0x03b54A6e9a984069379fae1a4fC4dBAE93B3bCCD"
      ],
      ltv: 9e3,
      liquidationThreshold: 9300,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES2 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Avalanche.mjs
  var AaveV3Avalanche_exports = {};
  __export(AaveV3Avalanche_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER10,
    ACL_ADMIN: () => ACL_ADMIN4,
    ACL_MANAGER: () => ACL_MANAGER4,
    ASSETS: () => ASSETS10,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD3,
    CHAIN_ID: () => CHAIN_ID24,
    COLLECTOR: () => COLLECTOR10,
    CONFIG_ENGINE: () => CONFIG_ENGINE7,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER6,
    DEFAULT_A_TOKEN_IMPL_REV_2: () => DEFAULT_A_TOKEN_IMPL_REV_22,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER8,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_2: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_22,
    EMISSION_MANAGER: () => EMISSION_MANAGER8,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES3,
    E_MODES: () => E_MODES3,
    FREEZING_STEWARD: () => FREEZING_STEWARD3,
    ORACLE: () => ORACLE10,
    POOL: () => POOL11,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER10,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY8,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR10,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL10,
    POOL_IMPL: () => POOL_IMPL10,
    PROOF_OF_RESERVE: () => PROOF_OF_RESERVE2,
    PROOF_OF_RESERVE_AGGREGATOR: () => PROOF_OF_RESERVE_AGGREGATOR2,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER6,
    RISK_STEWARD: () => RISK_STEWARD3,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY4,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER6,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER9,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER9,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER9,
    WETH_GATEWAY: () => WETH_GATEWAY9,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER3
  });
  var POOL_ADDRESSES_PROVIDER10 = "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb";
  var POOL11 = "0x794a61358D6845594F94dc1DB02A252b5b4814aD";
  var POOL_CONFIGURATOR10 = "0x8145eddDf43f50276641b55bd3AD95944510021E";
  var ORACLE10 = "0xEBd36016B3eD09D4693Ed4251c67Bd858c3c7C9C";
  var ACL_ADMIN4 = "0x3C06dce358add17aAf230f2234bCCC4afd50d090";
  var ACL_MANAGER4 = "0xa72636CbcAa8F5FF95B2cc47F3CDEe83F3294a0B";
  var AAVE_PROTOCOL_DATA_PROVIDER10 = "0x7F23D86Ee20D869112572136221e173428DD740B";
  var POOL_IMPL10 = "0x5DFb8c777C19d3cEdcDc7398d2EeF1FB0b9b05c9";
  var POOL_CONFIGURATOR_IMPL10 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER8 = "0x929EC64c34a17401F460460D4B9390518E5B473e";
  var EMISSION_MANAGER8 = "0x048f2228D7Bf6776f99aB50cB1b1eaB4D1d4cA73";
  var COLLECTOR10 = "0x5ba7fd868c40c16f7aDfAe6CF87121E13FC2F7a0";
  var DEFAULT_A_TOKEN_IMPL_REV_22 = "0x1E81af09001aD208BDa68FF022544dB2102A752d";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_22 = "0xa0d9C1E9E48Ca30c8d8C3B5D69FF5dc1f6DFfC24";
  var CAPS_PLUS_RISK_STEWARD3 = "0xD2C92b5A793e196aB11dBefBe3Af6BddeD6c3DD5";
  var RISK_STEWARD3 = "0xbf03aB677DEdA36E19D294d1735b93Dd9d1E0c05";
  var FREEZING_STEWARD3 = "0x6d4F341d8Bb3Dc5ABe822Aa940F1884508C13f99";
  var DEBT_SWAP_ADAPTER6 = "0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034";
  var CONFIG_ENGINE7 = "0x9aaB9F0b6E19907e346420Edc0d3029Edb5e8616";
  var POOL_ADDRESSES_PROVIDER_REGISTRY8 = "0x770ef9f4fe897e59daCc474EF11238303F9552b6";
  var PROOF_OF_RESERVE2 = "0xab22988D93d5F942fC6B6c6Ea285744809D1d9Cc";
  var PROOF_OF_RESERVE_AGGREGATOR2 = "0x80f2c02224a2E548FC67c0bF705eBFA825dd5439";
  var REPAY_WITH_COLLATERAL_ADAPTER6 = "0x5d4D4007A4c6336550DdAa2a7c0d5e7972eebd16";
  var STATIC_A_TOKEN_FACTORY4 = "0x691C316b2Eec7e64d17e7E3E01f3dB44c9CcEf19";
  var SWAP_COLLATERAL_ADAPTER6 = "0x2Cf641F7C0eac2788A7924B82d6Ca8EB7bAa4E3A";
  var UI_INCENTIVE_DATA_PROVIDER9 = "0x99732D5dA21f44f9e45e36eF9da4B1df2Eb0b28E";
  var UI_POOL_DATA_PROVIDER9 = "0x50B4a66bF4D41e6252540eA7427D7A933Bc3c088";
  var WALLET_BALANCE_PROVIDER9 = "0xBc790382B3686abffE4be14A030A96aC6154023a";
  var WETH_GATEWAY9 = "0xCf3045a03F83ADfBCbA1f19Cb2cF4E19075F8668";
  var WITHDRAW_SWAP_ADAPTER3 = "0x78F8Bd884C3D738B74B420540659c82f392820e0";
  var CHAIN_ID24 = 43114;
  var ASSETS10 = {
    DAIe: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
      A_TOKEN: "0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE",
      V_TOKEN: "0x8619d80FB0141ba7F184CbF22fd724116D9f7ffC",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0xf82da795727633aFA9BB0f1B08A87c0F6A38723f",
      STATIC_A_TOKEN: "0x02F3f6c8A432C1e49f3359d7d36887C25d8A5888"
    },
    LINKe: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x5947BB275c521040051D82396192181b413227A3",
      A_TOKEN: "0x191c10Aa4AF7C30e871E70C95dB0E4eb77237530",
      V_TOKEN: "0x953A573793604aF8d41F306FEb8274190dB4aE0e",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x49ccd9ca821EfEab2b98c60dC60F518E765EDe9a",
      STATIC_A_TOKEN: "0x8B773Ab77Dff01985D438961dBCE58382a70cA52"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
      A_TOKEN: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
      V_TOKEN: "0xFCCf3cAbbe80101232d343252614b6A3eE81C989",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0xD8277249e871BE9A402fa286C2C5ec16046dC512",
      STATIC_A_TOKEN: "0xC509aB7bB4eDbF193b82264D499a7Fc526Cd01F4"
    },
    WBTCe: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x50b7545627a5162F82A992c33b87aDc75187B218",
      A_TOKEN: "0x078f358208685046a11C85e8ad32895DED33A249",
      V_TOKEN: "0x92b42c66840C7AD907b4BF74879FF3eF7c529473",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x2779D32d5166BAaa2B2b658333bA7e6Ec0C65743",
      STATIC_A_TOKEN: "0xE3C0f42EAF1a4BFe37CbA105e5463564BA7730aE"
    },
    WETHe: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB",
      A_TOKEN: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
      V_TOKEN: "0x0c84331e39d6658Cd6e6b9ba04736cC4c4734351",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x976B3D034E162d8bD72D6b9C989d545b839003b0",
      STATIC_A_TOKEN: "0xf8E24175D01653fd6AA203C2C17B1e4Dd1CA2731"
    },
    USDt: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
      A_TOKEN: "0x6ab707Aca953eDAeFBc4fD23bA73294241490620",
      V_TOKEN: "0xfb00AC187a8Eb5AFAE4eACE434F493Eb62672df7",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x39185f2236A6022b682e8BB93C040d125DA093CF",
      STATIC_A_TOKEN: "0x5525Ee69BC1e354B356864187De486fab5AD67d7"
    },
    AAVEe: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x63a72806098Bd3D9520cC43356dD78afe5D386D9",
      A_TOKEN: "0xf329e36C7bF6E5E86ce2150875a84Ce77f477375",
      V_TOKEN: "0xE80761Ea617F66F96274eA5e8c37f03960ecC679",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x3CA13391E9fb38a75330fb28f8cc2eB3D9ceceED",
      STATIC_A_TOKEN: "0xac0746AfD13DEbe2a43a6c8745Fb83Fd2A2909cA"
    },
    WAVAX: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      A_TOKEN: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
      V_TOKEN: "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x0A77230d17318075983913bC2145DB16C7366156",
      STATIC_A_TOKEN: "0x6A02C7a974F1F13A67980C80F774eC1d2eD8f98d"
    },
    sAVAX: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
      A_TOKEN: "0x513c7E3a9c69cA3e22550eF58AC1C0088e918FFf",
      V_TOKEN: "0x77CA01483f379E58174739308945f044e1a764dc",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0xB2B332f27e4B7305649a228C31Ed9858c5a6bAD9",
      STATIC_A_TOKEN: "0x4F059cA8a2a5BF8895Ee731f2E901cCB769FB95f"
    },
    FRAX: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64",
      A_TOKEN: "0xc45A479877e1e9Dfe9FcD4056c699575a1045dAA",
      V_TOKEN: "0x34e2eD44EF7466D5f9E0b782B5c08b57475e7907",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x6208576378D06ce69A27987b7A524A9B15d499a4",
      STATIC_A_TOKEN: "0xA3c2ffE702F4cD265B2249AB5f84Fab81FFf6c73"
    },
    MAI: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0x5c49b268c9841AFF1Cc3B0a418ff5c3442eE3F3b",
      A_TOKEN: "0x8Eb270e296023E9D92081fdF967dDd7878724424",
      V_TOKEN: "0xCE186F6Cccb0c955445bb9d10C59caE488Fea559",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0xCcC55Db26B78a19Dba1beE0066F9c1665575439A",
      STATIC_A_TOKEN: "0x08cC59E51BB0Bc322B4D251f7262dB864d6150ce"
    },
    BTCb: {
      decimals: 8,
      id: 11,
      UNDERLYING: "0x152b9d0FdC40C096757F570A51E494bd4b943E50",
      A_TOKEN: "0x8ffDf2DE812095b1D19CB146E4c004587C0A0692",
      V_TOKEN: "0xA8669021776Bc142DfcA87c21b4A52595bCbB40a",
      INTEREST_RATE_STRATEGY: "0xCe1C5509f2f4d755aA64B8D135B15ec6F12a93da",
      ORACLE: "0x2779D32d5166BAaa2B2b658333bA7e6Ec0C65743",
      STATIC_A_TOKEN: "0x34d768cc830c32DcD743321c09A2A702651bF9a2"
    }
  };
  var E_MODES3 = {
    "1": {
      label: "Stablecoins",
      collateralBitmap: "1573",
      collateralAssets: [
        "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
        "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
        "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
        "0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64",
        "0x5c49b268c9841AFF1Cc3B0a418ff5c3442eE3F3b"
      ],
      borrowableBitmap: "1573",
      borrowableAssets: [
        "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
        "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
        "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
        "0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64",
        "0x5c49b268c9841AFF1Cc3B0a418ff5c3442eE3F3b"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    },
    "2": {
      label: "AVAX correlated",
      collateralBitmap: "384",
      collateralAssets: [
        "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE"
      ],
      borrowableBitmap: "384",
      borrowableAssets: [
        "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES3 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Fuji.mjs
  var AaveV3Fuji_exports = {};
  __export(AaveV3Fuji_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER11,
    ACL_ADMIN: () => ACL_ADMIN5,
    ACL_MANAGER: () => ACL_MANAGER5,
    ASSETS: () => ASSETS11,
    CHAIN_ID: () => CHAIN_ID25,
    COLLECTOR: () => COLLECTOR11,
    CONFIG_ENGINE: () => CONFIG_ENGINE8,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_13,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER9,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_13,
    EMISSION_MANAGER: () => EMISSION_MANAGER9,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES4,
    E_MODES: () => E_MODES4,
    ORACLE: () => ORACLE11,
    POOL: () => POOL12,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER11,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY9,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR11,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL11,
    POOL_IMPL: () => POOL_IMPL11,
    STATA_FACTORY: () => STATA_FACTORY,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER10,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER10,
    WETH_GATEWAY: () => WETH_GATEWAY10
  });
  var POOL_ADDRESSES_PROVIDER11 = "0x07D04EfAAA0Ac69D19d107795aF247C42Eb50F1C";
  var POOL12 = "0x8B9b2AF4afB389b4a70A474dfD4AdCD4a302bb40";
  var POOL_CONFIGURATOR11 = "0xF9f36C15fBddAF0B64E0D16E4D6852B433a86cbE";
  var ORACLE11 = "0xd36338d0F231446b36008310f1DE0812784ADeBC";
  var ACL_ADMIN5 = "0x6ec33534BE07d45cc4E02Fbd127F8ed2aE919a6b";
  var ACL_MANAGER5 = "0xa411Accec7000c52feE9bFeDaDc53E1CEF72d6d4";
  var AAVE_PROTOCOL_DATA_PROVIDER11 = "0xC65cbd1e309Bf0e841Ee6f6E786480598e6a4014";
  var POOL_IMPL11 = "0xff1DB744F1275f8e04A62A7E5D663575F3a774B6";
  var POOL_CONFIGURATOR_IMPL11 = "0x782559e349b084bB7C07c08404aE6E3436cDAE2E";
  var DEFAULT_INCENTIVES_CONTROLLER9 = "0x03aFC1Dfb53eae8eB7BE0E8CB6524aa79C3F8578";
  var EMISSION_MANAGER9 = "0xa46F32c76cAE9Fd34afB8029dE9c30b7F86bFA58";
  var COLLECTOR11 = "0xEd5b0b955C70Fd97557EF9Af2c9bA902Ad1F2AA9";
  var DEFAULT_A_TOKEN_IMPL_REV_13 = "0xeF4d1F3F0dCe46C1Ad684F23Ea3aA542592A8cFe";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_13 = "0x21CcaD436A6c762B919dB7cb07C5082a43DB2589";
  var CONFIG_ENGINE8 = "0x4058FE01Aa090E0841F4E08f79D2607C4861142E";
  var POOL_ADDRESSES_PROVIDER_REGISTRY9 = "0x9E7DF170E44093d6738057157CA048794B02555d";
  var STATA_FACTORY = "0xc344A904BFd1E11AD58a18847940637C35f28ce4";
  var UI_INCENTIVE_DATA_PROVIDER10 = "0x9Ba30437Ba63AA2902319DE1B3f0E25a18826842";
  var WALLET_BALANCE_PROVIDER10 = "0x43fAE24bd7eA952B4000Ea3A2e0D8B50CA64EBbA";
  var WETH_GATEWAY10 = "0x3d2ee1AB8C3a597cDf80273C684dE0036481bE3a";
  var CHAIN_ID25 = 43113;
  var ASSETS11 = {
    USDC: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0x5425890298aed601595a70AB815c96711a31Bc65",
      A_TOKEN: "0x9CFcc1B289E59FBe1E769f020C77315DF8473760",
      V_TOKEN: "0x92cb483760299e69d31f59050cfD5937B8730E48",
      INTEREST_RATE_STRATEGY: "0xd5DDE725b0A2dE43fBDb4E488A7fdA389210d461",
      ORACLE: "0x97FE42a7E96640D932bbc0e1580c73E705A8EB73"
    },
    EURC: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0x5E44db7996c682E92a960b65AC713a54AD815c6B",
      A_TOKEN: "0xBb51336dAD7A010Ff32656b53233c2C3670cc5B9",
      V_TOKEN: "0x8C776d6d7A6D250Abb1b9Ce22b4E310b95E1ef85",
      INTEREST_RATE_STRATEGY: "0xd5DDE725b0A2dE43fBDb4E488A7fdA389210d461",
      ORACLE: "0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad"
    },
    WAVAX: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
      A_TOKEN: "0x50902e21C8CfB5f2e45127c1Bbcd6B985119b433",
      V_TOKEN: "0xe7CF4cE189b3a519EE2A41c18338a3bef0f28a9D",
      INTEREST_RATE_STRATEGY: "0xd5DDE725b0A2dE43fBDb4E488A7fdA389210d461",
      ORACLE: "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD"
    },
    USDX: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x22913D4E21D44EF7662B118A6540450e25fE09a9",
      A_TOKEN: "0x687b7a6Ea699E0652552Cd8C86aA764eF33f285d",
      V_TOKEN: "0x8ECa241b42f89EcA1F790A1Bd908a0F73F8e1A11",
      INTEREST_RATE_STRATEGY: "0xd5DDE725b0A2dE43fBDb4E488A7fdA389210d461",
      ORACLE: "0x97FE42a7E96640D932bbc0e1580c73E705A8EB73",
      STATA_TOKEN: "0x17Bb5B12D6716FC96565dB996DAFC7F7a731731F"
    }
  };
  var E_MODES4 = {};
  var EXTERNAL_LIBRARIES4 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Base.mjs
  var AaveV3Base_exports = {};
  __export(AaveV3Base_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER12,
    ACL_ADMIN: () => ACL_ADMIN6,
    ACL_MANAGER: () => ACL_MANAGER6,
    ASSETS: () => ASSETS12,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD4,
    CHAIN_ID: () => CHAIN_ID26,
    COLLECTOR: () => COLLECTOR12,
    CONFIG_ENGINE: () => CONFIG_ENGINE9,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER7,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_14,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER10,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_14,
    EMISSION_MANAGER: () => EMISSION_MANAGER10,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES5,
    E_MODES: () => E_MODES5,
    FREEZING_STEWARD: () => FREEZING_STEWARD4,
    L2_ENCODER: () => L2_ENCODER,
    ORACLE: () => ORACLE12,
    POOL: () => POOL13,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER12,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY10,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR12,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL12,
    POOL_IMPL: () => POOL_IMPL12,
    PRICE_ORACLE_SENTINEL: () => PRICE_ORACLE_SENTINEL,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER7,
    RISK_STEWARD: () => RISK_STEWARD4,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY5,
    STATIC_A_TOKEN_ORACLE: () => STATIC_A_TOKEN_ORACLE,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER7,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER11,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER10,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER11,
    WETH_GATEWAY: () => WETH_GATEWAY11,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER4
  });
  var POOL_ADDRESSES_PROVIDER12 = "0xe20fCBdBfFC4Dd138cE8b2E6FBb6CB49777ad64D";
  var POOL13 = "0xA238Dd80C259a72e81d7e4664a9801593F98d1c5";
  var POOL_CONFIGURATOR12 = "0x5731a04B1E775f0fdd454Bf70f3335886e9A96be";
  var ORACLE12 = "0x2Cc0Fc26eD4563A5ce5e8bdcfe1A2878676Ae156";
  var PRICE_ORACLE_SENTINEL = "0x943AcD0c93d7a8Bee7dA5Fd0DC3d0028237074d6";
  var ACL_ADMIN6 = "0x9390B1735def18560c509E2d0bc090E9d6BA257a";
  var ACL_MANAGER6 = "0x43955b0899Ab7232E3a454cf84AedD22Ad46FD33";
  var AAVE_PROTOCOL_DATA_PROVIDER12 = "0xd82a47fdebB5bf5329b09441C3DaB4b5df2153Ad";
  var POOL_IMPL12 = "0x3a9C471F13C9cA1eBDf440cf713C8404e498F9C3";
  var POOL_CONFIGURATOR_IMPL12 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER10 = "0xf9cc4F0D883F1a1eb2c253bdb46c254Ca51E1F44";
  var EMISSION_MANAGER10 = "0x6533A273F3aC84Df91DCD654D6EBAbA73687e246";
  var COLLECTOR12 = "0xBA9424d650A4F5c80a0dA641254d1AcCE2A37057";
  var DEFAULT_A_TOKEN_IMPL_REV_14 = "0x98F409Fc4A42F34AE3c326c7f48ED01ae8cAeC69";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_14 = "0x2425A746911128c2eAA7bEBDc9Bc452eE52208a1";
  var CAPS_PLUS_RISK_STEWARD4 = "0x12DEB4025b79f2B43f6aeF079F9D77C3f9a67bb6";
  var RISK_STEWARD4 = "0xD3DE4b3571744EB77946d65aBF01408902E92c4E";
  var FREEZING_STEWARD4 = "0x4A4c73d563395ad827511F70097d4Ef82E653805";
  var DEBT_SWAP_ADAPTER7 = "0xb12e82DF057BF16ecFa89D7D089dc7E5C1Dc057B";
  var WITHDRAW_SWAP_ADAPTER4 = "0x5598BbFA2f4fE8151f45bBA0a3edE1b54B51a0a9";
  var SWAP_COLLATERAL_ADAPTER7 = "0x2E549104c516b8657A7D888494DfbAbD7C70b464";
  var REPAY_WITH_COLLATERAL_ADAPTER7 = "0x63dfa7c09Dc2Ff4030d6B8Dc2ce6262BF898C8A4";
  var STATIC_A_TOKEN_FACTORY5 = "0x940F9a5d5F9ED264990D0eaee1F3DD60B4Cb9A22";
  var STATIC_A_TOKEN_ORACLE = "0xe63eAf6DAb1045689BD3a332bC596FfcF54A5C88";
  var CONFIG_ENGINE9 = "0xD828E29E2268f56309dDbbAB697ae85DCEb43B9d";
  var L2_ENCODER = "0x39e97c588B2907Fb67F44fea256Ae3BA064207C5";
  var POOL_ADDRESSES_PROVIDER_REGISTRY10 = "0x2f6571d3Eb9a4e350C68C36bCD2afe39530078E2";
  var UI_INCENTIVE_DATA_PROVIDER11 = "0x91E04cf78e53aEBe609e8a7f2003e7EECD743F2B";
  var UI_POOL_DATA_PROVIDER10 = "0x68100bD5345eA474D93577127C11F39FF8463e93";
  var WALLET_BALANCE_PROVIDER11 = "0x5779b29B0a34577d927E8D511B595ef9abbFAE82";
  var WETH_GATEWAY11 = "0x729b3EA8C005AbC58c9150fb57Ec161296F06766";
  var CHAIN_ID26 = 8453;
  var ASSETS12 = {
    WETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x4200000000000000000000000000000000000006",
      A_TOKEN: "0xD4a0e0b9149BCee3C920d2E00b5dE09138fd8bb7",
      V_TOKEN: "0x24e6e0795b3c7c71D965fCc4f371803d1c1DcA1E",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x71041dddad3595F9CEd3DcCFBe3D1F4b0a16Bb70",
      STATIC_A_TOKEN: "0x468973e3264F2aEba0417A8f2cD0Ec397E738898"
    },
    cbETH: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22",
      A_TOKEN: "0xcf3D55c10DB69f28fD1A75Bd73f3D8A2d9c595ad",
      V_TOKEN: "0x1DabC36f19909425f654777249815c073E8Fd79F",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x8e11Ad4531826ff47BD8157a2c705F5422Da6A61",
      STATIC_A_TOKEN: "0x16A004065dfb11276DcB29Dc03fb8A85f9A43C6e"
    },
    USDbC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA",
      A_TOKEN: "0x0a1d576f3eFeF75b330424287a95A366e8281D54",
      V_TOKEN: "0x7376b2F323dC56fCd4C191B34163ac8a84702DAB",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x978D8878b53Fbe40dab7D4AB47b97AB622FFeF9f",
      STATIC_A_TOKEN: "0x6fCe2756794128B1771324caA860965801DCbCdB"
    },
    wstETH: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452",
      A_TOKEN: "0x99CBC45ea5bb7eF3a5BC08FB1B7E56bB2442Ef0D",
      V_TOKEN: "0x41A7C3f5904ad176dACbb1D99101F59ef0811DC1",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x56038D3998C42db18ba3B821bD1EbaB9B678e657",
      STATIC_A_TOKEN: "0x03916e49f794Ab877eFA23597627eE8094E6cbB0"
    },
    USDC: {
      decimals: 6,
      id: 4,
      UNDERLYING: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
      A_TOKEN: "0x4e65fE4DbA92790696d040ac24Aa414708F5c0AB",
      V_TOKEN: "0x59dca05b6c26dbd64b5381374aAaC5CD05644C28",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x978D8878b53Fbe40dab7D4AB47b97AB622FFeF9f",
      STATIC_A_TOKEN: "0x4EA71A20e655794051D1eE8b6e4A3269B13ccaCc"
    },
    weETH: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A",
      A_TOKEN: "0x7C307e128efA31F540F2E2d976C995E0B65F51F6",
      V_TOKEN: "0x8D2e3F1f4b38AA9f1ceD22ac06019c7561B03901",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0xFc4d1d7a8FD1E6719e361e16044b460737F12C44",
      STATIC_A_TOKEN: "0x588159E0d360ffAA978330812f9234818ab46E8E"
    },
    cbBTC: {
      decimals: 8,
      id: 6,
      UNDERLYING: "0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf",
      A_TOKEN: "0xBdb9300b7CDE636d9cD4AFF00f6F009fFBBc8EE6",
      V_TOKEN: "0x05e08702028de6AaD395DC6478b554a56920b9AD",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x64c911996D3c6aC71f9b455B1E8E7266BcbD848F"
    }
  };
  var E_MODES5 = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "43",
      collateralAssets: [
        "0x4200000000000000000000000000000000000006",
        "0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22",
        "0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452",
        "0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A"
      ],
      borrowableBitmap: "43",
      borrowableAssets: [
        "0x4200000000000000000000000000000000000006",
        "0x2Ae3F1Ec7F1F5012CFEab0185bfc7aa3cf0DEc22",
        "0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452",
        "0x04C0599Ae5A44757c0af6F9eC3b93da8976c150A"
      ],
      ltv: 9e3,
      liquidationThreshold: 9300,
      liquidationBonus: 10200
    }
  };
  var EXTERNAL_LIBRARIES5 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3BaseSepolia.mjs
  var AaveV3BaseSepolia_exports = {};
  __export(AaveV3BaseSepolia_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER13,
    ACL_ADMIN: () => ACL_ADMIN7,
    ACL_MANAGER: () => ACL_MANAGER7,
    ASSETS: () => ASSETS13,
    CHAIN_ID: () => CHAIN_ID27,
    COLLECTOR: () => COLLECTOR13,
    CONFIG_ENGINE: () => CONFIG_ENGINE10,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_15,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER11,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_15,
    EMISSION_MANAGER: () => EMISSION_MANAGER11,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES6,
    E_MODES: () => E_MODES6,
    L2_ENCODER: () => L2_ENCODER2,
    ORACLE: () => ORACLE13,
    POOL: () => POOL14,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER13,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY11,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR13,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL13,
    POOL_IMPL: () => POOL_IMPL13,
    STATA_FACTORY: () => STATA_FACTORY2,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER12,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER12,
    WETH_GATEWAY: () => WETH_GATEWAY12
  });
  var POOL_ADDRESSES_PROVIDER13 = "0x150E9a8b83b731B9218a5633F1E804BC82508A46";
  var POOL14 = "0xbE781D7Bdf469f3d94a62Cdcc407aCe106AEcA74";
  var POOL_CONFIGURATOR13 = "0x4200a89Bd036745918889D6dCC5685A4C6F01C24";
  var ORACLE13 = "0x9Ba30437Ba63AA2902319DE1B3f0E25a18826842";
  var ACL_ADMIN7 = "0x6ec33534BE07d45cc4E02Fbd127F8ed2aE919a6b";
  var ACL_MANAGER7 = "0xb880879303D35a82B1888a4A6d47D2ef0653E4A2";
  var AAVE_PROTOCOL_DATA_PROVIDER13 = "0xAF4646B0131af8fc0DC435AF7F7d303Ac131E072";
  var POOL_IMPL13 = "0x07D04EfAAA0Ac69D19d107795aF247C42Eb50F1C";
  var POOL_CONFIGURATOR_IMPL13 = "0x9E7DF170E44093d6738057157CA048794B02555d";
  var DEFAULT_INCENTIVES_CONTROLLER11 = "0x294FF52d234a7e09E9642F846702A45337ceB2E2";
  var EMISSION_MANAGER11 = "0x1F95c29C9E686e4f438ED5D13cF0B7430B9F39ec";
  var COLLECTOR13 = "0x67F521ca716dD9413fd2D2AfdEbEE9285289d2cB";
  var DEFAULT_A_TOKEN_IMPL_REV_15 = "0xA9E3fFb25C369e44862DD3e87Be4420abb879965";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_15 = "0x95eeA7A0b16C8ee3A923D3F5ebe6d77C0332084c";
  var STATA_FACTORY2 = "0xAE252DA024783d1813C890d82642bbED120c3093";
  var CONFIG_ENGINE10 = "0x3d2ee1AB8C3a597cDf80273C684dE0036481bE3a";
  var L2_ENCODER2 = "0x0ffE481FBF0AE2282A5E1f701fab266aF487A97D";
  var POOL_ADDRESSES_PROVIDER_REGISTRY11 = "0x5A6c2685b9dd22705203C99d7Fc30AE53C4c7513";
  var UI_INCENTIVE_DATA_PROVIDER12 = "0xb0633e01310a09C1Ee71a96c057DcF9c13fd6F62";
  var WALLET_BALANCE_PROVIDER12 = "0xdc5D225Df17df184d11015B91C4A10cd7834e2aC";
  var WETH_GATEWAY12 = "0xd5DDE725b0A2dE43fBDb4E488A7fdA389210d461";
  var CHAIN_ID27 = 84532;
  var ASSETS13 = {
    USDC: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0x036CbD53842c5426634e7929541eC2318f3dCF7e",
      A_TOKEN: "0xfE45Bf4dEF7223Ab1Bf83cA17a4462Ef1647F7FF",
      V_TOKEN: "0x5E531B00C86C2D0014020183DaFE7c17C4aA90D8",
      INTEREST_RATE_STRATEGY: "0xff1DB744F1275f8e04A62A7E5D663575F3a774B6",
      ORACLE: "0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165"
    },
    EURC: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0x808456652fdb597867f38412077A9182bf77359F",
      A_TOKEN: "0x70B607b3cdED31635779781d42540580D4Ac18F4",
      V_TOKEN: "0xEa1b67213437E753656B209d1d3d16c1DFE424fd",
      INTEREST_RATE_STRATEGY: "0xff1DB744F1275f8e04A62A7E5D663575F3a774B6",
      ORACLE: "0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165"
    },
    WETH: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0x4200000000000000000000000000000000000006",
      A_TOKEN: "0x6dE9f4b8d4A52D15F1372ef463e27AeAa8a3FdF4",
      V_TOKEN: "0x80bEA6A08B3c2df41B48F27c983C3238f1144093",
      INTEREST_RATE_STRATEGY: "0xff1DB744F1275f8e04A62A7E5D663575F3a774B6",
      ORACLE: "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1"
    },
    USDX: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x3e138010792d63e4af70dD7F2401C9cdE0eaf3C8",
      A_TOKEN: "0x7E60de07156fdA16A74F3700725e2bbB5CFC8CB8",
      V_TOKEN: "0xed47C3087a7B41a4F2cA93747DDDc368f8EcDE47",
      INTEREST_RATE_STRATEGY: "0xff1DB744F1275f8e04A62A7E5D663575F3a774B6",
      ORACLE: "0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165",
      STATA_TOKEN: "0xb17966889E3D914CCf9A11bA0Fd71870B03727AF"
    }
  };
  var E_MODES6 = {};
  var EXTERNAL_LIBRARIES6 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3BaseSepoliaLido.mjs
  var AaveV3BaseSepoliaLido_exports = {};
  __export(AaveV3BaseSepoliaLido_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER14,
    ACL_ADMIN: () => ACL_ADMIN8,
    ACL_MANAGER: () => ACL_MANAGER8,
    ASSETS: () => ASSETS14,
    CHAIN_ID: () => CHAIN_ID28,
    COLLECTOR: () => COLLECTOR14,
    CONFIG_ENGINE: () => CONFIG_ENGINE11,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_16,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER12,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_16,
    EMISSION_MANAGER: () => EMISSION_MANAGER12,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES7,
    E_MODES: () => E_MODES7,
    L2_ENCODER: () => L2_ENCODER3,
    ORACLE: () => ORACLE14,
    POOL: () => POOL15,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER14,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY12,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR14,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL14,
    POOL_IMPL: () => POOL_IMPL14,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER13,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER11,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER13,
    WETH_GATEWAY: () => WETH_GATEWAY13
  });
  var POOL_ADDRESSES_PROVIDER14 = "0x6f7E694fe5250Ce638fFE95524760422E6e41997";
  var POOL15 = "0x423b16E67D9b7ea095Bc443F1Cb9621c54A3db1D";
  var POOL_CONFIGURATOR14 = "0xb5264423c271310dB16be084dA3e360d6c4A8b85";
  var ORACLE14 = "0xfaec2d4b5971C9C18Ec25363C34B8a9A7658EBB6";
  var ACL_ADMIN8 = "0x6ec33534BE07d45cc4E02Fbd127F8ed2aE919a6b";
  var ACL_MANAGER8 = "0x7C5Bd69e2842363139C2CA726baAd128B0B19976";
  var AAVE_PROTOCOL_DATA_PROVIDER14 = "0xa8746Cea97Da240EC45A5b5890b1071990288e34";
  var POOL_IMPL14 = "0x532fF7D5c6Df153De1329Af43a36FFF3D12e7316";
  var POOL_CONFIGURATOR_IMPL14 = "0xf2746E1f8538479a299083E12230550C40F899d7";
  var DEFAULT_INCENTIVES_CONTROLLER12 = "0x543f2b0C2085E74b9A1c3A2D0f35825D9D02237D";
  var EMISSION_MANAGER12 = "0x635b4a9ec6c6B6b764347edc343CFf091FbAE0Ad";
  var COLLECTOR14 = "0xA49b77212c4a6C689B78CfA448bb2cd254E87c07";
  var DEFAULT_A_TOKEN_IMPL_REV_16 = "0x0Ff3278B57a550767ccec8452f16BD31E7C72238";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_16 = "0xf45B94a4B54318c1A4Fe1287B38370F6FC638B61";
  var CONFIG_ENGINE11 = "0x7e66C9c25E91200b8713d5E926b0e12496636dF5";
  var L2_ENCODER3 = "0xEC239206602f299b5d0A7dDfd7A9ed1F2ebeE020";
  var POOL_ADDRESSES_PROVIDER_REGISTRY12 = "0xDda880c5Cf474b68cc79f89fa2A2F8513015FF20";
  var UI_INCENTIVE_DATA_PROVIDER13 = "0xAc5Cc0A193C6FAc2616c7c5FACfd1C9DB909371C";
  var UI_POOL_DATA_PROVIDER11 = "0x912D4A80f8cA3959eB49Ce38f060c46323D1e3A4";
  var WALLET_BALANCE_PROVIDER13 = "0x2a5208950631917efE7EbE969eC1be68EE46AB16";
  var WETH_GATEWAY13 = "0x63bBa35193cB5E061E8F0318F8A1788EA34E5198";
  var CHAIN_ID28 = 84532;
  var ASSETS14 = {
    USDC: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x31DeecB1f03D68154fB7d86EA54F3276afDC33e3",
      A_TOKEN: "0x005E9Aea520839b897FC97cfBc39bbc58539Ee8B",
      V_TOKEN: "0x31cC4e1faA41C748e4aA4E2e7CA0E7C03B39092E",
      INTEREST_RATE_STRATEGY: "0x25286160e24a8567B24649AD230f581BC9DC1a66",
      ORACLE: "0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165"
    },
    USDT: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x3cbFF758cB60163f5C59055f0e89cBc60699A143",
      A_TOKEN: "0x1f1258B4584E7227F0A1d8c6f6503Bc1eEE72734",
      V_TOKEN: "0x737c471a6eE5891C554B87127dE5bF95B5806374",
      INTEREST_RATE_STRATEGY: "0x25286160e24a8567B24649AD230f581BC9DC1a66",
      ORACLE: "0x3ec8593F930EA45ea58c968260e6e9FF53FC934f"
    },
    DAI: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0x9320CDD004557870e6066fEf0C88B46F9fCeA9e0",
      A_TOKEN: "0x5c941817F022fc61bB4587E7983fD7ed95B9117e",
      V_TOKEN: "0x5fba1aBb20B8F1C558992557Bc0d74C5Af9F04d7",
      INTEREST_RATE_STRATEGY: "0x25286160e24a8567B24649AD230f581BC9DC1a66",
      ORACLE: "0xD1092a65338d049DB68D7Be6bD89d17a0929945e"
    },
    WETH: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x4200000000000000000000000000000000000006",
      A_TOKEN: "0xFBcD8add8F85BdfeDfF99E20D6fc4b215a9C96e3",
      V_TOKEN: "0x1a22c2261A23516D9A14bCAbC0B6522Eb98220fF",
      INTEREST_RATE_STRATEGY: "0x25286160e24a8567B24649AD230f581BC9DC1a66",
      ORACLE: "0x4aDC67696bA383F43DD60A9e78F2C97Fbbfc7cb1"
    },
    cbETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xc246553D4aff65E8091ed6072bE7Db6fb5318657",
      A_TOKEN: "0xeba135faBD9585Fd24879d95435F198AEb9D8a0c",
      V_TOKEN: "0x4B91a4D368a92C0aF8e5dB3Fb557ee75E391695E",
      INTEREST_RATE_STRATEGY: "0x25286160e24a8567B24649AD230f581BC9DC1a66",
      ORACLE: "0x3c65e28D357a37589e1C7C86044a9f44dDC17134"
    }
  };
  var E_MODES7 = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "24",
      collateralAssets: [
        "0x4200000000000000000000000000000000000006",
        "0xc246553D4aff65E8091ed6072bE7Db6fb5318657"
      ],
      borrowableBitmap: "24",
      borrowableAssets: [
        "0x4200000000000000000000000000000000000006",
        "0xc246553D4aff65E8091ed6072bE7Db6fb5318657"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10250
    }
  };
  var EXTERNAL_LIBRARIES7 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Metis.mjs
  var AaveV3Metis_exports = {};
  __export(AaveV3Metis_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER15,
    ACL_ADMIN: () => ACL_ADMIN9,
    ACL_MANAGER: () => ACL_MANAGER9,
    ASSETS: () => ASSETS15,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD5,
    CHAIN_ID: () => CHAIN_ID29,
    COLLECTOR: () => COLLECTOR15,
    CONFIG_ENGINE: () => CONFIG_ENGINE12,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_17,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER13,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_17,
    EMISSION_MANAGER: () => EMISSION_MANAGER13,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES8,
    E_MODES: () => E_MODES8,
    FREEZING_STEWARD: () => FREEZING_STEWARD5,
    L2_ENCODER: () => L2_ENCODER4,
    ORACLE: () => ORACLE15,
    POOL: () => POOL16,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER15,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY13,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR15,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL15,
    POOL_IMPL: () => POOL_IMPL15,
    PRICE_ORACLE_SENTINEL: () => PRICE_ORACLE_SENTINEL2,
    RISK_STEWARD: () => RISK_STEWARD5,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY6,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER14,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER12,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER14
  });
  var POOL_ADDRESSES_PROVIDER15 = "0xB9FABd7500B2C6781c35Dd48d54f81fc2299D7AF";
  var POOL16 = "0x90df02551bB792286e8D4f13E0e357b4Bf1D6a57";
  var POOL_CONFIGURATOR15 = "0x69FEE8F261E004453BE0800BC9039717528645A6";
  var ORACLE15 = "0x38D36e85E47eA6ff0d18B0adF12E5fC8984A6f8e";
  var PRICE_ORACLE_SENTINEL2 = "0x2B5EA1604BAbb7B730120950Cb13951f3525828A";
  var ACL_ADMIN9 = "0x6fD45D32375d5aDB8D76275A3932c740F03a8718";
  var ACL_MANAGER9 = "0xcDCb65fc657B701a5100a12eFB663978E7e8fFB8";
  var AAVE_PROTOCOL_DATA_PROVIDER15 = "0xC01372469A17b6716A38F00c277533917B6859c0";
  var POOL_IMPL15 = "0xcA311Dce5b11436c7Bd7b3847E77adE29F829F8e";
  var POOL_CONFIGURATOR_IMPL15 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER13 = "0x30C1b8F0490fa0908863d6Cbd2E36400b4310A6B";
  var EMISSION_MANAGER13 = "0xfDb2580A1ac4CDc67E4236738b28af59e2022Dd2";
  var COLLECTOR15 = "0xB5b64c7E00374e766272f8B442Cd261412D4b118";
  var DEFAULT_A_TOKEN_IMPL_REV_17 = "0x246405C70461f93513C74606815615c24c5C8C79";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_17 = "0xE7fA271BD76FC9c6F2F968976E9f4f553256E02f";
  var CAPS_PLUS_RISK_STEWARD5 = "0x5f4d15d761528c57a5C30c43c1DAb26Fc5452731";
  var RISK_STEWARD5 = "0x58226D26658F19724cB881E9F747EeDC846BB1c9";
  var FREEZING_STEWARD5 = "0x2C77153fF4a1e83A8d8D750735FB101ECB55949f";
  var L2_ENCODER4 = "0x9f3A1B399A9074eBA63Dc4fc274bE2A2b2d80cB9";
  var CONFIG_ENGINE12 = "0x45918bB1D3F73904a30Ffc3eD11CdB1c05eBF726";
  var POOL_ADDRESSES_PROVIDER_REGISTRY13 = "0x9E7B73ffD9D2026F3ff4212c29E209E09C8A91F5";
  var UI_INCENTIVE_DATA_PROVIDER14 = "0xE92cd6164CE7DC68e740765BC1f2a091B6CBc3e4";
  var UI_POOL_DATA_PROVIDER12 = "0xc0179321f0825c3e0F59Fe7Ca4E40557b97797a3";
  var WALLET_BALANCE_PROVIDER14 = "0x1df710eb1E2FD9C21494aF2BFb1F210a4185885b";
  var STATIC_A_TOKEN_FACTORY6 = "0x9C62AdC332888F56998542415c38D7CDf3Ff7619";
  var CHAIN_ID29 = 1088;
  var ASSETS15 = {
    mDAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0",
      A_TOKEN: "0x85ABAdDcae06efee2CB5F75f33b6471759eFDE24",
      V_TOKEN: "0x13Bd89aF338f3c7eAE9a75852fC2F1ca28B4DDbF",
      INTEREST_RATE_STRATEGY: "0x258625AfDe0073f5Bbce50C0305f4C23B16C7F3a",
      ORACLE: "0xB3721282cd62Ba8F7bB02Cb843F3a34f9e109ef8",
      STATIC_A_TOKEN: "0x66a2E4cff95BDE6403Ed5541B396aA0B171e5509"
    },
    Metis: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000",
      A_TOKEN: "0x7314Ef2CA509490f65F52CC8FC9E0675C66390b8",
      V_TOKEN: "0x0110174183e13D5Ea59D7512226c5D5A47bA2c40",
      INTEREST_RATE_STRATEGY: "0x258625AfDe0073f5Bbce50C0305f4C23B16C7F3a",
      ORACLE: "0xD4a5Bb03B5D66d9bf81507379302Ac2C2DFDFa6D",
      STATIC_A_TOKEN: "0x5DE732A094A0ceF0eBFEcF0A916bDAB29650a784"
    },
    mUSDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xEA32A96608495e54156Ae48931A7c20f0dcc1a21",
      A_TOKEN: "0x885C8AEC5867571582545F894A5906971dB9bf27",
      V_TOKEN: "0x571171a7EF1e3c8c83d47EF1a50E225E9c351380",
      INTEREST_RATE_STRATEGY: "0x258625AfDe0073f5Bbce50C0305f4C23B16C7F3a",
      ORACLE: "0xF2acD6aE4fcf662161eA354dA844f224bf91FF8c",
      STATIC_A_TOKEN: "0xb24451C231C6e6A60aC46f45E98a267caae898f4"
    },
    mUSDT: {
      decimals: 6,
      id: 3,
      UNDERLYING: "0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC",
      A_TOKEN: "0xd9fa75D14c26720d5ce7eE2530793a823e8f07b9",
      V_TOKEN: "0x6B45DcE8aF4fE5Ab3bFCF030d8fB57718eAB54e5",
      INTEREST_RATE_STRATEGY: "0x258625AfDe0073f5Bbce50C0305f4C23B16C7F3a",
      ORACLE: "0xD1D7DCBDE72916646A7F8AcE6Ad8C5179D8ddFbB",
      STATIC_A_TOKEN: "0xAAea6F041425B813760dA201d08d46487034A266"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x420000000000000000000000000000000000000A",
      A_TOKEN: "0x8acAe35059C9aE27709028fF6689386a44c09f3a",
      V_TOKEN: "0x8Bb19e3DD277a73D4A95EE434F14cE4B92898421",
      INTEREST_RATE_STRATEGY: "0x258625AfDe0073f5Bbce50C0305f4C23B16C7F3a",
      ORACLE: "0x3BBe70e2F96c87aEce7F67A2b0178052f62E37fE",
      STATIC_A_TOKEN: "0x2f1606864d6322c54b50a1762D4a1ca67f42d23d"
    }
  };
  var E_MODES8 = {};
  var EXTERNAL_LIBRARIES8 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Gnosis.mjs
  var AaveV3Gnosis_exports = {};
  __export(AaveV3Gnosis_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER16,
    ACL_ADMIN: () => ACL_ADMIN10,
    ACL_MANAGER: () => ACL_MANAGER10,
    ASSETS: () => ASSETS16,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD6,
    CHAIN_ID: () => CHAIN_ID30,
    COLLECTOR: () => COLLECTOR16,
    CONFIG_ENGINE: () => CONFIG_ENGINE13,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER8,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_18,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER14,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_18,
    EMISSION_MANAGER: () => EMISSION_MANAGER14,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES9,
    E_MODES: () => E_MODES9,
    FREEZING_STEWARD: () => FREEZING_STEWARD6,
    ORACLE: () => ORACLE16,
    POOL: () => POOL17,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER16,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY14,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR16,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL16,
    POOL_IMPL: () => POOL_IMPL16,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER8,
    RISK_STEWARD: () => RISK_STEWARD6,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY7,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER8,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER15,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER13,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER15,
    WETH_GATEWAY: () => WETH_GATEWAY14,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER5
  });
  var POOL_ADDRESSES_PROVIDER16 = "0x36616cf17557639614c1cdDb356b1B83fc0B2132";
  var POOL17 = "0xb50201558B00496A145fE76f7424749556E326D8";
  var POOL_CONFIGURATOR16 = "0x7304979ec9E4EaA0273b6A037a31c4e9e5A75D16";
  var ORACLE16 = "0xeb0a051be10228213BAEb449db63719d6742F7c4";
  var ACL_ADMIN10 = "0x1dF462e2712496373A347f8ad10802a5E95f053D";
  var ACL_MANAGER10 = "0xEc710f59005f48703908bC519D552Df5B8472614";
  var AAVE_PROTOCOL_DATA_PROVIDER16 = "0x57038C3e3Fe0a170BB72DE2fD56E98e4d1a69717";
  var POOL_IMPL16 = "0xF2C312BfAF4CF0429DB4DA15a0cf5F770Ea3E770";
  var POOL_CONFIGURATOR_IMPL16 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER14 = "0xaD4F91D26254B6B0C6346b390dDA2991FDE2F20d";
  var EMISSION_MANAGER14 = "0x41585C50524fb8c3899B43D7D797d9486AAc94DB";
  var COLLECTOR16 = "0x3e652E97ff339B73421f824F5b03d75b62F1Fb51";
  var DEFAULT_A_TOKEN_IMPL_REV_18 = "0x589750BA8aF186cE5B55391B0b7148cAD43a1619";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_18 = "0xBeC519531F0E78BcDdB295242fA4EC5251B38574";
  var CONFIG_ENGINE13 = "0x97CB9e81d480A2AB03299760654C1DDC0C16bE07";
  var POOL_ADDRESSES_PROVIDER_REGISTRY14 = "0x1236010CECea55998384e795B59815D871f5f94d";
  var UI_INCENTIVE_DATA_PROVIDER15 = "0x5d4D4007A4c6336550DdAa2a7c0d5e7972eebd16";
  var UI_POOL_DATA_PROVIDER13 = "0x5598BbFA2f4fE8151f45bBA0a3edE1b54B51a0a9";
  var WALLET_BALANCE_PROVIDER15 = "0x4172E6aAEC070ACB31aaCE343A58c93E4C70f44D";
  var WETH_GATEWAY14 = "0x7B9c12915c594a68dE96201Cbdc79147F09da278";
  var CAPS_PLUS_RISK_STEWARD6 = "0x33AE1f41546a2e05368Bf789b3d868813c0Ae658";
  var RISK_STEWARD6 = "0x677c9f358dA5DC83aF6760a839E4448D72840d04";
  var FREEZING_STEWARD6 = "0x3Ceaf9b6CAb92dFe6302D0CC3F1BA880C28d35e5";
  var STATIC_A_TOKEN_FACTORY7 = "0x02e9b27599C4Bf8f789d34b6E65C51092c3d9FA6";
  var REPAY_WITH_COLLATERAL_ADAPTER8 = "0x86b0521f92a554057e54B93098BA2A6Aaa2F4ACB";
  var SWAP_COLLATERAL_ADAPTER8 = "0x63dfa7c09Dc2Ff4030d6B8Dc2ce6262BF898C8A4";
  var DEBT_SWAP_ADAPTER8 = "0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034";
  var WITHDRAW_SWAP_ADAPTER5 = "0xc0179321f0825c3e0F59Fe7Ca4E40557b97797a3";
  var CHAIN_ID30 = 100;
  var ASSETS16 = {
    WETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
      A_TOKEN: "0xa818F1B57c201E092C4A2017A91815034326Efd1",
      V_TOKEN: "0x0c0fce05F2314540EcB095bF4D069e5E0ED90fF8",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0xa767f745331D267c7751297D982b050c93985627",
      STATIC_A_TOKEN: "0xD843FB478c5aA9759FeA3f3c98D467e2F136190a"
    },
    wstETH: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6",
      A_TOKEN: "0x23e4E76D01B2002BE436CE8d6044b0aA2f68B68a",
      V_TOKEN: "0x9D881f67F20B49243c98f53d2B9E91E39d02Ae09",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0x8Ee42Ba520cA106294163fb8b1ffE9C6Fba35507",
      STATIC_A_TOKEN: "0xECfD0638175e291BA3F784A58FB9D38a25418904"
    },
    GNO: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb",
      A_TOKEN: "0xA1Fa064A85266E2Ca82DEe5C5CcEC84DF445760e",
      V_TOKEN: "0xBc59E99198DbA71985A66E1713cC89FFEC53f7FC",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0x22441d81416430A54336aB28765abd31a792Ad37",
      STATIC_A_TOKEN: "0x2D737e2B0e175f05D0904C208d6C4e40da570f65"
    },
    USDC: {
      decimals: 6,
      id: 3,
      UNDERLYING: "0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83",
      A_TOKEN: "0xc6B7AcA6DE8a6044E0e32d0c841a89244A10D284",
      V_TOKEN: "0x5F6f7B0a87CA3CF3d0b431Ae03EF3305180BFf4d",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0x0a2d05bc646C65A029e602c257DfA14adF8BfAd2",
      STATIC_A_TOKEN: "0x270bA1f35D8b87510D24F693fcCc0da02e6E4EeB"
    },
    WXDAI: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d",
      A_TOKEN: "0xd0Dd6cEF72143E22cCED4867eb0d5F2328715533",
      V_TOKEN: "0x281963D7471eCdC3A2Bd4503e24e89691cfe420D",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0xE5269eF0CE04E509E8134624c7BF043b21e10897",
      STATIC_A_TOKEN: "0x7f0EAE87Df30C468E0680c83549D0b3DE7664D4B"
    },
    EURe: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0xcB444e90D8198415266c6a2724b7900fb12FC56E",
      A_TOKEN: "0xEdBC7449a9b594CA4E053D9737EC5Dc4CbCcBfb2",
      V_TOKEN: "0xb96404e475f337A7E98e4a541C9b71309BB66c5A",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0xab70BCB260073d036d1660201e9d5405F5829b7a",
      STATIC_A_TOKEN: "0x8418D17640a74F1614AC3E1826F29e78714488a1"
    },
    sDAI: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xaf204776c7245bF4147c2612BF6e5972Ee483701",
      A_TOKEN: "0x7a5c3860a77a8DC1b225BD46d0fb2ac1C6D191BC",
      V_TOKEN: "0x8Fe06E1D8Aff42Bf6812CacF7854A2249a00bED7",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0x1D0f881Ce1a646E2f27Dec3c57Fa056cB838BCC2",
      STATIC_A_TOKEN: "0xf3f45960f8dE00D8ED614D445a5a268c6F6Dec4f"
    },
    USDCe: {
      decimals: 6,
      id: 7,
      UNDERLYING: "0x2a22f9c3b484c3629090FeED35F17Ff8F88f76F0",
      A_TOKEN: "0xC0333cb85B59a788d8C7CAe5e1Fd6E229A3E5a65",
      V_TOKEN: "0x37B9Ad6b5DC8Ad977AD716e92F49e9D200e58431",
      INTEREST_RATE_STRATEGY: "0x4cE496f0a390745102540faF041EF92FfD588b44",
      ORACLE: "0x0a2d05bc646C65A029e602c257DfA14adF8BfAd2",
      STATIC_A_TOKEN: "0xf0E7eC247b918311afa054E0AEdb99d74c31b809"
    }
  };
  var E_MODES9 = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "3",
      collateralAssets: [
        "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
        "0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6"
      ],
      borrowableBitmap: "3",
      borrowableAssets: [
        "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
        "0x6C76971f98945AE98dD7d4DFcA8711ebea946eA6"
      ],
      ltv: 9e3,
      liquidationThreshold: 9300,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES9 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3BNB.mjs
  var AaveV3BNB_exports = {};
  __export(AaveV3BNB_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER17,
    ACL_ADMIN: () => ACL_ADMIN11,
    ACL_MANAGER: () => ACL_MANAGER11,
    ASSETS: () => ASSETS17,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD7,
    CHAIN_ID: () => CHAIN_ID31,
    COLLECTOR: () => COLLECTOR17,
    CONFIG_ENGINE: () => CONFIG_ENGINE14,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER9,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_19,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER15,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_19,
    EMISSION_MANAGER: () => EMISSION_MANAGER15,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES10,
    E_MODES: () => E_MODES10,
    FREEZING_STEWARD: () => FREEZING_STEWARD7,
    ORACLE: () => ORACLE17,
    POOL: () => POOL18,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER17,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY15,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR17,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL17,
    POOL_IMPL: () => POOL_IMPL17,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER9,
    RISK_STEWARD: () => RISK_STEWARD7,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY8,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER9,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER16,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER14,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER16,
    WETH_GATEWAY: () => WETH_GATEWAY15,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER6
  });
  var POOL_ADDRESSES_PROVIDER17 = "0xff75B6da14FfbbfD355Daf7a2731456b3562Ba6D";
  var POOL18 = "0x6807dc923806fE8Fd134338EABCA509979a7e0cB";
  var POOL_CONFIGURATOR17 = "0x67bdF23C7fCE7C65fF7415Ba3F2520B45D6f9584";
  var ORACLE17 = "0x39bc1bfDa2130d6Bb6DBEfd366939b4c7aa7C697";
  var ACL_ADMIN11 = "0x9390B1735def18560c509E2d0bc090E9d6BA257a";
  var ACL_MANAGER11 = "0x2D97F8FA96886Fd923c065F5457F9DDd494e3877";
  var AAVE_PROTOCOL_DATA_PROVIDER17 = "0x23dF2a19384231aFD114b036C14b6b03324D79BC";
  var POOL_IMPL17 = "0xB769c2A9259B3Eedaf120d8643C4C7EAe977fd7f";
  var POOL_CONFIGURATOR_IMPL17 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER15 = "0xC206C2764A9dBF27d599613b8F9A63ACd1160ab4";
  var EMISSION_MANAGER15 = "0x6eD1c70aa357fB8a7e1Eac85aa59e33287Df8f85";
  var COLLECTOR17 = "0x25Ec457d1778b0E5316e7f38f3c22baF413F1A8C";
  var DEFAULT_A_TOKEN_IMPL_REV_19 = "0x6c23bAF050ec192afc0B967a93b83e6c5405df43";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_19 = "0x777fBA024bA1228fDa76149A4ff8B23475ed057D";
  var CAPS_PLUS_RISK_STEWARD7 = "0x971F1C94b139AdEdedA729DA636e2B0C433Ff595";
  var RISK_STEWARD7 = "0xbe7998712402B6A63975515A532Ce503437998b7";
  var FREEZING_STEWARD7 = "0x83f15Bc50d1A212576B202f80489502a7cc10412";
  var DEBT_SWAP_ADAPTER9 = "0x5d4D4007A4c6336550DdAa2a7c0d5e7972eebd16";
  var CONFIG_ENGINE14 = "0x249396a890F89D47F89326d7EE116b1d374Fb3A9";
  var POOL_ADDRESSES_PROVIDER_REGISTRY15 = "0x117684358D990E42Eb1649E7e8C4691951dc1E71";
  var REPAY_WITH_COLLATERAL_ADAPTER9 = "0x5598BbFA2f4fE8151f45bBA0a3edE1b54B51a0a9";
  var SWAP_COLLATERAL_ADAPTER9 = "0x33E0b3fc976DC9C516926BA48CfC0A9E10a2aAA5";
  var UI_INCENTIVE_DATA_PROVIDER16 = "0x5c5228aC8BC1528482514aF3e27E692495148717";
  var UI_POOL_DATA_PROVIDER14 = "0xc0179321f0825c3e0F59Fe7Ca4E40557b97797a3";
  var WALLET_BALANCE_PROVIDER16 = "0x36616cf17557639614c1cdDb356b1B83fc0B2132";
  var WETH_GATEWAY15 = "0xe63eAf6DAb1045689BD3a332bC596FfcF54A5C88";
  var WITHDRAW_SWAP_ADAPTER6 = "0x5E2d083417D12d4B0824E14Ecd48D26831F4Da7D";
  var STATIC_A_TOKEN_FACTORY8 = "0x326aB0868bD279382Be2DF5E228Cb8AF38649AB4";
  var CHAIN_ID31 = 56;
  var ASSETS17 = {
    Cake: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",
      A_TOKEN: "0x4199CC1F5ed0d796563d7CcB2e036253E2C18281",
      V_TOKEN: "0xE20dBC7119c635B1B51462f844861258770e0699",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0xB6064eD41d4f67e353768aA239cA86f4F73665a1",
      STATIC_A_TOKEN: "0x3854354CE3681da1D7F550073061E92a4a7d1B27"
    },
    WBNB: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
      A_TOKEN: "0x9B00a09492a626678E5A3009982191586C444Df9",
      V_TOKEN: "0x0E76414d433ddfe8004d2A7505d218874875a996",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE",
      STATIC_A_TOKEN: "0x436baCb4C66583de4Cb16e13a1A0D9A3075DE425"
    },
    BTCB: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",
      A_TOKEN: "0x56a7ddc4e848EbF43845854205ad71D5D5F72d3D",
      V_TOKEN: "0x7b1E82F4f542fbB25D64c5523Fe3e44aBe4F2702",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x264990fbd0A4796A3E3d8E37C4d5F87a3aCa5Ebf",
      STATIC_A_TOKEN: "0x1F66b530084079d35478A069d9c4424F9c9C320c"
    },
    ETH: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x2170Ed0880ac9A755fd29B2688956BD959F933F8",
      A_TOKEN: "0x2E94171493fAbE316b6205f1585779C887771E2F",
      V_TOKEN: "0x8FDea7891b4D6dbdc746309245B316aF691A636C",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x9ef1B8c0E4F7dc8bF5719Ea496883DC6401d5b2e",
      STATIC_A_TOKEN: "0x52077433fB7053D747E2846aD0C18ff5015C368E"
    },
    USDC: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      A_TOKEN: "0x00901a076785e0906d1028c7d6372d247bec7d61",
      V_TOKEN: "0xcDBBEd5606d9c5C98eEedd67933991dC17F0c68d",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0xaFcFF74AE956f4c23c27Db49659D4a7F350415C1",
      STATIC_A_TOKEN: "0x3906cDdfb781f02B21f21BD81ed7Fd8DC37075E1"
    },
    USDT: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0x55d398326f99059fF775485246999027B3197955",
      A_TOKEN: "0xa9251ca9DE909CB71783723713B21E4233fbf1B1",
      V_TOKEN: "0xF8bb2Be50647447Fb355e3a77b81be4db64107cd",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x0F682319Ed4A240b7a2599A48C965049515D9bC3",
      STATIC_A_TOKEN: "0x0471D185cc7Be61E154277cAB2396cD397663da6"
    },
    FDUSD: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xc5f0f7b66764F6ec8C8Dff7BA683102295E16409",
      A_TOKEN: "0x75bd1A659bdC62e4C313950d44A2416faB43E785",
      V_TOKEN: "0xE628B8a123e6037f1542e662B9F55141a16945C8",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0x60a117Fa5bAbee4d645884fB11E413Da4F893b6D",
      STATIC_A_TOKEN: "0x4d074aAa0821073dA827f7bf6a02cF905b394ed0"
    },
    wstETH: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x26c5e01524d2E6280A48F2c50fF6De7e52E9611C",
      A_TOKEN: "0xBDFd4E51D3c14a232135f04988a42576eFb31519",
      V_TOKEN: "0x2c391998308c56D7572A8F501D58CB56fB9Fe1C5",
      INTEREST_RATE_STRATEGY: "0x86AB1C62A8bf868E1b3E1ab87d587Aba6fbCbDC5",
      ORACLE: "0xc1377B4cdF9116bf7b3d7F72A4f8A7Be8506cE80"
    }
  };
  var E_MODES10 = {
    "1": {
      label: "ETH-Correlated",
      collateralBitmap: "128",
      collateralAssets: ["0x26c5e01524d2E6280A48F2c50fF6De7e52E9611C"],
      borrowableBitmap: "8",
      borrowableAssets: ["0x2170Ed0880ac9A755fd29B2688956BD959F933F8"],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES10 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Arbitrum.mjs
  var AaveV3Arbitrum_exports = {};
  __export(AaveV3Arbitrum_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER18,
    ACL_ADMIN: () => ACL_ADMIN12,
    ACL_MANAGER: () => ACL_MANAGER12,
    ASSETS: () => ASSETS18,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD8,
    CHAIN_ID: () => CHAIN_ID32,
    COLLECTOR: () => COLLECTOR18,
    CONFIG_ENGINE: () => CONFIG_ENGINE15,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER10,
    DEFAULT_A_TOKEN_IMPL_REV_2: () => DEFAULT_A_TOKEN_IMPL_REV_23,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER16,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_2: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_23,
    EMISSION_MANAGER: () => EMISSION_MANAGER16,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES11,
    E_MODES: () => E_MODES11,
    FREEZING_STEWARD: () => FREEZING_STEWARD8,
    L2_ENCODER: () => L2_ENCODER5,
    ORACLE: () => ORACLE18,
    POOL: () => POOL19,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER18,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY16,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR18,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL18,
    POOL_IMPL: () => POOL_IMPL18,
    PRICE_ORACLE_SENTINEL: () => PRICE_ORACLE_SENTINEL3,
    RATES_FACTORY: () => RATES_FACTORY5,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER10,
    RISK_STEWARD: () => RISK_STEWARD8,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY9,
    STATIC_A_TOKEN_ORACLE: () => STATIC_A_TOKEN_ORACLE2,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER10,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER17,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER15,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER17,
    WETH_GATEWAY: () => WETH_GATEWAY16,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER7
  });
  var POOL_ADDRESSES_PROVIDER18 = "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb";
  var POOL19 = "0x794a61358D6845594F94dc1DB02A252b5b4814aD";
  var POOL_CONFIGURATOR18 = "0x8145eddDf43f50276641b55bd3AD95944510021E";
  var ORACLE18 = "0xb56c2F0B653B2e0b10C9b928C8580Ac5Df02C7C7";
  var PRICE_ORACLE_SENTINEL3 = "0x7A9ff54A6eE4a21223036890bB8c4ea2D62c686b";
  var ACL_ADMIN12 = "0xFF1137243698CaA18EE364Cc966CF0e02A4e6327";
  var ACL_MANAGER12 = "0xa72636CbcAa8F5FF95B2cc47F3CDEe83F3294a0B";
  var AAVE_PROTOCOL_DATA_PROVIDER18 = "0x7F23D86Ee20D869112572136221e173428DD740B";
  var POOL_IMPL18 = "0x7A7eF57479123f26DB6a0e3EFbF8A3562EDD65BE";
  var POOL_CONFIGURATOR_IMPL18 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER16 = "0x929EC64c34a17401F460460D4B9390518E5B473e";
  var EMISSION_MANAGER16 = "0x048f2228D7Bf6776f99aB50cB1b1eaB4D1d4cA73";
  var COLLECTOR18 = "0x053D55f9B5AF8694c503EB288a1B7E552f590710";
  var DEFAULT_A_TOKEN_IMPL_REV_23 = "0x1Be1798b70aEe431c2986f7ff48d9D1fa350786a";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_23 = "0x5E76E98E0963EcDC6A065d1435F84065b7523f39";
  var CAPS_PLUS_RISK_STEWARD8 = "0xADf86b537eF08591c2777E144322E8b0Ca7E82a7";
  var RISK_STEWARD8 = "0x14568979093FFF97aeBD73F58051a4f0e297b1eB";
  var FREEZING_STEWARD8 = "0xe59470B3BE3293534603487E00A44C72f2CD466d";
  var DEBT_SWAP_ADAPTER10 = "0x63dfa7c09Dc2Ff4030d6B8Dc2ce6262BF898C8A4";
  var L2_ENCODER5 = "0x9abADECD08572e0eA5aF4d47A9C7984a5AA503dC";
  var CONFIG_ENGINE15 = "0x5EcF74eb2feC38fe80F8f20f7eb302F276635fff";
  var POOL_ADDRESSES_PROVIDER_REGISTRY16 = "0x770ef9f4fe897e59daCc474EF11238303F9552b6";
  var RATES_FACTORY5 = "0xcC47c4Fe1F7f29ff31A8b62197023aC8553C7896";
  var REPAY_WITH_COLLATERAL_ADAPTER10 = "0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034";
  var STATIC_A_TOKEN_FACTORY9 = "0x411D79b8cC43384FDE66CaBf9b6a17180c842511";
  var STATIC_A_TOKEN_ORACLE2 = "0xD61BF98649EA8F8D09e184184777b1867F00E5CB";
  var SWAP_COLLATERAL_ADAPTER10 = "0xF3C3F14dd7BDb7E03e6EBc3bc5Ffc6D66De12251";
  var UI_INCENTIVE_DATA_PROVIDER17 = "0x68100bD5345eA474D93577127C11F39FF8463e93";
  var UI_POOL_DATA_PROVIDER15 = "0x5c5228aC8BC1528482514aF3e27E692495148717";
  var WALLET_BALANCE_PROVIDER17 = "0xBc790382B3686abffE4be14A030A96aC6154023a";
  var WETH_GATEWAY16 = "0x5760E34c4003752329bC77790B1De44C2799F8C3";
  var WITHDRAW_SWAP_ADAPTER7 = "0x5598BbFA2f4fE8151f45bBA0a3edE1b54B51a0a9";
  var CHAIN_ID32 = 42161;
  var ASSETS18 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
      A_TOKEN: "0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE",
      V_TOKEN: "0x8619d80FB0141ba7F184CbF22fd724116D9f7ffC",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x4a838a3Dac6633bB1fd932B6f356DecFCAf7803D",
      STATIC_A_TOKEN: "0xc91c5297d7E161aCC74b482aAfCc75B85cc0bfeD"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
      A_TOKEN: "0x191c10Aa4AF7C30e871E70C95dB0E4eb77237530",
      V_TOKEN: "0x953A573793604aF8d41F306FEb8274190dB4aE0e",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x86E53CF1B870786351Da77A57575e79CB55812CB",
      STATIC_A_TOKEN: "0x27dE098EF2772386cBCf1a4c8BEb886368b7F9a9"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      A_TOKEN: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
      V_TOKEN: "0xFCCf3cAbbe80101232d343252614b6A3eE81C989",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0xDe25a88F87FEd9F8999fAbF6729dCB121893623C",
      STATIC_A_TOKEN: "0x0Bc9E52051f553E75550CA22C196bf132c52Cf0B"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      A_TOKEN: "0x078f358208685046a11C85e8ad32895DED33A249",
      V_TOKEN: "0x92b42c66840C7AD907b4BF74879FF3eF7c529473",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x6ce185860a4963106506C203335A2910413708e9",
      STATIC_A_TOKEN: "0x32B95Fbe04e5a51cF99FeeF4e57Cf7e3FC9c5A93"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      A_TOKEN: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
      V_TOKEN: "0x0c84331e39d6658Cd6e6b9ba04736cC4c4734351",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x639Fe6ab55C921f74e7fac1ee960C0B6293ba612",
      STATIC_A_TOKEN: "0x352F3475716261dCC991Bd5F2aF973eB3D0F5878"
    },
    USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
      A_TOKEN: "0x6ab707Aca953eDAeFBc4fD23bA73294241490620",
      V_TOKEN: "0xfb00AC187a8Eb5AFAE4eACE434F493Eb62672df7",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x84dC1C52D7C340AA54B4e8799FBB31C3D28E67aD",
      STATIC_A_TOKEN: "0xb165a74407fE1e519d6bCbDeC1Ed3202B35a4140"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xba5DdD1f9d7F570dc94a51479a000E3BCE967196",
      A_TOKEN: "0xf329e36C7bF6E5E86ce2150875a84Ce77f477375",
      V_TOKEN: "0xE80761Ea617F66F96274eA5e8c37f03960ecC679",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0xaD1d5344AaDE45F43E596773Bcc4c423EAbdD034",
      STATIC_A_TOKEN: "0x1C0c8EcED17aE093b3C1a1a8fFeBE2E9513a9346"
    },
    EURS: {
      decimals: 2,
      id: 7,
      UNDERLYING: "0xD22a58f79e9481D1a88e00c343885A588b34b68B",
      A_TOKEN: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
      V_TOKEN: "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0xA14d53bC1F1c0F31B4aA3BD109344E5009051a84",
      STATIC_A_TOKEN: "0x9a40747BE51185A416B181789B671E78a8d045dD"
    },
    wstETH: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x5979D7b546E38E414F7E9822514be443A4800529",
      A_TOKEN: "0x513c7E3a9c69cA3e22550eF58AC1C0088e918FFf",
      V_TOKEN: "0x77CA01483f379E58174739308945f044e1a764dc",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x87fE1503beFBF98C35c7526B0c488d950F822C0F",
      STATIC_A_TOKEN: "0x7775d4Ae4Dbb79a624fB96AAcDB8Ca74F671c0DF"
    },
    MAI: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0x3F56e0c36d275367b8C502090EDF38289b3dEa0d",
      A_TOKEN: "0xc45A479877e1e9Dfe9FcD4056c699575a1045dAA",
      V_TOKEN: "0x34e2eD44EF7466D5f9E0b782B5c08b57475e7907",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x7a7cE08a1057723CCEDeA2462407427Ae33FFEb2",
      STATIC_A_TOKEN: "0xB4a0a2692D82301703B27082Cda45B083F68CAcE"
    },
    rETH: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0xEC70Dcb4A1EFa46b8F2D97C310C9c4790ba5ffA8",
      A_TOKEN: "0x8Eb270e296023E9D92081fdF967dDd7878724424",
      V_TOKEN: "0xCE186F6Cccb0c955445bb9d10C59caE488Fea559",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x256f33FC0110B1297f78f48524631D30B752480D",
      STATIC_A_TOKEN: "0x68235105d6d33A19369D24b746cb7481FB2b34fd"
    },
    LUSD: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0x93b346b6BC2548dA6A1E7d98E9a421B42541425b",
      A_TOKEN: "0x8ffDf2DE812095b1D19CB146E4c004587C0A0692",
      V_TOKEN: "0xA8669021776Bc142DfcA87c21b4A52595bCbB40a",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x341B110bDF665A20F0D5f84A92FcAF5EbeEBC629",
      STATIC_A_TOKEN: "0xDbB6314b5b07E63B7101844c0346309B79f8C20A"
    },
    USDCn: {
      decimals: 6,
      id: 12,
      UNDERLYING: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
      A_TOKEN: "0x724dc807b04555b71ed48a6896b6F41593b8C637",
      V_TOKEN: "0xf611aEb5013fD2c0511c9CD55c7dc5C1140741A6",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0xDe25a88F87FEd9F8999fAbF6729dCB121893623C",
      STATIC_A_TOKEN: "0x7CFaDFD5645B50bE87d546f42699d863648251ad"
    },
    FRAX: {
      decimals: 18,
      id: 13,
      UNDERLYING: "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
      A_TOKEN: "0x38d693cE1dF5AaDF7bC62595A37D667aD57922e5",
      V_TOKEN: "0x5D557B07776D12967914379C71a1310e917C7555",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x06919EB75Bd6BA817D38CC70C1CA588ac7a01C10",
      STATIC_A_TOKEN: "0x89AEc2023f89E26Dbb7eaa7a98fe3996f9d112A8"
    },
    ARB: {
      decimals: 18,
      id: 14,
      UNDERLYING: "0x912CE59144191C1204E64559FE8253a0e49E6548",
      A_TOKEN: "0x6533afac2E7BCCB20dca161449A13A32D391fb00",
      V_TOKEN: "0x44705f578135cC5d703b4c9c122528C73Eb87145",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0xb2A824043730FE05F3DA2efaFa1CBbe83fa548D6",
      STATIC_A_TOKEN: "0x9b5637d7952BC9fa2D693aAE51f3103760Bf2693"
    },
    weETH: {
      decimals: 18,
      id: 15,
      UNDERLYING: "0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe",
      A_TOKEN: "0x8437d7C167dFB82ED4Cb79CD44B7a32A1dd95c77",
      V_TOKEN: "0x3ca5FA07689F266e907439aFd1fBB59c44fe12f6",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0x517276B5972C4Db7E88B9F76Ee500E888a2D73C3"
    },
    GHO: {
      decimals: 18,
      id: 16,
      UNDERLYING: "0x7dfF72693f6A4149b17e7C6314655f6A9F7c8B33",
      A_TOKEN: "0xeBe517846d0F36eCEd99C735cbF6131e1fEB775D",
      V_TOKEN: "0x18248226C16BF76c032817854E7C83a2113B4f06",
      INTEREST_RATE_STRATEGY: "0x429F16dBA3B9e1900087Cbaa7b50D38Bc60fB73F",
      ORACLE: "0xB05984aD83C20b3ADE7bf97a9a0Cb539DDE28DBb",
      STATIC_A_TOKEN: "0xD9FBA68D89178e3538e708939332c79efC540179"
    }
  };
  var E_MODES11 = {
    "1": {
      label: "Stablecoins",
      collateralBitmap: "4261",
      collateralAssets: [
        "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        "0xD22a58f79e9481D1a88e00c343885A588b34b68B",
        "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
      ],
      borrowableBitmap: "4261",
      borrowableAssets: [
        "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        "0xD22a58f79e9481D1a88e00c343885A588b34b68B",
        "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    },
    "2": {
      label: "ETH correlated",
      collateralBitmap: "33040",
      collateralAssets: [
        "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "0x5979D7b546E38E414F7E9822514be443A4800529",
        "0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe"
      ],
      borrowableBitmap: "33040",
      borrowableAssets: [
        "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "0x5979D7b546E38E414F7E9822514be443A4800529",
        "0x35751007a407ca6FEFfE80b3cB397736D2cf4dbe"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES11 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3ArbitrumSepolia.mjs
  var AaveV3ArbitrumSepolia_exports = {};
  __export(AaveV3ArbitrumSepolia_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER19,
    ACL_ADMIN: () => ACL_ADMIN13,
    ACL_MANAGER: () => ACL_MANAGER13,
    ASSETS: () => ASSETS19,
    CHAIN_ID: () => CHAIN_ID33,
    COLLECTOR: () => COLLECTOR19,
    CONFIG_ENGINE: () => CONFIG_ENGINE16,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_110,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER17,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_110,
    EMISSION_MANAGER: () => EMISSION_MANAGER17,
    L2_ENCODER: () => L2_ENCODER6,
    ORACLE: () => ORACLE19,
    POOL: () => POOL20,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER19,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY17,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR19,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL19,
    POOL_IMPL: () => POOL_IMPL19,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER18,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER16,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER18,
    WETH_GATEWAY: () => WETH_GATEWAY17
  });
  var POOL_ADDRESSES_PROVIDER19 = "0xB25a5D144626a0D488e52AE717A051a2E9997076";
  var POOL20 = "0xBfC91D59fdAA134A4ED45f7B584cAf96D7792Eff";
  var POOL_CONFIGURATOR19 = "0x8E4Bb46E6245a507F1a267ef488228B08c0dc664";
  var ORACLE19 = "0xEf95A6B9e88Bd509Fd67BA741cf2b263DaC65c00";
  var ACL_ADMIN13 = "0xC08C599C22bfD4a729E33e1Ed9b49456Abad0005";
  var ACL_MANAGER13 = "0xB66f0fF09f256A73d2E2b5faF596b363A21a7D68";
  var AAVE_PROTOCOL_DATA_PROVIDER19 = "0x12373B5085e3b42D42C1D4ABF3B3Cf4Df0E0Fa01";
  var POOL_IMPL19 = "0x82405D1a189bd6cE4667809C35B37fBE136A4c5B";
  var POOL_CONFIGURATOR_IMPL19 = "0x629A5a607aC4901252e4C48a0Fde156785598F5b";
  var DEFAULT_INCENTIVES_CONTROLLER17 = "0x3A203B14CF8749a1e3b7314c6c49004B77Ee667A";
  var EMISSION_MANAGER17 = "0x54E3aa872c3d2A89D1A6495F770f2cCa2C4Fc185";
  var COLLECTOR19 = "0xa0208CE8356ad6C5EC6dFb8996c9A6B828212022";
  var DEFAULT_A_TOKEN_IMPL_REV_110 = "0xc0Bac16A64FbAa7EE6483bD12a759e28cD13dcBe";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_110 = "0x486C2D3F59E4d72f3cAa301a7eF19E3db657F5b0";
  var L2_ENCODER6 = "0x2E45e7dCD1e94d8edf1605FfF4602912FDC662bC";
  var CONFIG_ENGINE16 = "0x0a275C06556EeB3c7Ff2b0f0cfD462A7645772EF";
  var POOL_ADDRESSES_PROVIDER_REGISTRY17 = "0xbB7492Cce831eE6F349960a6E2da8eadC4b50cA3";
  var UI_INCENTIVE_DATA_PROVIDER18 = "0xB90fa850a4af6D30feA8b41989eaAecDcA8fd414";
  var UI_POOL_DATA_PROVIDER16 = "0x97Cf44bF6a9A3D2B4F32b05C480dBEdC018F72A9";
  var WALLET_BALANCE_PROVIDER18 = "0x1Be33D186a081eFDf15310e4bdEd81E828C47f9b";
  var WETH_GATEWAY17 = "0x20040a64612555042335926d72B4E5F667a67fA1";
  var CHAIN_ID33 = 421614;
  var ASSETS19 = {
    USDC: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d",
      A_TOKEN: "0x460b97BD498E1157530AEb3086301d5225b91216",
      V_TOKEN: "0x4fBE3A94C60A5085dA6a2D309965DcF34c36711d",
      INTEREST_RATE_STRATEGY: "0x5C0A210C9C0df2Ab147BDE7D9583c07cEb3131CD",
      ORACLE: "0x0153002d20B96532C639313c2d54c3dA09109309"
    },
    WETH: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x1dF462e2712496373A347f8ad10802a5E95f053D",
      A_TOKEN: "0xf5f17EbE81E516Dc7cB38D61908EC252F150CE60",
      V_TOKEN: "0x372eB464296D8D78acaa462b41eaaf2D3663dAD3",
      INTEREST_RATE_STRATEGY: "0x46d3a2A27E2c700d74f21AD3290A20cB8437F7b7",
      ORACLE: "0xd30e2101a97dcbAeBCBC04F14C3f624E67A35165"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Optimism.mjs
  var AaveV3Optimism_exports = {};
  __export(AaveV3Optimism_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER20,
    ACL_ADMIN: () => ACL_ADMIN14,
    ACL_MANAGER: () => ACL_MANAGER14,
    ASSETS: () => ASSETS20,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD9,
    CHAIN_ID: () => CHAIN_ID34,
    COLLECTOR: () => COLLECTOR20,
    CONFIG_ENGINE: () => CONFIG_ENGINE17,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER11,
    DEFAULT_A_TOKEN_IMPL_REV_2: () => DEFAULT_A_TOKEN_IMPL_REV_24,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER18,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_2: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_24,
    EMISSION_MANAGER: () => EMISSION_MANAGER18,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES12,
    E_MODES: () => E_MODES12,
    FREEZING_STEWARD: () => FREEZING_STEWARD9,
    L2_ENCODER: () => L2_ENCODER7,
    ORACLE: () => ORACLE20,
    POOL: () => POOL21,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER20,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY18,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR20,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL20,
    POOL_IMPL: () => POOL_IMPL20,
    PRICE_ORACLE_SENTINEL: () => PRICE_ORACLE_SENTINEL4,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER11,
    RISK_STEWARD: () => RISK_STEWARD9,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY10,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER11,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER19,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER17,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER19,
    WETH_GATEWAY: () => WETH_GATEWAY18,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER8
  });
  var POOL_ADDRESSES_PROVIDER20 = "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb";
  var POOL21 = "0x794a61358D6845594F94dc1DB02A252b5b4814aD";
  var POOL_CONFIGURATOR20 = "0x8145eddDf43f50276641b55bd3AD95944510021E";
  var ORACLE20 = "0xD81eb3728a631871a7eBBaD631b5f424909f0c77";
  var PRICE_ORACLE_SENTINEL4 = "0xE229d5DE4BD5beEAf12d427B5B57BFe66abD2c3b";
  var ACL_ADMIN14 = "0x746c675dAB49Bcd5BB9Dc85161f2d7Eb435009bf";
  var ACL_MANAGER14 = "0xa72636CbcAa8F5FF95B2cc47F3CDEe83F3294a0B";
  var AAVE_PROTOCOL_DATA_PROVIDER20 = "0x7F23D86Ee20D869112572136221e173428DD740B";
  var POOL_IMPL20 = "0x7A7eF57479123f26DB6a0e3EFbF8A3562EDD65BE";
  var POOL_CONFIGURATOR_IMPL20 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER18 = "0x929EC64c34a17401F460460D4B9390518E5B473e";
  var EMISSION_MANAGER18 = "0x048f2228D7Bf6776f99aB50cB1b1eaB4D1d4cA73";
  var COLLECTOR20 = "0xB2289E329D2F85F1eD31Adbb30eA345278F21bcf";
  var DEFAULT_A_TOKEN_IMPL_REV_24 = "0xbCb167bDCF14a8F791d6f4A6EDd964aed2F8813B";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_24 = "0x04a8D477eE202aDCE1682F5902e1160455205b12";
  var CAPS_PLUS_RISK_STEWARD9 = "0x5E76E98E0963EcDC6A065d1435F84065b7523f39";
  var RISK_STEWARD9 = "0x928807b90A74210268B590D0159FCf1340Ad76Bd";
  var FREEZING_STEWARD9 = "0x3829943c53F2d00e20B58475aF19716724bF90Ba";
  var DEBT_SWAP_ADAPTER11 = "0xE28E2c8d240dd5eBd0adcab86fbD79df7a052034";
  var L2_ENCODER7 = "0x9abADECD08572e0eA5aF4d47A9C7984a5AA503dC";
  var CONFIG_ENGINE17 = "0x1AA25FdD7d55FA8a401D6EFba8e48874Ef730E55";
  var POOL_ADDRESSES_PROVIDER_REGISTRY18 = "0x770ef9f4fe897e59daCc474EF11238303F9552b6";
  var REPAY_WITH_COLLATERAL_ADAPTER11 = "0x5d4D4007A4c6336550DdAa2a7c0d5e7972eebd16";
  var STATIC_A_TOKEN_FACTORY10 = "0x22D76094730fA377184100EFB8CEfC673B89B372";
  var SWAP_COLLATERAL_ADAPTER11 = "0x830C5A67a0C95D69dA5fb7801Ac1773c6fB53857";
  var UI_INCENTIVE_DATA_PROVIDER19 = "0x5c5228aC8BC1528482514aF3e27E692495148717";
  var UI_POOL_DATA_PROVIDER17 = "0xE92cd6164CE7DC68e740765BC1f2a091B6CBc3e4";
  var WALLET_BALANCE_PROVIDER19 = "0xBc790382B3686abffE4be14A030A96aC6154023a";
  var WETH_GATEWAY18 = "0x60eE8b61a13c67d0191c851BEC8F0bc850160710";
  var WITHDRAW_SWAP_ADAPTER8 = "0x78F8Bd884C3D738B74B420540659c82f392820e0";
  var CHAIN_ID34 = 10;
  var ASSETS20 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
      A_TOKEN: "0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE",
      V_TOKEN: "0x8619d80FB0141ba7F184CbF22fd724116D9f7ffC",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x1a96fe91278bcF6F19665F642FE7a88cD5c360bb",
      STATIC_A_TOKEN: "0x6dDc64289bE8a71A707fB057d5d07Cc756055d6e"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x350a791Bfc2C21F9Ed5d10980Dad2e2638ffa7f6",
      A_TOKEN: "0x191c10Aa4AF7C30e871E70C95dB0E4eb77237530",
      V_TOKEN: "0x953A573793604aF8d41F306FEb8274190dB4aE0e",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0xCc232dcFAAE6354cE191Bd574108c1aD03f86450",
      STATIC_A_TOKEN: "0x39BCf217ACc4Bf2fCaF7BC8800E69D986912c75e"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
      A_TOKEN: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
      V_TOKEN: "0xFCCf3cAbbe80101232d343252614b6A3eE81C989",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x2daA7078f78485A708003989cBc9a643e3b4B61f",
      STATIC_A_TOKEN: "0x9F281eb58fd98ad98EDe0fc4C553AD4D73e7Ca2C"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x68f180fcCe6836688e9084f035309E29Bf0A2095",
      A_TOKEN: "0x078f358208685046a11C85e8ad32895DED33A249",
      V_TOKEN: "0x92b42c66840C7AD907b4BF74879FF3eF7c529473",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0xD702DD976Fb76Fffc2D3963D037dfDae5b04E593",
      STATIC_A_TOKEN: "0x6d998FeEFC7B3664eaD09CAf02b5a0fc2E365F18"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x4200000000000000000000000000000000000006",
      A_TOKEN: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
      V_TOKEN: "0x0c84331e39d6658Cd6e6b9ba04736cC4c4734351",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x13e3Ee699D1909E989722E753853AE30b17e08c5",
      STATIC_A_TOKEN: "0x98d69620C31869fD4822ceb6ADAB31180475FD37"
    },
    USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
      A_TOKEN: "0x6ab707Aca953eDAeFBc4fD23bA73294241490620",
      V_TOKEN: "0xfb00AC187a8Eb5AFAE4eACE434F493Eb62672df7",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x70E6DBBFFc9c3c6fB4a9c349E3101B7dCEE67f4D",
      STATIC_A_TOKEN: "0x035c93db04E5aAea54E6cd0261C492a3e0638b37"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x76FB31fb4af56892A25e32cFC43De717950c9278",
      A_TOKEN: "0xf329e36C7bF6E5E86ce2150875a84Ce77f477375",
      V_TOKEN: "0xE80761Ea617F66F96274eA5e8c37f03960ecC679",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x338ed6787f463394D24813b297401B9F05a8C9d1",
      STATIC_A_TOKEN: "0xae0Ca1B1Bc6cac26981B5e2b9c40f8Ce8A9082eE"
    },
    sUSD: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9",
      A_TOKEN: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
      V_TOKEN: "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0xC77E9CF9603F5ef5503213229ABB1Fec3001f312",
      STATIC_A_TOKEN: "0x3A956E2Fcc7e71Ea14b0257d40BEbdB287d19652"
    },
    OP: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x4200000000000000000000000000000000000042",
      A_TOKEN: "0x513c7E3a9c69cA3e22550eF58AC1C0088e918FFf",
      V_TOKEN: "0x77CA01483f379E58174739308945f044e1a764dc",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x0D276FC14719f9292D5C1eA2198673d1f4269246",
      STATIC_A_TOKEN: "0xd4F1Cf9A038269FE8F03745C2875591Ad6438ab1"
    },
    wstETH: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb",
      A_TOKEN: "0xc45A479877e1e9Dfe9FcD4056c699575a1045dAA",
      V_TOKEN: "0x34e2eD44EF7466D5f9E0b782B5c08b57475e7907",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x724E47194d97263ccb71FDad84b4fed18a8be387",
      STATIC_A_TOKEN: "0xb972abef80046A57409e37a7DF5dEf2638917516"
    },
    LUSD: {
      decimals: 18,
      id: 10,
      UNDERLYING: "0xc40F949F8a4e094D1b49a23ea9241D289B7b2819",
      A_TOKEN: "0x8Eb270e296023E9D92081fdF967dDd7878724424",
      V_TOKEN: "0xCE186F6Cccb0c955445bb9d10C59caE488Fea559",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x8f4dAFb6Feb190e7846eb7665fD49FFb1177Ff8e",
      STATIC_A_TOKEN: "0x84648dc3Cefb601bc28a49A07a1A8Bad04D30Ad3"
    },
    MAI: {
      decimals: 18,
      id: 11,
      UNDERLYING: "0xdFA46478F9e5EA86d57387849598dbFB2e964b02",
      A_TOKEN: "0x8ffDf2DE812095b1D19CB146E4c004587C0A0692",
      V_TOKEN: "0xA8669021776Bc142DfcA87c21b4A52595bCbB40a",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0xc6ac65E8f4F50a6655Efd78A92b6c503B5B625C8",
      STATIC_A_TOKEN: "0x60495bC8D8Baf7E866888ecC00491e37B47dfF24"
    },
    rETH: {
      decimals: 18,
      id: 12,
      UNDERLYING: "0x9Bcef72be871e61ED4fBbc7630889beE758eb81D",
      A_TOKEN: "0x724dc807b04555b71ed48a6896b6F41593b8C637",
      V_TOKEN: "0xf611aEb5013fD2c0511c9CD55c7dc5C1140741A6",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0xF17e75D58D4Be71B8e674fA104B71a827e38F087",
      STATIC_A_TOKEN: "0xf9ce3c97b4b54F3D16861420f4816D9f68190B7B"
    },
    USDCn: {
      decimals: 6,
      id: 13,
      UNDERLYING: "0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85",
      A_TOKEN: "0x38d693cE1dF5AaDF7bC62595A37D667aD57922e5",
      V_TOKEN: "0x5D557B07776D12967914379C71a1310e917C7555",
      INTEREST_RATE_STRATEGY: "0x9359282735496463131139875849d5302Fb4bed1",
      ORACLE: "0x2daA7078f78485A708003989cBc9a643e3b4B61f",
      STATIC_A_TOKEN: "0x4DD03dfD36548C840B563745e3FBeC320F37BA7e"
    }
  };
  var E_MODES12 = {
    "1": {
      label: "Stablecoins",
      collateralBitmap: "8357",
      collateralAssets: [
        "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
        "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
        "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9",
        "0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85"
      ],
      borrowableBitmap: "8357",
      borrowableAssets: [
        "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
        "0x94b008aA00579c1307B0EF2c499aD98a8ce58e58",
        "0x8c6f28f2F1A3C87F0f938b96d27520d9751ec8d9",
        "0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85"
      ],
      ltv: 9e3,
      liquidationThreshold: 9300,
      liquidationBonus: 10100
    },
    "2": {
      label: "ETH correlated",
      collateralBitmap: "4624",
      collateralAssets: [
        "0x4200000000000000000000000000000000000006",
        "0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb",
        "0x9Bcef72be871e61ED4fBbc7630889beE758eb81D"
      ],
      borrowableBitmap: "4624",
      borrowableAssets: [
        "0x4200000000000000000000000000000000000006",
        "0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb",
        "0x9Bcef72be871e61ED4fBbc7630889beE758eb81D"
      ],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES12 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3OptimismSepolia.mjs
  var AaveV3OptimismSepolia_exports = {};
  __export(AaveV3OptimismSepolia_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER21,
    ACL_ADMIN: () => ACL_ADMIN15,
    ACL_MANAGER: () => ACL_MANAGER15,
    ASSETS: () => ASSETS21,
    CHAIN_ID: () => CHAIN_ID35,
    COLLECTOR: () => COLLECTOR21,
    CONFIG_ENGINE: () => CONFIG_ENGINE18,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_111,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER19,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_111,
    EMISSION_MANAGER: () => EMISSION_MANAGER19,
    L2_ENCODER: () => L2_ENCODER8,
    ORACLE: () => ORACLE21,
    POOL: () => POOL22,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER21,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY19,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR21,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL21,
    POOL_IMPL: () => POOL_IMPL21,
    RATES_FACTORY: () => RATES_FACTORY6,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER20,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER18,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER20,
    WETH_GATEWAY: () => WETH_GATEWAY19
  });
  var POOL_ADDRESSES_PROVIDER21 = "0x36616cf17557639614c1cdDb356b1B83fc0B2132";
  var POOL22 = "0xb50201558B00496A145fE76f7424749556E326D8";
  var POOL_CONFIGURATOR21 = "0x7304979ec9E4EaA0273b6A037a31c4e9e5A75D16";
  var ORACLE21 = "0xeb0a051be10228213BAEb449db63719d6742F7c4";
  var ACL_ADMIN15 = "0x1dF462e2712496373A347f8ad10802a5E95f053D";
  var ACL_MANAGER15 = "0x41585C50524fb8c3899B43D7D797d9486AAc94DB";
  var AAVE_PROTOCOL_DATA_PROVIDER21 = "0x501B4c19dd9C2e06E94dA7b6D5Ed4ddA013EC741";
  var POOL_IMPL21 = "0xB1532b76D054c9F9E61b25c4d91f69B4133E4671";
  var POOL_CONFIGURATOR_IMPL21 = "0x25Ec457d1778b0E5316e7f38f3c22baF413F1A8C";
  var DEFAULT_INCENTIVES_CONTROLLER19 = "0xaD4F91D26254B6B0C6346b390dDA2991FDE2F20d";
  var EMISSION_MANAGER19 = "0xB438D5376ADB4b31D0103E659f1673eAD684BAD9";
  var COLLECTOR21 = "0x3e652E97ff339B73421f824F5b03d75b62F1Fb51";
  var DEFAULT_A_TOKEN_IMPL_REV_111 = "0x6c23bAF050ec192afc0B967a93b83e6c5405df43";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_111 = "0x777fBA024bA1228fDa76149A4ff8B23475ed057D";
  var L2_ENCODER8 = "0xBeC519531F0E78BcDdB295242fA4EC5251B38574";
  var CONFIG_ENGINE18 = "0x1D0f881Ce1a646E2f27Dec3c57Fa056cB838BCC2";
  var POOL_ADDRESSES_PROVIDER_REGISTRY19 = "0x1236010CECea55998384e795B59815D871f5f94d";
  var RATES_FACTORY6 = "0x83E0E6095a318446b313f7D27e0c33Ed1e9c0213";
  var UI_INCENTIVE_DATA_PROVIDER20 = "0xCFDAdA7DCd2e785cF706BaDBC2B8Af5084d595e9";
  var UI_POOL_DATA_PROVIDER18 = "0x86E2938daE289763D4e09a7e42c5cCcA62Cf9809";
  var WALLET_BALANCE_PROVIDER20 = "0x4172E6aAEC070ACB31aaCE343A58c93E4C70f44D";
  var WETH_GATEWAY19 = "0x589750BA8aF186cE5B55391B0b7148cAD43a1619";
  var CHAIN_ID35 = 11155420;
  var ASSETS21 = {
    USDC: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0x5fd84259d66Cd46123540766Be93DFE6D43130D7",
      A_TOKEN: "0xa818F1B57c201E092C4A2017A91815034326Efd1",
      V_TOKEN: "0x0c0fce05F2314540EcB095bF4D069e5E0ED90fF8",
      INTEREST_RATE_STRATEGY: "0xd6a6339c6C1B5a8792afA6e0E80b1908b8579f51",
      ORACLE: "0x6e44e50E3cc14DD16e01C590DC1d7020cb36eD4C"
    },
    WETH: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x4200000000000000000000000000000000000006",
      A_TOKEN: "0x23e4E76D01B2002BE436CE8d6044b0aA2f68B68a",
      V_TOKEN: "0x9D881f67F20B49243c98f53d2B9E91E39d02Ae09",
      INTEREST_RATE_STRATEGY: "0xaFb7Bc3f69A8Cc6a49823eFF9E3974CD49181A9c",
      ORACLE: "0x61Ec26aA57019C486B10502285c5A3D4A4750AD7"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Scroll.mjs
  var AaveV3Scroll_exports = {};
  __export(AaveV3Scroll_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER22,
    ACL_ADMIN: () => ACL_ADMIN16,
    ACL_MANAGER: () => ACL_MANAGER16,
    ASSETS: () => ASSETS22,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD10,
    CHAIN_ID: () => CHAIN_ID36,
    COLLECTOR: () => COLLECTOR22,
    CONFIG_ENGINE: () => CONFIG_ENGINE19,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_112,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER20,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_112,
    EMISSION_MANAGER: () => EMISSION_MANAGER20,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES13,
    E_MODES: () => E_MODES13,
    FREEZING_STEWARD: () => FREEZING_STEWARD10,
    L2_ENCODER: () => L2_ENCODER9,
    ORACLE: () => ORACLE22,
    POOL: () => POOL23,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER22,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY20,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR22,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL22,
    POOL_IMPL: () => POOL_IMPL22,
    PRICE_ORACLE_SENTINEL: () => PRICE_ORACLE_SENTINEL5,
    RISK_STEWARD: () => RISK_STEWARD10,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY11,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER21,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER19,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER21,
    WETH_GATEWAY: () => WETH_GATEWAY20
  });
  var POOL_ADDRESSES_PROVIDER22 = "0x69850D0B276776781C063771b161bd8894BCdD04";
  var POOL23 = "0x11fCfe756c05AD438e312a7fd934381537D3cFfe";
  var POOL_CONFIGURATOR22 = "0x32BCab42a2bb5AC577D24b425D46d8b8e0Df9b7f";
  var ORACLE22 = "0x04421D8C506E2fA2371a08EfAaBf791F624054F3";
  var PRICE_ORACLE_SENTINEL5 = "0xfD0Ba55775C1e53f50736FA5528d8aa45FBcA391";
  var ACL_ADMIN16 = "0xc1ABF87FfAdf4908f4eC8dc54A25DCFEabAE4A24";
  var ACL_MANAGER16 = "0x7633F981D87dC6307227de9383D2ce7243158081";
  var AAVE_PROTOCOL_DATA_PROVIDER22 = "0xe2108b60623C6Dcf7bBd535bD15a451fd0811f7b";
  var POOL_IMPL22 = "0xcB2107Ace932591C57EB5D07A135F1F3Dd613Dc0";
  var POOL_CONFIGURATOR_IMPL22 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER20 = "0xa3f3100C4f1D0624DB9DB97b40C13885Ce297799";
  var EMISSION_MANAGER20 = "0x6091546836DAe0487A50E300da3F237727441D90";
  var COLLECTOR22 = "0x90eB541e1a431D8a30ED85A77675D1F001128cb5";
  var DEFAULT_A_TOKEN_IMPL_REV_112 = "0x92EDe4ABd9df4Bfb49b4d723e4c932e35c47C54C";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_112 = "0x49bA16C08130FF8cFADE263B49387A8555bc057B";
  var L2_ENCODER9 = "0x8714E5ED2d8edD4E88eFf66637C3FE8eCf2B8C40";
  var CAPS_PLUS_RISK_STEWARD10 = "0xc4dcA550EF04FD0f8AbD4c384575Fb8a8123054e";
  var RISK_STEWARD10 = "0x64093fe5f8Cf62aFb4377cf7EF4373537fe9155B";
  var FREEZING_STEWARD10 = "0xc68D0C511076283075bD5cc9aA61E43673135f37";
  var CONFIG_ENGINE19 = "0xC0FE411b2606a06f64C1536E8F92FA6a9d5a89B8";
  var POOL_ADDRESSES_PROVIDER_REGISTRY20 = "0xFBedc64AeE24921cb43004312B9eF367a4162b57";
  var UI_INCENTIVE_DATA_PROVIDER21 = "0x5d4D4007A4c6336550DdAa2a7c0d5e7972eebd16";
  var UI_POOL_DATA_PROVIDER19 = "0x5598BbFA2f4fE8151f45bBA0a3edE1b54B51a0a9";
  var WALLET_BALANCE_PROVIDER21 = "0xE51642875Af07Fea1B03d821E41a9DB24bC4447E";
  var WETH_GATEWAY20 = "0x31A239f3e39c5D8BA6B201bA81ed584492Ae960F";
  var STATIC_A_TOKEN_FACTORY11 = "0x970b77b96D94966939a8F867c2BfC2aC0310C0e7";
  var CHAIN_ID36 = 534352;
  var ASSETS22 = {
    WETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x5300000000000000000000000000000000000004",
      A_TOKEN: "0xf301805bE1Df81102C957f6d4Ce29d2B8c056B2a",
      V_TOKEN: "0xfD7344CeB1Df9Cf238EcD667f4A6F99c6Ef44a56",
      INTEREST_RATE_STRATEGY: "0xC37353E5766164D8654D3CB395acfDcA4c2E7Ddc",
      ORACLE: "0x6bF14CB0A831078629D993FDeBcB182b21A8774C",
      STATIC_A_TOKEN: "0x6b9DfaC194fa78a1882680E2cE19194D006AeEfd"
    },
    USDC: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4",
      A_TOKEN: "0x1D738a3436A8C49CefFbaB7fbF04B660fb528CbD",
      V_TOKEN: "0x3d2E209af5BFa79297C88D6b57F89d792F6E28EE",
      INTEREST_RATE_STRATEGY: "0xC37353E5766164D8654D3CB395acfDcA4c2E7Ddc",
      ORACLE: "0x427Fd98dbD1DbC2D4e792350caBe7c9665F35bee",
      STATIC_A_TOKEN: "0x9fA123bC7E6b61cC8a9D893673a4C6E5392FF4A7"
    },
    wstETH: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0xf610A9dfB7C89644979b4A0f27063E9e7d7Cda32",
      A_TOKEN: "0x5B1322eeb46240b02e20062b8F0F9908d525B09c",
      V_TOKEN: "0x8a035644322129800C3f747f54Db0F4d3c0A2877",
      INTEREST_RATE_STRATEGY: "0xC37353E5766164D8654D3CB395acfDcA4c2E7Ddc",
      ORACLE: "0x4EdAbf45e78363b8Dcd763bBbd05665c6e24975C",
      STATIC_A_TOKEN: "0x6e368c4dBf083e18a29aE63FC06AF9deDb3242F0"
    },
    weETH: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x01f0a31698C4d065659b9bdC21B3610292a1c506",
      A_TOKEN: "0xd80A5e16DBDC52Bd1C947CEDfA22c562Be9129C8",
      V_TOKEN: "0x009D88C6a6B4CaA240b71C98BA93732e26F2A55A",
      INTEREST_RATE_STRATEGY: "0xC37353E5766164D8654D3CB395acfDcA4c2E7Ddc",
      ORACLE: "0x32f924C0e0F1Abf5D1ff35B05eBc5E844dEdD2A9"
    }
  };
  var E_MODES13 = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "13",
      collateralAssets: [
        "0x5300000000000000000000000000000000000004",
        "0xf610A9dfB7C89644979b4A0f27063E9e7d7Cda32",
        "0x01f0a31698C4d065659b9bdC21B3610292a1c506"
      ],
      borrowableBitmap: "13",
      borrowableAssets: [
        "0x5300000000000000000000000000000000000004",
        "0xf610A9dfB7C89644979b4A0f27063E9e7d7Cda32",
        "0x01f0a31698C4d065659b9bdC21B3610292a1c506"
      ],
      ltv: 9e3,
      liquidationThreshold: 9300,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES13 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3ScrollSepolia.mjs
  var AaveV3ScrollSepolia_exports = {};
  __export(AaveV3ScrollSepolia_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER23,
    ACL_ADMIN: () => ACL_ADMIN17,
    ACL_MANAGER: () => ACL_MANAGER17,
    ASSETS: () => ASSETS23,
    CHAIN_ID: () => CHAIN_ID37,
    COLLECTOR: () => COLLECTOR23,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_113,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER21,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_113,
    EMISSION_MANAGER: () => EMISSION_MANAGER21,
    FAUCET: () => FAUCET3,
    L2_ENCODER: () => L2_ENCODER10,
    ORACLE: () => ORACLE23,
    POOL: () => POOL24,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER23,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR23,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL23,
    POOL_IMPL: () => POOL_IMPL23,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER22,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER20,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER22,
    WETH_GATEWAY: () => WETH_GATEWAY21
  });
  var POOL_ADDRESSES_PROVIDER23 = "0x52A27dC690F8652288194Dd2bc523863eBdEa236";
  var POOL24 = "0x48914C788295b5db23aF2b5F0B3BE775C4eA9440";
  var POOL_CONFIGURATOR23 = "0x63BB78Fbac521998BD6E33f1a960677c7a1d4F10";
  var ORACLE23 = "0x4B7C7D2EbcDc1015D35F617596318C15d9d24e59";
  var ACL_ADMIN17 = "0xA5bf8BC3c35D9F92b038254B9B8675266f6b62c0";
  var ACL_MANAGER17 = "0x166601A0Cc6Cf979e2f0eF94EC5363B6BC24061C";
  var AAVE_PROTOCOL_DATA_PROVIDER23 = "0xaE58b3Be9E159bDEc67Ada8507CA3001c80725Ee";
  var POOL_IMPL23 = "0xB186894F315133C2396104CAb386C3A0fEC09025";
  var POOL_CONFIGURATOR_IMPL23 = "0xE7560d98a9fdAe4F3b87eb172ae44177A075eeDF";
  var DEFAULT_INCENTIVES_CONTROLLER21 = "0xa76F05D0cdf599E0186dec880F2FA480fd0c5280";
  var EMISSION_MANAGER21 = "0x01dd3Ad7D942406C47acd5b70cBad28fd377c6f2";
  var COLLECTOR23 = "0x104Cd7695C9247096F7AD37d3258B63c9675A00e";
  var DEFAULT_A_TOKEN_IMPL_REV_113 = "0x0Eae78c97347bf6FCF784Aa91CABC4aCdB5cc2dd";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_113 = "0xAb8eaAE8383Abe28203cB6e6FAa0477B2fb97f07";
  var FAUCET3 = "0x2F826FD1a0071476330a58dD1A9B36bcF7da832d";
  var L2_ENCODER10 = "0x3Bb33c67908D0d58F8d7349cBe726ff3b059e0fC";
  var UI_INCENTIVE_DATA_PROVIDER22 = "0xBf67A725F976d4A7C1fa9ea5303FD57D13CA0A37";
  var UI_POOL_DATA_PROVIDER20 = "0xDC55BcFC0963608401A4bA6298624E5895f8250a";
  var WALLET_BALANCE_PROVIDER22 = "0x6c68e975764a56e62AF3d1C8209F789779Eb763B";
  var WETH_GATEWAY21 = "0x57ce905CfD7f986A929A26b006f797d181dB706e";
  var CHAIN_ID37 = 534351;
  var ASSETS23 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x7984E363c38b590bB4CA35aEd5133Ef2c6619C40",
      A_TOKEN: "0x99Cb50E6bE36C8096e6731ED7738d93090B710DD",
      V_TOKEN: "0x09F9A7cd11BE8468064b06FF20Dce43E0A434a2A",
      INTEREST_RATE_STRATEGY: "0x85AD5a4a0974b6092d1F7369eC39c8b2255b8e6f",
      ORACLE: "0x58A5C0E02CF344c538F4Cf8d3EFC51e7c134B31A"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x279cBF5B7e3651F03CB9b71A9E7A3c924b267801",
      A_TOKEN: "0x55DD1cDFE13fCa68F6D14D452E2a20cABe191841",
      V_TOKEN: "0x2f42470c67aA2f6D7d2855FBB691179a6Dba4822",
      INTEREST_RATE_STRATEGY: "0x9a8D012c2e26cE911AD211976aa06Ca020487389",
      ORACLE: "0x01BdbF85210e113db2216e837D9b1e401eb7003e"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x2C9678042D52B97D27f2bD2947F7111d93F3dD0D",
      A_TOKEN: "0x6E4A1BcBd3C3038e6957207cadC1A17092DC7ba3",
      V_TOKEN: "0x6ED2eB0A4141975A8A33558234137265f36055f7",
      INTEREST_RATE_STRATEGY: "0x9c41A3E545126Cc2c160634405E00461Ec30F709",
      ORACLE: "0xB1732127A07B05e6Ea1FA53c8B791560Ff768439"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x5EA79f3190ff37418d42F9B2618688494dBD9693",
      A_TOKEN: "0x43AE2a14AD923915aa85d683D1b7d0d320ae87B2",
      V_TOKEN: "0x52a011bF32a85D952aa259D85b705b7cF040836f",
      INTEREST_RATE_STRATEGY: "0x9a8D012c2e26cE911AD211976aa06Ca020487389",
      ORACLE: "0xb09f1850207Af7AFcd564632bB541B7b3c776006"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xb123dCe044EdF0a755505d9623Fba16C0F41cae9",
      A_TOKEN: "0x9E8CEC4F2F4596141B62e88966D7167E9db555aD",
      V_TOKEN: "0xD502CD7A595ec36992b0601fae0A4b50A88084D4",
      INTEREST_RATE_STRATEGY: "0x9a8D012c2e26cE911AD211976aa06Ca020487389",
      ORACLE: "0xA0579Ea869d26CE4dfED0b65b54A08A4BdF3F5A8"
    },
    USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0x186C0C26c45A8DA1Da34339ee513624a9609156d",
      A_TOKEN: "0x54Cb3ba40705d7CCB18c1C24edD8B602a88eF4CE",
      V_TOKEN: "0x4cB0Dd10789208630F4def0DAAB4161f4Bb7b09D",
      INTEREST_RATE_STRATEGY: "0x9c41A3E545126Cc2c160634405E00461Ec30F709",
      ORACLE: "0x2d00F2DBA40e677E23AC442B5ab932Ce699d163e"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xfc2921bE7B2762F0E87039905d6019B0fF5978a8",
      A_TOKEN: "0xC5209E1325A0DBeb28143D82e7E1DE709456Fc8a",
      V_TOKEN: "0x7AE95AD823943283c3D5b7E9bE5E24414ba980cD",
      INTEREST_RATE_STRATEGY: "0x9a8D012c2e26cE911AD211976aa06Ca020487389",
      ORACLE: "0x79fb53cF4Ba1B59E07Eeed92D641F8374DaAFC8f"
    },
    EURS: {
      decimals: 2,
      id: 7,
      UNDERLYING: "0xDf40f3a3566b4271450083f1Ad5732590BA47575",
      A_TOKEN: "0xD49d1CF2886B1c95A94e8a9066E8b298646716b6",
      V_TOKEN: "0x2160F75FB89A6C35Bd59Ecf120B26f459956c925",
      INTEREST_RATE_STRATEGY: "0x9c41A3E545126Cc2c160634405E00461Ec30F709",
      ORACLE: "0xC6C58919440AD9daBF04D85b29820477AE7E808E"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3ZkSync.mjs
  var AaveV3ZkSync_exports = {};
  __export(AaveV3ZkSync_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER24,
    ACL_ADMIN: () => ACL_ADMIN18,
    ACL_MANAGER: () => ACL_MANAGER18,
    ASSETS: () => ASSETS24,
    CHAIN_ID: () => CHAIN_ID38,
    COLLECTOR: () => COLLECTOR24,
    CONFIG_ENGINE: () => CONFIG_ENGINE20,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_114,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER22,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_114,
    EMISSION_MANAGER: () => EMISSION_MANAGER22,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES14,
    E_MODES: () => E_MODES14,
    ORACLE: () => ORACLE24,
    POOL: () => POOL25,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER24,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY21,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR24,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL24,
    POOL_IMPL: () => POOL_IMPL24,
    RISK_STEWARD: () => RISK_STEWARD11,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY12,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER23,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER21,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER23,
    WETH_GATEWAY: () => WETH_GATEWAY22
  });
  var POOL_ADDRESSES_PROVIDER24 = "0x2A3948BB219D6B2Fa83D64100006391a96bE6cb7";
  var POOL25 = "0x78e30497a3c7527d953c6B1E3541b021A98Ac43c";
  var POOL_CONFIGURATOR24 = "0x0207d31b4377C74bEC37356aaD83E3dCc979F40E";
  var ORACLE24 = "0xC7F58Fca663a8d377B6D0c9703C697f56dC40088";
  var ACL_ADMIN18 = "0x04cE39789e11a49595cD0ECEf6f4Bd54ABF4d020";
  var ACL_MANAGER18 = "0xc6150b63c2F02528d4A969a248710A4658ed7928";
  var AAVE_PROTOCOL_DATA_PROVIDER24 = "0x5F2A704cE47B373c908fE8A29514249469b52b99";
  var POOL_IMPL24 = "0x79Bef43a562047B8FDF6335b28Fa61820A442fD6";
  var POOL_CONFIGURATOR_IMPL24 = "0xBc4c49630350F67D7Ec88785E5DF9A57c78a1b7d";
  var DEFAULT_INCENTIVES_CONTROLLER22 = "0x37c972C9dDfC2138EBe33eC19dba063AB9f8966e";
  var EMISSION_MANAGER22 = "0x92AA83Ce0CC590E6B0627a9E22e84Ef43F389D1f";
  var COLLECTOR24 = "0xd69Cbda644c6be817AaFb5Fd9174f50C33803B6b";
  var DEFAULT_A_TOKEN_IMPL_REV_114 = "0x34be365Fd01ac224F21490aaC6dFd65D25434bbB";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_114 = "0x52E97425D1Fa6885fAaC9260B711fA5047A88d06";
  var CONFIG_ENGINE20 = "0x54965A9c830DCEEa6BeEa77642C6A78C3df1C957";
  var POOL_ADDRESSES_PROVIDER_REGISTRY21 = "0x0753E3637ddC6efc40759D9c347251046644F25F";
  var UI_INCENTIVE_DATA_PROVIDER23 = "0x430Ef10d29237a0f061f9F7753fCe1cd1F5cF0e1";
  var UI_POOL_DATA_PROVIDER21 = "0x6fCDa2646d6E4a42b1663d219811fC96AE3A0ec8";
  var WALLET_BALANCE_PROVIDER23 = "0xcb8Dc3C135e59B1252F057da44A8f43EE6B0dAB0";
  var WETH_GATEWAY22 = "0xD5f6c8D402E0a0222f7FA132F9e80fDCC074df5C";
  var STATIC_A_TOKEN_FACTORY12 = "0x1Bc8dbF1f5aF8094Aa166098131116CaAd6B22F9";
  var RISK_STEWARD11 = "0x05c77Cf62346329a157d7A6F874464D049CECb26";
  var CHAIN_ID38 = 324;
  var ASSETS24 = {
    USDC: {
      decimals: 6,
      id: 0,
      UNDERLYING: "0x1d17CBcF0D6D143135aE902365D2E5e2A16538D4",
      A_TOKEN: "0xE977F9B2a5ccf0457870a67231F23BE4DaecfbDb",
      V_TOKEN: "0x0049250D15A8550c5a14Baa5AF5B662a93a525B9",
      INTEREST_RATE_STRATEGY: "0x57815Ab06D846d7dECd326Ee541CD06144FED237",
      ORACLE: "0x22A46593A7f93Aaec788bE3e27C1838E15781222"
    },
    USDT: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0x493257fD37EDB34451f62EDf8D2a0C418852bA4C",
      A_TOKEN: "0xC48574bc5358c967d9447e7Df70230Fdb469e4E7",
      V_TOKEN: "0x8992DB58077fe8C7B80c1B3a738eAe8A7BdDbA34",
      INTEREST_RATE_STRATEGY: "0x57815Ab06D846d7dECd326Ee541CD06144FED237",
      ORACLE: "0xE8D6d2dffCFfFc6b1f3606b7552e80319D01A8E9"
    },
    WETH: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",
      A_TOKEN: "0xb7b93bCf82519bB757Fd18b23A389245Dbd8ca64",
      V_TOKEN: "0x98dC737eA0E9bCb254c3F98510a71c5E11F74238",
      INTEREST_RATE_STRATEGY: "0x57815Ab06D846d7dECd326Ee541CD06144FED237",
      ORACLE: "0x6D41d1dc818112880b40e26BD6FD347E41008eDA"
    },
    wstETH: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x703b52F2b28fEbcB60E1372858AF5b18849FE867",
      A_TOKEN: "0xd4e607633F3d984633E946aEA4eb71f92564c1c9",
      V_TOKEN: "0x6aD279F6523f6421fD5B0324a97D8F62eeCD80c8",
      INTEREST_RATE_STRATEGY: "0x57815Ab06D846d7dECd326Ee541CD06144FED237",
      ORACLE: "0xdea7DE07B8275564Af6135F7E9340411246EB7A2"
    },
    ZK: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x5A7d6b2F92C77FAD6CCaBd7EE0624E64907Eaf3E",
      A_TOKEN: "0xd6cD2c0fC55936498726CacC497832052A9B2D1B",
      V_TOKEN: "0x6450fd7F877B5bB726F7Bc6Bf0e6ffAbd48d72ad",
      INTEREST_RATE_STRATEGY: "0x57815Ab06D846d7dECd326Ee541CD06144FED237",
      ORACLE: "0xD1ce60dc8AE060DDD17cA8716C96f193bC88DD13"
    }
  };
  var E_MODES14 = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "12",
      collateralAssets: [
        "0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",
        "0x703b52F2b28fEbcB60E1372858AF5b18849FE867"
      ],
      borrowableBitmap: "12",
      borrowableAssets: [
        "0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",
        "0x703b52F2b28fEbcB60E1372858AF5b18849FE867"
      ],
      ltv: 9e3,
      liquidationThreshold: 9300,
      liquidationBonus: 10100
    }
  };
  var EXTERNAL_LIBRARIES14 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3FantomTestnet.mjs
  var AaveV3FantomTestnet_exports = {};
  __export(AaveV3FantomTestnet_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER25,
    ACL_ADMIN: () => ACL_ADMIN19,
    ACL_MANAGER: () => ACL_MANAGER19,
    ASSETS: () => ASSETS25,
    CHAIN_ID: () => CHAIN_ID39,
    COLLECTOR: () => COLLECTOR25,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_115,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER23,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_115,
    EMISSION_MANAGER: () => EMISSION_MANAGER23,
    FAUCET: () => FAUCET4,
    ORACLE: () => ORACLE25,
    POOL: () => POOL26,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER25,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR25,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL25,
    POOL_IMPL: () => POOL_IMPL25,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER24,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER22,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER24,
    WETH_GATEWAY: () => WETH_GATEWAY23
  });
  var POOL_ADDRESSES_PROVIDER25 = "0x1558c6FadDe1bEaf0f6628BDd1DFf3461185eA24";
  var POOL26 = "0x56Ab717d882F7A8d4a3C2b191707322c5Cc70db8";
  var POOL_CONFIGURATOR25 = "0x257a6f06192D532e40F66b3DDfE2cBBaf8373822";
  var ORACLE25 = "0x18a8d31dA46eeb9138a16dfC429E74C04ff523F4";
  var ACL_ADMIN19 = "0x9973Ce75946D56fA3B0C6aa3647d67D440BDAec8";
  var ACL_MANAGER19 = "0xD5D4f4fe4BfC8e8193f38927EfafDbfbB66dd7e0";
  var AAVE_PROTOCOL_DATA_PROVIDER25 = "0x3c9F4EEa18B02ee331218646Fea59EE3661d2A61";
  var POOL_IMPL25 = "0x685b86a6659a1CbcfE168304386e1b54C543Ce16";
  var POOL_CONFIGURATOR_IMPL25 = "0x1034d6131E0E7F2F47bFAd06597ed97b35aA5492";
  var DEFAULT_INCENTIVES_CONTROLLER23 = "0x9F749B597414eD4F53a0F23971327bb60f16ad94";
  var EMISSION_MANAGER23 = "0xBAdD48c3EB42A10dB791D7b02E3c07Fbf95B3155";
  var COLLECTOR25 = "0x445e52B0C18704448f4589C4304f63Ea287c2eb0";
  var DEFAULT_A_TOKEN_IMPL_REV_115 = "0x6056C29483433A095eF98Fb0d01F2827F5FCeB99";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_115 = "0x67F50B454972F7557c359AfE2DD3caef9930d665";
  var FAUCET4 = "0x021BE22Bdfa497D6643D4035E530095E7b452967";
  var UI_INCENTIVE_DATA_PROVIDER24 = "0xf24dc19cFb9A25bbc4DDcaAdb116DfD17472207B";
  var UI_POOL_DATA_PROVIDER22 = "0xC91dB4F736b6Acf5A2e379a58280D1b06BD24E7d";
  var WALLET_BALANCE_PROVIDER24 = "0x49cC86071dEcC7999BA656763b8389f23058bB34";
  var WETH_GATEWAY23 = "0xd2B0C9778d088Fc79C28Da719bC02158E64796bD";
  var CHAIN_ID39 = 4002;
  var ASSETS25 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x77FDe93fEe5fe272dC17d799cb61447431E6Eba2",
      A_TOKEN: "0x2B101eFBB4dFf1fbB8f87f02C560Fb8AC773aFC5",
      V_TOKEN: "0x7a277581a2b1F0B52ce98A1A9b3ADb2DAbE99639",
      INTEREST_RATE_STRATEGY: "0xEF97dc4389e8198068939ac2E92ca24371b67F1F",
      ORACLE: "0x00DF377c2C82a65A8bAe2Ff04a9434a721Bc5aEB"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x1Da81b322451C51D2580B373974a999d5A9C2D21",
      A_TOKEN: "0x7d18f0834A38cA6B0e58CC671900f0017E6d55Ff",
      V_TOKEN: "0x37a36207141fec36F383b9012FFACA924e4c7809",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0x55c7852e10fcd07cF63Ad1bb9FC191b6F4d96ebD"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x66F61903D7FEC18048bEc2e792f272cb8B657733",
      A_TOKEN: "0xFFF336d1310D5Ba18CfFb2006afa762EC7d7a4fb",
      V_TOKEN: "0x7723CeBe9a4D7416a7023d30bBefe73b755CE0bf",
      INTEREST_RATE_STRATEGY: "0x3877E12506b087e56CdB7C9a54A04bE0D322B26C",
      ORACLE: "0x4CeDCB57Af02293231BAA9D39354D6BFDFD251e0"
    },
    WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x2c95d10bA4BBEc79e562e8B3f48687751808C925",
      A_TOKEN: "0x17A6c7f20e804a558E0674c0Eef1F69442770596",
      V_TOKEN: "0x798FD7a01C614F23a9fF27427e94175c3A8eBa5B",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0x8022B4f0165644D9EFcDEF70b09F5739b95740bc"
    },
    WETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xc8c0Cf9436F4862a8F60Ce680Ca5a9f0f99b5ded",
      A_TOKEN: "0x0e426e6e6B226D8bd566e417b90411Dcf14DF861",
      V_TOKEN: "0x5d18c525aD0C583aeEa44535cce7fd234D10Ef65",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0x9e2DDb6aA91399546Bd875E2e63E8d6df276922e"
    },
    USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0x9DFf9E93B1e513379cf820504D642c6891d8F7CC",
      A_TOKEN: "0x97293798206Fc4FDF23D6b536ED3D694599e35BC",
      V_TOKEN: "0x8aE1A997A45C7A7b8c00889C8d0eAabBa899CA90",
      INTEREST_RATE_STRATEGY: "0x3877E12506b087e56CdB7C9a54A04bE0D322B26C",
      ORACLE: "0x7CBa02e449d1D41b792A28fC15ee3F72C5aDC113"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x52D800ca262522580CeBAD275395ca6e7598C014",
      A_TOKEN: "0xf10e04c48f14d50F7378e01a1EEf7498D9a27d08",
      V_TOKEN: "0xD54a60da0deA4054169faeD0217F8Be0198A789E",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0xB516d30421d2A0524769A243BBE5e193E78ab35c"
    },
    WFTM: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x2Fa2e7a6dEB7bb51B625336DBe1dA23511914a8A",
      A_TOKEN: "0xFA3AdA68fA9512B2e22a5fac6b6F0231068A2b36",
      V_TOKEN: "0x5a76c9C809e7032F857dC24430e724831b202e29",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0x76675dEA78639e06a0f6b377262A03dEA916D6a4"
    },
    CRV: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0xc199807AF4fEDB02EE567Ed0FeB814A077de4802",
      A_TOKEN: "0x01CEf190E98cE7B8CA722e33C0D3aF456106103d",
      V_TOKEN: "0x40489046ABe77aa660C6270A4abD0018821eE2e6",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0xd409F17095a370800A9C352124C6a1e82695203E"
    },
    SUSHI: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0x1fdE0eCc619726f4cD597887C9F3b4c8740e19e2",
      A_TOKEN: "0xac8fd53423708ac1C49E5486485854FBE1487e65",
      V_TOKEN: "0xd863A878743D56B1208DC3bf3F280c0d16eC28D4",
      INTEREST_RATE_STRATEGY: "0x9060C6E714BA5C3A46665599103989778a736D4B",
      ORACLE: "0xcDA8dE50b65cB2Affc8B89f35C40A97Eed4B270F"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Fantom.mjs
  var AaveV3Fantom_exports = {};
  __export(AaveV3Fantom_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER26,
    ACL_ADMIN: () => ACL_ADMIN20,
    ACL_MANAGER: () => ACL_MANAGER20,
    ASSETS: () => ASSETS26,
    CHAIN_ID: () => CHAIN_ID40,
    COLLECTOR: () => COLLECTOR26,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_116,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER24,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_116,
    EMISSION_MANAGER: () => EMISSION_MANAGER24,
    ORACLE: () => ORACLE26,
    POOL: () => POOL27,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER26,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY22,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR26,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL26,
    POOL_IMPL: () => POOL_IMPL26,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER12,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER12,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER25,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER23,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER25,
    WETH_GATEWAY: () => WETH_GATEWAY24
  });
  var POOL_ADDRESSES_PROVIDER26 = "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb";
  var POOL27 = "0x794a61358D6845594F94dc1DB02A252b5b4814aD";
  var POOL_CONFIGURATOR26 = "0x8145eddDf43f50276641b55bd3AD95944510021E";
  var ORACLE26 = "0xfd6f3c1845604C8AE6c6E402ad17fb9885160754";
  var ACL_ADMIN20 = "0x39CB97b105173b56b5a2b4b33AD25d6a50E6c949";
  var ACL_MANAGER20 = "0xa72636CbcAa8F5FF95B2cc47F3CDEe83F3294a0B";
  var AAVE_PROTOCOL_DATA_PROVIDER26 = "0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654";
  var POOL_IMPL26 = "0xDF9e4ABdbd94107932265319479643D3B05809dc";
  var POOL_CONFIGURATOR_IMPL26 = "0xD6FA681E22306b0F4E605B979b7c9a1dFa865ade";
  var DEFAULT_INCENTIVES_CONTROLLER24 = "0x929EC64c34a17401F460460D4B9390518E5B473e";
  var EMISSION_MANAGER24 = "0x048f2228D7Bf6776f99aB50cB1b1eaB4D1d4cA73";
  var COLLECTOR26 = "0xBe85413851D195fC6341619cD68BfDc26a25b928";
  var DEFAULT_A_TOKEN_IMPL_REV_116 = "0xa5ba6E5EC19a1Bf23C857991c857dB62b2Aa187B";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_116 = "0x81387c40EB75acB02757C1Ae55D5936E78c9dEd3";
  var POOL_ADDRESSES_PROVIDER_REGISTRY22 = "0x770ef9f4fe897e59daCc474EF11238303F9552b6";
  var REPAY_WITH_COLLATERAL_ADAPTER12 = "0x1408401B2A7E28cB747b3e258D0831Fc926bAC51";
  var SWAP_COLLATERAL_ADAPTER12 = "0xE387c6053CE8EC9f8C3fa5cE085Af73114a695d3";
  var UI_INCENTIVE_DATA_PROVIDER25 = "0x67Da261c14fd94cE7fDd77a0A8476E5b244089A9";
  var UI_POOL_DATA_PROVIDER23 = "0xddf65434502E459C22263BE2ed7cF0f1FaFD44c0";
  var WALLET_BALANCE_PROVIDER25 = "0xBc790382B3686abffE4be14A030A96aC6154023a";
  var WETH_GATEWAY24 = "0x1DcDA4de2Bf6c7AD9a34788D22aE6b7d55016e1f";
  var CHAIN_ID40 = 250;
  var ASSETS26 = {
    DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E",
      A_TOKEN: "0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE",
      V_TOKEN: "0x8619d80FB0141ba7F184CbF22fd724116D9f7ffC",
      INTEREST_RATE_STRATEGY: "0xA9F3C3caE095527061e6d270DBE163693e6fda9D",
      ORACLE: "0x91d5DEFAFfE2854C7D02F50c80FA1fdc8A721e52"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xb3654dc3D10Ea7645f8319668E8F54d2574FBdC8",
      A_TOKEN: "0x191c10Aa4AF7C30e871E70C95dB0E4eb77237530",
      V_TOKEN: "0x953A573793604aF8d41F306FEb8274190dB4aE0e",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0x221C773d8647BC3034e91a0c47062e26D20d97B4"
    },
    USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
      A_TOKEN: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
      V_TOKEN: "0xFCCf3cAbbe80101232d343252614b6A3eE81C989",
      INTEREST_RATE_STRATEGY: "0xf4a0039F2d4a2EaD5216AbB6Ae4C4C3AA2dB9b82",
      ORACLE: "0x2553f4eeb82d5A26427b8d1106C51499CBa5D99c"
    },
    BTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x321162Cd933E2Be498Cd2267a90534A804051b11",
      A_TOKEN: "0x078f358208685046a11C85e8ad32895DED33A249",
      V_TOKEN: "0x92b42c66840C7AD907b4BF74879FF3eF7c529473",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0x8e94C22142F4A64b99022ccDd994f4e9EC86E4B4"
    },
    ETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x74b23882a30290451A17c44f4F05243b6b58C76d",
      A_TOKEN: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
      V_TOKEN: "0x0c84331e39d6658Cd6e6b9ba04736cC4c4734351",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0x11DdD3d147E5b83D01cee7070027092397d63658"
    },
    fUSDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0x049d68029688eAbF473097a2fC38ef61633A3C7A",
      A_TOKEN: "0x6ab707Aca953eDAeFBc4fD23bA73294241490620",
      V_TOKEN: "0xfb00AC187a8Eb5AFAE4eACE434F493Eb62672df7",
      INTEREST_RATE_STRATEGY: "0xf4a0039F2d4a2EaD5216AbB6Ae4C4C3AA2dB9b82",
      ORACLE: "0xF64b636c5dFe1d3555A847341cDC449f612307d0"
    },
    AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0x6a07A792ab2965C72a5B8088d3a069A7aC3a993B",
      A_TOKEN: "0xf329e36C7bF6E5E86ce2150875a84Ce77f477375",
      V_TOKEN: "0xE80761Ea617F66F96274eA5e8c37f03960ecC679",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0xE6ecF7d2361B6459cBb3b4fb065E0eF4B175Fe74"
    },
    WFTM: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
      A_TOKEN: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
      V_TOKEN: "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0xf4766552D15AE4d256Ad41B6cf2933482B0680dc"
    },
    CRV: {
      decimals: 18,
      id: 8,
      UNDERLYING: "0x1E4F97b9f9F913c46F1632781732927B9019C68b",
      A_TOKEN: "0x513c7E3a9c69cA3e22550eF58AC1C0088e918FFf",
      V_TOKEN: "0x77CA01483f379E58174739308945f044e1a764dc",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0xa141D7E3B44594cc65142AE5F2C7844Abea66D2B"
    },
    SUSHI: {
      decimals: 18,
      id: 9,
      UNDERLYING: "0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC",
      A_TOKEN: "0xc45A479877e1e9Dfe9FcD4056c699575a1045dAA",
      V_TOKEN: "0x34e2eD44EF7466D5f9E0b782B5c08b57475e7907",
      INTEREST_RATE_STRATEGY: "0x4aa694e6c06D6162d95BE98a2Df6a521d5A7b521",
      ORACLE: "0xCcc059a1a17577676c8673952Dc02070D29e5a66"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3Harmony.mjs
  var AaveV3Harmony_exports = {};
  __export(AaveV3Harmony_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER27,
    ACL_ADMIN: () => ACL_ADMIN21,
    ACL_MANAGER: () => ACL_MANAGER21,
    ASSETS: () => ASSETS27,
    CHAIN_ID: () => CHAIN_ID41,
    COLLECTOR: () => COLLECTOR27,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_117,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER25,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_117,
    EMISSION_MANAGER: () => EMISSION_MANAGER25,
    ORACLE: () => ORACLE27,
    POOL: () => POOL28,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER27,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY23,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR27,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL27,
    POOL_IMPL: () => POOL_IMPL27,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER26,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER24,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER26,
    WETH_GATEWAY: () => WETH_GATEWAY25
  });
  var POOL_ADDRESSES_PROVIDER27 = "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb";
  var POOL28 = "0x794a61358D6845594F94dc1DB02A252b5b4814aD";
  var POOL_CONFIGURATOR27 = "0x8145eddDf43f50276641b55bd3AD95944510021E";
  var ORACLE27 = "0x3C90887Ede8D65ccb2777A5d577beAb2548280AD";
  var ACL_ADMIN21 = "0xb2f0C5f37f4beD2cB51C44653cD5D84866BDcd2D";
  var ACL_MANAGER21 = "0xa72636CbcAa8F5FF95B2cc47F3CDEe83F3294a0B";
  var AAVE_PROTOCOL_DATA_PROVIDER27 = "0x69FA688f1Dc47d4B5d8029D5a35FB7a548310654";
  var POOL_IMPL27 = "0xDF9e4ABdbd94107932265319479643D3B05809dc";
  var POOL_CONFIGURATOR_IMPL27 = "0xD6FA681E22306b0F4E605B979b7c9a1dFa865ade";
  var DEFAULT_INCENTIVES_CONTROLLER25 = "0x929EC64c34a17401F460460D4B9390518E5B473e";
  var EMISSION_MANAGER25 = "0x048f2228D7Bf6776f99aB50cB1b1eaB4D1d4cA73";
  var COLLECTOR27 = "0x8A020d92D6B119978582BE4d3EdFdC9F7b28BF31";
  var DEFAULT_A_TOKEN_IMPL_REV_117 = "0xa5ba6E5EC19a1Bf23C857991c857dB62b2Aa187B";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_117 = "0x81387c40EB75acB02757C1Ae55D5936E78c9dEd3";
  var POOL_ADDRESSES_PROVIDER_REGISTRY23 = "0x770ef9f4fe897e59daCc474EF11238303F9552b6";
  var UI_INCENTIVE_DATA_PROVIDER26 = "0xf7a60467aBb8A3240A0382b22E1B03c7d4F59Da5";
  var UI_POOL_DATA_PROVIDER24 = "0xeC6118C69af50660231108059ab98CD0cF9a6eA1";
  var WALLET_BALANCE_PROVIDER26 = "0xBc790382B3686abffE4be14A030A96aC6154023a";
  var WETH_GATEWAY25 = "0xE387c6053CE8EC9f8C3fa5cE085Af73114a695d3";
  var CHAIN_ID41 = 16666e5;
  var ASSETS27 = {
    ONE_DAI: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xEf977d2f931C1978Db5F6747666fa1eACB0d0339",
      A_TOKEN: "0x82E64f49Ed5EC1bC6e43DAD4FC8Af9bb3A2312EE",
      V_TOKEN: "0x8619d80FB0141ba7F184CbF22fd724116D9f7ffC",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0x981AB570aC289938F296b975C524B66FBF1B8774"
    },
    LINK: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0x218532a12a389a4a92fC0C5Fb22901D1c19198aA",
      A_TOKEN: "0x191c10Aa4AF7C30e871E70C95dB0E4eb77237530",
      V_TOKEN: "0x953A573793604aF8d41F306FEb8274190dB4aE0e",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0x80f2c02224a2E548FC67c0bF705eBFA825dd5439"
    },
    ONE_USDC: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x985458E523dB3d53125813eD68c274899e9DfAb4",
      A_TOKEN: "0x625E7708f30cA75bfd92586e17077590C60eb4cD",
      V_TOKEN: "0xFCCf3cAbbe80101232d343252614b6A3eE81C989",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0xA9F30e6ED4098e9439B2ac8aEA2d3fc26BcEbb45"
    },
    ONE_WBTC: {
      decimals: 8,
      id: 3,
      UNDERLYING: "0x3095c7557bCb296ccc6e363DE01b760bA031F2d9",
      A_TOKEN: "0x078f358208685046a11C85e8ad32895DED33A249",
      V_TOKEN: "0x92b42c66840C7AD907b4BF74879FF3eF7c529473",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0x945fD405773973d286De54E44649cc0d9e264F78"
    },
    ONE_ETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0x6983D1E6DEf3690C4d616b13597A09e6193EA013",
      A_TOKEN: "0xe50fA9b3c56FfB159cB0FCA61F5c9D750e8128c8",
      V_TOKEN: "0x0c84331e39d6658Cd6e6b9ba04736cC4c4734351",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0x7fc3FCb14eF04A48Bb0c12f0c39CD74C249c37d8"
    },
    ONE_USDT: {
      decimals: 6,
      id: 5,
      UNDERLYING: "0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f",
      A_TOKEN: "0x6ab707Aca953eDAeFBc4fD23bA73294241490620",
      V_TOKEN: "0xfb00AC187a8Eb5AFAE4eACE434F493Eb62672df7",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0x05225Cd708bCa9253789C1374e4337a019e99D56"
    },
    ONE_AAVE: {
      decimals: 18,
      id: 6,
      UNDERLYING: "0xcF323Aad9E522B93F11c352CaA519Ad0E14eB40F",
      A_TOKEN: "0xf329e36C7bF6E5E86ce2150875a84Ce77f477375",
      V_TOKEN: "0xE80761Ea617F66F96274eA5e8c37f03960ecC679",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0xFD858c8bC5ac5e10f01018bC78471bb0DC392247"
    },
    WONE: {
      decimals: 18,
      id: 7,
      UNDERLYING: "0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a",
      A_TOKEN: "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
      V_TOKEN: "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
      INTEREST_RATE_STRATEGY: "0x230E0321Cf38F09e247e50Afc7801EA2351fe56F",
      ORACLE: "0x3105C276558Dd4cf7E7be71d73Be8D33bD18F211"
    }
  };

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3EthereumLido.mjs
  var AaveV3EthereumLido_exports = {};
  __export(AaveV3EthereumLido_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER28,
    ACL_ADMIN: () => ACL_ADMIN22,
    ACL_MANAGER: () => ACL_MANAGER22,
    ASSETS: () => ASSETS28,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD11,
    CHAIN_ID: () => CHAIN_ID42,
    COLLECTOR: () => COLLECTOR28,
    CONFIG_ENGINE: () => CONFIG_ENGINE21,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER12,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_118,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER26,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_118,
    EMISSION_MANAGER: () => EMISSION_MANAGER26,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES15,
    E_MODES: () => E_MODES15,
    ORACLE: () => ORACLE28,
    POOL: () => POOL29,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER28,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY24,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR28,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL28,
    POOL_IMPL: () => POOL_IMPL28,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER13,
    RISK_STEWARD: () => RISK_STEWARD12,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER13,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER27,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER25,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER27,
    WETH_GATEWAY: () => WETH_GATEWAY26,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER9
  });
  var POOL_ADDRESSES_PROVIDER28 = "0xcfBf336fe147D643B9Cb705648500e101504B16d";
  var POOL29 = "0x4e033931ad43597d96D6bcc25c280717730B58B1";
  var POOL_CONFIGURATOR28 = "0x342631c6CeFC9cfbf97b2fe4aa242a236e1fd517";
  var ORACLE28 = "0xE3C061981870C0C7b1f3C4F4bB36B95f1F260BE6";
  var ACL_ADMIN22 = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var ACL_MANAGER22 = "0x013E2C7567b6231e865BB9273F8c7656103611c0";
  var AAVE_PROTOCOL_DATA_PROVIDER28 = "0x08795CFE08C7a81dCDFf482BbAAF474B240f31cD";
  var POOL_IMPL28 = "0xf5b4664CB6D13189345119c60a948cdc7785d0FE";
  var POOL_CONFIGURATOR_IMPL28 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER26 = "0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb";
  var EMISSION_MANAGER26 = "0x223d844fc4B006D67c0cDbd39371A9F73f69d974";
  var COLLECTOR28 = "0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c";
  var DEFAULT_A_TOKEN_IMPL_REV_118 = "0x7F8Fc14D462bdF93c681c1f2Fd615389bF969Fb2";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_118 = "0x3E59212c34588a63350142EFad594a20C88C2CEd";
  var POOL_ADDRESSES_PROVIDER_REGISTRY24 = "0xC6cAB8D39D93DC0Bd5986E7Ce5Bb956E30103A43";
  var REPAY_WITH_COLLATERAL_ADAPTER13 = "0x66E1aBdb06e7363a618D65a910c540dfED23754f";
  var SWAP_COLLATERAL_ADAPTER13 = "0xD0887AA7fEBC8962c622493646195e7c76D94fCE";
  var WITHDRAW_SWAP_ADAPTER9 = "0x43eDB797834151D041619EEF833Edc784B509dAE";
  var UI_INCENTIVE_DATA_PROVIDER27 = "0xe3dFf4052F0bF6134ACb73bEaE8fe2317d71F047";
  var UI_POOL_DATA_PROVIDER25 = "0x3F78BBD206e4D3c504Eb854232EdA7e47E9Fd8FC";
  var WALLET_BALANCE_PROVIDER27 = "0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2";
  var WETH_GATEWAY26 = "0x0B8C700917a6991FEa7198dDFC80bc8962b5055D";
  var CONFIG_ENGINE21 = "0x1097eDb85392932b7dCB630baDDC8A6D73585218";
  var CAPS_PLUS_RISK_STEWARD11 = "0x3843b29118fFC18d5d12EE079d0324E1bF115e69";
  var RISK_STEWARD12 = "0x30adC2f98ff78fDde12F191Acb82699f640694FB";
  var DEBT_SWAP_ADAPTER12 = "0xd1B2dec98A95B773C4909B5CD8FB455F467A527f";
  var CHAIN_ID42 = 1;
  var ASSETS28 = {
    wstETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
      A_TOKEN: "0xC035a7cf15375cE2706766804551791aD035E0C2",
      V_TOKEN: "0xE439edd2625772AA635B437C099C607B6eb7d35f",
      INTEREST_RATE_STRATEGY: "0x8958b1C39269167527821f8c276Ef7504883f2fa",
      ORACLE: "0xB4aB0c94159bc2d8C133946E7241368fc2F2a010"
    },
    WETH: {
      decimals: 18,
      id: 1,
      UNDERLYING: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      A_TOKEN: "0xfA1fDbBD71B0aA16162D76914d69cD8CB3Ef92da",
      V_TOKEN: "0x91b7d78BF92db564221f6B5AeE744D1727d1Dd1e",
      INTEREST_RATE_STRATEGY: "0x8958b1C39269167527821f8c276Ef7504883f2fa",
      ORACLE: "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
    },
    USDS: {
      decimals: 18,
      id: 2,
      UNDERLYING: "0xdC035D45d973E3EC169d2276DDab16f1e407384F",
      A_TOKEN: "0x09AA30b182488f769a9824F15E6Ce58591Da4781",
      V_TOKEN: "0x2D9fe18b6c35FE439cC15D932cc5C943bf2d901E",
      INTEREST_RATE_STRATEGY: "0x8958b1C39269167527821f8c276Ef7504883f2fa",
      ORACLE: "0x4F01b76391A05d32B20FA2d05dD5963eE8db20E6"
    },
    USDC: {
      decimals: 6,
      id: 3,
      UNDERLYING: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      A_TOKEN: "0x2A1FBcb52Ed4d9b23daD17E1E8Aed4BB0E6079b8",
      V_TOKEN: "0xeD90dE2D824Ee766c6Fd22E90b12e598f681dc9F",
      INTEREST_RATE_STRATEGY: "0x8958b1C39269167527821f8c276Ef7504883f2fa",
      ORACLE: "0x736bF902680e68989886e9807CD7Db4B3E015d3C"
    },
    ezETH: {
      decimals: 18,
      id: 4,
      UNDERLYING: "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110",
      A_TOKEN: "0x74e5664394998f13B07aF42446380ACef637969f",
      V_TOKEN: "0x08e1bba76D27841dD91FAb4b3a636A0D5CF8c3E9",
      INTEREST_RATE_STRATEGY: "0x8958b1C39269167527821f8c276Ef7504883f2fa",
      ORACLE: "0x68C9c7Bf43DBd0EBab102116bc7C3C9f7d9297Ee"
    },
    sUSDe: {
      decimals: 18,
      id: 5,
      UNDERLYING: "0x9D39A5DE30e57443BfF2A8307A4256c8797A3497",
      A_TOKEN: "0xc2015641564a5914A17CB9A92eC8d8feCfa8f2D0",
      V_TOKEN: "0x2ABbAab3EF4e4A899d39e7EC996b5715E76b399a",
      INTEREST_RATE_STRATEGY: "0x8958b1C39269167527821f8c276Ef7504883f2fa",
      ORACLE: "0xb37aE8aBa6C0C1Bf2c509fc06E11aa4AF29B665A"
    }
  };
  var E_MODES15 = {
    "1": {
      label: "ETH correlated",
      collateralBitmap: "3",
      collateralAssets: [
        "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
        "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      ],
      borrowableBitmap: "2",
      borrowableAssets: ["0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"],
      ltv: 9350,
      liquidationThreshold: 9550,
      liquidationBonus: 10100
    },
    "2": {
      label: "LRT Stablecoins main",
      collateralBitmap: "16",
      collateralAssets: ["0xbf5495Efe5DB9ce00f80364C8B423567e58d2110"],
      borrowableBitmap: "4",
      borrowableAssets: ["0xdC035D45d973E3EC169d2276DDab16f1e407384F"],
      ltv: 7500,
      liquidationThreshold: 7800,
      liquidationBonus: 10750
    },
    "3": {
      label: "LRT wstETH main",
      collateralBitmap: "16",
      collateralAssets: ["0xbf5495Efe5DB9ce00f80364C8B423567e58d2110"],
      borrowableBitmap: "1",
      borrowableAssets: ["0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0"],
      ltv: 9300,
      liquidationThreshold: 9500,
      liquidationBonus: 10100
    },
    "4": {
      label: "sUSDe Stablecoins",
      collateralBitmap: "32",
      collateralAssets: ["0x9D39A5DE30e57443BfF2A8307A4256c8797A3497"],
      borrowableBitmap: "12",
      borrowableAssets: [
        "0xdC035D45d973E3EC169d2276DDab16f1e407384F",
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      ],
      ltv: 9e3,
      liquidationThreshold: 9200,
      liquidationBonus: 10300
    }
  };
  var EXTERNAL_LIBRARIES15 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/AaveV3EthereumEtherFi.mjs
  var AaveV3EthereumEtherFi_exports = {};
  __export(AaveV3EthereumEtherFi_exports, {
    AAVE_PROTOCOL_DATA_PROVIDER: () => AAVE_PROTOCOL_DATA_PROVIDER29,
    ACL_ADMIN: () => ACL_ADMIN23,
    ACL_MANAGER: () => ACL_MANAGER23,
    ASSETS: () => ASSETS29,
    CAPS_PLUS_RISK_STEWARD: () => CAPS_PLUS_RISK_STEWARD12,
    CHAIN_ID: () => CHAIN_ID43,
    COLLECTOR: () => COLLECTOR29,
    CONFIG_ENGINE: () => CONFIG_ENGINE22,
    DEBT_SWAP_ADAPTER: () => DEBT_SWAP_ADAPTER13,
    DEFAULT_A_TOKEN_IMPL_REV_1: () => DEFAULT_A_TOKEN_IMPL_REV_119,
    DEFAULT_INCENTIVES_CONTROLLER: () => DEFAULT_INCENTIVES_CONTROLLER27,
    DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_1: () => DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_119,
    EMISSION_MANAGER: () => EMISSION_MANAGER27,
    EXTERNAL_LIBRARIES: () => EXTERNAL_LIBRARIES16,
    E_MODES: () => E_MODES16,
    ORACLE: () => ORACLE29,
    POOL: () => POOL30,
    POOL_ADDRESSES_PROVIDER: () => POOL_ADDRESSES_PROVIDER29,
    POOL_ADDRESSES_PROVIDER_REGISTRY: () => POOL_ADDRESSES_PROVIDER_REGISTRY25,
    POOL_CONFIGURATOR: () => POOL_CONFIGURATOR29,
    POOL_CONFIGURATOR_IMPL: () => POOL_CONFIGURATOR_IMPL29,
    POOL_IMPL: () => POOL_IMPL29,
    REPAY_WITH_COLLATERAL_ADAPTER: () => REPAY_WITH_COLLATERAL_ADAPTER14,
    RISK_STEWARD: () => RISK_STEWARD13,
    STATIC_A_TOKEN_FACTORY: () => STATIC_A_TOKEN_FACTORY13,
    SWAP_COLLATERAL_ADAPTER: () => SWAP_COLLATERAL_ADAPTER14,
    UI_INCENTIVE_DATA_PROVIDER: () => UI_INCENTIVE_DATA_PROVIDER28,
    UI_POOL_DATA_PROVIDER: () => UI_POOL_DATA_PROVIDER26,
    WALLET_BALANCE_PROVIDER: () => WALLET_BALANCE_PROVIDER28,
    WETH_GATEWAY: () => WETH_GATEWAY27,
    WITHDRAW_SWAP_ADAPTER: () => WITHDRAW_SWAP_ADAPTER10
  });
  var POOL_ADDRESSES_PROVIDER29 = "0xeBa440B438Ad808101d1c451C1C5322c90BEFCdA";
  var POOL30 = "0x0AA97c284e98396202b6A04024F5E2c65026F3c0";
  var POOL_CONFIGURATOR29 = "0x8438F4D29D895d75C86BDC25360c25eF0607E65d";
  var ORACLE29 = "0x43b64f28A678944E0655404B0B98E443851cC34F";
  var ACL_ADMIN23 = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var ACL_MANAGER23 = "0x3cE8E2eb6501d4705477643E96881B1bef6A2DB3";
  var AAVE_PROTOCOL_DATA_PROVIDER29 = "0xE7d490885A68f00d9886508DF281D67263ed5758";
  var POOL_IMPL29 = "0x3d881c2Dc90F00e7A52F06155f77FBEC63A779c7";
  var POOL_CONFIGURATOR_IMPL29 = "0x4816b2C2895f97fB918f1aE7Da403750a0eE372e";
  var DEFAULT_INCENTIVES_CONTROLLER27 = "0x8164Cc65827dcFe994AB23944CBC90e0aa80bFcb";
  var EMISSION_MANAGER27 = "0x223d844fc4B006D67c0cDbd39371A9F73f69d974";
  var COLLECTOR29 = "0x464C71f6c2F760DdA6093dCB91C24c39e5d6e18c";
  var DEFAULT_A_TOKEN_IMPL_REV_119 = "0xaFFA06528Bd92625de2e7A0cfa0119319265Ea4b";
  var DEFAULT_VARIABLE_DEBT_TOKEN_IMPL_REV_119 = "0xBb077DaFFeb23B2126E7358b0b122ba6838FB881";
  var POOL_ADDRESSES_PROVIDER_REGISTRY25 = "0xbaA999AC55EAce41CcAE355c77809e68Bb345170";
  var REPAY_WITH_COLLATERAL_ADAPTER14 = "0x23b282c49C88d9161aae14b5eD777B976A5Ae65D";
  var SWAP_COLLATERAL_ADAPTER14 = "0xB04427eFdd15b0EC233400d2F7f7E4fd0291C285";
  var WITHDRAW_SWAP_ADAPTER10 = "0x850347E0cF64fd342A3404c1c5DA21Aa0A46c5c6";
  var UI_INCENTIVE_DATA_PROVIDER28 = "0xe3dFf4052F0bF6134ACb73bEaE8fe2317d71F047";
  var UI_POOL_DATA_PROVIDER26 = "0x3F78BBD206e4D3c504Eb854232EdA7e47E9Fd8FC";
  var WALLET_BALANCE_PROVIDER28 = "0xC7be5307ba715ce89b152f3Df0658295b3dbA8E2";
  var WETH_GATEWAY27 = "0xAB911dFB2bB9e264EE836F30D3367618f8Aef965";
  var CONFIG_ENGINE22 = "0x909bA8DA4c826C62013Ce3A30ce1F42943F3b340";
  var STATIC_A_TOKEN_FACTORY13 = "0x1Ff525426800279843B71C0F818594DeCdC3b522";
  var CAPS_PLUS_RISK_STEWARD12 = "0x1EBdbE77bbDDD284BdCE8D7981D7eD26D6af58cA";
  var RISK_STEWARD13 = "0xBF79d8339303148E345277a994Eb2cD5d82F0067";
  var DEBT_SWAP_ADAPTER13 = "0x40ede12b44d98Fc4E53A2fB027D1BD1846e1690C";
  var CHAIN_ID43 = 1;
  var ASSETS29 = {
    weETH: {
      decimals: 18,
      id: 0,
      UNDERLYING: "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",
      A_TOKEN: "0xbe1F842e7e0afd2c2322aae5d34bA899544b29db",
      V_TOKEN: "0x16264412CB72F0d16A446f7D928Dd0D822810048",
      INTEREST_RATE_STRATEGY: "0xC16666b7FF197427BD255E6961A5F99cfb3A6059",
      ORACLE: "0xf112aF6F0A332B815fbEf3Ff932c057E570b62d3"
    },
    USDC: {
      decimals: 6,
      id: 1,
      UNDERLYING: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      A_TOKEN: "0x7380c583cDe4409eFF5DD3320D93a45D96B80E2e",
      V_TOKEN: "0x9355032d747f1e08F8720CD01950E652eE15cdB7",
      INTEREST_RATE_STRATEGY: "0xC16666b7FF197427BD255E6961A5F99cfb3A6059",
      ORACLE: "0x736bF902680e68989886e9807CD7Db4B3E015d3C"
    },
    PYUSD: {
      decimals: 6,
      id: 2,
      UNDERLYING: "0x6c3ea9036406852006290770BEdFcAbA0e23A0e8",
      A_TOKEN: "0xdF7f48892244C6106EA784609f7de10AB36F9c7e",
      V_TOKEN: "0xD2cf07dEE40d3D530D15b88d689f5cd97A31FC3D",
      INTEREST_RATE_STRATEGY: "0xC16666b7FF197427BD255E6961A5F99cfb3A6059",
      ORACLE: "0x150bAe7Ce224555D39AfdBc6Cb4B8204E594E022"
    },
    FRAX: {
      decimals: 18,
      id: 3,
      UNDERLYING: "0x853d955aCEf822Db058eb8505911ED77F175b99e",
      A_TOKEN: "0x6914ECCf50837dC61b43ee478a9BD9B439648956",
      V_TOKEN: "0xfd3aDA5AAbdc6531C7C2AC46c00eBf870f5a0E6B",
      INTEREST_RATE_STRATEGY: "0xC16666b7FF197427BD255E6961A5F99cfb3A6059",
      ORACLE: "0x45D270263BBee500CF8adcf2AbC0aC227097b036"
    }
  };
  var E_MODES16 = {};
  var EXTERNAL_LIBRARIES16 = {};

  // node_modules/@bgd-labs/aave-address-book/dist/MiscArbitrum.mjs
  var MiscArbitrum_exports = {};
  __export(MiscArbitrum_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR,
    CHAIN_ID: () => CHAIN_ID44,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY,
    GHO_CCIP_TOKEN_POOL: () => GHO_CCIP_TOKEN_POOL,
    LEGACY_BRIDGE_EXECUTOR: () => LEGACY_BRIDGE_EXECUTOR,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN,
    PROXY_ADMIN: () => PROXY_ADMIN,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY,
    rETH_ETH_AGGREGATOR: () => rETH_ETH_AGGREGATOR,
    wstETH_stETH_AGGREGATOR: () => wstETH_stETH_AGGREGATOR
  });
  var PARASWAP_FEE_CLAIMER = "0x9abf798f5314BFd793A9E57A654BEd35af4A1D60";
  var TRANSPARENT_PROXY_FACTORY = "0xB4e496f70602fE2AC6Ae511D028BA4D194773B29";
  var PROXY_ADMIN = "0xD3cF979e676265e4f6379749DECe4708B9A22476";
  var CREATE_3_FACTORY = "0x3b56998Ec06477704622ca8e2eA1b4db134cec32";
  var AAVE_CL_ROBOT_OPERATOR = "0xaa944aD95e51CB83C1f35FAEEDfC7d2c31B0BB4d";
  var PROTOCOL_GUARDIAN = "0xCb45E82419baeBCC9bA8b1e5c7858e48A3B26Ea6";
  var wstETH_stETH_AGGREGATOR = "0xB1552C5e96B312d0Bf8b554186F846C40614a540";
  var rETH_ETH_AGGREGATOR = "0xF3272CAfe65b190e76caAF483db13424a3e23dD2";
  var GHO_CCIP_TOKEN_POOL = "0xF168B83598516A532a85995b52504a2Fa058C068";
  var LEGACY_BRIDGE_EXECUTOR = "0x7d9103572bE58FfE99dc390E8246f02dcAe6f611";
  var CHAIN_ID44 = 42161;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscArbitrumSepolia.mjs
  var MiscArbitrumSepolia_exports = {};
  __export(MiscArbitrumSepolia_exports, {
    CHAIN_ID: () => CHAIN_ID45,
    GHO_TOKEN: () => GHO_TOKEN,
    PROXY_ADMIN: () => PROXY_ADMIN2,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY2
  });
  var TRANSPARENT_PROXY_FACTORY2 = "0x43A8B7eC945a12a3Acb127B77ede19bd73ad76f8";
  var PROXY_ADMIN2 = "0xCB5B3ca20603231945dC5731C33E7f7F7679Ea89";
  var GHO_TOKEN = "0xb13Cfa6f8B2Eed2C37fB00fF0c1A59807C585810";
  var CHAIN_ID45 = 421614;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscAvalanche.mjs
  var MiscAvalanche_exports = {};
  __export(MiscAvalanche_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR2,
    AAVE_MERKLE_DISTRIBUTOR: () => AAVE_MERKLE_DISTRIBUTOR,
    CHAIN_ID: () => CHAIN_ID46,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY2,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER2,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN2,
    PROXY_ADMIN: () => PROXY_ADMIN3,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY3
  });
  var PARASWAP_FEE_CLAIMER2 = "0x9abf798f5314BFd793A9E57A654BEd35af4A1D60";
  var TRANSPARENT_PROXY_FACTORY3 = "0xB4e496f70602fE2AC6Ae511D028BA4D194773B29";
  var PROXY_ADMIN3 = "0xD3cF979e676265e4f6379749DECe4708B9A22476";
  var CREATE_3_FACTORY2 = "0x3b56998Ec06477704622ca8e2eA1b4db134cec32";
  var AAVE_CL_ROBOT_OPERATOR2 = "0x06d958772304e7220fc3E463756CE01Ed0D24db2";
  var PROTOCOL_GUARDIAN2 = "0x56C1a4b54921DEA9A344967a8693C7E661D72968";
  var AAVE_MERKLE_DISTRIBUTOR = "0xA065d5A299E618CD84a87641d5eEbC7916Fdf32E";
  var CHAIN_ID46 = 43114;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscFuji.mjs
  var MiscFuji_exports = {};
  __export(MiscFuji_exports, {
    CHAIN_ID: () => CHAIN_ID47,
    GHO_TOKEN: () => GHO_TOKEN2,
    PROXY_ADMIN: () => PROXY_ADMIN4,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY4
  });
  var GHO_TOKEN2 = "0x9c04928Cc678776eC1C1C0E46ecC03a5F47A7723";
  var TRANSPARENT_PROXY_FACTORY4 = "0x5B8D7e59DbEC5804e4A096FF548ACea83E4615a9";
  var PROXY_ADMIN4 = "0x440F1b750Cbc7DDd2Bd9Af279Afe422EaeE58b41";
  var CHAIN_ID47 = 43113;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscBase.mjs
  var MiscBase_exports = {};
  __export(MiscBase_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR3,
    CHAIN_ID: () => CHAIN_ID48,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY3,
    LEGACY_BRIDGE_EXECUTOR: () => LEGACY_BRIDGE_EXECUTOR2,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER3,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN3,
    PROXY_ADMIN: () => PROXY_ADMIN5,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY5,
    cbETH_ETH_AGGREGATOR: () => cbETH_ETH_AGGREGATOR,
    wstETH_stETH_AGGREGATOR: () => wstETH_stETH_AGGREGATOR2
  });
  var PARASWAP_FEE_CLAIMER3 = "0xAe940e61E9863178b71500c9B5faE2a04Da361a1";
  var TRANSPARENT_PROXY_FACTORY5 = "0x05225Cd708bCa9253789C1374e4337a019e99D56";
  var PROXY_ADMIN5 = "0xc85b1E333aecc99340b2320493Fe2d22b8734795";
  var CREATE_3_FACTORY3 = "0x3b56998Ec06477704622ca8e2eA1b4db134cec32";
  var AAVE_CL_ROBOT_OPERATOR3 = "0x88db99eeBb390a2a4DcAC2E1DDb09c07E911C5C3";
  var PROTOCOL_GUARDIAN3 = "0x56C1a4b54921DEA9A344967a8693C7E661D72968";
  var wstETH_stETH_AGGREGATOR2 = "0xB88BAc61a4Ca37C43a3725912B1f472c9A5bc061";
  var cbETH_ETH_AGGREGATOR = "0x868a501e68F3D1E89CfC0D22F6b22E8dabce5F04";
  var LEGACY_BRIDGE_EXECUTOR2 = "0xA9F30e6ED4098e9439B2ac8aEA2d3fc26BcEbb45";
  var CHAIN_ID48 = 8453;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscBaseSepolia.mjs
  var MiscBaseSepolia_exports = {};
  __export(MiscBaseSepolia_exports, {
    CHAIN_ID: () => CHAIN_ID49,
    GHO_TOKEN: () => GHO_TOKEN3,
    PROXY_ADMIN: () => PROXY_ADMIN6,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY6
  });
  var TRANSPARENT_PROXY_FACTORY6 = "0xeF4d1F3F0dCe46C1Ad684F23Ea3aA542592A8cFe";
  var PROXY_ADMIN6 = "0xbeCE3Cb857644b44Bb44084f9AfE784473ADb17B";
  var GHO_TOKEN3 = "0x7CFa3f3d1cded0Da930881c609D4Dbf0012c14Bb";
  var CHAIN_ID49 = 84532;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscEthereum.mjs
  var MiscEthereum_exports = {};
  __export(MiscEthereum_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR4,
    AAVE_ECOSYSTEM_RESERVE_CONTROLLER: () => AAVE_ECOSYSTEM_RESERVE_CONTROLLER,
    AAVE_MERKLE_DISTRIBUTOR: () => AAVE_MERKLE_DISTRIBUTOR2,
    AAVE_POL_ETH_BRIDGE: () => AAVE_POL_ETH_BRIDGE,
    AAVE_SWAPPER: () => AAVE_SWAPPER,
    CHAIN_ID: () => CHAIN_ID50,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY4,
    ECOSYSTEM_RESERVE: () => ECOSYSTEM_RESERVE,
    EUR_USD_AGGREGATOR: () => EUR_USD_AGGREGATOR,
    GHO_CCIP_TOKEN_POOL: () => GHO_CCIP_TOKEN_POOL2,
    GHO_FLASHMINTER_FACILITATOR: () => GHO_FLASHMINTER_FACILITATOR,
    GHO_TOKEN: () => GHO_TOKEN4,
    GSM_REGISTRY: () => GSM_REGISTRY,
    GSM_USDC: () => GSM_USDC,
    GSM_USDC_FEE_STRATEGY: () => GSM_USDC_FEE_STRATEGY,
    GSM_USDC_ORACLE_SWAP_FREEZER: () => GSM_USDC_ORACLE_SWAP_FREEZER,
    GSM_USDC_PRICE_STRATEGY: () => GSM_USDC_PRICE_STRATEGY,
    GSM_USDT: () => GSM_USDT,
    GSM_USDT_FEE_STRATEGY: () => GSM_USDT_FEE_STRATEGY,
    GSM_USDT_ORACLE_SWAP_FREEZER: () => GSM_USDT_ORACLE_SWAP_FREEZER,
    GSM_USDT_PRICE_STRATEGY: () => GSM_USDT_PRICE_STRATEGY,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER4,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN4,
    PROXY_ADMIN: () => PROXY_ADMIN7,
    PROXY_ADMIN_LONG: () => PROXY_ADMIN_LONG,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY7,
    agEUR_EUR_AGGREGATOR: () => agEUR_EUR_AGGREGATOR,
    sDAI_POT: () => sDAI_POT,
    stEUR: () => stEUR,
    weETH_RATIO_PROVIDER: () => weETH_RATIO_PROVIDER
  });
  var AAVE_ECOSYSTEM_RESERVE_CONTROLLER = "0x3d569673dAa0575c936c7c67c4E6AedA69CC630C";
  var ECOSYSTEM_RESERVE = "0x25F2226B597E8F9514B3F68F00f494cF4f286491";
  var PROXY_ADMIN_LONG = "0x86C3FfeE349A7cFf7cA88C449717B1b133bfb517";
  var AAVE_SWAPPER = "0x3ea64b1C0194524b48F9118462C8E9cd61a243c7";
  var AAVE_POL_ETH_BRIDGE = "0x1C2BA5b8ab8e795fF44387ba6d251fa65AD20b36";
  var PARASWAP_FEE_CLAIMER4 = "0x9abf798f5314BFd793A9E57A654BEd35af4A1D60";
  var TRANSPARENT_PROXY_FACTORY7 = "0xB4e496f70602fE2AC6Ae511D028BA4D194773B29";
  var PROXY_ADMIN7 = "0xD3cF979e676265e4f6379749DECe4708B9A22476";
  var CREATE_3_FACTORY4 = "0xcc3C54B95f3f1867A43009B80ed4DD930E3cE2F7";
  var AAVE_CL_ROBOT_OPERATOR4 = "0x1cDF8879eC8bE012bA959EB515b11008E0cb6323";
  var PROTOCOL_GUARDIAN4 = "0x2CFe3ec4d5a6811f4B8067F0DE7e47DfA938Aa30";
  var AAVE_MERKLE_DISTRIBUTOR2 = "0xa88c6D90eAe942291325f9ae3c66f3563B93FE10";
  var GHO_TOKEN4 = "0x40D16FC0246aD3160Ccc09B8D0D3A2cD28aE6C2f";
  var GHO_FLASHMINTER_FACILITATOR = "0xb639D208Bcf0589D54FaC24E655C79EC529762B8";
  var GHO_CCIP_TOKEN_POOL2 = "0x5756880B6a1EAba0175227bf02a7E87c1e02B28C";
  var GSM_REGISTRY = "0x167527DB01325408696326e3580cd8e55D99Dc1A";
  var GSM_USDC = "0x0d8eFfC11dF3F229AA1EA0509BC9DFa632A13578";
  var GSM_USDT = "0x686F8D21520f4ecEc7ba577be08354F4d1EB8262";
  var GSM_USDC_FEE_STRATEGY = "0xD4478A76aCeA81D3768A0ACB6e38f25eEB6Eb1B5";
  var GSM_USDT_FEE_STRATEGY = "0xD4478A76aCeA81D3768A0ACB6e38f25eEB6Eb1B5";
  var GSM_USDC_PRICE_STRATEGY = "0x430BEdcA5DfA6f94d1205Cb33AB4f008D0d9942a";
  var GSM_USDT_PRICE_STRATEGY = "0x4c707764cbFB4FFa078e169e6b8A6AdbE7526a2c";
  var GSM_USDC_ORACLE_SWAP_FREEZER = "0xef6beCa8D9543eC007bceA835aF768B58F730C1f";
  var GSM_USDT_ORACLE_SWAP_FREEZER = "0x71381e6718b37C12155CB961Ca3D374A8BfFa0e5";
  var sDAI_POT = "0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7";
  var stEUR = "0x004626A008B1aCdC4c74ab51644093b155e59A23";
  var agEUR_EUR_AGGREGATOR = "0xb4d5289C58CE36080b0748B47F859D8F50dFAACb";
  var EUR_USD_AGGREGATOR = "0xb49f677943BC038e9857d61E7d053CaA2C1734C1";
  var weETH_RATIO_PROVIDER = "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee";
  var CHAIN_ID50 = 1;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscFantom.mjs
  var MiscFantom_exports = {};
  __export(MiscFantom_exports, {
    CHAIN_ID: () => CHAIN_ID51,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER5
  });
  var PARASWAP_FEE_CLAIMER5 = "0x9abf798f5314BFd793A9E57A654BEd35af4A1D60";
  var CHAIN_ID51 = 250;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscOptimism.mjs
  var MiscOptimism_exports = {};
  __export(MiscOptimism_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR5,
    AAVE_MERKLE_DISTRIBUTOR: () => AAVE_MERKLE_DISTRIBUTOR3,
    CHAIN_ID: () => CHAIN_ID52,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY5,
    LEGACY_BRIDGE_EXECUTOR: () => LEGACY_BRIDGE_EXECUTOR3,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER6,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN5,
    PROXY_ADMIN: () => PROXY_ADMIN8,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY8,
    rETH_ETH_AGGREGATOR: () => rETH_ETH_AGGREGATOR2,
    wstETH_stETH_AGGREGATOR: () => wstETH_stETH_AGGREGATOR3
  });
  var PARASWAP_FEE_CLAIMER6 = "0x9abf798f5314BFd793A9E57A654BEd35af4A1D60";
  var TRANSPARENT_PROXY_FACTORY8 = "0xB4e496f70602fE2AC6Ae511D028BA4D194773B29";
  var PROXY_ADMIN8 = "0xD3cF979e676265e4f6379749DECe4708B9A22476";
  var CREATE_3_FACTORY5 = "0x3b56998Ec06477704622ca8e2eA1b4db134cec32";
  var AAVE_CL_ROBOT_OPERATOR5 = "0x55Cf9583D7D30DC4936bAee1f747591dBECe5df7";
  var PROTOCOL_GUARDIAN5 = "0x56C1a4b54921DEA9A344967a8693C7E661D72968";
  var AAVE_MERKLE_DISTRIBUTOR3 = "0x1685D81212580DD4cDA287616C2f6F4794927e18";
  var wstETH_stETH_AGGREGATOR3 = "0xe59EBa0D492cA53C6f46015EEa00517F2707dc77";
  var rETH_ETH_AGGREGATOR2 = "0x22F3727be377781d1579B7C9222382b21c9d1a8f";
  var LEGACY_BRIDGE_EXECUTOR3 = "0x7d9103572bE58FfE99dc390E8246f02dcAe6f611";
  var CHAIN_ID52 = 10;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscOptimismSepolia.mjs
  var MiscOptimismSepolia_exports = {};
  __export(MiscOptimismSepolia_exports, {
    CHAIN_ID: () => CHAIN_ID53,
    GHO_TOKEN: () => GHO_TOKEN5,
    PROXY_ADMIN: () => PROXY_ADMIN9,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY9
  });
  var GHO_TOKEN5 = "0xb13Cfa6f8B2Eed2C37fB00fF0c1A59807C585810";
  var TRANSPARENT_PROXY_FACTORY9 = "0xb172a90A7C238969CE9B27cc19D13b60A91e7F00";
  var PROXY_ADMIN9 = "0xe892E40C92c2E4D281Be59b2E6300F271d824E75";
  var CHAIN_ID53 = 11155420;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscPolygon.mjs
  var MiscPolygon_exports = {};
  __export(MiscPolygon_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR6,
    AAVE_MERKLE_DISTRIBUTOR: () => AAVE_MERKLE_DISTRIBUTOR4,
    AAVE_POL_ETH_BRIDGE: () => AAVE_POL_ETH_BRIDGE2,
    CHAIN_ID: () => CHAIN_ID54,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY6,
    LEGACY_BRIDGE_EXECUTOR: () => LEGACY_BRIDGE_EXECUTOR4,
    MaticX_RATE_PROVIDER: () => MaticX_RATE_PROVIDER,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER7,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN6,
    PROXY_ADMIN: () => PROXY_ADMIN10,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY10,
    stMATIC_RATE_PROVIDER: () => stMATIC_RATE_PROVIDER,
    wstETH_stETH_AGGREGATOR: () => wstETH_stETH_AGGREGATOR4
  });
  var AAVE_POL_ETH_BRIDGE2 = "0x1C2BA5b8ab8e795fF44387ba6d251fa65AD20b36";
  var PARASWAP_FEE_CLAIMER7 = "0x9abf798f5314BFd793A9E57A654BEd35af4A1D60";
  var TRANSPARENT_PROXY_FACTORY10 = "0xB4e496f70602fE2AC6Ae511D028BA4D194773B29";
  var PROXY_ADMIN10 = "0xD3cF979e676265e4f6379749DECe4708B9A22476";
  var CREATE_3_FACTORY6 = "0x3b56998Ec06477704622ca8e2eA1b4db134cec32";
  var AAVE_CL_ROBOT_OPERATOR6 = "0xB4C212f5cD17E200019b07e6B1fDf124d35DBCf5";
  var PROTOCOL_GUARDIAN6 = "0xCb45E82419baeBCC9bA8b1e5c7858e48A3B26Ea6";
  var AAVE_MERKLE_DISTRIBUTOR4 = "0x7A9ff54A6eE4a21223036890bB8c4ea2D62c686b";
  var wstETH_stETH_AGGREGATOR4 = "0x3Ea1eC855fBda8bA0396975eC260AD2e9B2Bc01c";
  var MaticX_RATE_PROVIDER = "0xeE652bbF72689AA59F0B8F981c9c90e2A8Af8d8f";
  var stMATIC_RATE_PROVIDER = "0xdEd6C522d803E35f65318a9a4d7333a22d582199";
  var LEGACY_BRIDGE_EXECUTOR4 = "0xdc9A35B16DB4e126cFeDC41322b3a36454B1F772";
  var CHAIN_ID54 = 137;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscMetis.mjs
  var MiscMetis_exports = {};
  __export(MiscMetis_exports, {
    CHAIN_ID: () => CHAIN_ID55,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY7,
    LEGACY_BRIDGE_EXECUTOR: () => LEGACY_BRIDGE_EXECUTOR5,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN7,
    PROXY_ADMIN: () => PROXY_ADMIN11,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY11
  });
  var TRANSPARENT_PROXY_FACTORY11 = "0x1dad86dC5990BCE5bFe3A150A4E0ece990d6EBcB";
  var PROXY_ADMIN11 = "0x1CabD986cBAbDf12E00128DFf03C80ee62C4fd97";
  var CREATE_3_FACTORY7 = "0x2e649f6b54B07E210b31c9cC2eB8a0d5997c3D4A";
  var PROTOCOL_GUARDIAN7 = "0x56C1a4b54921DEA9A344967a8693C7E661D72968";
  var LEGACY_BRIDGE_EXECUTOR5 = "0x8EC77963068474a45016938Deb95E603Ca82a029";
  var CHAIN_ID55 = 1088;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscGnosis.mjs
  var MiscGnosis_exports = {};
  __export(MiscGnosis_exports, {
    CHAIN_ID: () => CHAIN_ID56,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY8,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN8,
    PROXY_ADMIN: () => PROXY_ADMIN12,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY12,
    wstETH_stETH_AGGREGATOR: () => wstETH_stETH_AGGREGATOR5
  });
  var TRANSPARENT_PROXY_FACTORY12 = "0x47aAdaAE1F05C978E6aBb7568d11B7F6e0FC4d6A";
  var PROXY_ADMIN12 = "0xe892E40C92c2E4D281Be59b2E6300F271d824E75";
  var CREATE_3_FACTORY8 = "0x2cC41488f4494c5e11cB6cbA82199442B9f495B6";
  var PROTOCOL_GUARDIAN8 = "0xCb45E82419baeBCC9bA8b1e5c7858e48A3B26Ea6";
  var wstETH_stETH_AGGREGATOR5 = "0x0064AC007fF665CF8D0D3Af5E0AD1c26a3f853eA";
  var CHAIN_ID56 = 100;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscBNB.mjs
  var MiscBNB_exports = {};
  __export(MiscBNB_exports, {
    AAVE_CL_ROBOT_OPERATOR: () => AAVE_CL_ROBOT_OPERATOR7,
    CHAIN_ID: () => CHAIN_ID57,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY9,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER8,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN9,
    PROXY_ADMIN: () => PROXY_ADMIN13,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY13
  });
  var TRANSPARENT_PROXY_FACTORY13 = "0x47aAdaAE1F05C978E6aBb7568d11B7F6e0FC4d6A";
  var PROTOCOL_GUARDIAN9 = "0xCb45E82419baeBCC9bA8b1e5c7858e48A3B26Ea6";
  var PARASWAP_FEE_CLAIMER8 = "0xAe940e61E9863178b71500c9B5faE2a04Da361a1";
  var PROXY_ADMIN13 = "0x39EBFfc7679c62Dfcc4A3E2c09Bcb0be255Ae63c";
  var CREATE_3_FACTORY9 = "0x3b56998Ec06477704622ca8e2eA1b4db134cec32";
  var AAVE_CL_ROBOT_OPERATOR7 = "0x51Bd3d6011Dd0BD88Ee1bEA1a67be799A6A09D79";
  var CHAIN_ID57 = 56;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscScroll.mjs
  var MiscScroll_exports = {};
  __export(MiscScroll_exports, {
    CHAIN_ID: () => CHAIN_ID58,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY10,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN10,
    PROXY_ADMIN: () => PROXY_ADMIN14,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY14,
    wstETH_stETH_AGGREGATOR: () => wstETH_stETH_AGGREGATOR6
  });
  var TRANSPARENT_PROXY_FACTORY14 = "0xFa2eeb2d0054C3Db2A606E2cd9EE111b62707D1e";
  var PROXY_ADMIN14 = "0x782559e349b084bB7C07c08404aE6E3436cDAE2E";
  var CREATE_3_FACTORY10 = "0xC6f44D0daC966658Db36742f5153bDa0EBbb45ab";
  var PROTOCOL_GUARDIAN10 = "0xCb45E82419baeBCC9bA8b1e5c7858e48A3B26Ea6";
  var wstETH_stETH_AGGREGATOR6 = "0xE61Da4C909F7d86797a0D06Db63c34f76c9bCBDC";
  var CHAIN_ID58 = 534352;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscPolygonZkEvm.mjs
  var MiscPolygonZkEvm_exports = {};
  __export(MiscPolygonZkEvm_exports, {
    CHAIN_ID: () => CHAIN_ID59,
    CREATE_3_FACTORY: () => CREATE_3_FACTORY11,
    PARASWAP_FEE_CLAIMER: () => PARASWAP_FEE_CLAIMER9,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN11,
    PROXY_ADMIN: () => PROXY_ADMIN15,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY15
  });
  var PARASWAP_FEE_CLAIMER9 = "0xAe940e61E9863178b71500c9B5faE2a04Da361a1";
  var TRANSPARENT_PROXY_FACTORY15 = "0x8B6851156023f4f5A66F68BEA80851c3D905Ac93";
  var PROXY_ADMIN15 = "0x2f6571d3Eb9a4e350C68C36bCD2afe39530078E2";
  var CREATE_3_FACTORY11 = "0xE2E8Badc5d50f8a6188577B89f50701cDE2D4e19";
  var PROTOCOL_GUARDIAN11 = "0x8C05474F1f0161F71276677De0a2d8a347583c45";
  var CHAIN_ID59 = 1101;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscSepolia.mjs
  var MiscSepolia_exports = {};
  __export(MiscSepolia_exports, {
    CHAIN_ID: () => CHAIN_ID60,
    GHO_FLASHMINTER_FACILITATOR: () => GHO_FLASHMINTER_FACILITATOR2,
    GHO_TOKEN: () => GHO_TOKEN6,
    PROXY_ADMIN: () => PROXY_ADMIN16,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY16
  });
  var TRANSPARENT_PROXY_FACTORY16 = "0x3Bad08c7b17D77cE12A2e1438Db2353b58F7c4a2";
  var PROXY_ADMIN16 = "0x8dDa7a1E3e96EB13BE50bB59e80485227E3DE2e7";
  var GHO_TOKEN6 = "0xc4bF5CbDaBE595361438F8c6a187bDc330539c60";
  var GHO_FLASHMINTER_FACILITATOR2 = "0xB5d0ef1548D9C70d3E7a96cA67A2d7EbC5b1173E";
  var CHAIN_ID60 = 11155111;

  // node_modules/@bgd-labs/aave-address-book/dist/MiscZkSync.mjs
  var MiscZkSync_exports = {};
  __export(MiscZkSync_exports, {
    CHAIN_ID: () => CHAIN_ID61,
    PROTOCOL_GUARDIAN: () => PROTOCOL_GUARDIAN12,
    PROXY_ADMIN: () => PROXY_ADMIN17,
    TRANSPARENT_PROXY_FACTORY: () => TRANSPARENT_PROXY_FACTORY17
  });
  var TRANSPARENT_PROXY_FACTORY17 = "0x903A3228c4C58e94787CB33EE83e087bCFcF0a91";
  var PROXY_ADMIN17 = "0x158d6c497317367CEa3CBAb0BD84E6de236F060D";
  var PROTOCOL_GUARDIAN12 = "0xba845c27903F7dDB5c676e5b74728C871057E000";
  var CHAIN_ID61 = 324;

  // node_modules/@bgd-labs/aave-address-book/dist/AaveGovernanceV2.mjs
  var AaveGovernanceV2_exports = {};
  __export(AaveGovernanceV2_exports, {
    ARC_TIMELOCK: () => ARC_TIMELOCK,
    CHAIN_ID: () => CHAIN_ID62,
    CROSSCHAIN_FORWARDER_ARBITRUM: () => CROSSCHAIN_FORWARDER_ARBITRUM,
    CROSSCHAIN_FORWARDER_BASE: () => CROSSCHAIN_FORWARDER_BASE,
    CROSSCHAIN_FORWARDER_METIS: () => CROSSCHAIN_FORWARDER_METIS,
    CROSSCHAIN_FORWARDER_OPTIMISM: () => CROSSCHAIN_FORWARDER_OPTIMISM,
    CROSSCHAIN_FORWARDER_POLYGON: () => CROSSCHAIN_FORWARDER_POLYGON,
    LONG_EXECUTOR: () => LONG_EXECUTOR,
    SHORT_EXECUTOR: () => SHORT_EXECUTOR
  });
  var SHORT_EXECUTOR = "0xEE56e2B3D491590B5b31738cC34d5232F378a8D5";
  var LONG_EXECUTOR = "0x79426A1c24B2978D90d7A5070a46C65B07bC4299";
  var ARC_TIMELOCK = "0xAce1d11d836cb3F51Ef658FD4D353fFb3c301218";
  var CROSSCHAIN_FORWARDER_POLYGON = "0x158a6bC04F0828318821baE797f50B0A1299d45b";
  var CROSSCHAIN_FORWARDER_OPTIMISM = "0x5f5C02875a8e9B5A26fbd09040ABCfDeb2AA6711";
  var CROSSCHAIN_FORWARDER_ARBITRUM = "0xd1B3E25fD7C8AE7CADDC6F71b461b79CD4ddcFa3";
  var CROSSCHAIN_FORWARDER_METIS = "0x2fE52eF191F0BE1D98459BdaD2F1d3160336C08f";
  var CROSSCHAIN_FORWARDER_BASE = "0x3215225538da1546FE0DA88ee13019f402078942";
  var CHAIN_ID62 = 1;

  // node_modules/@bgd-labs/aave-address-book/dist/AaveSafetyModule.mjs
  var AaveSafetyModule_exports = {};
  __export(AaveSafetyModule_exports, {
    CHAIN_ID: () => CHAIN_ID63,
    STK_AAVE: () => STK_AAVE,
    STK_AAVE_WSTETH_BPTV2: () => STK_AAVE_WSTETH_BPTV2,
    STK_AAVE_WSTETH_BPTV2_ORACLE: () => STK_AAVE_WSTETH_BPTV2_ORACLE,
    STK_ABPT: () => STK_ABPT,
    STK_ABPT_ORACLE: () => STK_ABPT_ORACLE,
    STK_ABPT_STK_AAVE_WSTETH_BPTV2_MIGRATOR: () => STK_ABPT_STK_AAVE_WSTETH_BPTV2_MIGRATOR,
    STK_GHO: () => STK_GHO
  });
  var STK_AAVE = "0x4da27a545c0c5B758a6BA100e3a049001de870f5";
  var STK_ABPT = "0xa1116930326D21fB917d5A27F1E9943A9595fb47";
  var STK_ABPT_ORACLE = "0x209Ad99bd808221293d03827B86cC544bcA0023b";
  var STK_ABPT_STK_AAVE_WSTETH_BPTV2_MIGRATOR = "0xecD4bd3121F9FD604ffaC631bF6d41ec12f1fafb";
  var STK_GHO = "0x1a88Df1cFe15Af22B3c4c783D4e6F7F9e0C1885d";
  var STK_AAVE_WSTETH_BPTV2 = "0x9eDA81C21C273a82BE9Bbc19B6A6182212068101";
  var STK_AAVE_WSTETH_BPTV2_ORACLE = "0xADf86b537eF08591c2777E144322E8b0Ca7E82a7";
  var CHAIN_ID63 = 1;

  // node_modules/@bgd-labs/aave-address-book/dist/abis/IPayloadsControllerCore.mjs
  var IPayloadsControllerCore_ABI = [
    {
      type: "function",
      name: "EXPIRATION_DELAY",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "GRACE_PERIOD",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MAX_EXECUTION_DELAY",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MIN_EXECUTION_DELAY",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "cancelPayload",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "createPayload",
      inputs: [
        {
          name: "actions",
          type: "tuple[]",
          internalType: "struct IPayloadsControllerCore.ExecutionAction[]",
          components: [
            {
              name: "target",
              type: "address",
              internalType: "address"
            },
            {
              name: "withDelegateCall",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "signature",
              type: "string",
              internalType: "string"
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "executePayload",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "getExecutorSettingsByAccessControl",
      inputs: [
        {
          name: "accessControl",
          type: "uint8",
          internalType: "enum PayloadsControllerUtils.AccessControl"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IPayloadsControllerCore.ExecutorConfig",
          components: [
            {
              name: "executor",
              type: "address",
              internalType: "address"
            },
            {
              name: "delay",
              type: "uint40",
              internalType: "uint40"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPayloadById",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IPayloadsControllerCore.Payload",
          components: [
            {
              name: "creator",
              type: "address",
              internalType: "address"
            },
            {
              name: "maximumAccessLevelRequired",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "state",
              type: "uint8",
              internalType: "enum IPayloadsControllerCore.PayloadState"
            },
            {
              name: "createdAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "queuedAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "executedAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "cancelledAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "expirationTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "delay",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "gracePeriod",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "actions",
              type: "tuple[]",
              internalType: "struct IPayloadsControllerCore.ExecutionAction[]",
              components: [
                {
                  name: "target",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "withDelegateCall",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "accessLevel",
                  type: "uint8",
                  internalType: "enum PayloadsControllerUtils.AccessControl"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                },
                {
                  name: "signature",
                  type: "string",
                  internalType: "string"
                },
                {
                  name: "callData",
                  type: "bytes",
                  internalType: "bytes"
                }
              ]
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPayloadState",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint8",
          internalType: "enum IPayloadsControllerCore.PayloadState"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPayloadsCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "updateExecutors",
      inputs: [
        {
          name: "executors",
          type: "tuple[]",
          internalType: "struct IPayloadsControllerCore.UpdateExecutorInput[]",
          components: [
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "executorConfig",
              type: "tuple",
              internalType: "struct IPayloadsControllerCore.ExecutorConfig",
              components: [
                {
                  name: "executor",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "delay",
                  type: "uint40",
                  internalType: "uint40"
                }
              ]
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "ExecutorSet",
      inputs: [
        {
          name: "accessLevel",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        },
        {
          name: "executor",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "delay",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadCancelled",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadCreated",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: true,
          internalType: "uint40"
        },
        {
          name: "creator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "actions",
          type: "tuple[]",
          indexed: false,
          internalType: "struct IPayloadsControllerCore.ExecutionAction[]",
          components: [
            {
              name: "target",
              type: "address",
              internalType: "address"
            },
            {
              name: "withDelegateCall",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "signature",
              type: "string",
              internalType: "string"
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "maximumAccessLevelRequired",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadExecuted",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadExecutionMessageReceived",
      inputs: [
        {
          name: "originSender",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "originChainId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "delivered",
          type: "bool",
          indexed: true,
          internalType: "bool"
        },
        {
          name: "message",
          type: "bytes",
          indexed: false,
          internalType: "bytes"
        },
        {
          name: "reason",
          type: "bytes",
          indexed: false,
          internalType: "bytes"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadQueued",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    }
  ];

  // node_modules/@bgd-labs/aave-address-book/dist/abis/IGovernanceCore.mjs
  var IGovernanceCore_ABI = [
    {
      type: "function",
      name: "ACHIEVABLE_VOTING_PARTICIPATION",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "CANCELLATION_FEE_COLLECTOR",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "COOLDOWN_PERIOD",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MIN_VOTING_DURATION",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "NAME",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "PRECISION_DIVIDER",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "PROPOSAL_EXPIRATION_TIME",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "VOTING_TOKENS_CAP",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "activateVoting",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "addVotingPortals",
      inputs: [
        {
          name: "votingPortals",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "cancelProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "createProposal",
      inputs: [
        {
          name: "payloads",
          type: "tuple[]",
          internalType: "struct PayloadsControllerUtils.Payload[]",
          components: [
            {
              name: "chain",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "payloadsController",
              type: "address",
              internalType: "address"
            },
            {
              name: "payloadId",
              type: "uint40",
              internalType: "uint40"
            }
          ]
        },
        {
          name: "votingPortal",
          type: "address",
          internalType: "address"
        },
        {
          name: "ipfsHash",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "executeProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getCancellationFee",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPowerStrategy",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IGovernancePowerStrategy"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IGovernanceCore.Proposal",
          components: [
            {
              name: "state",
              type: "uint8",
              internalType: "enum IGovernanceCore.State"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "creationTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "votingDuration",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "votingActivationTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "queuingTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "cancelTimestamp",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "creator",
              type: "address",
              internalType: "address"
            },
            {
              name: "votingPortal",
              type: "address",
              internalType: "address"
            },
            {
              name: "snapshotBlockHash",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "ipfsHash",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "forVotes",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "againstVotes",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "cancellationFee",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payloads",
              type: "tuple[]",
              internalType: "struct PayloadsControllerUtils.Payload[]",
              components: [
                {
                  name: "chain",
                  type: "uint256",
                  internalType: "uint256"
                },
                {
                  name: "accessLevel",
                  type: "uint8",
                  internalType: "enum PayloadsControllerUtils.AccessControl"
                },
                {
                  name: "payloadsController",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "payloadId",
                  type: "uint40",
                  internalType: "uint40"
                }
              ]
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getProposalState",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint8",
          internalType: "enum IGovernanceCore.State"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getProposalsCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getRepresentativeByChain",
      inputs: [
        {
          name: "voter",
          type: "address",
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getRepresentedVotersByChain",
      inputs: [
        {
          name: "representative",
          type: "address",
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getVotingConfig",
      inputs: [
        {
          name: "accessLevel",
          type: "uint8",
          internalType: "enum PayloadsControllerUtils.AccessControl"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IGovernanceCore.VotingConfig",
          components: [
            {
              name: "coolDownBeforeVotingStart",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "votingDuration",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "yesThreshold",
              type: "uint56",
              internalType: "uint56"
            },
            {
              name: "yesNoDifferential",
              type: "uint56",
              internalType: "uint56"
            },
            {
              name: "minPropositionPower",
              type: "uint56",
              internalType: "uint56"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getVotingPortalsCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isVotingPortalApproved",
      inputs: [
        {
          name: "votingPortal",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "queueProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "forVotes",
          type: "uint128",
          internalType: "uint128"
        },
        {
          name: "againstVotes",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "redeemCancellationFee",
      inputs: [
        {
          name: "proposalIds",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "removeVotingPortals",
      inputs: [
        {
          name: "votingPortals",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "rescueVotingPortal",
      inputs: [
        {
          name: "votingPortal",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setPowerStrategy",
      inputs: [
        {
          name: "newPowerStrategy",
          type: "address",
          internalType: "contract IGovernancePowerStrategy"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setVotingConfigs",
      inputs: [
        {
          name: "votingConfigs",
          type: "tuple[]",
          internalType: "struct IGovernanceCore.SetVotingConfigInput[]",
          components: [
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "coolDownBeforeVotingStart",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "votingDuration",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "yesThreshold",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "yesNoDifferential",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "minPropositionPower",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "updateCancellationFee",
      inputs: [
        {
          name: "cancellationFee",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "updateRepresentativesForChain",
      inputs: [
        {
          name: "representatives",
          type: "tuple[]",
          internalType: "struct IGovernanceCore.RepresentativeInput[]",
          components: [
            {
              name: "representative",
              type: "address",
              internalType: "address"
            },
            {
              name: "chainId",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "CancellationFeeRedeemed",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "cancellationFee",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "success",
          type: "bool",
          indexed: true,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "CancellationFeeUpdated",
      inputs: [
        {
          name: "cancellationFee",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadSent",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        },
        {
          name: "payloadsController",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "payloadNumberOnProposal",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "numberOfPayloadsOnProposal",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PowerStrategyUpdated",
      inputs: [
        {
          name: "newPowerStrategy",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalCanceled",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalCreated",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "creator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "accessLevel",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        },
        {
          name: "ipfsHash",
          type: "bytes32",
          indexed: false,
          internalType: "bytes32"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalExecuted",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalFailed",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "votesFor",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        },
        {
          name: "votesAgainst",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalQueued",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "votesFor",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        },
        {
          name: "votesAgainst",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "RepresentativeUpdated",
      inputs: [
        {
          name: "voter",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "representative",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VoteForwarded",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "voter",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "support",
          type: "bool",
          indexed: true,
          internalType: "bool"
        },
        {
          name: "votingAssetsWithSlot",
          type: "tuple[]",
          indexed: false,
          internalType: "struct IVotingMachineWithProofs.VotingAssetWithSlot[]",
          components: [
            {
              name: "underlyingAsset",
              type: "address",
              internalType: "address"
            },
            {
              name: "slot",
              type: "uint128",
              internalType: "uint128"
            }
          ]
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VotingActivated",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "snapshotBlockHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "votingDuration",
          type: "uint24",
          indexed: false,
          internalType: "uint24"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VotingConfigUpdated",
      inputs: [
        {
          name: "accessLevel",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        },
        {
          name: "votingDuration",
          type: "uint24",
          indexed: false,
          internalType: "uint24"
        },
        {
          name: "coolDownBeforeVotingStart",
          type: "uint24",
          indexed: false,
          internalType: "uint24"
        },
        {
          name: "yesThreshold",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "yesNoDifferential",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "minPropositionPower",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VotingPortalUpdated",
      inputs: [
        {
          name: "votingPortal",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "approved",
          type: "bool",
          indexed: true,
          internalType: "bool"
        }
      ],
      anonymous: false
    }
  ];

  // node_modules/@bgd-labs/aave-address-book/dist/abis/IERC20Detailed.mjs
  var IERC20Detailed_ABI = [
    {
      type: "function",
      name: "allowance",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address"
        },
        {
          name: "spender",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "approve",
      inputs: [
        {
          name: "spender",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "balanceOf",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "decimals",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "name",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "symbol",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "totalSupply",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "transfer",
      inputs: [
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "transferFrom",
      inputs: [
        {
          name: "sender",
          type: "address",
          internalType: "address"
        },
        {
          name: "recipient",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "Approval",
      inputs: [
        {
          name: "owner",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "spender",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Transfer",
      inputs: [
        {
          name: "from",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "value",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    }
  ];

  // node_modules/@bgd-labs/aave-address-book/dist/abis/IPool.mjs
  var IPool_ABI = [
    {
      type: "function",
      name: "ADDRESSES_PROVIDER",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IPoolAddressesProvider"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "BRIDGE_PROTOCOL_FEE",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "FLASHLOAN_PREMIUM_TOTAL",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "FLASHLOAN_PREMIUM_TO_PROTOCOL",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MAX_NUMBER_RESERVES",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "backUnbacked",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "fee",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "borrow",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "interestRateMode",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "configureEModeCategory",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "config",
          type: "tuple",
          internalType: "struct DataTypes.EModeCategoryBaseConfiguration",
          components: [
            {
              name: "ltv",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationThreshold",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationBonus",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "label",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "configureEModeCategoryBorrowableBitmap",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "borrowableBitmap",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "configureEModeCategoryCollateralBitmap",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "collateralBitmap",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "deposit",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "dropReserve",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "finalizeTransfer",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "from",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "balanceFromBefore",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "balanceToBefore",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "flashLoan",
      inputs: [
        {
          name: "receiverAddress",
          type: "address",
          internalType: "address"
        },
        {
          name: "assets",
          type: "address[]",
          internalType: "address[]"
        },
        {
          name: "amounts",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "interestRateModes",
          type: "uint256[]",
          internalType: "uint256[]"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        },
        {
          name: "params",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "flashLoanSimple",
      inputs: [
        {
          name: "receiverAddress",
          type: "address",
          internalType: "address"
        },
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "params",
          type: "bytes",
          internalType: "bytes"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getBorrowLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getBridgeLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getConfiguration",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct DataTypes.ReserveConfigurationMap",
          components: [
            {
              name: "data",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getEModeCategoryBorrowableBitmap",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getEModeCategoryCollateralBitmap",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getEModeCategoryCollateralConfig",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct DataTypes.CollateralConfig",
          components: [
            {
              name: "ltv",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationThreshold",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationBonus",
              type: "uint16",
              internalType: "uint16"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getEModeCategoryData",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct DataTypes.EModeCategoryLegacy",
          components: [
            {
              name: "ltv",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationThreshold",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationBonus",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "priceSource",
              type: "address",
              internalType: "address"
            },
            {
              name: "label",
              type: "string",
              internalType: "string"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getEModeCategoryLabel",
      inputs: [
        {
          name: "id",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getEModeLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getFlashLoanLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getLiquidationGracePeriod",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getLiquidationLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPoolLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReserveAddressById",
      inputs: [
        {
          name: "id",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReserveData",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct DataTypes.ReserveDataLegacy",
          components: [
            {
              name: "configuration",
              type: "tuple",
              internalType: "struct DataTypes.ReserveConfigurationMap",
              components: [
                {
                  name: "data",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            },
            {
              name: "liquidityIndex",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "currentLiquidityRate",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "variableBorrowIndex",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "currentVariableBorrowRate",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "currentStableBorrowRate",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "lastUpdateTimestamp",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "id",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "aTokenAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "stableDebtTokenAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "variableDebtTokenAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "interestRateStrategyAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "accruedToTreasury",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "unbacked",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "isolationModeTotalDebt",
              type: "uint128",
              internalType: "uint128"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReserveDataExtended",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct DataTypes.ReserveData",
          components: [
            {
              name: "configuration",
              type: "tuple",
              internalType: "struct DataTypes.ReserveConfigurationMap",
              components: [
                {
                  name: "data",
                  type: "uint256",
                  internalType: "uint256"
                }
              ]
            },
            {
              name: "liquidityIndex",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "currentLiquidityRate",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "variableBorrowIndex",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "currentVariableBorrowRate",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "__deprecatedStableBorrowRate",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "lastUpdateTimestamp",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "id",
              type: "uint16",
              internalType: "uint16"
            },
            {
              name: "liquidationGracePeriodUntil",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "aTokenAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "__deprecatedStableDebtTokenAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "variableDebtTokenAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "interestRateStrategyAddress",
              type: "address",
              internalType: "address"
            },
            {
              name: "accruedToTreasury",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "unbacked",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "isolationModeTotalDebt",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "virtualUnderlyingBalance",
              type: "uint128",
              internalType: "uint128"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReserveNormalizedIncome",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReserveNormalizedVariableDebt",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReservesCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getReservesList",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getSupplyLogic",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getUserAccountData",
      inputs: [
        {
          name: "user",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "totalCollateralBase",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "totalDebtBase",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "availableBorrowsBase",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "currentLiquidationThreshold",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "ltv",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "healthFactor",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getUserConfiguration",
      inputs: [
        {
          name: "user",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct DataTypes.UserConfigurationMap",
          components: [
            {
              name: "data",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getUserEMode",
      inputs: [
        {
          name: "user",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getVirtualUnderlyingBalance",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "initReserve",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "aTokenAddress",
          type: "address",
          internalType: "address"
        },
        {
          name: "variableDebtAddress",
          type: "address",
          internalType: "address"
        },
        {
          name: "interestRateStrategyAddress",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "liquidationCall",
      inputs: [
        {
          name: "collateralAsset",
          type: "address",
          internalType: "address"
        },
        {
          name: "debtAsset",
          type: "address",
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          internalType: "address"
        },
        {
          name: "debtToCover",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "receiveAToken",
          type: "bool",
          internalType: "bool"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "mintToTreasury",
      inputs: [
        {
          name: "assets",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "mintUnbacked",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "repay",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "interestRateMode",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "repayWithATokens",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "interestRateMode",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "repayWithPermit",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "interestRateMode",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "permitV",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "permitR",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "permitS",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "rescueTokens",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "resetIsolationModeTotalDebt",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setConfiguration",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "configuration",
          type: "tuple",
          internalType: "struct DataTypes.ReserveConfigurationMap",
          components: [
            {
              name: "data",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setLiquidationGracePeriod",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "until",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setReserveInterestRateStrategyAddress",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "rateStrategyAddress",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setUserEMode",
      inputs: [
        {
          name: "categoryId",
          type: "uint8",
          internalType: "uint8"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setUserUseReserveAsCollateral",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "useAsCollateral",
          type: "bool",
          internalType: "bool"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "supply",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "supplyWithPermit",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "onBehalfOf",
          type: "address",
          internalType: "address"
        },
        {
          name: "referralCode",
          type: "uint16",
          internalType: "uint16"
        },
        {
          name: "deadline",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "permitV",
          type: "uint8",
          internalType: "uint8"
        },
        {
          name: "permitR",
          type: "bytes32",
          internalType: "bytes32"
        },
        {
          name: "permitS",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "syncIndexesState",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "syncRatesState",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "updateBridgeProtocolFee",
      inputs: [
        {
          name: "bridgeProtocolFee",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "updateFlashloanPremiums",
      inputs: [
        {
          name: "flashLoanPremiumTotal",
          type: "uint128",
          internalType: "uint128"
        },
        {
          name: "flashLoanPremiumToProtocol",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "withdraw",
      inputs: [
        {
          name: "asset",
          type: "address",
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "to",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "BackUnbacked",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "backer",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "fee",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Borrow",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: false,
          internalType: "address"
        },
        {
          name: "onBehalfOf",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "interestRateMode",
          type: "uint8",
          indexed: false,
          internalType: "enum DataTypes.InterestRateMode"
        },
        {
          name: "borrowRate",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "referralCode",
          type: "uint16",
          indexed: true,
          internalType: "uint16"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "FlashLoan",
      inputs: [
        {
          name: "target",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "initiator",
          type: "address",
          indexed: false,
          internalType: "address"
        },
        {
          name: "asset",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "interestRateMode",
          type: "uint8",
          indexed: false,
          internalType: "enum DataTypes.InterestRateMode"
        },
        {
          name: "premium",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "referralCode",
          type: "uint16",
          indexed: true,
          internalType: "uint16"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "IsolationModeTotalDebtUpdated",
      inputs: [
        {
          name: "asset",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "totalDebt",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "LiquidationCall",
      inputs: [
        {
          name: "collateralAsset",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "debtAsset",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "debtToCover",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "liquidatedCollateralAmount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "liquidator",
          type: "address",
          indexed: false,
          internalType: "address"
        },
        {
          name: "receiveAToken",
          type: "bool",
          indexed: false,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "MintUnbacked",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: false,
          internalType: "address"
        },
        {
          name: "onBehalfOf",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "referralCode",
          type: "uint16",
          indexed: true,
          internalType: "uint16"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "MintedToTreasury",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amountMinted",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Repay",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "repayer",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "useATokens",
          type: "bool",
          indexed: false,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ReserveDataUpdated",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "liquidityRate",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "stableBorrowRate",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "variableBorrowRate",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "liquidityIndex",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "variableBorrowIndex",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ReserveUsedAsCollateralDisabled",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ReserveUsedAsCollateralEnabled",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Supply",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: false,
          internalType: "address"
        },
        {
          name: "onBehalfOf",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "referralCode",
          type: "uint16",
          indexed: true,
          internalType: "uint16"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "UserEModeSet",
      inputs: [
        {
          name: "user",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "categoryId",
          type: "uint8",
          indexed: false,
          internalType: "uint8"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "Withdraw",
      inputs: [
        {
          name: "reserve",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "user",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    }
  ];

  // node_modules/find-object-paths/dist/lib/mjs/FindObjectPaths.js
  function findObjectPaths(obj, { key, value }) {
    return findPaths(obj, key, value);
  }
  function findPaths(obj, key, value) {
    const results = [];
    const find = (data, searchKey, searchValue, pathToData) => {
      if (typeof data === "string" || typeof data === "boolean" || typeof data === "number") {
        const keyTmp = pathToData.split(".").pop();
        if (searchKey && searchValue !== void 0 && data === searchValue) {
          if (keyTmp && (keyTmp === searchKey || keyTmp.endsWith(`[${searchKey}]`))) {
            results.push(pathToData);
          }
        } else if (searchKey && searchValue === void 0) {
          if (keyTmp && (keyTmp === searchKey || keyTmp.endsWith(`[${searchKey}]`))) {
            results.push(pathToData);
          }
        } else if (searchKey === void 0 && searchValue !== void 0 && data === searchValue) {
          if (keyTmp) {
            results.push(pathToData);
          }
        }
        return;
      } else if (Array.isArray(data)) {
        for (let j = 0; j < data.length; j++) {
          find(data[j], searchKey, searchValue, `${pathToData}[${j}]`);
        }
        return;
      } else if (typeof data === "object") {
        for (const k in data) {
          if (data.hasOwnProperty(k)) {
            find(data[k], searchKey, searchValue, `${pathToData ? pathToData + "." : ""}${k}`);
          }
        }
        return;
      }
    };
    find(obj, key, value, "");
    if (results.length > 1) {
      return results;
    } else if (results.length === 1) {
      return results[0];
    }
    return;
  }

  // src/govv3/utils/checkAddress.ts
  function isKnownAddress(value, chainId) {
    const transformedAddresses = Object.keys(AaveAddressBook_exports).reduce(
      (acc, key) => {
        if (AaveAddressBook_exports[key].CHAIN_ID === chainId) {
          const chainAddresses = { ...AaveAddressBook_exports[key] };
          if (chainAddresses.E_MODES) delete chainAddresses.E_MODES;
          acc[key] = chainAddresses;
        }
        return acc;
      },
      {}
    );
    const results = findObjectPaths(transformedAddresses, { value: getAddress(value) });
    if (typeof results === "string") return [results];
    return results;
  }
  function findPayloadsController(chainId) {
    const key = Object.keys(AaveAddressBook_exports).find(
      (key2) => AaveAddressBook_exports[key2].CHAIN_ID === chainId && AaveAddressBook_exports[key2].PAYLOADS_CONTROLLER
    );
    if (key) return AaveAddressBook_exports[key].PAYLOADS_CONTROLLER;
  }
  var assetsCache = Object.keys(AaveAddressBook_exports).reduce((acc, key) => {
    if (!AaveAddressBook_exports[key].ASSETS) return acc;
    const pool = AaveAddressBook_exports[key];
    if (!acc[pool.CHAIN_ID]) acc[pool.CHAIN_ID] = {};
    Object.keys(pool.ASSETS).map((symbol) => {
      const asset = pool.ASSETS[symbol];
      acc[pool.CHAIN_ID][asset.UNDERLYING] = { decimals: asset.decimals, symbol };
    });
    return acc;
  }, {});
  async function findAsset(client, address) {
    const chainId = client.chain.id;
    const asset = assetsCache[chainId][address];
    if (asset) return asset;
    const erc20Contract = getContract({ client, address, abi: IERC20Detailed_ABI });
    let symbol = "unknown";
    let decimals = 0;
    try {
      symbol = await erc20Contract.read.symbol();
    } catch (e) {
    }
    try {
      decimals = await erc20Contract.read.decimals();
    } catch (e) {
    }
    assetsCache[chainId][address] = {
      symbol,
      decimals
    };
    return assetsCache[chainId][address];
  }
  var cachedReservesList = {};
  async function assetIndexesToAsset(client, poolAddress, indexes) {
    if (!cachedReservesList[client.chain.id])
      cachedReservesList[client.chain.id] = await getContract({
        client,
        abi: IPool_ABI,
        address: poolAddress
      }).read.getReservesList();
    const reservesList = cachedReservesList[client.chain.id];
    return await Promise.all(
      indexes.map(async (index2) => {
        if (index2 < reservesList.length) {
          const reserve = reservesList[index2];
          return `${(await findAsset(client, reserve)).symbol}(id: ${index2})`;
        }
        return `unknown(id: ${index2})`;
      })
    );
  }

  // src/govv3/utils/markdownUtils.ts
  function boolToMarkdown(value) {
    if (value) return ":white_check_mark:";
    return ":sos:";
  }
  function toAddressLink(address, md, client) {
    if (!client) return address;
    const link = `${client.chain?.blockExplorers?.default.url}/address/${address}`;
    if (md) return toMarkdownLink(link, address);
    return link;
  }
  function toTxLink(txn, md, client) {
    if (!client) return txn;
    const link = `${client.chain?.blockExplorers?.default.url}/tx/${txn}`;
    if (md) return toMarkdownLink(link, txn);
    return link;
  }
  function toMarkdownLink(link, title) {
    return `[${title || link}](${link})`;
  }
  function renderCheckResult(check, result) {
    let response = `### Check: ${check.name} ${boolToMarkdown(!result.errors.length)}

`;
    if (result.errors.length) response += `#### Errors

${result.errors.join("\n")}

`;
    if (result.warnings.length) response += `#### Warnings

${result.warnings.join("\n")}

`;
    if (result.info.length) response += `#### Info

${result.info.join("\n")}

`;
    return response;
  }
  function renderUnixTime(time) {
    return new Date(time * 1e3).toLocaleString("en-GB", { timeZone: "UTC" });
  }
  function flagKnownAddress(isKnown) {
    if (isKnown === void 0 || isKnown.length === 0) return "";
    return `[:ghost:](https://github.com/bgd-labs/aave-address-book "${isKnown.join(", ")}")`;
  }
  function formatNumberString(x) {
    return String(x).replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
  }
  function limitDecimalsWithoutRounding(val, decimals) {
    const parts = val.split(".");
    if (parts.length != 2) return val;
    return parts[0] + "." + parts[1].substring(0, decimals);
  }
  function prettifyNumber({
    value,
    decimals,
    prefix,
    suffix,
    showDecimals,
    patchedValue
  }) {
    const formattedNumber = limitDecimalsWithoutRounding(
      formatNumberString(formatUnits(BigInt(patchedValue || value), decimals)),
      4
    );
    return `${prefix ? `${prefix} ` : ""}${formattedNumber}${suffix ? ` ${suffix}` : ""} [${value}${showDecimals ? `, ${decimals} decimals` : ""}]`;
  }
  function wrapInQuotes(name, quotes) {
    if (quotes) return "`" + name + "`";
    return name;
  }
  async function addAssetSymbol(client, value) {
    const asset = await findAsset(client, value);
    return `${value} (symbol: ${asset.symbol})`;
  }
  var CL_PROXY_ABI = [
    {
      inputs: [],
      name: "decimals",
      outputs: [{ internalType: "uint8", name: "", type: "uint8" }],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "description",
      outputs: [{ internalType: "string", name: "", type: "string" }],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "latestAnswer",
      outputs: [{ internalType: "int256", name: "", type: "int256" }],
      stateMutability: "view",
      type: "function"
    }
  ];
  async function addAssetPrice(client, address) {
    const clProxy = getContract({ client, address, abi: CL_PROXY_ABI });
    let decimals, latestAnswer = 0n, description = "unknown";
    try {
      decimals = await clProxy.read.decimals();
    } catch (e) {
    }
    try {
      latestAnswer = await clProxy.read.latestAnswer();
    } catch (e) {
    }
    try {
      description = await clProxy.read.description();
    } catch (e) {
    }
    return `${address} (latestAnswer: ${decimals ? prettifyNumber({ value: latestAnswer, decimals, showDecimals: true }) : latestAnswer}, description: ${description})`;
  }

  // node_modules/dotenv/config.js
  (function() {
    require_main().config(
      Object.assign(
        {},
        require_env_options(),
        require_cli_options()(process.argv)
      )
    );
  })();

  // node_modules/@bgd-labs/rpc-env/dist/lib.mjs
  var networkMap = {
    1: "eth-mainnet",
    3: "eth-ropsten",
    4: "eth-rinkeby",
    5: "eth-goerli",
    10: "opt-mainnet",
    30: "rootstock-mainnet",
    31: "rootstock-testnet",
    42: "eth-kovan",
    56: "bnb-mainnet",
    69: "opt-kovan",
    97: "bnb-testnet",
    100: "gnosis-mainnet",
    137: "polygon-mainnet",
    204: "opbnb-mainnet",
    250: "fantom-mainnet",
    252: "frax-mainnet",
    300: "zksync-sepolia",
    324: "zksync-mainnet",
    420: "opt-goerli",
    480: "worldchain-mainnet",
    592: "astar-mainnet",
    747: "flow-mainnet",
    1088: "metis-mainnet",
    1101: "polygonzkevm-mainnet",
    1301: "unichain-sepolia",
    1442: "polygonzkevm-testnet",
    1946: "soneium-minato",
    2442: "polygonzkevm-cardona",
    2522: "frax-sepolia",
    4002: "fantom-testnet",
    4801: "worldchain-sepolia",
    5611: "opbnb-testnet",
    7e3: "zetachain-mainnet",
    7001: "zetachain-testnet",
    8453: "base-mainnet",
    10200: "gnosis-chiado",
    11011: "shape-sepolia",
    11124: "abstract-testnet",
    37111: "lens-sepolia",
    42161: "arb-mainnet",
    42170: "arbnova-mainnet",
    43113: "avax-fuji",
    43114: "avax-mainnet",
    59141: "linea-sepolia",
    59144: "linea-mainnet",
    63157: "geist-mainnet",
    80001: "polygon-mumbai",
    80002: "polygon-amoy",
    80084: "berachain-bartio",
    81457: "blast-mainnet",
    84531: "base-goerli",
    84532: "base-sepolia",
    421611: "arb-rinkeby",
    421613: "arb-goerli",
    421614: "arb-sepolia",
    534351: "scroll-sepolia",
    534352: "scroll-mainnet",
    7777777: "zora-mainnet",
    11155111: "eth-sepolia",
    11155420: "opt-sepolia",
    168587773: "blast-sepolia",
    999999999: "zora-sepolia"
  };
  function defineChain(chain) {
    return {
      formatters: void 0,
      fees: void 0,
      serializers: void 0,
      ...chain
    };
  }
  var version3 = "2.21.48";
  var errorConfig2 = {
    getDocsUrl: ({ docsBaseUrl, docsPath: docsPath7 = "", docsSlug }) => docsPath7 ? `${docsBaseUrl ?? "https://viem.sh"}${docsPath7}${docsSlug ? `#${docsSlug}` : ""}` : void 0,
    version: `viem@${version3}`
  };
  var BaseError3 = class _BaseError extends Error {
    constructor(shortMessage, args = {}) {
      const details = (() => {
        if (args.cause instanceof _BaseError)
          return args.cause.details;
        if (args.cause?.message)
          return args.cause.message;
        return args.details;
      })();
      const docsPath7 = (() => {
        if (args.cause instanceof _BaseError)
          return args.cause.docsPath || args.docsPath;
        return args.docsPath;
      })();
      const docsUrl = errorConfig2.getDocsUrl?.({ ...args, docsPath: docsPath7 });
      const message = [
        shortMessage || "An error occurred.",
        "",
        ...args.metaMessages ? [...args.metaMessages, ""] : [],
        ...docsUrl ? [`Docs: ${docsUrl}`] : [],
        ...details ? [`Details: ${details}`] : [],
        ...errorConfig2.version ? [`Version: ${errorConfig2.version}`] : []
      ].join("\n");
      super(message, args.cause ? { cause: args.cause } : void 0);
      Object.defineProperty(this, "details", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "docsPath", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "metaMessages", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "shortMessage", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "version", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "BaseError"
      });
      this.details = details;
      this.docsPath = docsPath7;
      this.metaMessages = args.metaMessages;
      this.name = args.name ?? this.name;
      this.shortMessage = shortMessage;
      this.version = version3;
    }
    walk(fn) {
      return walk2(this, fn);
    }
  };
  function walk2(err, fn) {
    if (fn?.(err))
      return err;
    if (err && typeof err === "object" && "cause" in err && err.cause !== void 0)
      return walk2(err.cause, fn);
    return fn ? null : err;
  }
  var IntegerOutOfRangeError2 = class extends BaseError3 {
    constructor({ max, min, signed, size: size22, value }) {
      super(`Number "${value}" is not in safe ${size22 ? `${size22 * 8}-bit ${signed ? "signed" : "unsigned"} ` : ""}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, { name: "IntegerOutOfRangeError" });
    }
  };
  var SizeOverflowError2 = class extends BaseError3 {
    constructor({ givenSize, maxSize }) {
      super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, { name: "SizeOverflowError" });
    }
  };
  function isHex2(value, { strict = true } = {}) {
    if (!value)
      return false;
    if (typeof value !== "string")
      return false;
    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith("0x");
  }
  function size3(value) {
    if (isHex2(value, { strict: false }))
      return Math.ceil((value.length - 2) / 2);
    return value.length;
  }
  function trim2(hexOrBytes, { dir = "left" } = {}) {
    let data = typeof hexOrBytes === "string" ? hexOrBytes.replace("0x", "") : hexOrBytes;
    let sliceLength = 0;
    for (let i = 0; i < data.length - 1; i++) {
      if (data[dir === "left" ? i : data.length - i - 1].toString() === "0")
        sliceLength++;
      else
        break;
    }
    data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
    if (typeof hexOrBytes === "string") {
      if (data.length === 1 && dir === "right")
        data = `${data}0`;
      return `0x${data.length % 2 === 1 ? `0${data}` : data}`;
    }
    return data;
  }
  var SliceOffsetOutOfBoundsError2 = class extends BaseError3 {
    constructor({ offset, position, size: size22 }) {
      super(`Slice ${position === "start" ? "starting" : "ending"} at offset "${offset}" is out-of-bounds (size: ${size22}).`, { name: "SliceOffsetOutOfBoundsError" });
    }
  };
  var SizeExceedsPaddingSizeError2 = class extends BaseError3 {
    constructor({ size: size22, targetSize, type }) {
      super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size22}) exceeds padding size (${targetSize}).`, { name: "SizeExceedsPaddingSizeError" });
    }
  };
  function pad2(hexOrBytes, { dir, size: size22 = 32 } = {}) {
    if (typeof hexOrBytes === "string")
      return padHex2(hexOrBytes, { dir, size: size22 });
    return padBytes2(hexOrBytes, { dir, size: size22 });
  }
  function padHex2(hex_, { dir, size: size22 = 32 } = {}) {
    if (size22 === null)
      return hex_;
    const hex = hex_.replace("0x", "");
    if (hex.length > size22 * 2)
      throw new SizeExceedsPaddingSizeError2({
        size: Math.ceil(hex.length / 2),
        targetSize: size22,
        type: "hex"
      });
    return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size22 * 2, "0")}`;
  }
  function padBytes2(bytes22, { dir, size: size22 = 32 } = {}) {
    if (size22 === null)
      return bytes22;
    if (bytes22.length > size22)
      throw new SizeExceedsPaddingSizeError2({
        size: bytes22.length,
        targetSize: size22,
        type: "bytes"
      });
    const paddedBytes = new Uint8Array(size22);
    for (let i = 0; i < size22; i++) {
      const padEnd = dir === "right";
      paddedBytes[padEnd ? i : size22 - i - 1] = bytes22[padEnd ? i : bytes22.length - i - 1];
    }
    return paddedBytes;
  }
  var hexes3 = /* @__PURE__ */ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
  function toHex2(value, opts = {}) {
    if (typeof value === "number" || typeof value === "bigint")
      return numberToHex2(value, opts);
    if (typeof value === "string") {
      return stringToHex2(value, opts);
    }
    if (typeof value === "boolean")
      return boolToHex2(value, opts);
    return bytesToHex3(value, opts);
  }
  function boolToHex2(value, opts = {}) {
    const hex = `0x${Number(value)}`;
    if (typeof opts.size === "number") {
      assertSize2(hex, { size: opts.size });
      return pad2(hex, { size: opts.size });
    }
    return hex;
  }
  function bytesToHex3(value, opts = {}) {
    let string = "";
    for (let i = 0; i < value.length; i++) {
      string += hexes3[value[i]];
    }
    const hex = `0x${string}`;
    if (typeof opts.size === "number") {
      assertSize2(hex, { size: opts.size });
      return pad2(hex, { dir: "right", size: opts.size });
    }
    return hex;
  }
  function numberToHex2(value_, opts = {}) {
    const { signed, size: size22 } = opts;
    const value = BigInt(value_);
    let maxValue;
    if (size22) {
      if (signed)
        maxValue = (1n << BigInt(size22) * 8n - 1n) - 1n;
      else
        maxValue = 2n ** (BigInt(size22) * 8n) - 1n;
    } else if (typeof value_ === "number") {
      maxValue = BigInt(Number.MAX_SAFE_INTEGER);
    }
    const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
    if (maxValue && value > maxValue || value < minValue) {
      const suffix = typeof value_ === "bigint" ? "n" : "";
      throw new IntegerOutOfRangeError2({
        max: maxValue ? `${maxValue}${suffix}` : void 0,
        min: `${minValue}${suffix}`,
        signed,
        size: size22,
        value: `${value_}${suffix}`
      });
    }
    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size22 * 8)) + BigInt(value) : value).toString(16)}`;
    if (size22)
      return pad2(hex, { size: size22 });
    return hex;
  }
  var encoder3 = /* @__PURE__ */ new TextEncoder();
  function stringToHex2(value_, opts = {}) {
    const value = encoder3.encode(value_);
    return bytesToHex3(value, opts);
  }
  var encoder22 = /* @__PURE__ */ new TextEncoder();
  function toBytes3(value, opts = {}) {
    if (typeof value === "number" || typeof value === "bigint")
      return numberToBytes2(value, opts);
    if (typeof value === "boolean")
      return boolToBytes2(value, opts);
    if (isHex2(value))
      return hexToBytes3(value, opts);
    return stringToBytes2(value, opts);
  }
  function boolToBytes2(value, opts = {}) {
    const bytes22 = new Uint8Array(1);
    bytes22[0] = Number(value);
    if (typeof opts.size === "number") {
      assertSize2(bytes22, { size: opts.size });
      return pad2(bytes22, { size: opts.size });
    }
    return bytes22;
  }
  var charCodeMap2 = {
    zero: 48,
    nine: 57,
    A: 65,
    F: 70,
    a: 97,
    f: 102
  };
  function charCodeToBase162(char) {
    if (char >= charCodeMap2.zero && char <= charCodeMap2.nine)
      return char - charCodeMap2.zero;
    if (char >= charCodeMap2.A && char <= charCodeMap2.F)
      return char - (charCodeMap2.A - 10);
    if (char >= charCodeMap2.a && char <= charCodeMap2.f)
      return char - (charCodeMap2.a - 10);
    return void 0;
  }
  function hexToBytes3(hex_, opts = {}) {
    let hex = hex_;
    if (opts.size) {
      assertSize2(hex, { size: opts.size });
      hex = pad2(hex, { dir: "right", size: opts.size });
    }
    let hexString = hex.slice(2);
    if (hexString.length % 2)
      hexString = `0${hexString}`;
    const length = hexString.length / 2;
    const bytes22 = new Uint8Array(length);
    for (let index2 = 0, j = 0; index2 < length; index2++) {
      const nibbleLeft = charCodeToBase162(hexString.charCodeAt(j++));
      const nibbleRight = charCodeToBase162(hexString.charCodeAt(j++));
      if (nibbleLeft === void 0 || nibbleRight === void 0) {
        throw new BaseError3(`Invalid byte sequence ("${hexString[j - 2]}${hexString[j - 1]}" in "${hexString}").`);
      }
      bytes22[index2] = nibbleLeft * 16 + nibbleRight;
    }
    return bytes22;
  }
  function numberToBytes2(value, opts) {
    const hex = numberToHex2(value, opts);
    return hexToBytes3(hex);
  }
  function stringToBytes2(value, opts = {}) {
    const bytes22 = encoder22.encode(value);
    if (typeof opts.size === "number") {
      assertSize2(bytes22, { size: opts.size });
      return pad2(bytes22, { dir: "right", size: opts.size });
    }
    return bytes22;
  }
  function assertSize2(hexOrBytes, { size: size22 }) {
    if (size3(hexOrBytes) > size22)
      throw new SizeOverflowError2({
        givenSize: size3(hexOrBytes),
        maxSize: size22
      });
  }
  function hexToBigInt2(hex, opts = {}) {
    const { signed } = opts;
    if (opts.size)
      assertSize2(hex, { size: opts.size });
    const value = BigInt(hex);
    if (!signed)
      return value;
    const size22 = (hex.length - 2) / 2;
    const max = (1n << BigInt(size22) * 8n - 1n) - 1n;
    if (value <= max)
      return value;
    return value - BigInt(`0x${"f".padStart(size22 * 2, "f")}`) - 1n;
  }
  function hexToNumber3(hex, opts = {}) {
    return Number(hexToBigInt2(hex, opts));
  }
  function defineFormatter(type, format) {
    return ({ exclude, format: overrides }) => {
      return {
        exclude,
        format: (args) => {
          const formatted = format(args);
          if (exclude) {
            for (const key of exclude) {
              delete formatted[key];
            }
          }
          return {
            ...formatted,
            ...overrides(args)
          };
        },
        type
      };
    };
  }
  var transactionType2 = {
    "0x0": "legacy",
    "0x1": "eip2930",
    "0x2": "eip1559",
    "0x3": "eip4844",
    "0x4": "eip7702"
  };
  function formatTransaction2(transaction) {
    const transaction_ = {
      ...transaction,
      blockHash: transaction.blockHash ? transaction.blockHash : null,
      blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
      chainId: transaction.chainId ? hexToNumber3(transaction.chainId) : void 0,
      gas: transaction.gas ? BigInt(transaction.gas) : void 0,
      gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
      maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
      maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
      nonce: transaction.nonce ? hexToNumber3(transaction.nonce) : void 0,
      to: transaction.to ? transaction.to : null,
      transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
      type: transaction.type ? transactionType2[transaction.type] : void 0,
      typeHex: transaction.type ? transaction.type : void 0,
      value: transaction.value ? BigInt(transaction.value) : void 0,
      v: transaction.v ? BigInt(transaction.v) : void 0
    };
    if (transaction.authorizationList)
      transaction_.authorizationList = formatAuthorizationList3(transaction.authorizationList);
    transaction_.yParity = (() => {
      if (transaction.yParity)
        return Number(transaction.yParity);
      if (typeof transaction_.v === "bigint") {
        if (transaction_.v === 0n || transaction_.v === 27n)
          return 0;
        if (transaction_.v === 1n || transaction_.v === 28n)
          return 1;
        if (transaction_.v >= 35n)
          return transaction_.v % 2n === 0n ? 1 : 0;
      }
      return void 0;
    })();
    if (transaction_.type === "legacy") {
      delete transaction_.accessList;
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
      delete transaction_.yParity;
    }
    if (transaction_.type === "eip2930") {
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
    }
    if (transaction_.type === "eip1559") {
      delete transaction_.maxFeePerBlobGas;
    }
    return transaction_;
  }
  var defineTransaction = /* @__PURE__ */ defineFormatter("transaction", formatTransaction2);
  function formatAuthorizationList3(authorizationList) {
    return authorizationList.map((authorization) => ({
      contractAddress: authorization.address,
      chainId: Number(authorization.chainId),
      nonce: Number(authorization.nonce),
      r: authorization.r,
      s: authorization.s,
      yParity: Number(authorization.yParity)
    }));
  }
  function formatBlock2(block) {
    const transactions = (block.transactions ?? []).map((transaction) => {
      if (typeof transaction === "string")
        return transaction;
      return formatTransaction2(transaction);
    });
    return {
      ...block,
      baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
      blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
      difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
      excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
      gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
      gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
      hash: block.hash ? block.hash : null,
      logsBloom: block.logsBloom ? block.logsBloom : null,
      nonce: block.nonce ? block.nonce : null,
      number: block.number ? BigInt(block.number) : null,
      size: block.size ? BigInt(block.size) : void 0,
      timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
      transactions,
      totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
    };
  }
  var defineBlock = /* @__PURE__ */ defineFormatter("block", formatBlock2);
  function formatLog2(log, { args, eventName } = {}) {
    return {
      ...log,
      blockHash: log.blockHash ? log.blockHash : null,
      blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
      logIndex: log.logIndex ? Number(log.logIndex) : null,
      transactionHash: log.transactionHash ? log.transactionHash : null,
      transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
      ...eventName ? { args, eventName } : {}
    };
  }
  var receiptStatuses2 = {
    "0x0": "reverted",
    "0x1": "success"
  };
  function formatTransactionReceipt2(transactionReceipt) {
    const receipt = {
      ...transactionReceipt,
      blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
      contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
      cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
      effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
      gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
      logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog2(log)) : null,
      to: transactionReceipt.to ? transactionReceipt.to : null,
      transactionIndex: transactionReceipt.transactionIndex ? hexToNumber3(transactionReceipt.transactionIndex) : null,
      status: transactionReceipt.status ? receiptStatuses2[transactionReceipt.status] : null,
      type: transactionReceipt.type ? transactionType2[transactionReceipt.type] || transactionReceipt.type : null
    };
    if (transactionReceipt.blobGasPrice)
      receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
    if (transactionReceipt.blobGasUsed)
      receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
    return receipt;
  }
  var defineTransactionReceipt = /* @__PURE__ */ defineFormatter("transactionReceipt", formatTransactionReceipt2);
  var rpcTransactionType2 = {
    legacy: "0x0",
    eip2930: "0x1",
    eip1559: "0x2",
    eip4844: "0x3",
    eip7702: "0x4"
  };
  function formatTransactionRequest2(request) {
    const rpcRequest = {};
    if (typeof request.authorizationList !== "undefined")
      rpcRequest.authorizationList = formatAuthorizationList22(request.authorizationList);
    if (typeof request.accessList !== "undefined")
      rpcRequest.accessList = request.accessList;
    if (typeof request.blobVersionedHashes !== "undefined")
      rpcRequest.blobVersionedHashes = request.blobVersionedHashes;
    if (typeof request.blobs !== "undefined") {
      if (typeof request.blobs[0] !== "string")
        rpcRequest.blobs = request.blobs.map((x) => bytesToHex3(x));
      else
        rpcRequest.blobs = request.blobs;
    }
    if (typeof request.data !== "undefined")
      rpcRequest.data = request.data;
    if (typeof request.from !== "undefined")
      rpcRequest.from = request.from;
    if (typeof request.gas !== "undefined")
      rpcRequest.gas = numberToHex2(request.gas);
    if (typeof request.gasPrice !== "undefined")
      rpcRequest.gasPrice = numberToHex2(request.gasPrice);
    if (typeof request.maxFeePerBlobGas !== "undefined")
      rpcRequest.maxFeePerBlobGas = numberToHex2(request.maxFeePerBlobGas);
    if (typeof request.maxFeePerGas !== "undefined")
      rpcRequest.maxFeePerGas = numberToHex2(request.maxFeePerGas);
    if (typeof request.maxPriorityFeePerGas !== "undefined")
      rpcRequest.maxPriorityFeePerGas = numberToHex2(request.maxPriorityFeePerGas);
    if (typeof request.nonce !== "undefined")
      rpcRequest.nonce = numberToHex2(request.nonce);
    if (typeof request.to !== "undefined")
      rpcRequest.to = request.to;
    if (typeof request.type !== "undefined")
      rpcRequest.type = rpcTransactionType2[request.type];
    if (typeof request.value !== "undefined")
      rpcRequest.value = numberToHex2(request.value);
    return rpcRequest;
  }
  var defineTransactionRequest = /* @__PURE__ */ defineFormatter("transactionRequest", formatTransactionRequest2);
  function formatAuthorizationList22(authorizationList) {
    return authorizationList.map((authorization) => ({
      address: authorization.contractAddress,
      r: authorization.r,
      s: authorization.s,
      chainId: numberToHex2(authorization.chainId),
      nonce: numberToHex2(authorization.nonce),
      ...typeof authorization.yParity !== "undefined" ? { yParity: numberToHex2(authorization.yParity) } : {},
      ...typeof authorization.v !== "undefined" && typeof authorization.yParity === "undefined" ? { v: numberToHex2(authorization.v) } : {}
    }));
  }
  var maxUint162 = 2n ** 16n - 1n;
  var maxUint2562 = 2n ** 256n - 1n;
  var gasPerPubdataDefault = 50000n;
  var maxBytecodeSize = maxUint162 * 32n;
  var formatters = {
    block: /* @__PURE__ */ defineBlock({
      format(args) {
        const transactions = args.transactions?.map((transaction) => {
          if (typeof transaction === "string")
            return transaction;
          const formatted = formatters.transaction?.format(transaction);
          if (formatted.typeHex === "0x71")
            formatted.type = "eip712";
          else if (formatted.typeHex === "0xff")
            formatted.type = "priority";
          return formatted;
        });
        return {
          l1BatchNumber: args.l1BatchNumber ? hexToBigInt2(args.l1BatchNumber) : null,
          l1BatchTimestamp: args.l1BatchTimestamp ? hexToBigInt2(args.l1BatchTimestamp) : null,
          transactions
        };
      }
    }),
    transaction: /* @__PURE__ */ defineTransaction({
      format(args) {
        const transaction = {};
        if (args.type === "0x71")
          transaction.type = "eip712";
        else if (args.type === "0xff")
          transaction.type = "priority";
        return {
          ...transaction,
          l1BatchNumber: args.l1BatchNumber ? hexToBigInt2(args.l1BatchNumber) : null,
          l1BatchTxIndex: args.l1BatchTxIndex ? hexToBigInt2(args.l1BatchTxIndex) : null
        };
      }
    }),
    transactionReceipt: /* @__PURE__ */ defineTransactionReceipt({
      format(args) {
        return {
          l1BatchNumber: args.l1BatchNumber ? hexToBigInt2(args.l1BatchNumber) : null,
          l1BatchTxIndex: args.l1BatchTxIndex ? hexToBigInt2(args.l1BatchTxIndex) : null,
          logs: args.logs.map((log) => {
            return {
              ...formatLog2(log),
              l1BatchNumber: log.l1BatchNumber ? hexToBigInt2(log.l1BatchNumber) : null,
              transactionLogIndex: hexToNumber3(log.transactionLogIndex),
              logType: log.logType
            };
          }),
          l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {
            return {
              blockNumber: hexToBigInt2(l2ToL1Log.blockHash),
              blockHash: l2ToL1Log.blockHash,
              l1BatchNumber: hexToBigInt2(l2ToL1Log.l1BatchNumber),
              transactionIndex: hexToBigInt2(l2ToL1Log.transactionIndex),
              shardId: hexToBigInt2(l2ToL1Log.shardId),
              isService: l2ToL1Log.isService,
              sender: l2ToL1Log.sender,
              key: l2ToL1Log.key,
              value: l2ToL1Log.value,
              transactionHash: l2ToL1Log.transactionHash,
              logIndex: hexToBigInt2(l2ToL1Log.logIndex)
            };
          })
        };
      }
    }),
    transactionRequest: /* @__PURE__ */ defineTransactionRequest({
      exclude: [
        "customSignature",
        "factoryDeps",
        "gasPerPubdata",
        "paymaster",
        "paymasterInput"
      ],
      format(args) {
        if (args.gasPerPubdata || args.paymaster && args.paymasterInput || args.factoryDeps || args.customSignature)
          return {
            eip712Meta: {
              ...args.gasPerPubdata ? { gasPerPubdata: toHex2(args.gasPerPubdata) } : { gasPerPubdata: toHex2(gasPerPubdataDefault) },
              ...args.paymaster && args.paymasterInput ? {
                paymasterParams: {
                  paymaster: args.paymaster,
                  paymasterInput: Array.from(hexToBytes3(args.paymasterInput))
                }
              } : {},
              ...args.factoryDeps ? {
                factoryDeps: args.factoryDeps.map((dep) => Array.from(hexToBytes3(dep)))
              } : {},
              ...args.customSignature ? {
                customSignature: Array.from(hexToBytes3(args.customSignature))
              } : {}
            },
            type: "0x71"
          };
        return {};
      }
    })
  };
  function concatHex2(values) {
    return `0x${values.reduce((acc, x) => acc + x.replace("0x", ""), "")}`;
  }
  var NegativeOffsetError2 = class extends BaseError3 {
    constructor({ offset }) {
      super(`Offset \`${offset}\` cannot be negative.`, {
        name: "NegativeOffsetError"
      });
    }
  };
  var PositionOutOfBoundsError2 = class extends BaseError3 {
    constructor({ length, position }) {
      super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`, { name: "PositionOutOfBoundsError" });
    }
  };
  var RecursiveReadLimitExceededError2 = class extends BaseError3 {
    constructor({ count, limit }) {
      super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`, { name: "RecursiveReadLimitExceededError" });
    }
  };
  var staticCursor2 = {
    bytes: new Uint8Array(),
    dataView: new DataView(new ArrayBuffer(0)),
    position: 0,
    positionReadCount: /* @__PURE__ */ new Map(),
    recursiveReadCount: 0,
    recursiveReadLimit: Number.POSITIVE_INFINITY,
    assertReadLimit() {
      if (this.recursiveReadCount >= this.recursiveReadLimit)
        throw new RecursiveReadLimitExceededError2({
          count: this.recursiveReadCount + 1,
          limit: this.recursiveReadLimit
        });
    },
    assertPosition(position) {
      if (position < 0 || position > this.bytes.length - 1)
        throw new PositionOutOfBoundsError2({
          length: this.bytes.length,
          position
        });
    },
    decrementPosition(offset) {
      if (offset < 0)
        throw new NegativeOffsetError2({ offset });
      const position = this.position - offset;
      this.assertPosition(position);
      this.position = position;
    },
    getReadCount(position) {
      return this.positionReadCount.get(position || this.position) || 0;
    },
    incrementPosition(offset) {
      if (offset < 0)
        throw new NegativeOffsetError2({ offset });
      const position = this.position + offset;
      this.assertPosition(position);
      this.position = position;
    },
    inspectByte(position_) {
      const position = position_ ?? this.position;
      this.assertPosition(position);
      return this.bytes[position];
    },
    inspectBytes(length, position_) {
      const position = position_ ?? this.position;
      this.assertPosition(position + length - 1);
      return this.bytes.subarray(position, position + length);
    },
    inspectUint8(position_) {
      const position = position_ ?? this.position;
      this.assertPosition(position);
      return this.bytes[position];
    },
    inspectUint16(position_) {
      const position = position_ ?? this.position;
      this.assertPosition(position + 1);
      return this.dataView.getUint16(position);
    },
    inspectUint24(position_) {
      const position = position_ ?? this.position;
      this.assertPosition(position + 2);
      return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
    },
    inspectUint32(position_) {
      const position = position_ ?? this.position;
      this.assertPosition(position + 3);
      return this.dataView.getUint32(position);
    },
    pushByte(byte) {
      this.assertPosition(this.position);
      this.bytes[this.position] = byte;
      this.position++;
    },
    pushBytes(bytes22) {
      this.assertPosition(this.position + bytes22.length - 1);
      this.bytes.set(bytes22, this.position);
      this.position += bytes22.length;
    },
    pushUint8(value) {
      this.assertPosition(this.position);
      this.bytes[this.position] = value;
      this.position++;
    },
    pushUint16(value) {
      this.assertPosition(this.position + 1);
      this.dataView.setUint16(this.position, value);
      this.position += 2;
    },
    pushUint24(value) {
      this.assertPosition(this.position + 2);
      this.dataView.setUint16(this.position, value >> 8);
      this.dataView.setUint8(this.position + 2, value & ~4294967040);
      this.position += 3;
    },
    pushUint32(value) {
      this.assertPosition(this.position + 3);
      this.dataView.setUint32(this.position, value);
      this.position += 4;
    },
    readByte() {
      this.assertReadLimit();
      this._touch();
      const value = this.inspectByte();
      this.position++;
      return value;
    },
    readBytes(length, size22) {
      this.assertReadLimit();
      this._touch();
      const value = this.inspectBytes(length);
      this.position += size22 ?? length;
      return value;
    },
    readUint8() {
      this.assertReadLimit();
      this._touch();
      const value = this.inspectUint8();
      this.position += 1;
      return value;
    },
    readUint16() {
      this.assertReadLimit();
      this._touch();
      const value = this.inspectUint16();
      this.position += 2;
      return value;
    },
    readUint24() {
      this.assertReadLimit();
      this._touch();
      const value = this.inspectUint24();
      this.position += 3;
      return value;
    },
    readUint32() {
      this.assertReadLimit();
      this._touch();
      const value = this.inspectUint32();
      this.position += 4;
      return value;
    },
    get remaining() {
      return this.bytes.length - this.position;
    },
    setPosition(position) {
      const oldPosition = this.position;
      this.assertPosition(position);
      this.position = position;
      return () => this.position = oldPosition;
    },
    _touch() {
      if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
        return;
      const count = this.getReadCount();
      this.positionReadCount.set(this.position, count + 1);
      if (count > 0)
        this.recursiveReadCount++;
    }
  };
  function createCursor2(bytes22, { recursiveReadLimit = 8192 } = {}) {
    const cursor = Object.create(staticCursor2);
    cursor.bytes = bytes22;
    cursor.dataView = new DataView(bytes22.buffer, bytes22.byteOffset, bytes22.byteLength);
    cursor.positionReadCount = /* @__PURE__ */ new Map();
    cursor.recursiveReadLimit = recursiveReadLimit;
    return cursor;
  }
  function toRlp2(bytes22, to = "hex") {
    const encodable = getEncodable2(bytes22);
    const cursor = createCursor2(new Uint8Array(encodable.length));
    encodable.encode(cursor);
    if (to === "hex")
      return bytesToHex3(cursor.bytes);
    return cursor.bytes;
  }
  function getEncodable2(bytes22) {
    if (Array.isArray(bytes22))
      return getEncodableList2(bytes22.map((x) => getEncodable2(x)));
    return getEncodableBytes2(bytes22);
  }
  function getEncodableList2(list) {
    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);
    const sizeOfBodyLength = getSizeOfLength2(bodyLength);
    const length = (() => {
      if (bodyLength <= 55)
        return 1 + bodyLength;
      return 1 + sizeOfBodyLength + bodyLength;
    })();
    return {
      length,
      encode(cursor) {
        if (bodyLength <= 55) {
          cursor.pushByte(192 + bodyLength);
        } else {
          cursor.pushByte(192 + 55 + sizeOfBodyLength);
          if (sizeOfBodyLength === 1)
            cursor.pushUint8(bodyLength);
          else if (sizeOfBodyLength === 2)
            cursor.pushUint16(bodyLength);
          else if (sizeOfBodyLength === 3)
            cursor.pushUint24(bodyLength);
          else
            cursor.pushUint32(bodyLength);
        }
        for (const { encode: encode2 } of list) {
          encode2(cursor);
        }
      }
    };
  }
  function getEncodableBytes2(bytesOrHex) {
    const bytes22 = typeof bytesOrHex === "string" ? hexToBytes3(bytesOrHex) : bytesOrHex;
    const sizeOfBytesLength = getSizeOfLength2(bytes22.length);
    const length = (() => {
      if (bytes22.length === 1 && bytes22[0] < 128)
        return 1;
      if (bytes22.length <= 55)
        return 1 + bytes22.length;
      return 1 + sizeOfBytesLength + bytes22.length;
    })();
    return {
      length,
      encode(cursor) {
        if (bytes22.length === 1 && bytes22[0] < 128) {
          cursor.pushBytes(bytes22);
        } else if (bytes22.length <= 55) {
          cursor.pushByte(128 + bytes22.length);
          cursor.pushBytes(bytes22);
        } else {
          cursor.pushByte(128 + 55 + sizeOfBytesLength);
          if (sizeOfBytesLength === 1)
            cursor.pushUint8(bytes22.length);
          else if (sizeOfBytesLength === 2)
            cursor.pushUint16(bytes22.length);
          else if (sizeOfBytesLength === 3)
            cursor.pushUint24(bytes22.length);
          else
            cursor.pushUint32(bytes22.length);
          cursor.pushBytes(bytes22);
        }
      }
    };
  }
  function getSizeOfLength2(length) {
    if (length < 2 ** 8)
      return 1;
    if (length < 2 ** 16)
      return 2;
    if (length < 2 ** 24)
      return 3;
    if (length < 2 ** 32)
      return 4;
    throw new BaseError3("Length is too large.");
  }
  var gweiUnits2 = {
    ether: -9,
    wei: 9
  };
  function formatUnits2(value, decimals) {
    let display = value.toString();
    const negative = display.startsWith("-");
    if (negative)
      display = display.slice(1);
    display = display.padStart(decimals, "0");
    let [integer, fraction] = [
      display.slice(0, display.length - decimals),
      display.slice(display.length - decimals)
    ];
    fraction = fraction.replace(/(0+)$/, "");
    return `${negative ? "-" : ""}${integer || "0"}${fraction ? `.${fraction}` : ""}`;
  }
  function formatGwei2(wei, unit = "wei") {
    return formatUnits2(wei, gweiUnits2[unit]);
  }
  function prettyPrint2(args) {
    const entries = Object.entries(args).map(([key, value]) => {
      if (value === void 0 || value === false)
        return null;
      return [key, value];
    }).filter(Boolean);
    const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);
    return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join("\n");
  }
  var InvalidLegacyVError = class extends BaseError3 {
    constructor({ v }) {
      super(`Invalid \`v\` value "${v}". Expected 27 or 28.`, {
        name: "InvalidLegacyVError"
      });
    }
  };
  var InvalidSerializableTransactionError2 = class extends BaseError3 {
    constructor({ transaction }) {
      super("Cannot infer a transaction type from provided transaction.", {
        metaMessages: [
          "Provided Transaction:",
          "{",
          prettyPrint2(transaction),
          "}",
          "",
          "To infer the type, either provide:",
          "- a `type` to the Transaction, or",
          "- an EIP-1559 Transaction with `maxFeePerGas`, or",
          "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
          "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
          "- an EIP-7702 Transaction with `authorizationList`, or",
          "- a Legacy Transaction with `gasPrice`"
        ],
        name: "InvalidSerializableTransactionError"
      });
    }
  };
  var InvalidStorageKeySizeError = class extends BaseError3 {
    constructor({ storageKey }) {
      super(`Size for storage key "${storageKey}" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`, { name: "InvalidStorageKeySizeError" });
    }
  };
  function blobsToCommitments2(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes3(x)) : parameters.blobs;
    const commitments = [];
    for (const blob of blobs)
      commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
    return to === "bytes" ? commitments : commitments.map((x) => bytesToHex3(x));
  }
  function blobsToProofs2(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes3(x)) : parameters.blobs;
    const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x) => hexToBytes3(x)) : parameters.commitments;
    const proofs = [];
    for (let i = 0; i < blobs.length; i++) {
      const blob = blobs[i];
      const commitment = commitments[i];
      proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
    }
    return to === "bytes" ? proofs : proofs.map((x) => bytesToHex3(x));
  }
  function number2(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`positive integer expected, not ${n}`);
  }
  function isBytes4(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function bytes2(b, ...lengths) {
    if (!isBytes4(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  function exists2(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output2(out, instance) {
    bytes2(out);
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }
  var u322 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  var createView2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  var rotr2 = (word, shift) => word << 32 - shift | word >>> shift;
  var isLE2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  var byteSwap2 = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  function byteSwap322(arr) {
    for (let i = 0; i < arr.length; i++) {
      arr[i] = byteSwap2(arr[i]);
    }
  }
  function utf8ToBytes3(str2) {
    if (typeof str2 !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
    return new Uint8Array(new TextEncoder().encode(str2));
  }
  function toBytes22(data) {
    if (typeof data === "string")
      data = utf8ToBytes3(data);
    bytes2(data);
    return data;
  }
  var Hash2 = class {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  };
  function wrapConstructor2(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes22(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function setBigUint642(view, byteOffset, value, isLE22) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE22);
    const _32n22 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n22 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE22 ? 4 : 0;
    const l = isLE22 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE22);
    view.setUint32(byteOffset + l, wl, isLE22);
  }
  var Chi2 = (a, b, c) => a & b ^ ~a & c;
  var Maj2 = (a, b, c) => a & b ^ a & c ^ b & c;
  var HashMD2 = class extends Hash2 {
    constructor(blockLen, outputLen, padOffset, isLE22) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE22;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView2(this.buffer);
    }
    update(data) {
      exists2(this);
      const { view, buffer: buffer2, blockLen } = this;
      data = toBytes22(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = createView2(data);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer2.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      exists2(this);
      output2(out, this);
      this.finished = true;
      const { buffer: buffer2, view, blockLen, isLE: isLE22 } = this;
      let { pos } = this;
      buffer2[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos; i < blockLen; i++)
        buffer2[i] = 0;
      setBigUint642(view, blockLen - 8, BigInt(this.length * 8), isLE22);
      this.process(view, 0);
      const oview = createView2(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0; i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE22);
    }
    digest() {
      const { buffer: buffer2, outputLen } = this;
      this.digestInto(buffer2);
      const res = buffer2.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer2);
      return to;
    }
  };
  var SHA256_K2 = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  var SHA256_IV2 = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  var SHA256_W2 = /* @__PURE__ */ new Uint32Array(64);
  var SHA2562 = class extends HashMD2 {
    constructor() {
      super(64, 32, 8, false);
      this.A = SHA256_IV2[0] | 0;
      this.B = SHA256_IV2[1] | 0;
      this.C = SHA256_IV2[2] | 0;
      this.D = SHA256_IV2[3] | 0;
      this.E = SHA256_IV2[4] | 0;
      this.F = SHA256_IV2[5] | 0;
      this.G = SHA256_IV2[6] | 0;
      this.H = SHA256_IV2[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        SHA256_W2[i] = view.getUint32(offset, false);
      for (let i = 16; i < 64; i++) {
        const W15 = SHA256_W2[i - 15];
        const W2 = SHA256_W2[i - 2];
        const s0 = rotr2(W15, 7) ^ rotr2(W15, 18) ^ W15 >>> 3;
        const s1 = rotr2(W2, 17) ^ rotr2(W2, 19) ^ W2 >>> 10;
        SHA256_W2[i] = s1 + SHA256_W2[i - 7] + s0 + SHA256_W2[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i = 0; i < 64; i++) {
        const sigma1 = rotr2(E, 6) ^ rotr2(E, 11) ^ rotr2(E, 25);
        const T1 = H + sigma1 + Chi2(E, F, G) + SHA256_K2[i] + SHA256_W2[i] | 0;
        const sigma0 = rotr2(A, 2) ^ rotr2(A, 13) ^ rotr2(A, 22);
        const T2 = sigma0 + Maj2(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W2.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  };
  var sha2563 = /* @__PURE__ */ wrapConstructor2(() => new SHA2562());
  function sha25622(value, to_) {
    const to = to_ || "hex";
    const bytes22 = sha2563(isHex2(value, { strict: false }) ? toBytes3(value) : value);
    if (to === "bytes")
      return bytes22;
    return toHex2(bytes22);
  }
  function commitmentToVersionedHash2(parameters) {
    const { commitment, version: version22 = 1 } = parameters;
    const to = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
    const versionedHash = sha25622(commitment, "bytes");
    versionedHash.set([version22], 0);
    return to === "bytes" ? versionedHash : bytesToHex3(versionedHash);
  }
  function commitmentsToVersionedHashes2(parameters) {
    const { commitments, version: version22 } = parameters;
    const to = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
    const hashes = [];
    for (const commitment of commitments) {
      hashes.push(commitmentToVersionedHash2({
        commitment,
        to,
        version: version22
      }));
    }
    return hashes;
  }
  var blobsPerTransaction2 = 6;
  var bytesPerFieldElement2 = 32;
  var fieldElementsPerBlob2 = 4096;
  var bytesPerBlob2 = bytesPerFieldElement2 * fieldElementsPerBlob2;
  var maxBytesPerTransaction2 = bytesPerBlob2 * blobsPerTransaction2 - // terminator byte (0x80).
  1 - // zero byte (0x00) appended to each field element.
  1 * fieldElementsPerBlob2 * blobsPerTransaction2;
  var versionedHashVersionKzg = 1;
  var BlobSizeTooLargeError2 = class extends BaseError3 {
    constructor({ maxSize, size: size22 }) {
      super("Blob size is too large.", {
        metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size22} bytes`],
        name: "BlobSizeTooLargeError"
      });
    }
  };
  var EmptyBlobError2 = class extends BaseError3 {
    constructor() {
      super("Blob data must not be empty.", { name: "EmptyBlobError" });
    }
  };
  var InvalidVersionedHashSizeError = class extends BaseError3 {
    constructor({ hash: hash4, size: size22 }) {
      super(`Versioned hash "${hash4}" size is invalid.`, {
        metaMessages: ["Expected: 32", `Received: ${size22}`],
        name: "InvalidVersionedHashSizeError"
      });
    }
  };
  var InvalidVersionedHashVersionError = class extends BaseError3 {
    constructor({ hash: hash4, version: version22 }) {
      super(`Versioned hash "${hash4}" version is invalid.`, {
        metaMessages: [
          `Expected: ${versionedHashVersionKzg}`,
          `Received: ${version22}`
        ],
        name: "InvalidVersionedHashVersionError"
      });
    }
  };
  function toBlobs2(parameters) {
    const to = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
    const data = typeof parameters.data === "string" ? hexToBytes3(parameters.data) : parameters.data;
    const size_ = size3(data);
    if (!size_)
      throw new EmptyBlobError2();
    if (size_ > maxBytesPerTransaction2)
      throw new BlobSizeTooLargeError2({
        maxSize: maxBytesPerTransaction2,
        size: size_
      });
    const blobs = [];
    let active = true;
    let position = 0;
    while (active) {
      const blob = createCursor2(new Uint8Array(bytesPerBlob2));
      let size22 = 0;
      while (size22 < fieldElementsPerBlob2) {
        const bytes22 = data.slice(position, position + (bytesPerFieldElement2 - 1));
        blob.pushByte(0);
        blob.pushBytes(bytes22);
        if (bytes22.length < 31) {
          blob.pushByte(128);
          active = false;
          break;
        }
        size22++;
        position += 31;
      }
      blobs.push(blob);
    }
    return to === "bytes" ? blobs.map((x) => x.bytes) : blobs.map((x) => bytesToHex3(x.bytes));
  }
  function toBlobSidecars2(parameters) {
    const { data, kzg, to } = parameters;
    const blobs = parameters.blobs ?? toBlobs2({ data, to });
    const commitments = parameters.commitments ?? blobsToCommitments2({ blobs, kzg, to });
    const proofs = parameters.proofs ?? blobsToProofs2({ blobs, commitments, kzg, to });
    const sidecars = [];
    for (let i = 0; i < blobs.length; i++)
      sidecars.push({
        blob: blobs[i],
        commitment: commitments[i],
        proof: proofs[i]
      });
    return sidecars;
  }
  function serializeAuthorizationList(authorizationList) {
    if (!authorizationList || authorizationList.length === 0)
      return [];
    const serializedAuthorizationList = [];
    for (const authorization of authorizationList) {
      const { contractAddress, chainId, nonce, ...signature } = authorization;
      serializedAuthorizationList.push([
        chainId ? toHex2(chainId) : "0x",
        contractAddress,
        nonce ? toHex2(nonce) : "0x",
        ...toYParitySignatureArray({}, signature)
      ]);
    }
    return serializedAuthorizationList;
  }
  var InvalidAddressError2 = class extends BaseError3 {
    constructor({ address }) {
      super(`Address "${address}" is invalid.`, {
        metaMessages: [
          "- Address must be a hex value of 20 bytes (40 hex characters).",
          "- Address must match its checksum counterpart."
        ],
        name: "InvalidAddressError"
      });
    }
  };
  var InvalidChainIdError = class extends BaseError3 {
    constructor({ chainId }) {
      super(typeof chainId === "number" ? `Chain ID "${chainId}" is invalid.` : "Chain ID is invalid.", { name: "InvalidChainIdError" });
    }
  };
  var FeeCapTooHighError2 = class extends BaseError3 {
    constructor({ cause, maxFeePerGas } = {}) {
      super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei2(maxFeePerGas)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
        cause,
        name: "FeeCapTooHighError"
      });
    }
  };
  Object.defineProperty(FeeCapTooHighError2, "nodeMessage", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
  });
  var TipAboveFeeCapError2 = class extends BaseError3 {
    constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {
      super([
        `The provided tip (\`maxPriorityFeePerGas\`${maxPriorityFeePerGas ? ` = ${formatGwei2(maxPriorityFeePerGas)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei2(maxFeePerGas)} gwei` : ""}).`
      ].join("\n"), {
        cause,
        name: "TipAboveFeeCapError"
      });
    }
  };
  Object.defineProperty(TipAboveFeeCapError2, "nodeMessage", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
  });
  var LruMap2 = class extends Map {
    constructor(size22) {
      super();
      Object.defineProperty(this, "maxSize", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      this.maxSize = size22;
    }
    get(key) {
      const value = super.get(key);
      if (super.has(key) && value !== void 0) {
        this.delete(key);
        super.set(key, value);
      }
      return value;
    }
    set(key, value) {
      super.set(key, value);
      if (this.maxSize && this.size > this.maxSize) {
        const firstKey = this.keys().next().value;
        if (firstKey)
          this.delete(firstKey);
      }
      return this;
    }
  };
  var U32_MASK642 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  var _32n2 = /* @__PURE__ */ BigInt(32);
  function fromBig2(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK642), l: Number(n >> _32n2 & U32_MASK642) };
    return { h: Number(n >> _32n2 & U32_MASK642) | 0, l: Number(n & U32_MASK642) | 0 };
  }
  function split2(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l } = fromBig2(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
  var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
  var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
  var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
  var SHA3_PI2 = [];
  var SHA3_ROTL2 = [];
  var _SHA3_IOTA2 = [];
  var _0n7 = /* @__PURE__ */ BigInt(0);
  var _1n7 = /* @__PURE__ */ BigInt(1);
  var _2n6 = /* @__PURE__ */ BigInt(2);
  var _7n2 = /* @__PURE__ */ BigInt(7);
  var _256n2 = /* @__PURE__ */ BigInt(256);
  var _0x71n2 = /* @__PURE__ */ BigInt(113);
  for (let round = 0, R = _1n7, x = 1, y = 0; round < 24; round++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI2.push(2 * (5 * y + x));
    SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);
    let t = _0n7;
    for (let j = 0; j < 7; j++) {
      R = (R << _1n7 ^ (R >> _7n2) * _0x71n2) % _256n2;
      if (R & _2n6)
        t ^= _1n7 << (_1n7 << /* @__PURE__ */ BigInt(j)) - _1n7;
    }
    _SHA3_IOTA2.push(t);
  }
  var [SHA3_IOTA_H2, SHA3_IOTA_L2] = /* @__PURE__ */ split2(_SHA3_IOTA2, true);
  var rotlH2 = (h, l, s) => s > 32 ? rotlBH2(h, l, s) : rotlSH2(h, l, s);
  var rotlL2 = (h, l, s) => s > 32 ? rotlBL2(h, l, s) : rotlSL2(h, l, s);
  function keccakP2(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH2(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL2[t];
        const Th = rotlH2(curH, curL, shift);
        const Tl = rotlL2(curH, curL, shift);
        const PI = SHA3_PI2[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H2[round];
      s[1] ^= SHA3_IOTA_L2[round];
    }
    B.fill(0);
  }
  var Keccak2 = class _Keccak extends Hash2 {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      number2(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = u322(this.state);
    }
    keccak() {
      if (!isLE2)
        byteSwap322(this.state32);
      keccakP2(this.state32, this.rounds);
      if (!isLE2)
        byteSwap322(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      exists2(this);
      const { blockLen, state } = this;
      data = toBytes22(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        for (let i = 0; i < take; i++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      exists2(this, false);
      bytes2(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes22) {
      number2(bytes22);
      return this.xofInto(new Uint8Array(bytes22));
    }
    digestInto(out) {
      output2(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  var gen2 = (suffix, blockLen, outputLen) => wrapConstructor2(() => new Keccak2(blockLen, suffix, outputLen));
  var keccak_2562 = /* @__PURE__ */ gen2(1, 136, 256 / 8);
  function keccak2562(value, to_) {
    const bytes22 = keccak_2562(isHex2(value, { strict: false }) ? toBytes3(value) : value);
    return bytes22;
  }
  var checksumAddressCache2 = /* @__PURE__ */ new LruMap2(8192);
  function checksumAddress2(address_, chainId) {
    if (checksumAddressCache2.has(`${address_}.${chainId}`))
      return checksumAddressCache2.get(`${address_}.${chainId}`);
    const hexAddress = address_.substring(2).toLowerCase();
    const hash4 = keccak2562(stringToBytes2(hexAddress));
    const address = hexAddress.split("");
    for (let i = 0; i < 40; i += 2) {
      if (hash4[i >> 1] >> 4 >= 8 && address[i]) {
        address[i] = address[i].toUpperCase();
      }
      if ((hash4[i >> 1] & 15) >= 8 && address[i + 1]) {
        address[i + 1] = address[i + 1].toUpperCase();
      }
    }
    const result = `0x${address.join("")}`;
    checksumAddressCache2.set(`${address_}.${chainId}`, result);
    return result;
  }
  var addressRegex2 = /^0x[a-fA-F0-9]{40}$/;
  var isAddressCache2 = /* @__PURE__ */ new LruMap2(8192);
  function isAddress2(address, options2) {
    const { strict = true } = options2 ?? {};
    const cacheKey3 = `${address}.${strict}`;
    if (isAddressCache2.has(cacheKey3))
      return isAddressCache2.get(cacheKey3);
    const result = (() => {
      if (!addressRegex2.test(address))
        return false;
      if (address.toLowerCase() === address)
        return true;
      if (strict)
        return checksumAddress2(address) === address;
      return true;
    })();
    isAddressCache2.set(cacheKey3, result);
    return result;
  }
  function slice2(value, start, end, { strict } = {}) {
    if (isHex2(value, { strict: false }))
      return sliceHex2(value, start, end, {
        strict
      });
    return sliceBytes2(value, start, end, {
      strict
    });
  }
  function assertEndOffset2(value, start, end) {
    if (size3(value) !== end - start) {
      throw new SliceOffsetOutOfBoundsError2({
        offset: end,
        position: "end",
        size: size3(value)
      });
    }
  }
  function sliceBytes2(value_, start, end, { strict } = {}) {
    const value = value_.slice(start, end);
    if (strict)
      assertEndOffset2(value, start, end);
    return value;
  }
  function sliceHex2(value_, start, end, { strict } = {}) {
    const value = `0x${value_.replace("0x", "").slice(start * 2, end * 2)}`;
    if (strict)
      assertEndOffset2(value, start, end);
    return value;
  }
  function assertTransactionEIP7702(transaction) {
    const { authorizationList } = transaction;
    if (authorizationList) {
      for (const authorization of authorizationList) {
        const { contractAddress, chainId } = authorization;
        if (!isAddress2(contractAddress))
          throw new InvalidAddressError2({ address: contractAddress });
        if (chainId < 0)
          throw new InvalidChainIdError({ chainId });
      }
    }
    assertTransactionEIP1559(transaction);
  }
  function assertTransactionEIP4844(transaction) {
    const { blobVersionedHashes } = transaction;
    if (blobVersionedHashes) {
      if (blobVersionedHashes.length === 0)
        throw new EmptyBlobError2();
      for (const hash4 of blobVersionedHashes) {
        const size_ = size3(hash4);
        const version22 = hexToNumber3(slice2(hash4, 0, 1));
        if (size_ !== 32)
          throw new InvalidVersionedHashSizeError({ hash: hash4, size: size_ });
        if (version22 !== versionedHashVersionKzg)
          throw new InvalidVersionedHashVersionError({
            hash: hash4,
            version: version22
          });
      }
    }
    assertTransactionEIP1559(transaction);
  }
  function assertTransactionEIP1559(transaction) {
    const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction;
    if (chainId <= 0)
      throw new InvalidChainIdError({ chainId });
    if (to && !isAddress2(to))
      throw new InvalidAddressError2({ address: to });
    if (maxFeePerGas && maxFeePerGas > maxUint2562)
      throw new FeeCapTooHighError2({ maxFeePerGas });
    if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
      throw new TipAboveFeeCapError2({ maxFeePerGas, maxPriorityFeePerGas });
  }
  function assertTransactionEIP2930(transaction) {
    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;
    if (chainId <= 0)
      throw new InvalidChainIdError({ chainId });
    if (to && !isAddress2(to))
      throw new InvalidAddressError2({ address: to });
    if (maxPriorityFeePerGas || maxFeePerGas)
      throw new BaseError3("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
    if (gasPrice && gasPrice > maxUint2562)
      throw new FeeCapTooHighError2({ maxFeePerGas: gasPrice });
  }
  function assertTransactionLegacy(transaction) {
    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;
    if (to && !isAddress2(to))
      throw new InvalidAddressError2({ address: to });
    if (typeof chainId !== "undefined" && chainId <= 0)
      throw new InvalidChainIdError({ chainId });
    if (maxPriorityFeePerGas || maxFeePerGas)
      throw new BaseError3("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
    if (gasPrice && gasPrice > maxUint2562)
      throw new FeeCapTooHighError2({ maxFeePerGas: gasPrice });
  }
  function getTransactionType2(transaction) {
    if (transaction.type)
      return transaction.type;
    if (typeof transaction.authorizationList !== "undefined")
      return "eip7702";
    if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
      return "eip4844";
    if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
      return "eip1559";
    }
    if (typeof transaction.gasPrice !== "undefined") {
      if (typeof transaction.accessList !== "undefined")
        return "eip2930";
      return "legacy";
    }
    throw new InvalidSerializableTransactionError2({ transaction });
  }
  function serializeAccessList(accessList) {
    if (!accessList || accessList.length === 0)
      return [];
    const serializedAccessList = [];
    for (let i = 0; i < accessList.length; i++) {
      const { address, storageKeys } = accessList[i];
      for (let j = 0; j < storageKeys.length; j++) {
        if (storageKeys[j].length - 2 !== 64) {
          throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] });
        }
      }
      if (!isAddress2(address, { strict: false })) {
        throw new InvalidAddressError2({ address });
      }
      serializedAccessList.push([address, storageKeys]);
    }
    return serializedAccessList;
  }
  function serializeTransaction(transaction, signature) {
    const type = getTransactionType2(transaction);
    if (type === "eip1559")
      return serializeTransactionEIP1559(transaction, signature);
    if (type === "eip2930")
      return serializeTransactionEIP2930(transaction, signature);
    if (type === "eip4844")
      return serializeTransactionEIP4844(transaction, signature);
    if (type === "eip7702")
      return serializeTransactionEIP7702(transaction, signature);
    return serializeTransactionLegacy(transaction, signature);
  }
  function serializeTransactionEIP7702(transaction, signature) {
    const { authorizationList, chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
    assertTransactionEIP7702(transaction);
    const serializedAccessList = serializeAccessList(accessList);
    const serializedAuthorizationList = serializeAuthorizationList(authorizationList);
    return concatHex2([
      "0x04",
      toRlp2([
        toHex2(chainId),
        nonce ? toHex2(nonce) : "0x",
        maxPriorityFeePerGas ? toHex2(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? toHex2(maxFeePerGas) : "0x",
        gas ? toHex2(gas) : "0x",
        to ?? "0x",
        value ? toHex2(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        serializedAuthorizationList,
        ...toYParitySignatureArray(transaction, signature)
      ])
    ]);
  }
  function serializeTransactionEIP4844(transaction, signature) {
    const { chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
    assertTransactionEIP4844(transaction);
    let blobVersionedHashes = transaction.blobVersionedHashes;
    let sidecars = transaction.sidecars;
    if (transaction.blobs && (typeof blobVersionedHashes === "undefined" || typeof sidecars === "undefined")) {
      const blobs2 = typeof transaction.blobs[0] === "string" ? transaction.blobs : transaction.blobs.map((x) => bytesToHex3(x));
      const kzg = transaction.kzg;
      const commitments2 = blobsToCommitments2({
        blobs: blobs2,
        kzg
      });
      if (typeof blobVersionedHashes === "undefined")
        blobVersionedHashes = commitmentsToVersionedHashes2({
          commitments: commitments2
        });
      if (typeof sidecars === "undefined") {
        const proofs2 = blobsToProofs2({ blobs: blobs2, commitments: commitments2, kzg });
        sidecars = toBlobSidecars2({ blobs: blobs2, commitments: commitments2, proofs: proofs2 });
      }
    }
    const serializedAccessList = serializeAccessList(accessList);
    const serializedTransaction = [
      toHex2(chainId),
      nonce ? toHex2(nonce) : "0x",
      maxPriorityFeePerGas ? toHex2(maxPriorityFeePerGas) : "0x",
      maxFeePerGas ? toHex2(maxFeePerGas) : "0x",
      gas ? toHex2(gas) : "0x",
      to ?? "0x",
      value ? toHex2(value) : "0x",
      data ?? "0x",
      serializedAccessList,
      maxFeePerBlobGas ? toHex2(maxFeePerBlobGas) : "0x",
      blobVersionedHashes ?? [],
      ...toYParitySignatureArray(transaction, signature)
    ];
    const blobs = [];
    const commitments = [];
    const proofs = [];
    if (sidecars)
      for (let i = 0; i < sidecars.length; i++) {
        const { blob, commitment, proof } = sidecars[i];
        blobs.push(blob);
        commitments.push(commitment);
        proofs.push(proof);
      }
    return concatHex2([
      "0x03",
      sidecars ? (
        // If sidecars are enabled, envelope turns into a "wrapper":
        toRlp2([serializedTransaction, blobs, commitments, proofs])
      ) : (
        // If sidecars are disabled, standard envelope is used:
        toRlp2(serializedTransaction)
      )
    ]);
  }
  function serializeTransactionEIP1559(transaction, signature) {
    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
    assertTransactionEIP1559(transaction);
    const serializedAccessList = serializeAccessList(accessList);
    const serializedTransaction = [
      toHex2(chainId),
      nonce ? toHex2(nonce) : "0x",
      maxPriorityFeePerGas ? toHex2(maxPriorityFeePerGas) : "0x",
      maxFeePerGas ? toHex2(maxFeePerGas) : "0x",
      gas ? toHex2(gas) : "0x",
      to ?? "0x",
      value ? toHex2(value) : "0x",
      data ?? "0x",
      serializedAccessList,
      ...toYParitySignatureArray(transaction, signature)
    ];
    return concatHex2([
      "0x02",
      toRlp2(serializedTransaction)
    ]);
  }
  function serializeTransactionEIP2930(transaction, signature) {
    const { chainId, gas, data, nonce, to, value, accessList, gasPrice } = transaction;
    assertTransactionEIP2930(transaction);
    const serializedAccessList = serializeAccessList(accessList);
    const serializedTransaction = [
      toHex2(chainId),
      nonce ? toHex2(nonce) : "0x",
      gasPrice ? toHex2(gasPrice) : "0x",
      gas ? toHex2(gas) : "0x",
      to ?? "0x",
      value ? toHex2(value) : "0x",
      data ?? "0x",
      serializedAccessList,
      ...toYParitySignatureArray(transaction, signature)
    ];
    return concatHex2([
      "0x01",
      toRlp2(serializedTransaction)
    ]);
  }
  function serializeTransactionLegacy(transaction, signature) {
    const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction;
    assertTransactionLegacy(transaction);
    let serializedTransaction = [
      nonce ? toHex2(nonce) : "0x",
      gasPrice ? toHex2(gasPrice) : "0x",
      gas ? toHex2(gas) : "0x",
      to ?? "0x",
      value ? toHex2(value) : "0x",
      data ?? "0x"
    ];
    if (signature) {
      const v = (() => {
        if (signature.v >= 35n) {
          const inferredChainId = (signature.v - 35n) / 2n;
          if (inferredChainId > 0)
            return signature.v;
          return 27n + (signature.v === 35n ? 0n : 1n);
        }
        if (chainId > 0)
          return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);
        const v2 = 27n + (signature.v === 27n ? 0n : 1n);
        if (signature.v !== v2)
          throw new InvalidLegacyVError({ v: signature.v });
        return v2;
      })();
      const r = trim2(signature.r);
      const s = trim2(signature.s);
      serializedTransaction = [
        ...serializedTransaction,
        toHex2(v),
        r === "0x00" ? "0x" : r,
        s === "0x00" ? "0x" : s
      ];
    } else if (chainId > 0) {
      serializedTransaction = [
        ...serializedTransaction,
        toHex2(chainId),
        "0x",
        "0x"
      ];
    }
    return toRlp2(serializedTransaction);
  }
  function toYParitySignatureArray(transaction, signature_) {
    const signature = signature_ ?? transaction;
    const { v, yParity } = signature;
    if (typeof signature.r === "undefined")
      return [];
    if (typeof signature.s === "undefined")
      return [];
    if (typeof v === "undefined" && typeof yParity === "undefined")
      return [];
    const r = trim2(signature.r);
    const s = trim2(signature.s);
    const yParity_ = (() => {
      if (typeof yParity === "number")
        return yParity ? toHex2(1) : "0x";
      if (v === 0n)
        return "0x";
      if (v === 1n)
        return toHex2(1);
      return v === 27n ? "0x" : toHex2(1);
    })();
    return [yParity_, r === "0x00" ? "0x" : r, s === "0x00" ? "0x" : s];
  }
  var InvalidEip712TransactionError = class extends BaseError3 {
    constructor() {
      super([
        "Transaction is not an EIP712 transaction.",
        "",
        "Transaction must:",
        '  - include `type: "eip712"`',
        "  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`"
      ].join("\n"), { name: "InvalidEip712TransactionError" });
    }
  };
  function isEIP712Transaction(transaction) {
    if (transaction.type === "eip712")
      return true;
    if ("customSignature" in transaction && transaction.customSignature || "paymaster" in transaction && transaction.paymaster || "paymasterInput" in transaction && transaction.paymasterInput || "gasPerPubdata" in transaction && typeof transaction.gasPerPubdata === "bigint" || "factoryDeps" in transaction && transaction.factoryDeps)
      return true;
    return false;
  }
  function assertEip712Transaction(transaction) {
    const { chainId, to, from, paymaster, paymasterInput } = transaction;
    if (!isEIP712Transaction(transaction))
      throw new InvalidEip712TransactionError();
    if (!chainId || chainId <= 0)
      throw new InvalidChainIdError({ chainId });
    if (to && !isAddress2(to))
      throw new InvalidAddressError2({ address: to });
    if (from && !isAddress2(from))
      throw new InvalidAddressError2({ address: from });
    if (paymaster && !isAddress2(paymaster))
      throw new InvalidAddressError2({ address: paymaster });
    if (paymaster && !paymasterInput) {
      throw new BaseError3("`paymasterInput` must be provided when `paymaster` is defined");
    }
    if (!paymaster && paymasterInput) {
      throw new BaseError3("`paymaster` must be provided when `paymasterInput` is defined");
    }
  }
  function serializeTransaction2(transaction, signature) {
    if (isEIP712Transaction(transaction))
      return serializeTransactionEIP712(transaction);
    return serializeTransaction(transaction, signature);
  }
  var serializers = {
    transaction: serializeTransaction2
  };
  function serializeTransactionEIP712(transaction) {
    const { chainId, gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, customSignature, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
    assertEip712Transaction(transaction);
    const serializedTransaction = [
      nonce ? toHex2(nonce) : "0x",
      maxPriorityFeePerGas ? toHex2(maxPriorityFeePerGas) : "0x",
      maxFeePerGas ? toHex2(maxFeePerGas) : "0x",
      gas ? toHex2(gas) : "0x",
      to ?? "0x",
      value ? toHex2(value) : "0x",
      data ?? "0x0",
      toHex2(chainId),
      toHex2(""),
      toHex2(""),
      toHex2(chainId),
      from ?? "0x",
      gasPerPubdata ? toHex2(gasPerPubdata) : toHex2(gasPerPubdataDefault),
      factoryDeps ?? [],
      customSignature ?? "0x",
      // EIP712 signature
      paymaster && paymasterInput ? [paymaster, paymasterInput] : []
    ];
    return concatHex2([
      "0x71",
      toRlp2(serializedTransaction)
    ]);
  }
  var BytecodeLengthExceedsMaxSizeError = class extends BaseError3 {
    constructor({ givenLength, maxBytecodeSize: maxBytecodeSize2 }) {
      super(`Bytecode cannot be longer than ${maxBytecodeSize2} bytes. Given length: ${givenLength}`, { name: "BytecodeLengthExceedsMaxSizeError" });
    }
  };
  var BytecodeLengthInWordsMustBeOddError = class extends BaseError3 {
    constructor({ givenLengthInWords }) {
      super(`Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`, { name: "BytecodeLengthInWordsMustBeOddError" });
    }
  };
  var BytecodeLengthMustBeDivisibleBy32Error = class extends BaseError3 {
    constructor({ givenLength }) {
      super(`The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`, { name: "BytecodeLengthMustBeDivisibleBy32Error" });
    }
  };
  function hashBytecode(bytecode) {
    const bytecodeBytes = toBytes3(bytecode);
    if (bytecodeBytes.length % 32 !== 0)
      throw new BytecodeLengthMustBeDivisibleBy32Error({
        givenLength: bytecodeBytes.length
      });
    if (bytecodeBytes.length > maxBytecodeSize)
      throw new BytecodeLengthExceedsMaxSizeError({
        givenLength: bytecodeBytes.length,
        maxBytecodeSize
      });
    const hashStr = sha25622(bytecodeBytes);
    const hash4 = toBytes3(hashStr);
    const bytecodeLengthInWords = bytecodeBytes.length / 32;
    if (bytecodeLengthInWords % 2 === 0) {
      throw new BytecodeLengthInWordsMustBeOddError({
        givenLengthInWords: bytecodeLengthInWords
      });
    }
    const bytecodeLength = toBytes3(bytecodeLengthInWords);
    const bytecodeLengthPadded = pad2(bytecodeLength, { size: 2 });
    const codeHashVersion = new Uint8Array([1, 0]);
    hash4.set(codeHashVersion, 0);
    hash4.set(bytecodeLengthPadded, 2);
    return hash4;
  }
  var getEip712Domain = (transaction) => {
    assertEip712Transaction(transaction);
    const message = transactionToMessage(transaction);
    return {
      domain: {
        name: "zkSync",
        version: "2",
        chainId: transaction.chainId
      },
      types: {
        Transaction: [
          { name: "txType", type: "uint256" },
          { name: "from", type: "uint256" },
          { name: "to", type: "uint256" },
          { name: "gasLimit", type: "uint256" },
          { name: "gasPerPubdataByteLimit", type: "uint256" },
          { name: "maxFeePerGas", type: "uint256" },
          { name: "maxPriorityFeePerGas", type: "uint256" },
          { name: "paymaster", type: "uint256" },
          { name: "nonce", type: "uint256" },
          { name: "value", type: "uint256" },
          { name: "data", type: "bytes" },
          { name: "factoryDeps", type: "bytes32[]" },
          { name: "paymasterInput", type: "bytes" }
        ]
      },
      primaryType: "Transaction",
      message
    };
  };
  function transactionToMessage(transaction) {
    const { gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
    return {
      txType: 113n,
      from: BigInt(from),
      to: to ? BigInt(to) : 0n,
      gasLimit: gas ?? 0n,
      gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,
      maxFeePerGas: maxFeePerGas ?? 0n,
      maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,
      paymaster: paymaster ? BigInt(paymaster) : 0n,
      nonce: nonce ? BigInt(nonce) : 0n,
      value: value ?? 0n,
      data: data ? data : "0x0",
      factoryDeps: factoryDeps?.map((dep) => toHex2(hashBytecode(dep))) ?? [],
      paymasterInput: paymasterInput ? paymasterInput : "0x"
    };
  }
  var chainConfig = {
    formatters,
    serializers,
    custom: {
      getEip712Domain
    }
  };
  var contracts = {
    gasPriceOracle: { address: "0x420000000000000000000000000000000000000F" },
    l1Block: { address: "0x4200000000000000000000000000000000000015" },
    l2CrossDomainMessenger: {
      address: "0x4200000000000000000000000000000000000007"
    },
    l2Erc721Bridge: { address: "0x4200000000000000000000000000000000000014" },
    l2StandardBridge: { address: "0x4200000000000000000000000000000000000010" },
    l2ToL1MessagePasser: {
      address: "0x4200000000000000000000000000000000000016"
    }
  };
  var formatters2 = {
    block: /* @__PURE__ */ defineBlock({
      format(args) {
        const transactions = args.transactions?.map((transaction) => {
          if (typeof transaction === "string")
            return transaction;
          const formatted = formatTransaction2(transaction);
          if (formatted.typeHex === "0x7e") {
            formatted.isSystemTx = transaction.isSystemTx;
            formatted.mint = transaction.mint ? hexToBigInt2(transaction.mint) : void 0;
            formatted.sourceHash = transaction.sourceHash;
            formatted.type = "deposit";
          }
          return formatted;
        });
        return {
          transactions,
          stateRoot: args.stateRoot
        };
      }
    }),
    transaction: /* @__PURE__ */ defineTransaction({
      format(args) {
        const transaction = {};
        if (args.type === "0x7e") {
          transaction.isSystemTx = args.isSystemTx;
          transaction.mint = args.mint ? hexToBigInt2(args.mint) : void 0;
          transaction.sourceHash = args.sourceHash;
          transaction.type = "deposit";
        }
        return transaction;
      }
    }),
    transactionReceipt: /* @__PURE__ */ defineTransactionReceipt({
      format(args) {
        return {
          l1GasPrice: args.l1GasPrice ? hexToBigInt2(args.l1GasPrice) : null,
          l1GasUsed: args.l1GasUsed ? hexToBigInt2(args.l1GasUsed) : null,
          l1Fee: args.l1Fee ? hexToBigInt2(args.l1Fee) : null,
          l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null
        };
      }
    })
  };
  function serializeTransaction3(transaction, signature) {
    if (isDeposit(transaction))
      return serializeTransactionDeposit(transaction);
    return serializeTransaction(transaction, signature);
  }
  var serializers2 = {
    transaction: serializeTransaction3
  };
  function serializeTransactionDeposit(transaction) {
    assertTransactionDeposit(transaction);
    const { sourceHash, data, from, gas, isSystemTx, mint, to, value } = transaction;
    const serializedTransaction = [
      sourceHash,
      from,
      to ?? "0x",
      mint ? toHex2(mint) : "0x",
      value ? toHex2(value) : "0x",
      gas ? toHex2(gas) : "0x",
      isSystemTx ? "0x1" : "0x",
      data ?? "0x"
    ];
    return concatHex2([
      "0x7e",
      toRlp2(serializedTransaction)
    ]);
  }
  function isDeposit(transaction) {
    if (transaction.type === "deposit")
      return true;
    if (typeof transaction.sourceHash !== "undefined")
      return true;
    return false;
  }
  function assertTransactionDeposit(transaction) {
    const { from, to } = transaction;
    if (from && !isAddress2(from))
      throw new InvalidAddressError2({ address: from });
    if (to && !isAddress2(to))
      throw new InvalidAddressError2({ address: to });
  }
  var chainConfig2 = {
    contracts,
    formatters: formatters2,
    serializers: serializers2
  };
  var arbitrum = /* @__PURE__ */ defineChain({
    id: 42161,
    name: "Arbitrum One",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://arb1.arbitrum.io/rpc"]
      }
    },
    blockExplorers: {
      default: {
        name: "Arbiscan",
        url: "https://arbiscan.io",
        apiUrl: "https://api.arbiscan.io/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 7654707
      }
    }
  });
  var arbitrumSepolia = /* @__PURE__ */ defineChain({
    id: 421614,
    name: "Arbitrum Sepolia",
    nativeCurrency: {
      name: "Arbitrum Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    rpcUrls: {
      default: {
        http: ["https://sepolia-rollup.arbitrum.io/rpc"]
      }
    },
    blockExplorers: {
      default: {
        name: "Arbiscan",
        url: "https://sepolia.arbiscan.io",
        apiUrl: "https://api-sepolia.arbiscan.io/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 81930
      }
    },
    testnet: true
  });
  var avalanche = /* @__PURE__ */ defineChain({
    id: 43114,
    name: "Avalanche",
    nativeCurrency: {
      decimals: 18,
      name: "Avalanche",
      symbol: "AVAX"
    },
    rpcUrls: {
      default: { http: ["https://api.avax.network/ext/bc/C/rpc"] }
    },
    blockExplorers: {
      default: {
        name: "SnowTrace",
        url: "https://snowtrace.io",
        apiUrl: "https://api.snowtrace.io"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 11907934
      }
    }
  });
  var avalancheFuji = /* @__PURE__ */ defineChain({
    id: 43113,
    name: "Avalanche Fuji",
    nativeCurrency: {
      decimals: 18,
      name: "Avalanche Fuji",
      symbol: "AVAX"
    },
    rpcUrls: {
      default: { http: ["https://api.avax-test.network/ext/bc/C/rpc"] }
    },
    blockExplorers: {
      default: {
        name: "SnowTrace",
        url: "https://testnet.snowtrace.io",
        apiUrl: "https://api-testnet.snowtrace.io"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 7096959
      }
    },
    testnet: true
  });
  var sourceId = 1;
  var base = /* @__PURE__ */ defineChain({
    ...chainConfig2,
    id: 8453,
    name: "Base",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://mainnet.base.org"]
      }
    },
    blockExplorers: {
      default: {
        name: "Basescan",
        url: "https://basescan.org",
        apiUrl: "https://api.basescan.org/api"
      }
    },
    contracts: {
      ...chainConfig2.contracts,
      disputeGameFactory: {
        [sourceId]: {
          address: "0x43edB88C4B80fDD2AdFF2412A7BebF9dF42cB40e"
        }
      },
      l2OutputOracle: {
        [sourceId]: {
          address: "0x56315b90c40730925ec5485cf004d835058518A0"
        }
      },
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 5022
      },
      portal: {
        [sourceId]: {
          address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
          blockCreated: 17482143
        }
      },
      l1StandardBridge: {
        [sourceId]: {
          address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
          blockCreated: 17482143
        }
      }
    },
    sourceId
  });
  var sourceId2 = 11155111;
  var baseSepolia = /* @__PURE__ */ defineChain({
    ...chainConfig2,
    id: 84532,
    network: "base-sepolia",
    name: "Base Sepolia",
    nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://sepolia.base.org"]
      }
    },
    blockExplorers: {
      default: {
        name: "Basescan",
        url: "https://sepolia.basescan.org",
        apiUrl: "https://api-sepolia.basescan.org/api"
      }
    },
    contracts: {
      ...chainConfig2.contracts,
      disputeGameFactory: {
        [sourceId2]: {
          address: "0xd6E6dBf4F7EA0ac412fD8b65ED297e64BB7a06E1"
        }
      },
      l2OutputOracle: {
        [sourceId2]: {
          address: "0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254"
        }
      },
      portal: {
        [sourceId2]: {
          address: "0x49f53e41452c74589e85ca1677426ba426459e85",
          blockCreated: 4446677
        }
      },
      l1StandardBridge: {
        [sourceId2]: {
          address: "0xfd0Bf71F60660E2f608ed56e1659C450eB113120",
          blockCreated: 4446677
        }
      },
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 1059647
      }
    },
    testnet: true,
    sourceId: sourceId2
  });
  var bsc = /* @__PURE__ */ defineChain({
    id: 56,
    name: "BNB Smart Chain",
    nativeCurrency: {
      decimals: 18,
      name: "BNB",
      symbol: "BNB"
    },
    rpcUrls: {
      default: { http: ["https://rpc.ankr.com/bsc"] }
    },
    blockExplorers: {
      default: {
        name: "BscScan",
        url: "https://bscscan.com",
        apiUrl: "https://api.bscscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 15921452
      }
    }
  });
  var fees = {
    /*
       * Estimates the fees per gas for a transaction.
    
       * If the transaction is to be paid in a token (feeCurrency is present) then the fees
       * are estimated in the value of the token. Otherwise falls back to the default
       * estimation by returning null.
       *
       * @param params fee estimation function parameters
       */
    estimateFeesPerGas: async (params) => {
      if (!params.request?.feeCurrency)
        return null;
      const [maxFeePerGas, maxPriorityFeePerGas] = await Promise.all([
        estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),
        estimateMaxPriorityFeePerGasInFeeCurrency(params.client, params.request.feeCurrency)
      ]);
      const suggestedMaxFeePerGas = params.multiply(maxFeePerGas) + maxPriorityFeePerGas;
      return {
        maxFeePerGas: suggestedMaxFeePerGas,
        maxPriorityFeePerGas
      };
    }
  };
  async function estimateFeePerGasInFeeCurrency(client, feeCurrency) {
    const fee = await client.request({
      method: "eth_gasPrice",
      params: [feeCurrency]
    });
    return BigInt(fee);
  }
  async function estimateMaxPriorityFeePerGasInFeeCurrency(client, feeCurrency) {
    const feesPerGas = await client.request({
      method: "eth_maxPriorityFeePerGas",
      params: [feeCurrency]
    });
    return BigInt(feesPerGas);
  }
  function isEmpty(value) {
    return value === 0 || value === 0n || value === void 0 || value === null || value === "0" || value === "" || typeof value === "string" && (trim2(value).toLowerCase() === "0x" || trim2(value).toLowerCase() === "0x00");
  }
  function isPresent(value) {
    return !isEmpty(value);
  }
  function isEIP1559(transaction) {
    return typeof transaction.maxFeePerGas !== "undefined" && typeof transaction.maxPriorityFeePerGas !== "undefined";
  }
  function isCIP64(transaction) {
    if (transaction.type === "cip64") {
      return true;
    }
    return isEIP1559(transaction) && isPresent(transaction.feeCurrency);
  }
  var formatters3 = {
    block: /* @__PURE__ */ defineBlock({
      format(args) {
        const transactions = args.transactions?.map((transaction) => {
          if (typeof transaction === "string")
            return transaction;
          const formatted = formatTransaction2(transaction);
          return {
            ...formatted,
            ...transaction.gatewayFee ? {
              gatewayFee: hexToBigInt2(transaction.gatewayFee),
              gatewayFeeRecipient: transaction.gatewayFeeRecipient
            } : {},
            feeCurrency: transaction.feeCurrency
          };
        });
        return {
          transactions,
          ...args.randomness ? { randomness: args.randomness } : {}
        };
      }
    }),
    transaction: /* @__PURE__ */ defineTransaction({
      format(args) {
        if (args.type === "0x7e")
          return {
            isSystemTx: args.isSystemTx,
            mint: args.mint ? hexToBigInt2(args.mint) : void 0,
            sourceHash: args.sourceHash,
            type: "deposit"
          };
        const transaction = { feeCurrency: args.feeCurrency };
        if (args.type === "0x7b")
          transaction.type = "cip64";
        else {
          if (args.type === "0x7c")
            transaction.type = "cip42";
          transaction.gatewayFee = args.gatewayFee ? hexToBigInt2(args.gatewayFee) : null;
          transaction.gatewayFeeRecipient = args.gatewayFeeRecipient;
        }
        return transaction;
      }
    }),
    transactionRequest: /* @__PURE__ */ defineTransactionRequest({
      format(args) {
        const request = {};
        if (args.feeCurrency)
          request.feeCurrency = args.feeCurrency;
        if (isCIP64(args))
          request.type = "0x7b";
        return request;
      }
    })
  };
  function serializeTransaction4(transaction, signature) {
    if (isCIP64(transaction))
      return serializeTransactionCIP64(transaction, signature);
    return serializeTransaction3(transaction, signature);
  }
  var serializers3 = {
    transaction: serializeTransaction4
  };
  function serializeTransactionCIP64(transaction, signature) {
    assertTransactionCIP64(transaction);
    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, feeCurrency, data } = transaction;
    const serializedTransaction = [
      toHex2(chainId),
      nonce ? toHex2(nonce) : "0x",
      maxPriorityFeePerGas ? toHex2(maxPriorityFeePerGas) : "0x",
      maxFeePerGas ? toHex2(maxFeePerGas) : "0x",
      gas ? toHex2(gas) : "0x",
      to ?? "0x",
      value ? toHex2(value) : "0x",
      data ?? "0x",
      serializeAccessList(accessList),
      feeCurrency,
      ...toYParitySignatureArray(transaction, signature)
    ];
    return concatHex2([
      "0x7b",
      toRlp2(serializedTransaction)
    ]);
  }
  var MAX_MAX_FEE_PER_GAS = maxUint2562;
  function assertTransactionCIP64(transaction) {
    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency } = transaction;
    if (chainId <= 0)
      throw new InvalidChainIdError({ chainId });
    if (to && !isAddress2(to))
      throw new InvalidAddressError2({ address: to });
    if (gasPrice)
      throw new BaseError3("`gasPrice` is not a valid CIP-64 Transaction attribute.");
    if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)
      throw new FeeCapTooHighError2({ maxFeePerGas });
    if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas)
      throw new TipAboveFeeCapError2({ maxFeePerGas, maxPriorityFeePerGas });
    if (isPresent(feeCurrency) && !isAddress2(feeCurrency)) {
      throw new BaseError3("`feeCurrency` MUST be a token address for CIP-64 transactions.");
    }
    if (isEmpty(feeCurrency)) {
      throw new BaseError3("`feeCurrency` must be provided for CIP-64 transactions.");
    }
  }
  var chainConfig3 = {
    contracts,
    formatters: formatters3,
    serializers: serializers3,
    fees
  };
  var celo = /* @__PURE__ */ defineChain({
    ...chainConfig3,
    id: 42220,
    name: "Celo",
    nativeCurrency: {
      decimals: 18,
      name: "CELO",
      symbol: "CELO"
    },
    rpcUrls: {
      default: { http: ["https://forno.celo.org"] }
    },
    blockExplorers: {
      default: {
        name: "Celo Explorer",
        url: "https://celoscan.io",
        apiUrl: "https://api.celoscan.io/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xcA11bde05977b3631167028862bE2a173976CA11",
        blockCreated: 13112599
      }
    },
    testnet: false
  });
  var fantom = /* @__PURE__ */ defineChain({
    id: 250,
    name: "Fantom",
    nativeCurrency: {
      decimals: 18,
      name: "Fantom",
      symbol: "FTM"
    },
    rpcUrls: {
      default: { http: ["https://rpc.ankr.com/fantom"] }
    },
    blockExplorers: {
      default: {
        name: "FTMScan",
        url: "https://ftmscan.com",
        apiUrl: "https://api.ftmscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 33001987
      }
    }
  });
  var fantomTestnet = /* @__PURE__ */ defineChain({
    id: 4002,
    name: "Fantom Testnet",
    nativeCurrency: {
      decimals: 18,
      name: "Fantom",
      symbol: "FTM"
    },
    rpcUrls: {
      default: { http: ["https://rpc.testnet.fantom.network"] }
    },
    blockExplorers: {
      default: {
        name: "FTMScan",
        url: "https://testnet.ftmscan.com",
        apiUrl: "https://testnet.ftmscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 8328688
      }
    },
    testnet: true
  });
  var gnosis = /* @__PURE__ */ defineChain({
    id: 100,
    name: "Gnosis",
    nativeCurrency: {
      decimals: 18,
      name: "xDAI",
      symbol: "XDAI"
    },
    rpcUrls: {
      default: {
        http: ["https://rpc.gnosischain.com"],
        webSocket: ["wss://rpc.gnosischain.com/wss"]
      }
    },
    blockExplorers: {
      default: {
        name: "Gnosisscan",
        url: "https://gnosisscan.io",
        apiUrl: "https://api.gnosisscan.io/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 21022491
      }
    }
  });
  var harmonyOne = /* @__PURE__ */ defineChain({
    id: 16666e5,
    name: "Harmony One",
    nativeCurrency: {
      name: "Harmony",
      symbol: "ONE",
      decimals: 18
    },
    rpcUrls: {
      default: { http: ["https://rpc.ankr.com/harmony"] }
    },
    blockExplorers: {
      default: {
        name: "Harmony Explorer",
        url: "https://explorer.harmony.one"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 24185753
      }
    }
  });
  var mainnet = /* @__PURE__ */ defineChain({
    id: 1,
    name: "Ethereum",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://cloudflare-eth.com"]
      }
    },
    blockExplorers: {
      default: {
        name: "Etherscan",
        url: "https://etherscan.io",
        apiUrl: "https://api.etherscan.io/api"
      }
    },
    contracts: {
      ensRegistry: {
        address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
      },
      ensUniversalResolver: {
        address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67",
        blockCreated: 19258213
      },
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 14353601
      }
    }
  });
  var metis = /* @__PURE__ */ defineChain({
    id: 1088,
    name: "Metis",
    nativeCurrency: {
      decimals: 18,
      name: "Metis",
      symbol: "METIS"
    },
    rpcUrls: {
      default: { http: ["https://andromeda.metis.io/?owner=1088"] }
    },
    blockExplorers: {
      default: {
        name: "Metis Explorer",
        url: "https://explorer.metis.io",
        apiUrl: "https://api.routescan.io/v2/network/mainnet/evm/1088/etherscan/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 2338552
      }
    }
  });
  var sourceId3 = 1;
  var optimism = /* @__PURE__ */ defineChain({
    ...chainConfig2,
    id: 10,
    name: "OP Mainnet",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://mainnet.optimism.io"]
      }
    },
    blockExplorers: {
      default: {
        name: "Optimism Explorer",
        url: "https://optimistic.etherscan.io",
        apiUrl: "https://api-optimistic.etherscan.io/api"
      }
    },
    contracts: {
      ...chainConfig2.contracts,
      disputeGameFactory: {
        [sourceId3]: {
          address: "0xe5965Ab5962eDc7477C8520243A95517CD252fA9"
        }
      },
      l2OutputOracle: {
        [sourceId3]: {
          address: "0xdfe97868233d1aa22e815a266982f2cf17685a27"
        }
      },
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 4286263
      },
      portal: {
        [sourceId3]: {
          address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed"
        }
      },
      l1StandardBridge: {
        [sourceId3]: {
          address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1"
        }
      }
    },
    sourceId: sourceId3
  });
  var sourceId4 = 11155111;
  var optimismSepolia = /* @__PURE__ */ defineChain({
    ...chainConfig2,
    id: 11155420,
    name: "OP Sepolia",
    nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://sepolia.optimism.io"]
      }
    },
    blockExplorers: {
      default: {
        name: "Blockscout",
        url: "https://optimism-sepolia.blockscout.com",
        apiUrl: "https://optimism-sepolia.blockscout.com/api"
      }
    },
    contracts: {
      ...chainConfig2.contracts,
      disputeGameFactory: {
        [sourceId4]: {
          address: "0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1"
        }
      },
      l2OutputOracle: {
        [sourceId4]: {
          address: "0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F"
        }
      },
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 1620204
      },
      portal: {
        [sourceId4]: {
          address: "0x16Fc5058F25648194471939df75CF27A2fdC48BC"
        }
      },
      l1StandardBridge: {
        [sourceId4]: {
          address: "0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1"
        }
      }
    },
    testnet: true,
    sourceId: sourceId4
  });
  var polygon = /* @__PURE__ */ defineChain({
    id: 137,
    name: "Polygon",
    nativeCurrency: { name: "POL", symbol: "POL", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://polygon-rpc.com"]
      }
    },
    blockExplorers: {
      default: {
        name: "PolygonScan",
        url: "https://polygonscan.com",
        apiUrl: "https://api.polygonscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 25770160
      }
    }
  });
  var polygonAmoy = /* @__PURE__ */ defineChain({
    id: 80002,
    name: "Polygon Amoy",
    nativeCurrency: { name: "POL", symbol: "POL", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://rpc-amoy.polygon.technology"]
      }
    },
    blockExplorers: {
      default: {
        name: "PolygonScan",
        url: "https://amoy.polygonscan.com",
        apiUrl: "https://api-amoy.polygonscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 3127388
      }
    },
    testnet: true
  });
  var polygonZkEvm = /* @__PURE__ */ defineChain({
    id: 1101,
    name: "Polygon zkEVM",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://zkevm-rpc.com"]
      }
    },
    blockExplorers: {
      default: {
        name: "PolygonScan",
        url: "https://zkevm.polygonscan.com",
        apiUrl: "https://api-zkevm.polygonscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 57746
      }
    }
  });
  var scroll = /* @__PURE__ */ defineChain({
    id: 534352,
    name: "Scroll",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://rpc.scroll.io"],
        webSocket: ["wss://wss-rpc.scroll.io/ws"]
      }
    },
    blockExplorers: {
      default: {
        name: "Scrollscan",
        url: "https://scrollscan.com",
        apiUrl: "https://api.scrollscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 14
      }
    },
    testnet: false
  });
  var scrollSepolia = /* @__PURE__ */ defineChain({
    id: 534351,
    name: "Scroll Sepolia",
    nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://sepolia-rpc.scroll.io"]
      }
    },
    blockExplorers: {
      default: {
        name: "Scrollscan",
        url: "https://sepolia.scrollscan.com",
        apiUrl: "https://api-sepolia.scrollscan.com/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 9473
      }
    },
    testnet: true
  });
  var sepolia = /* @__PURE__ */ defineChain({
    id: 11155111,
    name: "Sepolia",
    nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
    rpcUrls: {
      default: {
        http: ["https://sepolia.drpc.org"]
      }
    },
    blockExplorers: {
      default: {
        name: "Etherscan",
        url: "https://sepolia.etherscan.io",
        apiUrl: "https://api-sepolia.etherscan.io/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xca11bde05977b3631167028862be2a173976ca11",
        blockCreated: 751532
      },
      ensRegistry: { address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e" },
      ensUniversalResolver: {
        address: "0xc8Af999e38273D658BE1b921b88A9Ddf005769cC",
        blockCreated: 5317080
      }
    },
    testnet: true
  });
  var zksync = /* @__PURE__ */ defineChain({
    ...chainConfig,
    id: 324,
    name: "ZKsync Era",
    network: "zksync-era",
    nativeCurrency: {
      decimals: 18,
      name: "Ether",
      symbol: "ETH"
    },
    rpcUrls: {
      default: {
        http: ["https://mainnet.era.zksync.io"],
        webSocket: ["wss://mainnet.era.zksync.io/ws"]
      }
    },
    blockExplorers: {
      default: {
        name: "Etherscan",
        url: "https://era.zksync.network/",
        apiUrl: "https://api-era.zksync.network/api"
      },
      native: {
        name: "ZKsync Explorer",
        url: "https://explorer.zksync.io/",
        apiUrl: "https://block-explorer-api.mainnet.zksync.io/api"
      }
    },
    contracts: {
      multicall3: {
        address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
      },
      universalSignatureVerifier: {
        address: "0xfB688330379976DA81eB64Fe4BF50d7401763B9C",
        blockCreated: 45659388
      }
    }
  });
  var ChainId = {
    mainnet: mainnet.id,
    polygon: polygon.id,
    polygon_amoy: polygonAmoy.id,
    avalanche: avalanche.id,
    avalanche_fuji: avalancheFuji.id,
    arbitrum: arbitrum.id,
    arbitrum_sepolia: arbitrumSepolia.id,
    fantom: fantom.id,
    fantom_testnet: fantomTestnet.id,
    optimism: optimism.id,
    optimism_sepolia: optimismSepolia.id,
    harmony: harmonyOne.id,
    sepolia: sepolia.id,
    scroll: scroll.id,
    scroll_sepolia: scrollSepolia.id,
    metis: metis.id,
    base: base.id,
    base_sepolia: baseSepolia.id,
    bnb: bsc.id,
    gnosis: gnosis.id,
    zkEVM: polygonZkEvm.id,
    celo: celo.id,
    zksync: zksync.id
  };
  var ChainList = {
    [ChainId.mainnet]: mainnet,
    [ChainId.polygon]: polygon,
    [ChainId.polygon_amoy]: polygonAmoy,
    [ChainId.avalanche]: avalanche,
    [ChainId.avalanche_fuji]: avalancheFuji,
    [ChainId.arbitrum]: arbitrum,
    [ChainId.arbitrum_sepolia]: arbitrumSepolia,
    [ChainId.fantom]: fantom,
    [ChainId.fantom_testnet]: fantomTestnet,
    [ChainId.optimism]: optimism,
    [ChainId.optimism_sepolia]: optimismSepolia,
    [ChainId.harmony]: harmonyOne,
    [ChainId.sepolia]: sepolia,
    [ChainId.scroll]: scroll,
    [ChainId.scroll_sepolia]: scrollSepolia,
    [ChainId.metis]: metis,
    [ChainId.base]: base,
    [ChainId.base_sepolia]: baseSepolia,
    [ChainId.bnb]: bsc,
    [ChainId.gnosis]: gnosis,
    [ChainId.zkEVM]: polygonZkEvm,
    [ChainId.celo]: celo,
    [ChainId.zksync]: zksync
  };
  var alchemySupportedChainIds = Object.values(ChainId).filter(
    (id) => networkMap[id]
  );
  var getNetworkEnv = (chainId) => {
    const symbol = Object.entries(ChainId).find(
      ([, value]) => value === chainId
    )?.[0];
    if (!symbol) {
      throw new Error(
        `Didn't find a viem symbol for chainId: ${chainId}. Wire it up in 'src/chainIds.ts'!`
      );
    }
    const env = `RPC_${symbol.toUpperCase()}`;
    return env;
  };
  function getExplicitRPC(chainId) {
    const env = getNetworkEnv(chainId);
    if (process.env[env]) {
      return process.env[env];
    }
    throw new Error(`Env '${env}' is not set. Please set it manually.`);
  }
  function getAlchemyRPC(chainId, alchemyKey) {
    const alchemyId = networkMap[chainId];
    if (!alchemyId) {
      throw new Error(`ChainId '${chainId}' is not supported by Alchemy.`);
    }
    if (!alchemyKey) {
      throw new Error(
        `ChainId '${chainId}' is supported by Alchemy, but no 'alchemyKey' was provided.`
      );
    }
    return `https://${alchemyId}.g.alchemy.com/v2/${alchemyKey}`;
  }
  var getRPCUrl = (chainId, options2) => {
    if (!Object.values(ChainId).includes(chainId)) {
      throw new Error(
        `ChainId '${chainId}' is not supported by this library. Feel free to open an issue.`
      );
    }
    try {
      return getExplicitRPC(chainId);
    } catch (e) {
    }
    if (options2?.alchemyKey) {
      try {
        return getAlchemyRPC(chainId, options2?.alchemyKey);
      } catch (e) {
      }
    }
  };

  // src/utils/getClient.ts
  function getClient(chainId) {
    const chain = ChainList[chainId];
    if (!chain) return;
    return createClient({
      transport: http(
        getRPCUrl(chainId, {
          alchemyKey: process.env.ALCHEMY_API_KEY
        })
      ),
      chain
    });
  }

  // src/reports/reserve.ts
  function renderReserveValue(key, reserve, chainId) {
    if (["reserveFactor", "liquidationProtocolFee", "liquidationThreshold", "ltv"].includes(key))
      return prettifyNumber({ value: reserve[key], decimals: 2, suffix: "%" });
    if (["supplyCap", "borrowCap"].includes(key))
      return `${reserve[key].toLocaleString("en-US")} ${reserve.symbol}`;
    if (["aTokenUnderlyingBalance", "virtualBalance"].includes(key))
      return prettifyNumber({
        value: reserve[key],
        decimals: reserve.decimals,
        suffix: reserve.symbol
      });
    if (key === "debtCeiling")
      return prettifyNumber({ value: reserve[key], decimals: 2, suffix: "$" });
    if (["liquidityIndex", "variableBorrowIndex"].includes(key))
      return prettifyNumber({ value: reserve[key], decimals: 27, suffix: "%" });
    if (["currentLiquidityRate", "currentVariableBorrowRate"].includes(key))
      return prettifyNumber({ value: reserve[key], decimals: 25, suffix: "%" });
    if (key === "liquidationBonus")
      return reserve[key] === 0 ? "0 %" : `${(reserve[key] - 1e4) / 100} %`;
    if (key === "interestRateStrategy")
      return toAddressLink(reserve[key], true, getClient(chainId));
    if (key === "oracleLatestAnswer" && reserve.oracleDecimals)
      return formatUnits(BigInt(reserve[key]), reserve.oracleDecimals);
    if (typeof reserve[key] === "number") return reserve[key].toLocaleString("en-US");
    if (typeof reserve[key] === "string" && /0x.+/.test(reserve[key]))
      return toAddressLink(reserve[key], true, getClient(chainId));
    return reserve[key];
  }
  function renderReserveHeadline(reserve, chainId) {
    return `#### ${reserve.symbol} (${toAddressLink(reserve.underlying, true, getClient(chainId))})

`;
  }
  var ORDER2 = [
    "symbol",
    "decimals",
    "isActive",
    "isFrozen",
    "supplyCap",
    "borrowCap",
    "debtCeiling",
    "isSiloed",
    "isFlashloanable",
    "eModeCategory",
    "oracle",
    "oracleDecimals",
    "oracleDescription",
    "oracleName",
    "oracleLatestAnswer",
    "usageAsCollateralEnabled",
    "ltv",
    "liquidationThreshold",
    "liquidationBonus",
    "liquidationProtocolFee",
    "reserveFactor",
    "aToken",
    "aTokenImpl",
    "variableDebtToken",
    "variableDebtTokenImpl",
    "stableDebtToken",
    "stableDebtTokenImpl",
    "borrowingEnabled",
    "stableBorrowRateEnabled",
    "isBorrowableInIsolation",
    "interestRateStrategy",
    "liquidityIndex",
    "variableBorrowIndex"
  ];
  function sortReserveKeys(a, b) {
    const indexA = ORDER2.indexOf(a);
    if (indexA === -1) return 1;
    const indexB = ORDER2.indexOf(b);
    if (indexB === -1) return -1;
    return indexA - indexB;
  }
  function renderReserveConfig(reserve, chainId) {
    let content = "| description | value |\n| --- | --- |\n";
    const OMIT_KEYS3 = [
      "underlying",
      // already rendered in the header
      "symbol"
      // already rendered in the header
    ];
    Object.keys(reserve).filter((key) => !OMIT_KEYS3.includes(key)).sort(sortReserveKeys).map((key) => {
      content += `| ${key} | ${renderReserveValue(key, reserve, chainId)} |
`;
    });
    return content;
  }
  function renderReserve(reserve, chainId) {
    let content = renderReserveHeadline(reserve, chainId);
    content += renderReserveConfig(reserve, chainId);
    return content;
  }
  function renderReserveDiff(diff2, chainId) {
    let content = renderReserveHeadline(diff2, chainId);
    content += "| description | value before | value after |\n| --- | --- | --- |\n";
    const from = Object.keys(diff2).reduce((acc, _key) => {
      const key = _key;
      acc[key] = typeof diff2[key] === "object" ? diff2[key].from : diff2[key];
      return acc;
    }, {});
    const to = Object.keys(diff2).reduce((acc, _key) => {
      const key = _key;
      acc[key] = typeof diff2[key] === "object" ? diff2[key].to : diff2[key];
      return acc;
    }, {});
    Object.keys(diff2).filter((key) => diff2[key].hasOwnProperty("from")).sort(sortReserveKeys).map((key) => {
      content += `| ${key} | ${renderReserveValue(key, from, chainId)} | ${renderReserveValue(key, to, chainId)} |
`;
    });
    return content;
  }

  // src/reports/strategy.ts
  function renderStrategyValue(key, reserve) {
    if (reserve[key] === void 0 || reserve[key] === null) return "/";
    return `${formatUnits(BigInt(reserve[key]), 25)} %`;
  }
  var ORDER3 = [
    "optimalUsageRatio",
    "maxVariableBorrowRate",
    "baseVariableBorrowRate",
    "variableRateSlope1",
    "variableRateSlope2"
  ];
  function sortStrategyKeys(a, b) {
    const indexA = ORDER3.indexOf(a);
    const indexB = ORDER3.indexOf(b);
    if (indexA !== -1 && indexB !== -1) {
      if (indexA > indexB) {
        return 1;
      }
      if (indexB > indexA) {
        return -1;
      }
    }
    if (indexA !== -1) return -1;
    if (indexB !== -1) return -1;
    return a.localeCompare(b);
  }
  var OMIT_KEYS2 = [
    "address"
    // already rendered in the reserve
  ];
  function renderStrategy(strategy) {
    let content = "";
    Object.keys(strategy).filter((key) => !OMIT_KEYS2.includes(key)).sort(sortStrategyKeys).map((key) => {
      content += `| ${key} | ${renderStrategyValue(key, strategy)} |
`;
    });
    return content;
  }
  function renderStrategyDiff(diff2) {
    let content = "";
    Object.keys(diff2).filter((key) => !OMIT_KEYS2.includes(key)).filter((key) => diff2[key].hasOwnProperty("from")).sort(sortStrategyKeys).map((key) => {
      content += `| ${key} | ${renderStrategyValue(key, {
        ...diff2,
        [key]: diff2[key].from
      })} | ${renderStrategyValue(key, { ...diff2, [key]: diff2[key].to })} |
`;
    });
    return content;
  }

  // src/reports/code-diff.ts
  var import_fs = __require("fs");
  var import_child_process = __require("child_process");
  function downloadContract(chainId, address) {
    const outPath = `/tmp/${chainId}_${address}`;
    if ((0, import_fs.existsSync)(outPath)) console.log("skipped download");
    const command = `cast etherscan-source --chain ${chainId} -d ${outPath} ${address}`;
    (0, import_child_process.execSync)(command);
    return outPath;
  }
  function flatten(path2) {
    const flattenCmd = `
          mkdir -p ${path2}_flat
          counter=1
          for file in $(find ${path2} -type f)
          do
            original_file_name="\${file##*/}"
            if [ -e ${path2}_flat/\${counter}_\${original_file_name} ]
            then
              mv "$file" "${path2}_flat/\${counter}_\${original_file_name}"
            else
              mv "$file" "${path2}_flat/\${original_file_name}"
            fi
            ((counter++))
          done;
      `;
    (0, import_child_process.execSync)(flattenCmd);
    return `${path2}_flat`;
  }
  function diffCode(fromPath, toPath) {
    fromPath = flatten(fromPath);
    toPath = flatten(toPath);
    const prettierCmd = `npx prettier ${fromPath} ${toPath} --write`;
    (0, import_child_process.execSync)(prettierCmd);
    const diffCmd = `
  git diff --no-index --ignore-space-at-eol ${fromPath} ${toPath} | awk '
    BEGIN { in_diff_block = 0; skip_block = 0; buffer = "" }
    /^diff --git/ {
      if (in_diff_block && skip_block == 0) { printf "%s", buffer }
      in_diff_block = 1; skip_block = 0; buffer = $0 "\\n"
    }
    /similarity index 100%/ { skip_block = 1 }
    { if (in_diff_block && !/^diff --git/) { buffer = buffer $0 "\\n" } }
    END { if (in_diff_block && skip_block == 0) { printf "%s", buffer } }
  '
  `;
    const result = (0, import_child_process.execSync)(diffCmd);
    return result.toString();
  }

  // src/reports/diff-reports.ts
  function hasDiff(input) {
    if (!input) return false;
    return !!Object.keys(input).find(
      (key) => typeof input[key] === "object" && input[key] !== null && (input[key].hasOwnProperty("from") || input[key].hasOwnProperty("to"))
    );
  }
  async function diffReports(pre, post) {
    const chainId = pre.chainId;
    const diffResult = diff(pre, post);
    const diffResultWithoutUnchanged = diff(pre, post, true);
    let content = "";
    const reservesAdded = Object.keys(diffResult.reserves).map((reserveKey) => {
      if (diffResult.reserves[reserveKey].to) {
        let report = renderReserve(diffResult.reserves[reserveKey].to, chainId);
        report += renderStrategy(post.strategies[reserveKey]);
        report += `| interestRate | ![ir](${getStrategyImageUrl(post.strategies[reserveKey])}) |
`;
        return report;
      }
    }).filter((i) => i);
    const reservesRemoved = Object.keys(diffResult.reserves).map((reserveKey) => {
      if (diffResult.reserves[reserveKey].from) {
        return renderReserve(diffResult.reserves[reserveKey].from, chainId);
      }
    }).filter((i) => i);
    const reservesAltered = Object.keys(diffResult.reserves).map((reserveKey) => {
      if (!diffResult.reserves[reserveKey].hasOwnProperty("from")) {
        const hasChangedReserveProperties = hasDiff(diffResult.reserves[reserveKey]);
        const preIr = getStrategyImageUrl(pre.strategies[reserveKey]);
        const postIr = getStrategyImageUrl(post.strategies[reserveKey]);
        const hasChangedIr = preIr !== postIr;
        if (!hasChangedReserveProperties && !hasChangedIr) return;
        let report = renderReserveDiff(diffResult.reserves[reserveKey], chainId);
        if (hasChangedIr) {
          report += renderStrategyDiff(
            diff(pre.strategies[reserveKey], post.strategies[reserveKey])
          );
          report += `| interestRate | ![before](${preIr}) | ![after](${postIr}) |`;
        }
        return report;
      }
    }).filter((i) => i);
    if (reservesAdded.length || reservesRemoved.length || reservesAltered.length) {
      content += "## Reserve changes\n\n";
      if (reservesAdded.length) {
        content += `### ${reservesAdded.length > 1 ? "Reserve" : "Reserves"} added

`;
        content += reservesAdded.join("\n\n");
        content += "\n\n";
      }
      if (reservesAltered.length) {
        content += `### ${reservesAltered.length > 1 ? "Reserve" : "Reserves"} altered

`;
        content += reservesAltered.join("\n\n");
        content += "\n\n";
      }
      if (reservesRemoved.length) {
        content += `### ${reservesRemoved.length > 1 ? "Reserve" : "Reserves"} removed

`;
        content += reservesRemoved.join("\n\n");
        content += "\n\n";
      }
    }
    if (diffResultWithoutUnchanged.eModes) {
      content += "## Emodes changed\n\n";
      for (const eMode of Object.keys(diffResult.eModes)) {
        const hasChanges = hasDiff(diffResult.eModes?.[eMode]);
        content += `### EMode: ${post.eModes[eMode].label}(id: ${post.eModes[eMode].eModeCategory})

`;
        if (hasChanges) {
          content += renderEmodeDiff(
            diff(pre.eModes[eMode] || {}, post.eModes[eMode] || {}),
            pre,
            post
          );
        } else if (!pre.eModes[eMode] || !post.eModes[eMode]) {
          content += renderEmodeDiff(
            diff(pre.eModes[eMode] || {}, post.eModes[eMode] || {}),
            pre,
            post
          );
        }
        content += "\n\n";
      }
    }
    try {
      if (diffResultWithoutUnchanged.poolConfig) {
        for (const key of Object.keys(diffResult.poolConfig)) {
          if (typeof diffResult.poolConfig[key] === "object" && diffResult.poolConfig[key].hasOwnProperty("from")) {
            const fromAddress = diffResult.poolConfig[key].from;
            const toAddress = diffResult.poolConfig[key].to;
            const from = downloadContract(pre.chainId, fromAddress);
            const to = downloadContract(pre.chainId, toAddress);
            const result = diffCode(from, to);
            (0, import_fs2.writeFileSync)(`./diffs/${pre.chainId}_${key}_${fromAddress}_${toAddress}.diff`, result);
          }
        }
      }
    } catch (e) {
    }
    content += `## Raw diff

\`\`\`json
${JSON.stringify(diffResultWithoutUnchanged, null, 2)}
\`\`\``;
    return content;
  }

  // src/utils/logger.ts
  var import_chalk = __toESM(require_source(), 1);

  // src/utils/constants.ts
  var EOA = "0xD73a92Be73EfbFcF3854433A5FcbAbF9c1316073";
  var VERBOSE = process.env.VERBOSE;
  var FORMAT = process.env.FORMAT || "raw";
  var DEFAULT_GOVERNANCE = GovernanceV3Ethereum_exports.GOVERNANCE;
  var DEFAULT_GOVERNANCE_CLIENT = getClient(1);

  // src/utils/logger.ts
  function logVerbose(topic, text) {
    if (VERBOSE) console.log(import_chalk.default.gray(`Info[${topic}]: ${text}`));
  }
  function logInfo(topic, text) {
    console.log(import_chalk.default.blue(`Info[${topic}]: ${text}`));
  }
  function logWarning(topic, text) {
    console.log(import_chalk.default.yellow(`Warning[${topic}]: ${text}`));
  }
  function logError(topic, text) {
    console.log(import_chalk.default.red(`Error[${topic}]: ${text}`));
  }
  function logSuccess(topic, text) {
    console.log(import_chalk.default.green(`Success[${topic}]: ${text}`));
  }

  // src/govv3/utils/logInterpreter.ts
  var tokenAmountEvents = ["Transfer", "Approval", "Burn", "Mint", "BalanceTransfer"];
  var reserveEvents = ["Withdraw", "Supply", "Deposit"];
  var assetFields = ["asset", "token", "reserve", "fromToken", "toToken"];
  async function interpretLog(client, address, name, inputs) {
    if (inputs) {
      for (let i = 0; i < inputs.length; i++) {
        if (inputs[i].soltype?.name && assetFields.includes(inputs[i].soltype.name)) {
          inputs[i].value = await addAssetSymbol(client, inputs[i].value);
        }
      }
      if (name && tokenAmountEvents.includes(name)) {
        const decimalFieldNames = ["value", "amount", "wad"];
        for (const name2 of decimalFieldNames) {
          const valueIndex = inputs.findIndex((i) => i.soltype.name === name2);
          if (valueIndex !== -1) {
            const asset = await findAsset(client, address);
            if (asset) {
              inputs[valueIndex].value = prettifyNumber({
                showDecimals: true,
                value: inputs[valueIndex].value,
                decimals: asset.decimals
              });
            }
          }
        }
      }
      if (name && reserveEvents.includes(name)) {
        const valueIndex = inputs.findIndex((i) => i.soltype.name === "amount");
        const reserveIndex = inputs.findIndex((i) => i.soltype.name === "reserve");
        if (valueIndex !== -1 && reserveIndex !== -1) {
          const asset = await findAsset(client, inputs[reserveIndex].value);
          if (asset) {
            inputs[valueIndex].value = prettifyNumber({
              showDecimals: true,
              value: inputs[valueIndex].value,
              decimals: asset.decimals
            });
          }
        }
      }
      if (name && ["Mint", "ReserveDataUpdated", "Burn"].includes(name)) {
        const decimalFieldNames = ["liquidityIndex", "variableBorrowIndex", "index"];
        for (const name2 of decimalFieldNames) {
          const valueIndex = inputs.findIndex((i) => i.soltype.name === name2);
          if (valueIndex !== -1) {
            inputs[valueIndex].value = prettifyNumber({
              showDecimals: true,
              value: inputs[valueIndex].value,
              decimals: 27
            });
          }
        }
      }
    }
    const parsedInputs = inputs?.map(
      (i) => `${i.soltype.name}: ${typeof i.value === "object" ? JSON.stringify(i.value) : i.value}`
    ).join(", ");
    return `  - \`${name}(${parsedInputs || ""})\``;
  }

  // src/govv3/utils/solidityUtils.ts
  function getContractName(contracts2, address, chainId) {
    const isAddrKnown = isKnownAddress(address, chainId);
    const contract = contracts2.find((c) => c.address.toLowerCase() === address.toLowerCase());
    if (!contract)
      return `unknown contract name at \`${getAddress(address)}\`${flagKnownAddress(isAddrKnown)}`;
    let contractName = contract?.contract_name;
    if (contract?.token_data?.name) contractName += ` (${contract?.token_data?.name})`;
    if (contract.standards?.includes("eip1967") && contract.child_contracts?.[0].address) {
      return `${contractName} at \`${getAddress(address)}\`${flagKnownAddress(
        isAddrKnown
      )} with implementation ${getContractName(contracts2, contract.child_contracts?.[0].address, chainId)}`;
    }
    return `${contractName} at \`${getAddress(address)}\`${flagKnownAddress(isAddrKnown)}`;
  }

  // src/govv3/checks/logs.ts
  var checkLogs = {
    name: "Reports all events emitted from the proposal",
    async checkProposal(proposal, sim, client) {
      const info = [];
      const events = sim.transaction.transaction_info.logs?.reduce(
        (logs, log) => {
          const addr = getAddress(log.raw.address);
          if (!logs[addr]) logs[addr] = [log];
          else logs[addr].push(log);
          return logs;
        },
        {}
      );
      if (!events || !Object.keys(events).length)
        return { info: ["No events emitted"], warnings: [], errors: [] };
      for (const [address, logs] of Object.entries(events)) {
        info.push(`- ${getContractName(sim.contracts, address, client.chain.id)}`);
        for (const log of logs) {
          if (log.name) {
            info.push(await interpretLog(client, address, log.name, log.inputs));
          } else {
            info.push(`  - Undecoded log: \`${JSON.stringify(log)}\``);
          }
        }
      }
      return { info, warnings: [], errors: [] };
    }
  };

  // src/govv3/checks/selfDestruct.ts
  var checkTargetsNoSelfdestruct = {
    name: "Check all targets do not contain selfdestruct",
    async checkProposal(proposal, sim, client) {
      const allTargets = proposal.payload.actions.map((action) => action.target);
      const uniqueTargets = allTargets.filter((addr, i, targets) => targets.indexOf(addr) === i);
      const { info, warn, error } = await checkNoSelfdestructs([], uniqueTargets, client);
      return { info, warnings: warn, errors: error };
    }
  };
  var checkTouchedContractsNoSelfdestruct = {
    name: "Check all touched contracts do not contain selfdestruct",
    async checkProposal(proposal, sim, client) {
      const { info, warn, error } = await checkNoSelfdestructs([], sim.transaction.addresses, client);
      return { info, warnings: warn, errors: error };
    }
  };
  async function checkNoSelfdestructs(trustedAddrs, addresses, client) {
    const info = [];
    const warn = [];
    const error = [];
    for (const addr of addresses) {
      const status = await checkNoSelfdestruct(trustedAddrs, addr, client);
      const isAddrKnown = isKnownAddress(addr, client.chain.id);
      const address = toAddressLink(addr, true, client);
      if (status === "eoa") info.push(`- ${address}: EOA${flagKnownAddress(isAddrKnown)}`);
      else if (status === "empty")
        warn.push(`- ${address}: EOA (may have code later)${flagKnownAddress(isAddrKnown)}`);
      else if (status === "safe")
        info.push(`- ${address}: Contract (looks safe)${flagKnownAddress(isAddrKnown)}`);
      else if (status === "delegatecall")
        warn.push(`- ${address}: Contract (with DELEGATECALL)${flagKnownAddress(isAddrKnown)}`);
      else if (status === "trusted")
        info.push(`- ${address}: Trusted contract (not checked)${flagKnownAddress(isAddrKnown)}`);
      else error.push(`- ${address}: Contract (with SELFDESTRUCT)${flagKnownAddress(isAddrKnown)}`);
    }
    return { info, warn, error };
  }
  var STOP = 0;
  var JUMPDEST = 91;
  var PUSH1 = 96;
  var PUSH32 = 127;
  var RETURN = 243;
  var REVERT = 253;
  var INVALID = 254;
  var SELFDESTRUCT = 255;
  var DELEGATECALL = 244;
  var isHalting = (opcode) => [STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(opcode);
  var isPUSH = (opcode) => opcode >= PUSH1 && opcode <= PUSH32;
  async function checkNoSelfdestruct(trustedAddrs, addr, client) {
    if (trustedAddrs.map((addr2) => addr2.toLowerCase()).includes(addr.toLowerCase())) return "trusted";
    const [code, nonce] = await Promise.all([
      getCode(client, { address: addr }),
      getTransactionCount(client, { address: addr })
    ]);
    if (!code) return nonce > 0 ? "eoa" : "empty";
    const bytecode = Buffer.from(code.substring(2), "hex");
    let halted = false;
    let delegatecall = false;
    for (let index2 = 0; index2 < bytecode.length; index2++) {
      const opcode = bytecode[index2];
      if (opcode === SELFDESTRUCT && !halted) {
        return "selfdestruct";
      }
      if (opcode === DELEGATECALL && !halted) {
        delegatecall = true;
      } else if (opcode === JUMPDEST) {
        halted = false;
      } else if (isHalting(opcode)) {
        halted = true;
      } else if (isPUSH(opcode)) {
        index2 += opcode - PUSH1 + 1;
      }
    }
    return delegatecall ? "delegatecall" : "safe";
  }

  // src/govv3/utils/reserveConfigurationInterpreter.ts
  function getDecodedReserveData(contractAddress, data) {
    if (!data) return data;
    if ([
      AaveV2EthereumAMM_exports.POOL,
      AaveV2Ethereum_exports.POOL,
      AaveV2Polygon_exports.POOL,
      AaveV2Avalanche_exports.POOL
    ].map((address) => address.toLowerCase()).includes(contractAddress.toLowerCase()))
      return decodeReserveDataV2(data);
    return decodeReserveDataV3(data);
  }
  function decodeReserveDataV2(data) {
    const ltv = getBits(data, 0n, 15n);
    const liquidationThreshold = getBits(data, 16n, 31n);
    const liquidationBonus = getBits(data, 32n, 47n);
    const decimals = getBits(data, 48n, 55n);
    const active = Number(getBits(data, 56n, 56n));
    const frozen = Number(getBits(data, 57n, 57n));
    const borrowingEnabled = Number(getBits(data, 58n, 58n));
    const stableBorrowingEnabled = Number(getBits(data, 59n, 59n));
    const reserveFactor = getBits(data, 64n, 79n);
    return {
      ltv,
      liquidationThreshold,
      liquidationBonus,
      decimals,
      active: !!active,
      frozen: !!frozen,
      borrowingEnabled: !!borrowingEnabled,
      stableBorrowingEnabled: !!stableBorrowingEnabled,
      reserveFactor
    };
  }
  function decodeReserveDataV3(data) {
    const ltv = getBits(data, 0n, 15n);
    const liquidationThreshold = getBits(data, 16n, 31n);
    const liquidationBonus = getBits(data, 32n, 47n);
    const decimals = getBits(data, 48n, 55n);
    const active = Number(getBits(data, 56n, 56n));
    const frozen = Number(getBits(data, 57n, 57n));
    const borrowingEnabled = Number(getBits(data, 58n, 58n));
    const stableRateBorrowingEnabled = Number(getBits(data, 59n, 59n));
    const paused = Number(getBits(data, 60n, 60n));
    const borrowingInIsolation = Number(getBits(data, 61n, 61n));
    const siloedBorrowingEnabled = Number(getBits(data, 62n, 62n));
    const flashloaningEnabled = Number(getBits(data, 63n, 63n));
    const reserveFactor = getBits(data, 64n, 79n);
    const borrowCap = getBits(data, 80n, 115n);
    const supplyCap = getBits(data, 116n, 151n);
    const liquidationProtocolFee = getBits(data, 152n, 167n);
    const eModeCategory = getBits(data, 168n, 175n);
    const unbackedMintCap = getBits(data, 176n, 211n);
    const debtCeiling = getBits(data, 212n, 251n);
    const virtualAccountingEnabled = Number(getBits(data, 252n, 252n));
    return {
      ltv,
      liquidationThreshold,
      liquidationBonus,
      decimals,
      active: !!active,
      frozen: !!frozen,
      borrowingEnabled: !!borrowingEnabled,
      stableRateBorrowingEnabled,
      paused,
      borrowingInIsolation,
      reserveFactor,
      borrowCap,
      supplyCap,
      liquidationProtocolFee,
      eModeCategory,
      unbackedMintCap,
      debtCeiling,
      siloedBorrowingEnabled: !!siloedBorrowingEnabled,
      flashloaningEnabled: !!flashloaningEnabled,
      virtualAccountingEnabled: !!virtualAccountingEnabled
    };
  }

  // src/govv3/checks/state.ts
  function resolveChain(chain) {
    return chain.join(".");
  }
  function getContractChanges(diffs) {
    const changes = [];
    for (const diff2 of diffs) {
      if (!diff2.soltype) {
        for (const w of diff2.raw) {
          const oldVal = JSON.stringify(w.original);
          const newVal = JSON.stringify(w.dirty);
          changes.push({ before: oldVal, after: newVal, name: `Slot \`${w.key}\`` });
        }
      } else if (diff2.soltype.simple_type) {
        changes.push({
          before: diff2.original,
          after: diff2.dirty,
          name: diff2.soltype.name,
          type: diff2.soltype?.name
        });
      } else if (diff2.soltype.type.startsWith("mapping")) {
        const keys = Object.keys(diff2.original);
        const original = diff2.original;
        const dirty = diff2.dirty;
        for (const k of keys) {
          changes.push({ before: original[k], after: dirty[k], name: k, type: diff2.soltype?.name });
        }
      } else {
        for (const w of diff2.raw) {
          const oldVal = JSON.stringify(w.original);
          const newVal = JSON.stringify(w.dirty);
          changes.push({ before: oldVal, after: newVal, name: `Slot \`${w.key}\`` });
          console.log(
            `Could not parse state: add support for formatting type ${diff2.soltype?.type} (slot ${w.key})
`
          );
        }
      }
    }
    return changes;
  }
  async function renderContractChanges(simulation, client, address, changes) {
    let stateChanges = `
${getContractName(simulation.contracts, address, client.chain.id)}
\`\`\`diff
`;
    for (const change of changes) {
      stateChanges += await deepDiff({
        client,
        address,
        before: change.before,
        after: change.after,
        accessChain: [change.name],
        type: change.type
      });
    }
    stateChanges += "```\n";
    return stateChanges;
  }
  async function deepDiff({
    client,
    address,
    before,
    after,
    accessChain,
    type
  }) {
    if (type && accessChain.length === 1 && ["_reserves", "assets", "assetsSources"].includes(type)) {
      accessChain[0] = await addAssetSymbol(client, accessChain[0]);
    }
    if (typeof before !== "object" || typeof after !== "object") {
      return `@@ ${type ? `${wrapInQuotes(type, true)} key ` : ""}${wrapInQuotes(
        resolveChain(accessChain),
        !!type
      )} @@
- ${await enhanceValue({ client, address, value: before, type, accessChain })}
+ ${await enhanceValue(
        {
          client,
          address,
          value: after,
          type,
          accessChain
        }
      )}
`;
    }
    let result = "";
    if (type === "_reserves" && (before.configuration?.data || after.configuration?.data)) {
      before.configuration.data_decoded = getDecodedReserveData(address, before.configuration.data);
      after.configuration.data_decoded = getDecodedReserveData(address, after.configuration.data);
    }
    if (type === "_eModeCategories") {
      if (before.collateralBitmap !== void 0) {
        before.collateralBitmap_decoded = (await assetIndexesToAsset(
          client,
          address,
          bitMapToIndexes(BigInt(before.collateralBitmap || 0))
        )).toString();
        before.collateralBitmap = toBinaryString(BigInt(before.collateralBitmap || 0));
        after.collateralBitmap_decoded = (await assetIndexesToAsset(
          client,
          address,
          bitMapToIndexes(BigInt(after.collateralBitmap || 0))
        )).toString();
        after.collateralBitmap = toBinaryString(BigInt(after.collateralBitmap || 0));
      }
      if (before.borrowableBitmap !== void 0) {
        before.borrowableBitmap_decoded = (await assetIndexesToAsset(
          client,
          address,
          bitMapToIndexes(BigInt(before.borrowableBitmap || 0))
        )).toString();
        before.borrowableBitmap = toBinaryString(BigInt(before.borrowableBitmap || 0));
        after.borrowableBitmap_decoded = (await assetIndexesToAsset(
          client,
          address,
          bitMapToIndexes(BigInt(after.borrowableBitmap || 0))
        )).toString();
        after.borrowableBitmap = toBinaryString(BigInt(after.borrowableBitmap || 0));
      }
    }
    if (type === "_streams") {
      const asset = await findAsset(client, after.tokenAddress);
      after.ratePerSecond = prettifyNumber({
        decimals: asset.decimals,
        value: after.ratePerSecond,
        showDecimals: true
      });
      after.remainingBalance = prettifyNumber({
        showDecimals: true,
        decimals: asset.decimals,
        value: after.remainingBalance
      });
    }
    for (const key of Object.keys(before)) {
      if (before[key] === after[key]) continue;
      const newAccessChain = [...accessChain];
      newAccessChain.push(key);
      if (typeof before[key] === "object") {
        result += await deepDiff({
          client,
          address,
          before: before[key],
          after: after[key],
          accessChain: newAccessChain,
          type
        });
      } else
        result += `@@ ${type ? `${wrapInQuotes(type, true)} key ` : ""}${wrapInQuotes(
          resolveChain([...accessChain, key]),
          !!type
        )} @@
- ${await enhanceValue({
          client,
          address,
          value: before[key],
          type,
          accessChain: newAccessChain
        })}
+ ${await enhanceValue({
          client,
          address,
          value: after[key],
          type,
          accessChain: newAccessChain
        })}
`;
    }
    return result;
  }
  async function enhanceValue({
    client,
    address,
    value,
    type,
    accessChain
  }) {
    const key = accessChain[accessChain?.length - 1];
    if (key === "tokenAddress") {
      return addAssetSymbol(client, value);
    }
    if (type) {
      if (type === "assetsSources") {
        return addAssetPrice(client, value);
      }
      if ([
        "_balances",
        "balanceOf",
        "balances",
        "allowed",
        "_allowances",
        "allowance",
        "_totalSupply"
      ].includes(type)) {
        const asset = await findAsset(client, address);
        if (asset) return prettifyNumber({ decimals: asset.decimals, value, showDecimals: true });
      }
      if (key && ["_reserves", "_eModeCategories"].includes(type)) {
        if (["liquidityIndex", "variableBorrowIndex"].includes(key))
          return prettifyNumber({ decimals: 27, value, showDecimals: true });
        if (["liquidationThreshold", "reserveFactor", "liquidationProtocolFee", "ltv"].includes(key))
          return prettifyNumber({ decimals: 2, value, suffix: "%", showDecimals: true });
        if (["currentLiquidityRate", "currentVariableBorrowRate", "currentStableBorrowRate"].includes(
          key
        ))
          return prettifyNumber({ decimals: 25, value, suffix: "%", showDecimals: true });
        if (["liquidationBonus"].includes(key))
          return prettifyNumber({
            decimals: 2,
            value,
            suffix: "%",
            showDecimals: true,
            patchedValue: BigInt(value) == 0n ? 0n : BigInt(value) - BigInt(1e4)
          });
      }
    }
    return value;
  }
  var checkStateChanges = {
    name: "Reports all state changes",
    async checkProposal(proposal, simulation, client) {
      const info = [];
      const warnings = [];
      const errors = [];
      if (!simulation.transaction.status) {
        const txInfo = simulation.transaction.transaction_info;
        const reason = txInfo.stack_trace ? txInfo.stack_trace[0].error_reason : "unknown error";
        errors.push(`Transaction reverted with reason: ${reason}`);
      } else {
        const stateDiffs = simulation.transaction.transaction_info.state_diff.reduce(
          (diffs, diff2) => {
            if (!diff2.raw?.[0]) return diffs;
            const addr = getAddress(diff2.raw[0].address);
            if (!diffs[addr]) diffs[addr] = [diff2];
            else diffs[addr].push(diff2);
            return diffs;
          },
          {}
        );
        if (!Object.keys(stateDiffs).length) {
          warnings.push("No state changes detected");
        } else {
          let stateChanges = "";
          const warnings2 = "";
          for (const [address, diffs] of Object.entries(stateDiffs)) {
            const changes = getContractChanges(diffs);
            stateChanges += await renderContractChanges(simulation, client, address, changes);
          }
          info.push(stateChanges);
        }
      }
      return { info, warnings, errors };
    }
  };
  function toBinaryString(value) {
    return `0b` + value.toString(2);
  }

  // src/govv3/checks/targetsVerified.ts
  var checkTargetsVerifiedEtherscan = {
    name: "Check all targets are verified on Etherscan",
    async checkProposal(proposal, sim, client) {
      const allTargets = proposal.payload.actions.map((action) => action.target);
      const uniqueTargets = allTargets.filter((addr, i, targets) => targets.indexOf(addr) === i);
      const info = await checkVerificationStatuses(sim, uniqueTargets, client);
      return { info, warnings: [], errors: [] };
    }
  };
  var checkTouchedContractsVerifiedEtherscan = {
    name: "Check all touched contracts are verified on Etherscan",
    async checkProposal(proposal, sim, client) {
      const info = await checkVerificationStatuses(sim, sim.transaction.addresses, client);
      return { info, warnings: [], errors: [] };
    }
  };
  async function checkVerificationStatuses(sim, addresses, client) {
    const info = [];
    for (const addr of addresses) {
      const isAddrKnown = isKnownAddress(addr, client.chain.id);
      const status = await checkVerificationStatus(sim, addr, client);
      if (status === "eoa") {
        info.push(`- ${addr}: EOA (verification not applicable)`);
      } else if (status === "verified") {
        const contract = getContract2(sim, addr);
        info.push(
          `- ${addr}: Contract (verified) (${contract?.contract_name}) ${flagKnownAddress(isAddrKnown)}`
        );
      } else {
        info.push(`- ${addr}: Contract (not verified) ${flagKnownAddress(isAddrKnown)}`);
      }
    }
    return info;
  }
  async function checkVerificationStatus(sim, addr, client) {
    const contract = getContract2(sim, addr);
    if (contract) return "verified";
    const stateDiff = getStateDiff(sim, addr);
    if (stateDiff) return "unverified";
    const code = await getCode(client, { address: addr });
    return code === void 0 ? "eoa" : "unverified";
  }
  function getContract2(sim, addr) {
    return sim.contracts.find((item) => item.address === addr);
  }
  function getStateDiff(sim, addr) {
    return sim.transaction.transaction_info.state_diff?.find(
      (diff2) => diff2.raw?.[0]?.address.toLowerCase() === addr.toLowerCase()
    );
  }

  // src/utils/tenderlyClient.ts
  var Tenderly = class {
    TENDERLY_BASE = "https://api.tenderly.co/api/v1";
    ACCESS_TOKEN;
    ACCOUNT;
    PROJECT;
    constructor(accessToken, account, project) {
      this.ACCESS_TOKEN = accessToken;
      this.ACCOUNT = account;
      this.PROJECT = project;
    }
    trace = async (chainId, txHash) => {
      const response = await fetch(
        `${this.TENDERLY_BASE}/public-contract/${chainId}/trace/${txHash}`,
        {
          method: "GET",
          headers: new Headers({
            "Content-Type": "application/json",
            "X-Access-Key": this.ACCESS_TOKEN
          })
        }
      );
      const result = await response.json();
      return result;
    };
    simulate = async (request, client) => {
      if (!request.state_objects) {
        request.state_objects = {};
      }
      if (!request.state_objects[request.from]) {
        request.state_objects[request.from] = {
          balance: String(parseEther("3"))
        };
      } else {
        request.state_objects[request.from].balance = String(parseEther("3"));
      }
      let apiUrl = `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/simulate`;
      if (client) {
        const url = client.transport.url;
        const tenderlyForkRegex = new RegExp(/https:\/\/rpc.tenderly.co\/fork\/(.*)/);
        if (tenderlyForkRegex.test(url)) {
          const matches = url.match(tenderlyForkRegex);
          if (matches) {
            const fork = await this.getForkInfo(matches[1]);
            request.root = fork.global_head;
            delete request.network_id;
            apiUrl = `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/fork/${matches[1]}/simulate`;
          }
        }
      }
      const fullRequest = JSON.stringify({
        generate_access_list: true,
        save: true,
        gas_price: "0",
        gas: 3e7,
        force_import_contracts: true,
        ...request
      });
      logInfo("tenderly", `request: ${JSON.stringify(fullRequest)}`);
      const response = await fetch(apiUrl, {
        method: "POST",
        body: fullRequest,
        headers: new Headers({
          "Content-Type": "application/json",
          "X-Access-Key": this.ACCESS_TOKEN
        })
      });
      if (response.status !== 200) {
        console.log(await response.text());
        throw new Error(`TenderlyError: ${response.statusText}`);
      }
      return await response.json();
    };
    /**
     * Fork api to get fork information from an existing fork id
     * @param project name of the Tenderly project where the fork was created
     * @param forkId id of the fork created in tenderly
     * @returns fork object
     */
    getForkInfo = async (forkId, project) => {
      const response = await fetch(
        `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${project || this.PROJECT}/fork/${forkId}`,
        {
          method: "GET",
          headers: new Headers({
            "Content-Type": "application/json",
            "X-Access-Key": this.ACCESS_TOKEN
          })
        }
      );
      if (response.status >= 400) {
        console.log(await response.text());
        throw new Error(`TenderlyError: ${response.statusText}`);
      }
      const result = await response.json();
      const fork = {
        id: result.simulation_fork.id,
        chainId: result.simulation_fork.network_id,
        block_number: result.simulation_fork.block_number,
        forkNetworkId: result.simulation_fork.chain_config.chain_id,
        forkUrl: `https://rpc.tenderly.co/fork/${result.simulation_fork.id}`,
        global_head: result.simulation_fork.global_head
      };
      return fork;
    };
    /**
     * Trace api lacks most information we need, so simulateTx uses the simulation api to replicate the trace.
     * @param chainId
     * @param tx
     * @returns
     */
    simulateTx = async (chainId, tx) => {
      const simulationPayload = {
        network_id: String(chainId),
        from: tx.from,
        to: tx.to,
        block_number: Number(tx.blockNumber),
        input: tx.input
      };
      return this.simulate(simulationPayload);
    };
    fork = async ({
      chainId,
      blockNumber,
      alias,
      forkChainId = 3030
    }) => {
      const forkingPoint = {
        network_id: chainId,
        chain_config: { chain_id: forkChainId }
      };
      if (blockNumber) forkingPoint.block_number = blockNumber;
      if (alias) forkingPoint.alias = alias;
      const response = await fetch(
        `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/fork`,
        {
          method: "POST",
          body: JSON.stringify(forkingPoint),
          headers: new Headers({
            "Content-Type": "application/json",
            "X-Access-Key": this.ACCESS_TOKEN
          })
        }
      );
      const result = await response.json();
      if (result.error) {
        logError("tenderly", "fork could not be created");
        throw new Error(result.error.message);
      }
      const fork = {
        id: result.simulation_fork.id,
        chainId: result.simulation_fork.network_id,
        block_number: result.simulation_fork.block_number,
        forkNetworkId: result.simulation_fork.chain_config.chain_id,
        forkUrl: `https://rpc.tenderly.co/fork/${result.simulation_fork.id}`,
        global_head: result.simulation_fork.global_head
      };
      logSuccess(
        "tenderly",
        `Fork created! To use in aave interface you need to run the following commands:

---
localStorage.setItem('forkEnabled', 'true');
localStorage.setItem('forkBaseChainId', ${fork.chainId});
localStorage.setItem('forkNetworkId', ${fork.forkNetworkId});
localStorage.setItem("forkRPCUrl", "${fork.forkUrl}");
---
`
      );
      return fork;
    };
    deployCode = async (fork, filePath, from) => {
      const walletProvider = createClient({
        account: from || EOA,
        chain: { id: fork.forkNetworkId, name: "tenderly" },
        transport: http(fork.forkUrl)
      });
      const artifact = __require(filePath);
      logInfo("tenderly", `deploying ${filePath}`);
      const hash4 = await deployContract(walletProvider, {
        abi: artifact.abi,
        bytecode: artifact.bytecode.object,
        account: walletProvider.account
      });
      const receipt = await getTransactionReceipt(walletProvider, { hash: hash4 });
      return getContractAddress2({ from: receipt.from, nonce: receipt.nonce });
    };
    warpTime = async (fork, timestamp) => {
      const client = createClient({
        chain: { id: fork.forkNetworkId },
        transport: http(fork.forkUrl)
      });
      const currentBlock = await getBlock(client);
      if (timestamp > currentBlock.timestamp) {
        logInfo("tenderly", `warping time from ${currentBlock.timestamp} to ${timestamp}`);
        await client.request({
          method: "evm_increaseTime",
          params: [toHex(timestamp - currentBlock.timestamp)]
        });
      } else {
        logWarning(
          "tenderly",
          `skipping time warp as tenderly forks do not support traveling back in time (from ${currentBlock.timestamp} to ${timestamp})`
        );
      }
    };
    warpBlocks = async (fork, blockNumber) => {
      const client = createClient({
        chain: { id: fork.forkNetworkId },
        transport: http(fork.forkUrl)
      });
      const currentBlock = await getBlock(client);
      if (blockNumber > currentBlock.number) {
        logInfo("tenderly", `warping blocks from ${currentBlock.number} to ${blockNumber}`);
        await client.request({
          method: "evm_increaseBlocks",
          params: [toHex(blockNumber - currentBlock.number)]
        });
      } else {
        logWarning(
          "tenderly",
          "skipping block warp as tenderly forks do not support traveling back in time"
        );
      }
    };
    unwrapAndExecuteSimulationPayloadOnFork = async (fork, request) => {
      await this.fundAccount(fork, request.from);
      const publicProvider = createClient({
        chain: { id: fork.forkNetworkId },
        transport: http(fork.forkUrl)
      });
      if (request.state_objects) {
        logInfo("tenderly", "setting storage");
        for (const address of Object.keys(request.state_objects)) {
          if (request.state_objects[address].storage) {
            for (const slot of Object.keys(request.state_objects[address].storage)) {
              await publicProvider.request({
                method: "tenderly_setStorageAt",
                params: [
                  address,
                  pad(slot, { size: 32 }),
                  pad(request.state_objects[address].storage[slot], {
                    size: 32
                  })
                ]
              });
            }
          }
        }
      }
      if (request.block_header?.timestamp) {
        await this.warpTime(fork, fromHex(request.block_header?.timestamp, "bigint"));
      }
      if (request.block_header?.number) {
        await this.warpBlocks(fork, fromHex(request.block_header?.number, "bigint"));
      }
      if (request.input) {
        logInfo("tenderly", "execute transaction");
        const walletProvider = createClient({
          account: request.from,
          chain: { id: fork.forkNetworkId, name: "tenderly" },
          transport: http(fork.forkUrl)
        });
        const hash4 = await sendTransaction(walletProvider, {
          data: request.input,
          to: request.to,
          value: request.value || 0n
        });
        const receipt = await getTransactionReceipt(walletProvider, { hash: hash4 });
        if (receipt.status === "success") {
          logSuccess("tenderly", "transaction successfully executed");
        } else {
          logError("tenderly", "transaction reverted");
        }
        return hash4;
      }
    };
    fundAccount = (fork, address) => {
      logInfo("tenderly", "fund account");
      return fetch(
        `${this.TENDERLY_BASE}/account/${this.ACCOUNT}/project/${this.PROJECT}/fork/${fork.id}/balance`,
        {
          method: "POST",
          body: JSON.stringify({ accounts: [address], amount: 1e3 }),
          headers: new Headers({
            "Content-Type": "application/json",
            "X-Access-Key": this.ACCESS_TOKEN
          })
        }
      );
    };
    replaceCode = (fork, address, code) => {
      const publicProvider = createClient({
        chain: { id: fork.forkNetworkId },
        transport: http(fork.forkUrl)
      });
      return publicProvider.request({
        method: "tenderly_setCode",
        params: [address, code]
      });
    };
  };
  var tenderly = new Tenderly(
    process.env.TENDERLY_ACCESS_TOKEN,
    process.env.TENDERLY_ACCOUNT,
    process.env.TENDERLY_PROJECT_SLUG
  );

  // node_modules/@bgd-labs/aave-v3-governance-cache/dist/index.js
  var import_node_module = __require("node:module");
  var import_meta = {};
  var __require2 = /* @__PURE__ */ (0, import_node_module.createRequire)(import_meta.url);
  var ProposalState;
  ((ProposalState22) => {
    ProposalState22[ProposalState22["Null"] = 0] = "Null";
    ProposalState22[ProposalState22["Created"] = 1] = "Created";
    ProposalState22[ProposalState22["Active"] = 2] = "Active";
    ProposalState22[ProposalState22["Queued"] = 3] = "Queued";
    ProposalState22[ProposalState22["Executed"] = 4] = "Executed";
    ProposalState22[ProposalState22["Failed"] = 5] = "Failed";
    ProposalState22[ProposalState22["Cancelled"] = 6] = "Cancelled";
    ProposalState22[ProposalState22["Expired"] = 7] = "Expired";
  })(ProposalState ||= {});
  var PayloadState;
  ((PayloadState22) => {
    PayloadState22[PayloadState22["None"] = 0] = "None";
    PayloadState22[PayloadState22["Created"] = 1] = "Created";
    PayloadState22[PayloadState22["Queued"] = 2] = "Queued";
    PayloadState22[PayloadState22["Executed"] = 3] = "Executed";
    PayloadState22[PayloadState22["Cancelled"] = 4] = "Cancelled";
    PayloadState22[PayloadState22["Expired"] = 5] = "Expired";
  })(PayloadState ||= {});

  // src/govv3/payloadsController.ts
  var HUMAN_READABLE_PAYLOAD_STATE = {
    [PayloadState.None]: "None",
    [PayloadState.Created]: "Created",
    [PayloadState.Queued]: "Queued",
    [PayloadState.Executed]: "Executed",
    [PayloadState.Cancelled]: "Cancelled",
    [PayloadState.Expired]: "Expired"
  };
  var SLOTS = {
    PAYLOADS_MAPPING: 3n
  };
  var getPayloadsController = (address, client) => {
    const controllerContract = getContract({
      abi: IPayloadsControllerCore_ABI,
      address,
      client
    });
    const getSimulationPayloadForExecution = async (id) => {
      const payload = await controllerContract.read.getPayloadById([id]);
      const currentBlock = await getBlock(client);
      const simulationPayload = {
        network_id: String(client.chain.id),
        from: EOA,
        to: controllerContract.address,
        input: encodeFunctionData({
          abi: IPayloadsControllerCore_ABI,
          functionName: "executePayload",
          args: [id]
        }),
        block_number: -2,
        state_objects: {
          [controllerContract.address]: {
            storage: {
              [getSolidityStorageSlotUint(SLOTS.PAYLOADS_MAPPING, BigInt(id))]: encodePacked(
                ["uint40", "uint40", "uint8", "uint8", "address"],
                [
                  // we subtract 240n(4min), as tenderly might have been fallen behind
                  // therefore using block_number -1 (latest on tenderly) and a 4min margin should give a save margin
                  Number(currentBlock.timestamp - BigInt(payload.delay) - 1n - 240n),
                  // altering queued time so can be executed in current block
                  payload.createdAt,
                  PayloadState.Queued,
                  payload.maximumAccessLevelRequired,
                  payload.creator
                ]
              )
            }
          }
        }
      };
      return simulationPayload;
    };
    return {
      controllerContract,
      getSimulationPayloadForExecution,
      simulatePayloadExecutionOnTenderly: async (id, { executedLog }) => {
        if (executedLog) {
          const tx = await getTransaction(client, {
            hash: executedLog.transactionHash
          });
          return tenderly.simulateTx(client.chain.id, tx);
        }
        const payload = await getSimulationPayloadForExecution(id);
        return tenderly.simulate(payload, client);
      }
    };
  };

  // src/govv3/generatePayloadReport.ts
  async function generateReport({
    payloadId,
    payloadInfo,
    simulation,
    client
  }) {
    const {
      payload,
      logs: { executedLog, queuedLog, createdLog }
    } = payloadInfo;
    let report = `## Payload ${payloadId} on ${client.chain.name}

- Simulation: [https://dashboard.tenderly.co/me/simulator/${simulation.simulation.id}](https://dashboard.tenderly.co/me/simulator/${simulation.simulation.id})
- creator: ${payload.creator}
- maximumAccessLevelRequired: ${payload.maximumAccessLevelRequired}
- state: ${payload.state}(${HUMAN_READABLE_PAYLOAD_STATE[payload.state]})
- actions: ${JSON.stringify(payload.actions, (key, value) => typeof value === "bigint" ? value.toString() : value)}
- createdAt: [${renderUnixTime(payload.createdAt)}](${toTxLink(createdLog.transactionHash, false, client)})
`;
    if (queuedLog) {
      report += `- queuedAt: [${renderUnixTime(payload.queuedAt)}](${toTxLink(
        queuedLog.transactionHash,
        false,
        client
      )})
`;
      if (executedLog) {
        report += `- executedAt: [${renderUnixTime(payload.executedAt)}, timestamp: ${executedLog.timestamp}, block: ${executedLog.blockNumber}](${toTxLink(
          executedLog.transactionHash,
          false,
          client
        )})
`;
      } else {
        report += `- earliest execution at: [${renderUnixTime(
          payload.queuedAt + payload.delay
        )}](https://www.epochconverter.com/countdown?q=${payload.queuedAt + payload.delay})
`;
        const timestamp = Math.floor(new Date(simulation.transaction.timestamp).getTime() / 1e3);
        report += `- simulatedExecutionAt: ${renderUnixTime(
          timestamp
        )}, timestamp: ${timestamp}, block: ${simulation.transaction.block_number}`;
      }
    }
    report += "\n";
    const checks = [
      checkStateChanges,
      checkLogs,
      checkTargetsVerifiedEtherscan,
      checkTouchedContractsVerifiedEtherscan,
      checkTargetsNoSelfdestruct,
      checkTouchedContractsNoSelfdestruct
    ];
    for (const check of checks) {
      const result = await check.checkProposal(payloadInfo, simulation, client);
      report += renderCheckResult(check, result);
    }
    return report;
  }

  // src/govv3/governance.ts
  var import_deepmerge = __toESM(require_cjs(), 1);

  // src/govv3/proofs.ts
  var WAREHOUSE_SLOTS = {
    [AaveSafetyModule_exports.STK_AAVE]: {
      exchangeRate: 81n
      // exchangeRate
    }
  };
  var VOTING_SLOTS = {
    [AaveSafetyModule_exports.STK_AAVE]: { balance: 0n },
    // balance
    [AaveV3Ethereum_exports.ASSETS.AAVE.A_TOKEN]: {
      balance: 52n,
      // balance
      delegation: 64n
    },
    // delegation
    [AaveV3Ethereum_exports.ASSETS.AAVE.UNDERLYING]: { balance: 0n },
    // balance
    [GovernanceV3Ethereum_exports.GOVERNANCE]: { representative: 9n }
    // representative
  };
  async function getProof2(client, address, slots, blockHash) {
    const block = await getBlock(client, { blockHash });
    return getProof(client, {
      address,
      storageKeys: slots.map((slot) => slot),
      blockNumber: block.number
    });
  }
  var getAccountRPL = (proof) => {
    return toRlp(proof.map((rpl) => fromRlp(rpl, "hex")));
  };

  // src/govv3/governance.ts
  var SLOTS2 = {
    PROPOSALS_MAPPING: 7n
  };
  var HUMAN_READABLE_STATE = {
    [ProposalState.Null]: "Null",
    [ProposalState.Created]: "Created",
    [ProposalState.Active]: "Active",
    [ProposalState.Queued]: "Queued",
    [ProposalState.Executed]: "Executed",
    [ProposalState.Failed]: "Failed",
    [ProposalState.Cancelled]: "Cancelled",
    [ProposalState.Expired]: "Expired"
  };
  var getGovernance = ({ address, client }) => {
    const governanceContract = getContract({
      abi: IGovernanceCore_ABI,
      address,
      client
    });
    async function getProposal2(proposalId) {
      return governanceContract.read.getProposal([proposalId]);
    }
    async function getSimulationPayloadForExecution(proposalId) {
      const currentBlock = await getBlock(client);
      const proposalSlot = getSolidityStorageSlotUint(SLOTS2.PROPOSALS_MAPPING, proposalId);
      const data = await getStorageAt(client, {
        address: governanceContract.address,
        slot: proposalSlot
      });
      let proposalSlot1 = fromHex(data, { to: "bigint" });
      proposalSlot1 = setBits(proposalSlot1, 0n, 8n, ProposalState.Queued);
      proposalSlot1 = setBits(
        proposalSlot1,
        16n,
        56n,
        currentBlock.timestamp - await governanceContract.read.PROPOSAL_EXPIRATION_TIME()
      );
      const simulationPayload = {
        network_id: String(client.chain.id),
        from: EOA,
        to: governanceContract.address,
        input: encodeFunctionData({
          abi: IGovernanceCore_ABI,
          functionName: "executeProposal",
          args: [proposalId]
        }),
        // value: parseEther('0.5').toString(),
        block_number: -2,
        state_objects: {
          [governanceContract.address]: {
            storage: {
              [proposalSlot]: toHex(proposalSlot1, { size: 32 })
              // state & time
              // [toHex(fromHex(proposalSlot, { to: 'bigint' }) + 5n)]: toHex(parseUnits('340000000', 18), {
              //   size: 32,
              // }), // votes (not needed as there's no validation for this at this point)
            }
          }
        }
      };
      return simulationPayload;
    }
    return {
      governanceContract,
      getSimulationPayloadForExecution,
      async simulateProposalExecutionOnTenderly(proposalId, { executedLog }) {
        if (executedLog) {
          const tx = await getTransaction(client, {
            hash: executedLog.transactionHash
          });
          return tenderly.simulateTx(client.chain.id, tx);
        }
        const payload = await getSimulationPayloadForExecution(proposalId);
        return tenderly.simulate(payload, client);
      },
      async getVotingProofs(proposalId, voter, votingChainId) {
        const proposal = await getProposal2(proposalId);
        const [stkAaveProof, aaveProof, aAaveProof, representativeProof] = await Promise.all([
          getProof2(
            client,
            AaveSafetyModule_exports.STK_AAVE,
            [getSolidityStorageSlotAddress(VOTING_SLOTS[AaveSafetyModule_exports.STK_AAVE].balance, voter)],
            proposal.snapshotBlockHash
          ),
          getProof2(
            client,
            AaveV3Ethereum_exports.ASSETS.AAVE.UNDERLYING,
            [
              getSolidityStorageSlotAddress(
                VOTING_SLOTS[AaveV3Ethereum_exports.ASSETS.AAVE.UNDERLYING].balance,
                voter
              )
            ],
            proposal.snapshotBlockHash
          ),
          getProof2(
            client,
            AaveV3Ethereum_exports.ASSETS.AAVE.A_TOKEN,
            [
              getSolidityStorageSlotAddress(
                VOTING_SLOTS[AaveV3Ethereum_exports.ASSETS.AAVE.A_TOKEN].balance,
                voter
              ),
              getSolidityStorageSlotAddress(
                VOTING_SLOTS[AaveV3Ethereum_exports.ASSETS.AAVE.A_TOKEN].delegation,
                voter
              )
            ],
            proposal.snapshotBlockHash
          ),
          getProof2(
            client,
            GovernanceV3Ethereum_exports.GOVERNANCE,
            [
              getSolidityStorageSlotBytes(
                getSolidityStorageSlotAddress(
                  VOTING_SLOTS[GovernanceV3Ethereum_exports.GOVERNANCE].representative,
                  voter
                ),
                toHex(votingChainId, { size: 32 })
              )
            ],
            proposal.snapshotBlockHash
          )
        ]);
        return [
          { proof: stkAaveProof, slots: [0n] },
          { proof: aaveProof, slots: [0n] },
          { proof: aAaveProof, slots: [52n, 64n] },
          { proof: representativeProof, slots: [9n] }
        ].flatMap(({ proof, slots }) => {
          return slots.filter((slot, ix) => {
            const shouldSubmitProof = proof.storageProof[ix].value !== 0n;
            if (!shouldSubmitProof)
              logInfo(
                "Proof",
                `Skipping slot ${slot} on ${proof.address} as value is zero for voter ${voter}`
              );
            return shouldSubmitProof;
          }).map((slot, ix) => ({
            underlyingAsset: proof.address,
            slot,
            proof: getAccountRPL(proof.storageProof[ix].proof)
          }));
        });
      },
      async getStorageRoots(proposalId) {
        const proposal = await getProposal2(proposalId);
        const addresses = (0, import_deepmerge.default)(VOTING_SLOTS, WAREHOUSE_SLOTS);
        const proofs = await Promise.all(
          Object.keys(addresses).map(
            (address2) => getProof2(
              client,
              address2,
              Object.keys(addresses[address2]).map(
                (slotKey) => toHex(addresses[address2][slotKey])
              ),
              proposal.snapshotBlockHash
            )
          )
        );
        return proofs;
      }
    };
  };

  // src/govv3/generateProposalReport.ts
  async function generateProposalReport({
    proposalId,
    proposalInfo,
    simulation,
    client,
    formattedPayloads
  }) {
    const {
      proposal,
      logs: { executedLog, queuedLog, createdLog, payloadSentLog, votingActivatedLog },
      ipfs
    } = proposalInfo;
    let report = `## Proposal ${proposalId}

- Simulation: [https://dashboard.tenderly.co/me/simulator/${simulation.simulation.id}](https://dashboard.tenderly.co/me/simulator/${simulation.simulation.id})
- state: ${HUMAN_READABLE_STATE[proposal.state]}
- creator: ${proposal.creator}
- maximumAccessLevelRequired: ${proposal.accessLevel}
- payloads: 
  ${formattedPayloads ? formattedPayloads.map((payload) => `  - ${payload}
`).join() : JSON.stringify(
      proposal.payloads,
      (key, value) => typeof value === "bigint" ? value.toString() : value
    )}
- createdAt: [${renderUnixTime(proposal.creationTime)}](${toTxLink(createdLog.transactionHash, false, client)})
`;
    if (queuedLog) {
      report += `- queuedAt: [${renderUnixTime(proposal.queuingTime)}](${toTxLink(
        queuedLog.transactionHash,
        false,
        client
      )})
`;
    }
    if (executedLog) {
      report += `- executedAt: [${renderUnixTime(executedLog.timestamp)}, timestamp: ${executedLog.timestamp}, block: ${executedLog.blockNumber}](${toTxLink(
        executedLog.transactionHash,
        false,
        client
      )})
`;
    } else {
      const timestamp = Math.floor(new Date(simulation.transaction.timestamp).getTime() / 1e3);
      report += `- simulatedExecutionAt: ${renderUnixTime(
        timestamp
      )}, timestamp: ${timestamp}, block: ${simulation.transaction.block_number}`;
    }
    report += "\n";
    report += `### Ipfs

<details>
  <summary>${ipfs?.title || "problem fetching ipfs metadata"}</summary>
  
  ${ipfs?.description || "problem fetching ipfs metadata"}
</details>

`;
    const checks = [
      checkStateChanges,
      checkLogs,
      checkTouchedContractsVerifiedEtherscan,
      checkTouchedContractsNoSelfdestruct
    ];
    for (const check of checks) {
      const result = await check.checkProposal(proposalInfo, simulation, client);
      report += renderCheckResult(check, result);
    }
    return report;
  }

  // node_modules/@bgd-labs/aave-v3-governance-cache/dist/common/refreshCache.js
  var import_node_module2 = __require("node:module");
  var import_meta2 = {};
  var __defProp2 = Object.defineProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp2(target, name, {
        get: all[name],
        enumerable: true,
        configurable: true,
        set: (newValue) => all[name] = () => newValue
      });
  };
  var __require3 = /* @__PURE__ */ (0, import_node_module2.createRequire)(import_meta2.url);
  var exports_GovernanceV3Ethereum = {};
  __export2(exports_GovernanceV3Ethereum, {
    VOTING_STRATEGY: () => VOTING_STRATEGY5,
    VOTING_PORTAL_ETH_POL: () => VOTING_PORTAL_ETH_POL2,
    VOTING_PORTAL_ETH_ETH: () => VOTING_PORTAL_ETH_ETH2,
    VOTING_PORTAL_ETH_AVAX: () => VOTING_PORTAL_ETH_AVAX2,
    VOTING_MACHINE: () => VOTING_MACHINE5,
    VM_DATA_HELPER: () => VM_DATA_HELPER4,
    PC_DATA_HELPER: () => PC_DATA_HELPER13,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER14,
    META_DELEGATE_HELPER: () => META_DELEGATE_HELPER2,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN12,
    GOV_DATA_HELPER: () => GOV_DATA_HELPER2,
    GOVERNANCE_POWER_STRATEGY: () => GOVERNANCE_POWER_STRATEGY2,
    GOVERNANCE: () => GOVERNANCE2,
    EXECUTOR_LVL_2: () => EXECUTOR_LVL_22,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_114,
    EMERGENCY_REGISTRY: () => EMERGENCY_REGISTRY2,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE5,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER14,
    CHAIN_ID: () => CHAIN_ID64
  });
  var CROSS_CHAIN_CONTROLLER14 = "0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1";
  var GOVERNANCE2 = "0x9AEE0B04504CeF83A65AC3f0e838D0593BCb2BC7";
  var PAYLOADS_CONTROLLER14 = "0xdAbad81aF85554E9ae636395611C58F7eC1aAEc5";
  var VOTING_MACHINE5 = "0x617332a777780F546261247F621051d0b98975Eb";
  var VOTING_PORTAL_ETH_ETH2 = "0xf23f7De3AC42F22eBDA17e64DC4f51FB66b8E21f";
  var VOTING_PORTAL_ETH_AVAX2 = "0x33aCEf7365809218485873B7d0d67FeE411B5D79";
  var VOTING_PORTAL_ETH_POL2 = "0x9b24C168d6A76b5459B1d47071a54962a4df36c3";
  var PC_DATA_HELPER13 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GOV_DATA_HELPER2 = "0x971c82c8316aD611904F95616c21ce90837f1856";
  var VM_DATA_HELPER4 = "0x77976B51569896523EE215962Ee91ff236Fa50E8";
  var META_DELEGATE_HELPER2 = "0x94363B11b37BC3ffe43AB09cff5A010352FE85dC";
  var EMERGENCY_REGISTRY2 = "0x73C6Fb358dDA8e84D50e98A98F7c0dF32e15C7e9";
  var GOVERNANCE_POWER_STRATEGY2 = "0xa198Fac58E02A5C5F8F7e877895d50cFa9ad1E04";
  var GRANULAR_GUARDIAN12 = "0x4457cA11E90f416Cc1D3a8E1cA41C0cdEcC251d4";
  var EXECUTOR_LVL_114 = "0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A";
  var EXECUTOR_LVL_22 = "0x17Dd33Ed0e3dD2a80E37489B8A63063161BE6957";
  var VOTING_STRATEGY5 = "0x5642A5A5Ec284B4145563aBF319620204aCCA7f4";
  var DATA_WAREHOUSE5 = "0x1699FE9CaDC8a0b6c93E06B62Ab4592a0fFEcF61";
  var CHAIN_ID64 = 1;
  var exports_GovernanceV3Arbitrum = {};
  __export2(exports_GovernanceV3Arbitrum, {
    PC_DATA_HELPER: () => PC_DATA_HELPER22,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER22,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN22,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_122,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER22,
    CHAIN_ID: () => CHAIN_ID210
  });
  var CROSS_CHAIN_CONTROLLER22 = "0xCbFB78a3Eeaa611b826E37c80E4126c8787D29f0";
  var PAYLOADS_CONTROLLER22 = "0x89644CA1bB8064760312AE4F03ea41b05dA3637C";
  var PC_DATA_HELPER22 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN22 = "0x4922093c476CfbCF903C7C4082d2D64bAE8A37cE";
  var EXECUTOR_LVL_122 = "0xFF1137243698CaA18EE364Cc966CF0e02A4e6327";
  var CHAIN_ID210 = 42161;
  var exports_GovernanceV3Avalanche = {};
  __export2(exports_GovernanceV3Avalanche, {
    VOTING_STRATEGY: () => VOTING_STRATEGY22,
    VOTING_MACHINE: () => VOTING_MACHINE22,
    VM_DATA_HELPER: () => VM_DATA_HELPER22,
    PC_DATA_HELPER: () => PC_DATA_HELPER32,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER32,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN32,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_132,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE22,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER32,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE5,
    CHAIN_ID: () => CHAIN_ID310
  });
  var CROSS_CHAIN_CONTROLLER32 = "0x27FC7D54C893dA63C0AE6d57e1B2B13A70690928";
  var CL_EMERGENCY_ORACLE5 = "0x41185495Bc8297a65DC46f94001DC7233775EbEe";
  var VOTING_MACHINE22 = "0x9b6f5ef589A3DD08670Dd146C11C4Fb33E04494F";
  var PAYLOADS_CONTROLLER32 = "0x1140CB7CAfAcC745771C2Ea31e7B5C653c5d0B80";
  var PC_DATA_HELPER32 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var VM_DATA_HELPER22 = "0x77976B51569896523EE215962Ee91ff236Fa50E8";
  var GRANULAR_GUARDIAN32 = "0xc1162BCb2E5E3ca4725512008c7522dF8C8B7B65";
  var EXECUTOR_LVL_132 = "0x3C06dce358add17aAf230f2234bCCC4afd50d090";
  var VOTING_STRATEGY22 = "0x690C218668B440204F369Af1541245d367cc805C";
  var DATA_WAREHOUSE22 = "0x9626F9d60CC0B7e1c9a0A47b7f0bd618fb6f40ff";
  var CHAIN_ID310 = 43114;
  var exports_GovernanceV3Optimism = {};
  __export2(exports_GovernanceV3Optimism, {
    PC_DATA_HELPER: () => PC_DATA_HELPER42,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER42,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN42,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_142,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER42,
    CHAIN_ID: () => CHAIN_ID410
  });
  var CROSS_CHAIN_CONTROLLER42 = "0x48A9FE90bce5EEd790f3F4Ce192d1C0B351fd4Ca";
  var PAYLOADS_CONTROLLER42 = "0x0E1a3Af1f9cC76A62eD31eDedca291E63632e7c4";
  var PC_DATA_HELPER42 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN42 = "0x6c5264C380C7022e54f585c4E354ffb6f221a03b";
  var EXECUTOR_LVL_142 = "0x746c675dAB49Bcd5BB9Dc85161f2d7Eb435009bf";
  var CHAIN_ID410 = 10;
  var exports_GovernanceV3Polygon = {};
  __export2(exports_GovernanceV3Polygon, {
    VOTING_STRATEGY: () => VOTING_STRATEGY32,
    VOTING_MACHINE: () => VOTING_MACHINE32,
    VM_DATA_HELPER: () => VM_DATA_HELPER32,
    PC_DATA_HELPER: () => PC_DATA_HELPER52,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER52,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN52,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_152,
    DATA_WAREHOUSE: () => DATA_WAREHOUSE32,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER52,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE22,
    CHAIN_ID: () => CHAIN_ID510
  });
  var CROSS_CHAIN_CONTROLLER52 = "0xF6B99959F0b5e79E1CC7062E12aF632CEb18eF0d";
  var CL_EMERGENCY_ORACLE22 = "0xDAFA1989A504c48Ee20a582f2891eeB25E2fA23F";
  var VOTING_MACHINE32 = "0xc8a2ADC4261c6b669CdFf69E717E77C9cFeB420d";
  var PAYLOADS_CONTROLLER52 = "0x401B5D0294E23637c18fcc38b1Bca814CDa2637C";
  var PC_DATA_HELPER52 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var VM_DATA_HELPER32 = "0x77976B51569896523EE215962Ee91ff236Fa50E8";
  var GRANULAR_GUARDIAN52 = "0x0D2CccD3dD420dC6DE2f24DB44aA22fADE290a02";
  var EXECUTOR_LVL_152 = "0xDf7d0e6454DB638881302729F5ba99936EaAB233";
  var VOTING_STRATEGY32 = "0x59e6CAD5d7E7b9A26a45a1d1E74C7aF008170042";
  var DATA_WAREHOUSE32 = "0xf41193E25408F652AF878c47E4401A01B5E4B682";
  var CHAIN_ID510 = 137;
  var exports_GovernanceV3Metis = {};
  __export2(exports_GovernanceV3Metis, {
    PC_DATA_HELPER: () => PC_DATA_HELPER62,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER62,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN62,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_162,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER62,
    CHAIN_ID: () => CHAIN_ID65
  });
  var CROSS_CHAIN_CONTROLLER62 = "0x6fDaFb26915ABD6065a1E1501a37Ac438D877f70";
  var PAYLOADS_CONTROLLER62 = "0x2233F8A66A728FBa6E1dC95570B25360D07D5524";
  var PC_DATA_HELPER62 = "0x81d32B36380e6266e1BDd490eAC56cdB300afBe0";
  var GRANULAR_GUARDIAN62 = "0x61BE97d3a0550549f67CA7421725fA73Fa2036B5";
  var EXECUTOR_LVL_162 = "0x6fD45D32375d5aDB8D76275A3932c740F03a8718";
  var CHAIN_ID65 = 1088;
  var exports_GovernanceV3Base = {};
  __export2(exports_GovernanceV3Base, {
    PC_DATA_HELPER: () => PC_DATA_HELPER72,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER72,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN72,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_172,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER72,
    CHAIN_ID: () => CHAIN_ID72
  });
  var CROSS_CHAIN_CONTROLLER72 = "0x529467C76f234F2bD359d7ecF7c660A2846b04e2";
  var PAYLOADS_CONTROLLER72 = "0x2DC219E716793fb4b21548C0f009Ba3Af753ab01";
  var PC_DATA_HELPER72 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN72 = "0xa1c6aF35E0205f42256382C05243C543FEDBf4bB";
  var EXECUTOR_LVL_172 = "0x9390B1735def18560c509E2d0bc090E9d6BA257a";
  var CHAIN_ID72 = 8453;
  var exports_GovernanceV3BNB = {};
  __export2(exports_GovernanceV3BNB, {
    PC_DATA_HELPER: () => PC_DATA_HELPER82,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER82,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN82,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_182,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER82,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE32,
    CHAIN_ID: () => CHAIN_ID82
  });
  var CROSS_CHAIN_CONTROLLER82 = "0x9d33ee6543C9b2C8c183b8fb58fB089266cffA19";
  var CL_EMERGENCY_ORACLE32 = "0xcabb46FfB38c93348Df16558DF156e9f68F9F7F1";
  var PAYLOADS_CONTROLLER82 = "0xE5EF2Dd06755A97e975f7E282f828224F2C3e627";
  var PC_DATA_HELPER82 = "0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A";
  var GRANULAR_GUARDIAN82 = "0xe4FB5e3F506BE0095f38004f993D16fdA8224383";
  var EXECUTOR_LVL_182 = "0x9390B1735def18560c509E2d0bc090E9d6BA257a";
  var CHAIN_ID82 = 56;
  var exports_GovernanceV3Gnosis = {};
  __export2(exports_GovernanceV3Gnosis, {
    PC_DATA_HELPER: () => PC_DATA_HELPER92,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER92,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN92,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_192,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER92,
    CL_EMERGENCY_ORACLE: () => CL_EMERGENCY_ORACLE42,
    CHAIN_ID: () => CHAIN_ID92
  });
  var CROSS_CHAIN_CONTROLLER92 = "0x8Dc5310fc9D3D7D1Bb3D1F686899c8F082316c9F";
  var CL_EMERGENCY_ORACLE42 = "0xF937ffAeA1363e4Fa260760bDFA2aA8Fc911F84D";
  var PAYLOADS_CONTROLLER92 = "0x9A1F491B86D09fC1484b5fab10041B189B60756b";
  var PC_DATA_HELPER92 = "0xF1c11BE0b4466728DDb7991A0Ac5265646ec9672";
  var GRANULAR_GUARDIAN92 = "0x4A9F571E3C1f2F13567bb59e38988e74d7d72602";
  var EXECUTOR_LVL_192 = "0x1dF462e2712496373A347f8ad10802a5E95f053D";
  var CHAIN_ID92 = 100;
  var exports_GovernanceV3Scroll = {};
  __export2(exports_GovernanceV3Scroll, {
    PC_DATA_HELPER: () => PC_DATA_HELPER102,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER102,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN102,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_1102,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER102,
    CHAIN_ID: () => CHAIN_ID102
  });
  var CROSS_CHAIN_CONTROLLER102 = "0x03073D3F4769f6b6604d616238fD6c636C99AD0A";
  var PAYLOADS_CONTROLLER102 = "0x6b6B41c0f8C223715f712BE83ceC3c37bbfDC3fE";
  var PC_DATA_HELPER102 = "0xf438e33dCCEE260ee4371F9dceF408b0d7DBe424";
  var GRANULAR_GUARDIAN102 = "0xa835707d28e6C37C49d661742f2Fb5987367cEd4";
  var EXECUTOR_LVL_1102 = "0xc1ABF87FfAdf4908f4eC8dc54A25DCFEabAE4A24";
  var CHAIN_ID102 = 534352;
  var exports_GovernanceV3PolygonZkEvm = {};
  __export2(exports_GovernanceV3PolygonZkEvm, {
    PC_DATA_HELPER: () => PC_DATA_HELPER112,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER112,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_1112,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER112,
    CHAIN_ID: () => CHAIN_ID112
  });
  var CROSS_CHAIN_CONTROLLER112 = "0xed7e0874526B9BB9E36C7e9472ed7ed324CEeE3B";
  var PAYLOADS_CONTROLLER112 = "0xa2d22795E0D85D4Cb14Cbb14Df7bb8fec1016615";
  var PC_DATA_HELPER112 = "0xF1c11BE0b4466728DDb7991A0Ac5265646ec9672";
  var EXECUTOR_LVL_1112 = "0xe59470B3BE3293534603487E00A44C72f2CD466d";
  var CHAIN_ID112 = 1101;
  var exports_GovernanceV3ZkSync = {};
  __export2(exports_GovernanceV3ZkSync, {
    PC_DATA_HELPER: () => PC_DATA_HELPER122,
    PAYLOADS_CONTROLLER: () => PAYLOADS_CONTROLLER122,
    GRANULAR_GUARDIAN: () => GRANULAR_GUARDIAN112,
    GOVERNANCE_GUARDIAN: () => GOVERNANCE_GUARDIAN12,
    EXECUTOR_LVL_1: () => EXECUTOR_LVL_1122,
    CROSS_CHAIN_CONTROLLER: () => CROSS_CHAIN_CONTROLLER122,
    CHAIN_ID: () => CHAIN_ID122
  });
  var CROSS_CHAIN_CONTROLLER122 = "0x800813f4714BC7A0a95310e3fB9e4f18872CA92C";
  var PAYLOADS_CONTROLLER122 = "0x2E79349c3F5e4751E87b966812C9E65E805996F1";
  var PC_DATA_HELPER122 = "0xe28A3235DCF1Acb8397B546bd588bAAFD7081505";
  var GRANULAR_GUARDIAN112 = "0xe0e23196D42b54F262a3DE952e6B34B197D1A228";
  var GOVERNANCE_GUARDIAN12 = "0x4257bf0746D783f0D962913d7d8AFA408B62547E";
  var EXECUTOR_LVL_1122 = "0x04cE39789e11a49595cD0ECEf6f4Bd54ABF4d020";
  var CHAIN_ID122 = 324;
  async function refreshCache(adapter) {
    await adapter.syncProposalCache({
      chainId: 1,
      governance: exports_GovernanceV3Ethereum.GOVERNANCE
    });
    [
      exports_GovernanceV3Ethereum,
      exports_GovernanceV3Arbitrum,
      exports_GovernanceV3Avalanche,
      exports_GovernanceV3Metis,
      exports_GovernanceV3Optimism,
      exports_GovernanceV3Gnosis,
      exports_GovernanceV3BNB,
      exports_GovernanceV3Polygon,
      exports_GovernanceV3PolygonZkEvm,
      exports_GovernanceV3Scroll,
      exports_GovernanceV3Base,
      exports_GovernanceV3ZkSync
    ].map(({ PAYLOADS_CONTROLLER: PAYLOADS_CONTROLLER132, CHAIN_ID: CHAIN_ID132 }) => {
      return adapter.syncPayloadsCache({
        chainId: CHAIN_ID132,
        payloadsController: PAYLOADS_CONTROLLER132
      });
    });
  }

  // node_modules/@bgd-labs/aave-v3-governance-cache/dist/providers/customStorageProvider.js
  var import_node_module3 = __require("node:module");
  var import_meta3 = {};
  var __require4 = /* @__PURE__ */ (0, import_node_module3.createRequire)(import_meta3.url);
  var customStorageProvider = (adapter) => ({
    async getPayload(args) {
      try {
        const cache = await adapter.getPayload(args);
        return cache;
      } catch (e) {
        await adapter.syncPayloadsCache(args);
        return await adapter.getPayload(args);
      }
    },
    async getProposal(args) {
      try {
        const cache = await adapter.getProposal(args);
        return cache;
      } catch (e) {
        await adapter.syncProposalCache(args);
        return await adapter.getProposal(args);
      }
    },
    syncPayloadsCache(args) {
      return adapter.syncPayloadsCache(args);
    },
    syncProposalCache(args) {
      return adapter.syncProposalCache(args);
    }
  });

  // node_modules/@bgd-labs/aave-v3-governance-cache/dist/providers/storage/fileSystem.js
  var import_node_module4 = __require("node:module");
  var import_fs3 = __require("fs");
  var import_path = __toESM(__require("path"), 1);
  var import_meta4 = {};
  var __create2 = Object.create;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __defProp3 = Object.defineProperty;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __toESM2 = (mod2, isNodeMode, target) => {
    target = mod2 != null ? __create2(__getProtoOf2(mod2)) : {};
    const to = isNodeMode || !mod2 || !mod2.__esModule ? __defProp3(target, "default", { value: mod2, enumerable: true }) : target;
    for (let key of __getOwnPropNames2(mod2))
      if (!__hasOwnProp2.call(to, key))
        __defProp3(to, key, {
          get: () => mod2[key],
          enumerable: true
        });
    return to;
  };
  var __commonJS2 = (cb, mod2) => () => (mod2 || cb((mod2 = { exports: {} }).exports, mod2), mod2.exports);
  var __export3 = (target, all) => {
    for (var name in all)
      __defProp3(target, name, {
        get: all[name],
        enumerable: true,
        configurable: true,
        set: (newValue) => all[name] = () => newValue
      });
  };
  var __esm2 = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
  var __require5 = /* @__PURE__ */ (0, import_node_module4.createRequire)(import_meta4.url);
  function execTyped2(regex, string) {
    const match = regex.exec(string);
    return match?.groups;
  }
  var init_regex2 = () => {
  };
  function formatAbiParameter2(abiParameter) {
    let type = abiParameter.type;
    if (tupleRegex2.test(abiParameter.type) && "components" in abiParameter) {
      type = "(";
      const length = abiParameter.components.length;
      for (let i = 0; i < length; i++) {
        const component = abiParameter.components[i];
        type += formatAbiParameter2(component);
        if (i < length - 1)
          type += ", ";
      }
      const result = execTyped2(tupleRegex2, abiParameter.type);
      type += `)${result?.array ?? ""}`;
      return formatAbiParameter2({
        ...abiParameter,
        type
      });
    }
    if ("indexed" in abiParameter && abiParameter.indexed)
      type = `${type} indexed`;
    if (abiParameter.name)
      return `${type} ${abiParameter.name}`;
    return type;
  }
  var tupleRegex2;
  var init_formatAbiParameter2 = __esm2(() => {
    init_regex2();
    tupleRegex2 = /^tuple(?<array>(\[(\d*)\])*)$/;
  });
  function formatAbiParameters2(abiParameters) {
    let params = "";
    const length = abiParameters.length;
    for (let i = 0; i < length; i++) {
      const abiParameter = abiParameters[i];
      params += formatAbiParameter2(abiParameter);
      if (i !== length - 1)
        params += ", ";
    }
    return params;
  }
  var init_formatAbiParameters2 = __esm2(() => {
    init_formatAbiParameter2();
  });
  function formatAbiItem3(abiItem) {
    if (abiItem.type === "function")
      return `function ${abiItem.name}(${formatAbiParameters2(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== "nonpayable" ? ` ${abiItem.stateMutability}` : ""}${abiItem.outputs.length ? ` returns (${formatAbiParameters2(abiItem.outputs)})` : ""}`;
    else if (abiItem.type === "event")
      return `event ${abiItem.name}(${formatAbiParameters2(abiItem.inputs)})`;
    else if (abiItem.type === "error")
      return `error ${abiItem.name}(${formatAbiParameters2(abiItem.inputs)})`;
    else if (abiItem.type === "constructor")
      return `constructor(${formatAbiParameters2(abiItem.inputs)})${abiItem.stateMutability === "payable" ? " payable" : ""}`;
    else if (abiItem.type === "fallback")
      return "fallback()";
    return "receive() external payable";
  }
  var init_formatAbiItem3 = __esm2(() => {
    init_formatAbiParameters2();
  });
  var init_exports2 = __esm2(() => {
    init_formatAbiItem3();
  });
  function formatAbiItem22(abiItem, { includeName = false } = {}) {
    if (abiItem.type !== "function" && abiItem.type !== "event" && abiItem.type !== "error")
      throw new InvalidDefinitionTypeError2(abiItem.type);
    return `${abiItem.name}(${formatAbiParams2(abiItem.inputs, { includeName })})`;
  }
  function formatAbiParams2(params, { includeName = false } = {}) {
    if (!params)
      return "";
    return params.map((param) => formatAbiParam2(param, { includeName })).join(includeName ? ", " : ",");
  }
  function formatAbiParam2(param, { includeName }) {
    if (param.type.startsWith("tuple")) {
      return `(${formatAbiParams2(param.components, { includeName })})${param.type.slice("tuple".length)}`;
    }
    return param.type + (includeName && param.name ? ` ${param.name}` : "");
  }
  var init_formatAbiItem22 = __esm2(() => {
    init_abi2();
  });
  function isHex3(value, { strict = true } = {}) {
    if (!value)
      return false;
    if (typeof value !== "string")
      return false;
    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith("0x");
  }
  function size4(value) {
    if (isHex3(value, { strict: false }))
      return Math.ceil((value.length - 2) / 2);
    return value.length;
  }
  var init_size2 = () => {
  };
  var version4 = "2.9.20";
  var getContractAddress3 = (address) => address;
  var getUrl2 = (url) => url;
  var getVersion = () => `viem@${version4}`;
  var init_utils5 = () => {
  };
  function walk3(err, fn) {
    if (fn?.(err))
      return err;
    if (err && typeof err === "object" && "cause" in err)
      return walk3(err.cause, fn);
    return fn ? null : err;
  }
  var BaseError4;
  var init_base2 = __esm2(() => {
    init_utils5();
    BaseError4 = class BaseError5 extends Error {
      constructor(shortMessage, args = {}) {
        super();
        Object.defineProperty(this, "details", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "docsPath", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "metaMessages", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "shortMessage", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ViemError"
        });
        Object.defineProperty(this, "version", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: getVersion()
        });
        const details = args.cause instanceof BaseError5 ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath7 = args.cause instanceof BaseError5 ? args.cause.docsPath || args.docsPath : args.docsPath;
        this.message = [
          shortMessage || "An error occurred.",
          "",
          ...args.metaMessages ? [...args.metaMessages, ""] : [],
          ...docsPath7 ? [
            `Docs: https://viem.sh${docsPath7}${args.docsSlug ? `#${args.docsSlug}` : ""}`
          ] : [],
          ...details ? [`Details: ${details}`] : [],
          `Version: ${this.version}`
        ].join("\n");
        if (args.cause)
          this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath7;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
      }
      walk(fn) {
        return walk3(this, fn);
      }
    };
  });
  var AbiDecodingDataSizeTooSmallError2;
  var AbiDecodingZeroDataError2;
  var AbiEncodingArrayLengthMismatchError2;
  var AbiEncodingBytesSizeMismatchError2;
  var AbiEncodingLengthMismatchError2;
  var AbiErrorSignatureNotFoundError2;
  var AbiEventSignatureEmptyTopicsError2;
  var AbiEventSignatureNotFoundError2;
  var AbiEventNotFoundError2;
  var AbiFunctionNotFoundError2;
  var AbiFunctionOutputsNotFoundError2;
  var AbiItemAmbiguityError2;
  var DecodeLogDataMismatch2;
  var DecodeLogTopicsMismatch2;
  var InvalidAbiEncodingTypeError2;
  var InvalidAbiDecodingTypeError2;
  var InvalidArrayError2;
  var InvalidDefinitionTypeError2;
  var init_abi2 = __esm2(() => {
    init_formatAbiItem22();
    init_size2();
    init_base2();
    AbiDecodingDataSizeTooSmallError2 = class AbiDecodingDataSizeTooSmallError extends BaseError4 {
      constructor({ data, params, size: size22 }) {
        super([`Data size of ${size22} bytes is too small for given parameters.`].join("\n"), {
          metaMessages: [
            `Params: (${formatAbiParams2(params, { includeName: true })})`,
            `Data:   ${data} (${size22} bytes)`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiDecodingDataSizeTooSmallError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = data;
        this.params = params;
        this.size = size22;
      }
    };
    AbiDecodingZeroDataError2 = class AbiDecodingZeroDataError extends BaseError4 {
      constructor() {
        super('Cannot decode zero data ("0x") with ABI parameters.');
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiDecodingZeroDataError"
        });
      }
    };
    AbiEncodingArrayLengthMismatchError2 = class AbiEncodingArrayLengthMismatchError extends BaseError4 {
      constructor({ expectedLength, givenLength, type }) {
        super([
          `ABI encoding array length mismatch for type ${type}.`,
          `Expected length: ${expectedLength}`,
          `Given length: ${givenLength}`
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEncodingArrayLengthMismatchError"
        });
      }
    };
    AbiEncodingBytesSizeMismatchError2 = class AbiEncodingBytesSizeMismatchError extends BaseError4 {
      constructor({ expectedSize, value }) {
        super(`Size of bytes "${value}" (bytes${size4(value)}) does not match expected size (bytes${expectedSize}).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEncodingBytesSizeMismatchError"
        });
      }
    };
    AbiEncodingLengthMismatchError2 = class AbiEncodingLengthMismatchError extends BaseError4 {
      constructor({ expectedLength, givenLength }) {
        super([
          "ABI encoding params/values length mismatch.",
          `Expected length (params): ${expectedLength}`,
          `Given length (values): ${givenLength}`
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEncodingLengthMismatchError"
        });
      }
    };
    AbiErrorSignatureNotFoundError2 = class AbiErrorSignatureNotFoundError extends BaseError4 {
      constructor(signature, { docsPath: docsPath7 }) {
        super([
          `Encoded error signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the error exists on it.",
          `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath: docsPath7
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiErrorSignatureNotFoundError"
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.signature = signature;
      }
    };
    AbiEventSignatureEmptyTopicsError2 = class AbiEventSignatureEmptyTopicsError extends BaseError4 {
      constructor({ docsPath: docsPath7 }) {
        super("Cannot extract event signature from empty topics.", {
          docsPath: docsPath7
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEventSignatureEmptyTopicsError"
        });
      }
    };
    AbiEventSignatureNotFoundError2 = class AbiEventSignatureNotFoundError extends BaseError4 {
      constructor(signature, { docsPath: docsPath7 }) {
        super([
          `Encoded event signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the event exists on it.",
          `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath: docsPath7
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEventSignatureNotFoundError"
        });
      }
    };
    AbiEventNotFoundError2 = class AbiEventNotFoundError extends BaseError4 {
      constructor(eventName, { docsPath: docsPath7 } = {}) {
        super([
          `Event ${eventName ? `"${eventName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the event exists on it."
        ].join("\n"), {
          docsPath: docsPath7
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEventNotFoundError"
        });
      }
    };
    AbiFunctionNotFoundError2 = class AbiFunctionNotFoundError extends BaseError4 {
      constructor(functionName, { docsPath: docsPath7 } = {}) {
        super([
          `Function ${functionName ? `"${functionName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
          docsPath: docsPath7
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiFunctionNotFoundError"
        });
      }
    };
    AbiFunctionOutputsNotFoundError2 = class AbiFunctionOutputsNotFoundError extends BaseError4 {
      constructor(functionName, { docsPath: docsPath7 }) {
        super([
          `Function "${functionName}" does not contain any \`outputs\` on ABI.`,
          "Cannot decode function result without knowing what the parameter types are.",
          "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
          docsPath: docsPath7
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiFunctionOutputsNotFoundError"
        });
      }
    };
    AbiItemAmbiguityError2 = class AbiItemAmbiguityError extends BaseError4 {
      constructor(x, y) {
        super("Found ambiguous types in overloaded ABI items.", {
          metaMessages: [
            `\`${x.type}\` in \`${formatAbiItem22(x.abiItem)}\`, and`,
            `\`${y.type}\` in \`${formatAbiItem22(y.abiItem)}\``,
            "",
            "These types encode differently and cannot be distinguished at runtime.",
            "Remove one of the ambiguous items in the ABI."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiItemAmbiguityError"
        });
      }
    };
    DecodeLogDataMismatch2 = class DecodeLogDataMismatch extends BaseError4 {
      constructor({ abiItem, data, params, size: size22 }) {
        super([
          `Data size of ${size22} bytes is too small for non-indexed event parameters.`
        ].join("\n"), {
          metaMessages: [
            `Params: (${formatAbiParams2(params, { includeName: true })})`,
            `Data:   ${data} (${size22} bytes)`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "DecodeLogDataMismatch"
        });
        Object.defineProperty(this, "abiItem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abiItem = abiItem;
        this.data = data;
        this.params = params;
        this.size = size22;
      }
    };
    DecodeLogTopicsMismatch2 = class DecodeLogTopicsMismatch extends BaseError4 {
      constructor({ abiItem, param }) {
        super([
          `Expected a topic for indexed event parameter${param.name ? ` "${param.name}"` : ""} on event "${formatAbiItem22(abiItem, { includeName: true })}".`
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "DecodeLogTopicsMismatch"
        });
        Object.defineProperty(this, "abiItem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abiItem = abiItem;
      }
    };
    InvalidAbiEncodingTypeError2 = class InvalidAbiEncodingTypeError extends BaseError4 {
      constructor(type, { docsPath: docsPath7 }) {
        super([
          `Type "${type}" is not a valid encoding type.`,
          "Please provide a valid ABI type."
        ].join("\n"), { docsPath: docsPath7 });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiEncodingType"
        });
      }
    };
    InvalidAbiDecodingTypeError2 = class InvalidAbiDecodingTypeError extends BaseError4 {
      constructor(type, { docsPath: docsPath7 }) {
        super([
          `Type "${type}" is not a valid decoding type.`,
          "Please provide a valid ABI type."
        ].join("\n"), { docsPath: docsPath7 });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiDecodingType"
        });
      }
    };
    InvalidArrayError2 = class InvalidArrayError extends BaseError4 {
      constructor(value) {
        super([`Value "${value}" is not a valid array.`].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidArrayError"
        });
      }
    };
    InvalidDefinitionTypeError2 = class InvalidDefinitionTypeError extends BaseError4 {
      constructor(type) {
        super([
          `"${type}" is not a valid definition type.`,
          'Valid types: "function", "event", "error"'
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidDefinitionTypeError"
        });
      }
    };
  });
  var SliceOffsetOutOfBoundsError3;
  var SizeExceedsPaddingSizeError3;
  var InvalidBytesLengthError2;
  var init_data2 = __esm2(() => {
    init_base2();
    SliceOffsetOutOfBoundsError3 = class SliceOffsetOutOfBoundsError extends BaseError4 {
      constructor({ offset, position, size: size22 }) {
        super(`Slice ${position === "start" ? "starting" : "ending"} at offset "${offset}" is out-of-bounds (size: ${size22}).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SliceOffsetOutOfBoundsError"
        });
      }
    };
    SizeExceedsPaddingSizeError3 = class SizeExceedsPaddingSizeError extends BaseError4 {
      constructor({ size: size22, targetSize, type }) {
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size22}) exceeds padding size (${targetSize}).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SizeExceedsPaddingSizeError"
        });
      }
    };
    InvalidBytesLengthError2 = class InvalidBytesLengthError extends BaseError4 {
      constructor({ size: size22, targetSize, type }) {
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size22} ${type} long.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidBytesLengthError"
        });
      }
    };
  });
  function pad3(hexOrBytes, { dir, size: size22 = 32 } = {}) {
    if (typeof hexOrBytes === "string")
      return padHex3(hexOrBytes, { dir, size: size22 });
    return padBytes3(hexOrBytes, { dir, size: size22 });
  }
  function padHex3(hex_, { dir, size: size22 = 32 } = {}) {
    if (size22 === null)
      return hex_;
    const hex = hex_.replace("0x", "");
    if (hex.length > size22 * 2)
      throw new SizeExceedsPaddingSizeError3({
        size: Math.ceil(hex.length / 2),
        targetSize: size22,
        type: "hex"
      });
    return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size22 * 2, "0")}`;
  }
  function padBytes3(bytes4, { dir, size: size22 = 32 } = {}) {
    if (size22 === null)
      return bytes4;
    if (bytes4.length > size22)
      throw new SizeExceedsPaddingSizeError3({
        size: bytes4.length,
        targetSize: size22,
        type: "bytes"
      });
    const paddedBytes = new Uint8Array(size22);
    for (let i = 0; i < size22; i++) {
      const padEnd = dir === "right";
      paddedBytes[padEnd ? i : size22 - i - 1] = bytes4[padEnd ? i : bytes4.length - i - 1];
    }
    return paddedBytes;
  }
  var init_pad2 = __esm2(() => {
    init_data2();
  });
  var IntegerOutOfRangeError3;
  var InvalidBytesBooleanError2;
  var SizeOverflowError3;
  var init_encoding2 = __esm2(() => {
    init_base2();
    IntegerOutOfRangeError3 = class IntegerOutOfRangeError extends BaseError4 {
      constructor({ max, min, signed, size: size22, value }) {
        super(`Number "${value}" is not in safe ${size22 ? `${size22 * 8}-bit ${signed ? "signed" : "unsigned"} ` : ""}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "IntegerOutOfRangeError"
        });
      }
    };
    InvalidBytesBooleanError2 = class InvalidBytesBooleanError extends BaseError4 {
      constructor(bytes4) {
        super(`Bytes value "${bytes4}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidBytesBooleanError"
        });
      }
    };
    SizeOverflowError3 = class SizeOverflowError extends BaseError4 {
      constructor({ givenSize, maxSize }) {
        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SizeOverflowError"
        });
      }
    };
  });
  function trim3(hexOrBytes, { dir = "left" } = {}) {
    let data = typeof hexOrBytes === "string" ? hexOrBytes.replace("0x", "") : hexOrBytes;
    let sliceLength = 0;
    for (let i = 0; i < data.length - 1; i++) {
      if (data[dir === "left" ? i : data.length - i - 1].toString() === "0")
        sliceLength++;
      else
        break;
    }
    data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
    if (typeof hexOrBytes === "string") {
      if (data.length === 1 && dir === "right")
        data = `${data}0`;
      return `0x${data.length % 2 === 1 ? `0${data}` : data}`;
    }
    return data;
  }
  function assertSize3(hexOrBytes, { size: size22 }) {
    if (size4(hexOrBytes) > size22)
      throw new SizeOverflowError3({
        givenSize: size4(hexOrBytes),
        maxSize: size22
      });
  }
  function hexToBigInt3(hex, opts = {}) {
    const { signed } = opts;
    if (opts.size)
      assertSize3(hex, { size: opts.size });
    const value = BigInt(hex);
    if (!signed)
      return value;
    const size22 = (hex.length - 2) / 2;
    const max = (1n << BigInt(size22) * 8n - 1n) - 1n;
    if (value <= max)
      return value;
    return value - BigInt(`0x${"f".padStart(size22 * 2, "f")}`) - 1n;
  }
  function hexToNumber4(hex, opts = {}) {
    return Number(hexToBigInt3(hex, opts));
  }
  var init_fromHex2 = __esm2(() => {
    init_encoding2();
    init_size2();
  });
  function toHex3(value, opts = {}) {
    if (typeof value === "number" || typeof value === "bigint")
      return numberToHex3(value, opts);
    if (typeof value === "string") {
      return stringToHex3(value, opts);
    }
    if (typeof value === "boolean")
      return boolToHex3(value, opts);
    return bytesToHex4(value, opts);
  }
  function boolToHex3(value, opts = {}) {
    const hex = `0x${Number(value)}`;
    if (typeof opts.size === "number") {
      assertSize3(hex, { size: opts.size });
      return pad3(hex, { size: opts.size });
    }
    return hex;
  }
  function bytesToHex4(value, opts = {}) {
    let string = "";
    for (let i = 0; i < value.length; i++) {
      string += hexes4[value[i]];
    }
    const hex = `0x${string}`;
    if (typeof opts.size === "number") {
      assertSize3(hex, { size: opts.size });
      return pad3(hex, { dir: "right", size: opts.size });
    }
    return hex;
  }
  function numberToHex3(value_, opts = {}) {
    const { signed, size: size22 } = opts;
    const value = BigInt(value_);
    let maxValue;
    if (size22) {
      if (signed)
        maxValue = (1n << BigInt(size22) * 8n - 1n) - 1n;
      else
        maxValue = 2n ** (BigInt(size22) * 8n) - 1n;
    } else if (typeof value_ === "number") {
      maxValue = BigInt(Number.MAX_SAFE_INTEGER);
    }
    const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
    if (maxValue && value > maxValue || value < minValue) {
      const suffix = typeof value_ === "bigint" ? "n" : "";
      throw new IntegerOutOfRangeError3({
        max: maxValue ? `${maxValue}${suffix}` : void 0,
        min: `${minValue}${suffix}`,
        signed,
        size: size22,
        value: `${value_}${suffix}`
      });
    }
    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size22 * 8)) + BigInt(value) : value).toString(16)}`;
    if (size22)
      return pad3(hex, { size: size22 });
    return hex;
  }
  function stringToHex3(value_, opts = {}) {
    const value = encoder4.encode(value_);
    return bytesToHex4(value, opts);
  }
  var hexes4;
  var encoder4;
  var init_toHex2 = __esm2(() => {
    init_encoding2();
    init_pad2();
    init_fromHex2();
    hexes4 = /* @__PURE__ */ Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
    encoder4 = /* @__PURE__ */ new TextEncoder();
  });
  function toBytes4(value, opts = {}) {
    if (typeof value === "number" || typeof value === "bigint")
      return numberToBytes3(value, opts);
    if (typeof value === "boolean")
      return boolToBytes3(value, opts);
    if (isHex3(value))
      return hexToBytes4(value, opts);
    return stringToBytes3(value, opts);
  }
  function boolToBytes3(value, opts = {}) {
    const bytes4 = new Uint8Array(1);
    bytes4[0] = Number(value);
    if (typeof opts.size === "number") {
      assertSize3(bytes4, { size: opts.size });
      return pad3(bytes4, { size: opts.size });
    }
    return bytes4;
  }
  function charCodeToBase163(char) {
    if (char >= charCodeMap3.zero && char <= charCodeMap3.nine)
      return char - charCodeMap3.zero;
    if (char >= charCodeMap3.A && char <= charCodeMap3.F)
      return char - (charCodeMap3.A - 10);
    if (char >= charCodeMap3.a && char <= charCodeMap3.f)
      return char - (charCodeMap3.a - 10);
    return;
  }
  function hexToBytes4(hex_, opts = {}) {
    let hex = hex_;
    if (opts.size) {
      assertSize3(hex, { size: opts.size });
      hex = pad3(hex, { dir: "right", size: opts.size });
    }
    let hexString = hex.slice(2);
    if (hexString.length % 2)
      hexString = `0${hexString}`;
    const length = hexString.length / 2;
    const bytes4 = new Uint8Array(length);
    for (let index2 = 0, j = 0; index2 < length; index2++) {
      const nibbleLeft = charCodeToBase163(hexString.charCodeAt(j++));
      const nibbleRight = charCodeToBase163(hexString.charCodeAt(j++));
      if (nibbleLeft === void 0 || nibbleRight === void 0) {
        throw new BaseError4(`Invalid byte sequence ("${hexString[j - 2]}${hexString[j - 1]}" in "${hexString}").`);
      }
      bytes4[index2] = nibbleLeft * 16 + nibbleRight;
    }
    return bytes4;
  }
  function numberToBytes3(value, opts) {
    const hex = numberToHex3(value, opts);
    return hexToBytes4(hex);
  }
  function stringToBytes3(value, opts = {}) {
    const bytes4 = encoder23.encode(value);
    if (typeof opts.size === "number") {
      assertSize3(bytes4, { size: opts.size });
      return pad3(bytes4, { dir: "right", size: opts.size });
    }
    return bytes4;
  }
  var encoder23;
  var charCodeMap3;
  var init_toBytes2 = __esm2(() => {
    init_base2();
    init_pad2();
    init_fromHex2();
    init_toHex2();
    encoder23 = /* @__PURE__ */ new TextEncoder();
    charCodeMap3 = {
      zero: 48,
      nine: 57,
      A: 65,
      F: 70,
      a: 97,
      f: 102
    };
  });
  function number3(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`Wrong positive integer: ${n}`);
  }
  function bytes3(b, ...lengths) {
    if (!(b instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
  }
  function exists3(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output3(out, instance) {
    bytes3(out);
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }
  var init__assert = () => {
  };
  function fromBig3(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK643), l: Number(n >> _32n3 & U32_MASK643) };
    return { h: Number(n >> _32n3 & U32_MASK643) | 0, l: Number(n & U32_MASK643) | 0 };
  }
  function split3(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l } = fromBig3(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  var U32_MASK643;
  var _32n3;
  var rotlSH3 = (h, l, s) => h << s | l >>> 32 - s;
  var rotlSL3 = (h, l, s) => l << s | h >>> 32 - s;
  var rotlBH3 = (h, l, s) => l << s - 32 | h >>> 64 - s;
  var rotlBL3 = (h, l, s) => h << s - 32 | l >>> 64 - s;
  var init__u64 = __esm2(() => {
    U32_MASK643 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    _32n3 = /* @__PURE__ */ BigInt(32);
  });
  function utf8ToBytes4(str2) {
    if (typeof str2 !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
    return new Uint8Array(new TextEncoder().encode(str2));
  }
  function toBytes23(data) {
    if (typeof data === "string")
      data = utf8ToBytes4(data);
    if (!u8a(data))
      throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
  }
  function wrapConstructor3(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes23(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapXOFConstructorWithOpts2(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes23(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  var Hash3 = class {
    clone() {
      return this._cloneInto();
    }
  };
  var u8a = (a) => a instanceof Uint8Array;
  var u323 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  var createView3 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  var rotr3 = (word, shift) => word << 32 - shift | word >>> shift;
  var isLE3;
  var toStr2;
  var init_utils22 = __esm2(() => {
    isLE3 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!isLE3)
      throw new Error("Non little-endian hardware is not supported");
    toStr2 = {}.toString;
  });
  function keccakP3(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH3(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL3(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL3[t];
        const Th = rotlH3(curH, curL, shift);
        const Tl = rotlL3(curH, curL, shift);
        const PI = SHA3_PI3[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H3[round];
      s[1] ^= SHA3_IOTA_L3[round];
    }
    B.fill(0);
  }
  var SHA3_PI3;
  var SHA3_ROTL3;
  var _SHA3_IOTA3;
  var _0n8;
  var _1n8;
  var _2n7;
  var _7n3;
  var _256n3;
  var _0x71n3;
  var SHA3_IOTA_H3;
  var SHA3_IOTA_L3;
  var rotlH3 = (h, l, s) => s > 32 ? rotlBH3(h, l, s) : rotlSH3(h, l, s);
  var rotlL3 = (h, l, s) => s > 32 ? rotlBL3(h, l, s) : rotlSL3(h, l, s);
  var Keccak3;
  var gen3 = (suffix, blockLen, outputLen) => wrapConstructor3(() => new Keccak3(blockLen, suffix, outputLen));
  var sha3_2242;
  var sha3_2562;
  var sha3_3842;
  var sha3_5122;
  var keccak_2242;
  var keccak_2563;
  var keccak_3842;
  var keccak_5122;
  var genShake2 = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts2((opts = {}) => new Keccak3(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  var shake1282;
  var shake2562;
  var init_sha32 = __esm2(() => {
    init__assert();
    init__u64();
    init_utils22();
    [SHA3_PI3, SHA3_ROTL3, _SHA3_IOTA3] = [[], [], []];
    _0n8 = /* @__PURE__ */ BigInt(0);
    _1n8 = /* @__PURE__ */ BigInt(1);
    _2n7 = /* @__PURE__ */ BigInt(2);
    _7n3 = /* @__PURE__ */ BigInt(7);
    _256n3 = /* @__PURE__ */ BigInt(256);
    _0x71n3 = /* @__PURE__ */ BigInt(113);
    for (let round = 0, R = _1n8, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI3.push(2 * (5 * y + x));
      SHA3_ROTL3.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n8;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n8 ^ (R >> _7n3) * _0x71n3) % _256n3;
        if (R & _2n7)
          t ^= _1n8 << (_1n8 << /* @__PURE__ */ BigInt(j)) - _1n8;
      }
      _SHA3_IOTA3.push(t);
    }
    [SHA3_IOTA_H3, SHA3_IOTA_L3] = /* @__PURE__ */ split3(_SHA3_IOTA3, true);
    Keccak3 = class Keccak4 extends Hash3 {
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        number3(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = u323(this.state);
      }
      keccak() {
        keccakP3(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        exists3(this);
        const { blockLen, state } = this;
        data = toBytes23(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        exists3(this, false);
        bytes3(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes22) {
        number3(bytes22);
        return this.xofInto(new Uint8Array(bytes22));
      }
      digestInto(out) {
        output3(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak4(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    sha3_2242 = /* @__PURE__ */ gen3(6, 144, 224 / 8);
    sha3_2562 = /* @__PURE__ */ gen3(6, 136, 256 / 8);
    sha3_3842 = /* @__PURE__ */ gen3(6, 104, 384 / 8);
    sha3_5122 = /* @__PURE__ */ gen3(6, 72, 512 / 8);
    keccak_2242 = /* @__PURE__ */ gen3(1, 144, 224 / 8);
    keccak_2563 = /* @__PURE__ */ gen3(1, 136, 256 / 8);
    keccak_3842 = /* @__PURE__ */ gen3(1, 104, 384 / 8);
    keccak_5122 = /* @__PURE__ */ gen3(1, 72, 512 / 8);
    shake1282 = /* @__PURE__ */ genShake2(31, 168, 128 / 8);
    shake2562 = /* @__PURE__ */ genShake2(31, 136, 256 / 8);
  });
  function keccak2563(value, to_) {
    const to = to_ || "hex";
    const bytes22 = keccak_2563(isHex3(value, { strict: false }) ? toBytes4(value) : value);
    if (to === "bytes")
      return bytes22;
    return toHex3(bytes22);
  }
  var init_keccak2562 = __esm2(() => {
    init_sha32();
    init_toBytes2();
    init_toHex2();
  });
  function hashSignature2(sig) {
    return hash3(sig);
  }
  var hash3 = (value) => keccak2563(toBytes4(value));
  var init_hashSignature2 = __esm2(() => {
    init_toBytes2();
    init_keccak2562();
  });
  function normalizeSignature2(signature) {
    let active = true;
    let current = "";
    let level = 0;
    let result = "";
    let valid = false;
    for (let i = 0; i < signature.length; i++) {
      const char = signature[i];
      if (["(", ")", ","].includes(char))
        active = true;
      if (char === "(")
        level++;
      if (char === ")")
        level--;
      if (!active)
        continue;
      if (level === 0) {
        if (char === " " && ["event", "function", ""].includes(result))
          result = "";
        else {
          result += char;
          if (char === ")") {
            valid = true;
            break;
          }
        }
        continue;
      }
      if (char === " ") {
        if (signature[i - 1] !== "," && current !== "," && current !== ",(") {
          current = "";
          active = false;
        }
        continue;
      }
      result += char;
      current += char;
    }
    if (!valid)
      throw new BaseError4("Unable to normalize signature.");
    return result;
  }
  var init_normalizeSignature2 = __esm2(() => {
    init_base2();
  });
  var toSignature2 = (def) => {
    const def_ = (() => {
      if (typeof def === "string")
        return def;
      return formatAbiItem3(def);
    })();
    return normalizeSignature2(def_);
  };
  var init_toSignature2 = __esm2(() => {
    init_exports2();
    init_normalizeSignature2();
  });
  function toSignatureHash2(fn) {
    return hashSignature2(toSignature2(fn));
  }
  var init_toSignatureHash2 = __esm2(() => {
    init_hashSignature2();
    init_toSignature2();
  });
  var toEventSelector2;
  var init_toEventSelector2 = __esm2(() => {
    init_toSignatureHash2();
    toEventSelector2 = toSignatureHash2;
  });
  var InvalidAddressError3;
  var init_address2 = __esm2(() => {
    init_base2();
    InvalidAddressError3 = class InvalidAddressError extends BaseError4 {
      constructor({ address }) {
        super(`Address "${address}" is invalid.`, {
          metaMessages: [
            "- Address must be a hex value of 20 bytes (40 hex characters).",
            "- Address must match its checksum counterpart."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAddressError"
        });
      }
    };
  });
  var LruMap3;
  var init_lru2 = __esm2(() => {
    LruMap3 = class LruMap extends Map {
      constructor(size22) {
        super();
        Object.defineProperty(this, "maxSize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.maxSize = size22;
      }
      set(key, value) {
        super.set(key, value);
        if (this.maxSize && this.size > this.maxSize)
          this.delete(this.keys().next().value);
        return this;
      }
    };
  });
  function checksumAddress3(address_, chainId) {
    const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();
    const hash22 = keccak2563(stringToBytes3(hexAddress), "bytes");
    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split("");
    for (let i = 0; i < 40; i += 2) {
      if (hash22[i >> 1] >> 4 >= 8 && address[i]) {
        address[i] = address[i].toUpperCase();
      }
      if ((hash22[i >> 1] & 15) >= 8 && address[i + 1]) {
        address[i + 1] = address[i + 1].toUpperCase();
      }
    }
    return `0x${address.join("")}`;
  }
  var init_getAddress2 = __esm2(() => {
    init_toBytes2();
    init_keccak2562();
  });
  function isAddress3(address, options2) {
    const { strict = true } = options2 ?? {};
    if (isAddressCache3.has(address))
      return isAddressCache3.get(address);
    const result = (() => {
      if (!addressRegex3.test(address))
        return false;
      if (address.toLowerCase() === address)
        return true;
      if (strict)
        return checksumAddress3(address) === address;
      return true;
    })();
    isAddressCache3.set(address, result);
    return result;
  }
  var addressRegex3;
  var isAddressCache3;
  var init_isAddress2 = __esm2(() => {
    init_lru2();
    init_getAddress2();
    addressRegex3 = /^0x[a-fA-F0-9]{40}$/;
    isAddressCache3 = /* @__PURE__ */ new LruMap3(8192);
  });
  function concat2(values) {
    if (typeof values[0] === "string")
      return concatHex3(values);
    return concatBytes4(values);
  }
  function concatBytes4(values) {
    let length = 0;
    for (const arr of values) {
      length += arr.length;
    }
    const result = new Uint8Array(length);
    let offset = 0;
    for (const arr of values) {
      result.set(arr, offset);
      offset += arr.length;
    }
    return result;
  }
  function concatHex3(values) {
    return `0x${values.reduce((acc, x) => acc + x.replace("0x", ""), "")}`;
  }
  function slice3(value, start, end, { strict } = {}) {
    if (isHex3(value, { strict: false }))
      return sliceHex3(value, start, end, {
        strict
      });
    return sliceBytes3(value, start, end, {
      strict
    });
  }
  function assertStartOffset2(value, start) {
    if (typeof start === "number" && start > 0 && start > size4(value) - 1)
      throw new SliceOffsetOutOfBoundsError3({
        offset: start,
        position: "start",
        size: size4(value)
      });
  }
  function assertEndOffset3(value, start, end) {
    if (typeof start === "number" && typeof end === "number" && size4(value) !== end - start) {
      throw new SliceOffsetOutOfBoundsError3({
        offset: end,
        position: "end",
        size: size4(value)
      });
    }
  }
  function sliceBytes3(value_, start, end, { strict } = {}) {
    assertStartOffset2(value_, start);
    const value = value_.slice(start, end);
    if (strict)
      assertEndOffset3(value, start, end);
    return value;
  }
  function sliceHex3(value_, start, end, { strict } = {}) {
    assertStartOffset2(value_, start);
    const value = `0x${value_.replace("0x", "").slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;
    if (strict)
      assertEndOffset3(value, start, end);
    return value;
  }
  var init_slice2 = __esm2(() => {
    init_data2();
    init_size2();
  });
  function encodeAbiParameters2(params, values) {
    if (params.length !== values.length)
      throw new AbiEncodingLengthMismatchError2({
        expectedLength: params.length,
        givenLength: values.length
      });
    const preparedParams = prepareParams2({
      params,
      values
    });
    const data = encodeParams2(preparedParams);
    if (data.length === 0)
      return "0x";
    return data;
  }
  function prepareParams2({ params, values }) {
    const preparedParams = [];
    for (let i = 0; i < params.length; i++) {
      preparedParams.push(prepareParam2({ param: params[i], value: values[i] }));
    }
    return preparedParams;
  }
  function prepareParam2({ param, value }) {
    const arrayComponents = getArrayComponents2(param.type);
    if (arrayComponents) {
      const [length, type] = arrayComponents;
      return encodeArray2(value, { length, param: { ...param, type } });
    }
    if (param.type === "tuple") {
      return encodeTuple2(value, {
        param
      });
    }
    if (param.type === "address") {
      return encodeAddress2(value);
    }
    if (param.type === "bool") {
      return encodeBool2(value);
    }
    if (param.type.startsWith("uint") || param.type.startsWith("int")) {
      const signed = param.type.startsWith("int");
      return encodeNumber2(value, { signed });
    }
    if (param.type.startsWith("bytes")) {
      return encodeBytes2(value, { param });
    }
    if (param.type === "string") {
      return encodeString2(value);
    }
    throw new InvalidAbiEncodingTypeError2(param.type, {
      docsPath: "/docs/contract/encodeAbiParameters"
    });
  }
  function encodeParams2(preparedParams) {
    let staticSize = 0;
    for (let i = 0; i < preparedParams.length; i++) {
      const { dynamic, encoded } = preparedParams[i];
      if (dynamic)
        staticSize += 32;
      else
        staticSize += size4(encoded);
    }
    const staticParams = [];
    const dynamicParams = [];
    let dynamicSize = 0;
    for (let i = 0; i < preparedParams.length; i++) {
      const { dynamic, encoded } = preparedParams[i];
      if (dynamic) {
        staticParams.push(numberToHex3(staticSize + dynamicSize, { size: 32 }));
        dynamicParams.push(encoded);
        dynamicSize += size4(encoded);
      } else {
        staticParams.push(encoded);
      }
    }
    return concat2([...staticParams, ...dynamicParams]);
  }
  function encodeAddress2(value) {
    if (!isAddress3(value))
      throw new InvalidAddressError3({ address: value });
    return { dynamic: false, encoded: padHex3(value.toLowerCase()) };
  }
  function encodeArray2(value, { length, param }) {
    const dynamic = length === null;
    if (!Array.isArray(value))
      throw new InvalidArrayError2(value);
    if (!dynamic && value.length !== length)
      throw new AbiEncodingArrayLengthMismatchError2({
        expectedLength: length,
        givenLength: value.length,
        type: `${param.type}[${length}]`
      });
    let dynamicChild = false;
    const preparedParams = [];
    for (let i = 0; i < value.length; i++) {
      const preparedParam = prepareParam2({ param, value: value[i] });
      if (preparedParam.dynamic)
        dynamicChild = true;
      preparedParams.push(preparedParam);
    }
    if (dynamic || dynamicChild) {
      const data = encodeParams2(preparedParams);
      if (dynamic) {
        const length2 = numberToHex3(preparedParams.length, { size: 32 });
        return {
          dynamic: true,
          encoded: preparedParams.length > 0 ? concat2([length2, data]) : length2
        };
      }
      if (dynamicChild)
        return { dynamic: true, encoded: data };
    }
    return {
      dynamic: false,
      encoded: concat2(preparedParams.map(({ encoded }) => encoded))
    };
  }
  function encodeBytes2(value, { param }) {
    const [, paramSize] = param.type.split("bytes");
    const bytesSize = size4(value);
    if (!paramSize) {
      let value_ = value;
      if (bytesSize % 32 !== 0)
        value_ = padHex3(value_, {
          dir: "right",
          size: Math.ceil((value.length - 2) / 2 / 32) * 32
        });
      return {
        dynamic: true,
        encoded: concat2([padHex3(numberToHex3(bytesSize, { size: 32 })), value_])
      };
    }
    if (bytesSize !== parseInt(paramSize))
      throw new AbiEncodingBytesSizeMismatchError2({
        expectedSize: parseInt(paramSize),
        value
      });
    return { dynamic: false, encoded: padHex3(value, { dir: "right" }) };
  }
  function encodeBool2(value) {
    if (typeof value !== "boolean")
      throw new BaseError4(`Invalid boolean value: "${value}" (type: ${typeof value}). Expected: \`true\` or \`false\`.`);
    return { dynamic: false, encoded: padHex3(boolToHex3(value)) };
  }
  function encodeNumber2(value, { signed }) {
    return {
      dynamic: false,
      encoded: numberToHex3(value, {
        size: 32,
        signed
      })
    };
  }
  function encodeString2(value) {
    const hexValue = stringToHex3(value);
    const partsLength = Math.ceil(size4(hexValue) / 32);
    const parts = [];
    for (let i = 0; i < partsLength; i++) {
      parts.push(padHex3(slice3(hexValue, i * 32, (i + 1) * 32), {
        dir: "right"
      }));
    }
    return {
      dynamic: true,
      encoded: concat2([
        padHex3(numberToHex3(size4(hexValue), { size: 32 })),
        ...parts
      ])
    };
  }
  function encodeTuple2(value, { param }) {
    let dynamic = false;
    const preparedParams = [];
    for (let i = 0; i < param.components.length; i++) {
      const param_ = param.components[i];
      const index2 = Array.isArray(value) ? i : param_.name;
      const preparedParam = prepareParam2({
        param: param_,
        value: value[index2]
      });
      preparedParams.push(preparedParam);
      if (preparedParam.dynamic)
        dynamic = true;
    }
    return {
      dynamic,
      encoded: dynamic ? encodeParams2(preparedParams) : concat2(preparedParams.map(({ encoded }) => encoded))
    };
  }
  function getArrayComponents2(type) {
    const matches = type.match(/^(.*)\[(\d+)?\]$/);
    return matches ? [matches[2] ? Number(matches[2]) : null, matches[1]] : void 0;
  }
  var init_encodeAbiParameters2 = __esm2(() => {
    init_abi2();
    init_address2();
    init_base2();
    init_isAddress2();
    init_pad2();
    init_size2();
    init_slice2();
    init_toHex2();
  });
  var toFunctionSelector2 = (fn) => slice3(toSignatureHash2(fn), 0, 4);
  var init_toFunctionSelector2 = __esm2(() => {
    init_slice2();
    init_toSignatureHash2();
  });
  function getAbiItem2(parameters) {
    const { abi, args = [], name } = parameters;
    const isSelector = isHex3(name, { strict: false });
    const abiItems = abi.filter((abiItem) => {
      if (isSelector) {
        if (abiItem.type === "function")
          return toFunctionSelector2(abiItem) === name;
        if (abiItem.type === "event")
          return toEventSelector2(abiItem) === name;
        return false;
      }
      return "name" in abiItem && abiItem.name === name;
    });
    if (abiItems.length === 0)
      return;
    if (abiItems.length === 1)
      return abiItems[0];
    let matchedAbiItem = void 0;
    for (const abiItem of abiItems) {
      if (!("inputs" in abiItem))
        continue;
      if (!args || args.length === 0) {
        if (!abiItem.inputs || abiItem.inputs.length === 0)
          return abiItem;
        continue;
      }
      if (!abiItem.inputs)
        continue;
      if (abiItem.inputs.length === 0)
        continue;
      if (abiItem.inputs.length !== args.length)
        continue;
      const matched = args.every((arg, index2) => {
        const abiParameter = "inputs" in abiItem && abiItem.inputs[index2];
        if (!abiParameter)
          return false;
        return isArgOfType2(arg, abiParameter);
      });
      if (matched) {
        if (matchedAbiItem && "inputs" in matchedAbiItem && matchedAbiItem.inputs) {
          const ambiguousTypes = getAmbiguousTypes2(abiItem.inputs, matchedAbiItem.inputs, args);
          if (ambiguousTypes)
            throw new AbiItemAmbiguityError2({
              abiItem,
              type: ambiguousTypes[0]
            }, {
              abiItem: matchedAbiItem,
              type: ambiguousTypes[1]
            });
        }
        matchedAbiItem = abiItem;
      }
    }
    if (matchedAbiItem)
      return matchedAbiItem;
    return abiItems[0];
  }
  function isArgOfType2(arg, abiParameter) {
    const argType = typeof arg;
    const abiParameterType = abiParameter.type;
    switch (abiParameterType) {
      case "address":
        return isAddress3(arg, { strict: false });
      case "bool":
        return argType === "boolean";
      case "function":
        return argType === "string";
      case "string":
        return argType === "string";
      default: {
        if (abiParameterType === "tuple" && "components" in abiParameter)
          return Object.values(abiParameter.components).every((component, index2) => {
            return isArgOfType2(Object.values(arg)[index2], component);
          });
        if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))
          return argType === "number" || argType === "bigint";
        if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))
          return argType === "string" || arg instanceof Uint8Array;
        if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(abiParameterType)) {
          return Array.isArray(arg) && arg.every((x) => isArgOfType2(x, {
            ...abiParameter,
            type: abiParameterType.replace(/(\[[0-9]{0,}\])$/, "")
          }));
        }
        return false;
      }
    }
  }
  function getAmbiguousTypes2(sourceParameters, targetParameters, args) {
    for (const parameterIndex in sourceParameters) {
      const sourceParameter = sourceParameters[parameterIndex];
      const targetParameter = targetParameters[parameterIndex];
      if (sourceParameter.type === "tuple" && targetParameter.type === "tuple" && "components" in sourceParameter && "components" in targetParameter)
        return getAmbiguousTypes2(sourceParameter.components, targetParameter.components, args[parameterIndex]);
      const types = [sourceParameter.type, targetParameter.type];
      const ambiguous = (() => {
        if (types.includes("address") && types.includes("bytes20"))
          return true;
        if (types.includes("address") && types.includes("string"))
          return isAddress3(args[parameterIndex], { strict: false });
        if (types.includes("address") && types.includes("bytes"))
          return isAddress3(args[parameterIndex], { strict: false });
        return false;
      })();
      if (ambiguous)
        return types;
    }
    return;
  }
  var init_getAbiItem2 = __esm2(() => {
    init_abi2();
    init_isAddress2();
    init_toEventSelector2();
    init_toFunctionSelector2();
  });
  function parseAccount2(account) {
    if (typeof account === "string")
      return { address: account, type: "json-rpc" };
    return account;
  }
  function prepareEncodeFunctionData2(parameters) {
    const { abi, args, functionName } = parameters;
    let abiItem = abi[0];
    if (functionName) {
      const item = getAbiItem2({
        abi,
        args,
        name: functionName
      });
      if (!item)
        throw new AbiFunctionNotFoundError2(functionName, { docsPath: docsPath22 });
      abiItem = item;
    }
    if (abiItem.type !== "function")
      throw new AbiFunctionNotFoundError2(void 0, { docsPath: docsPath22 });
    return {
      abi: [abiItem],
      functionName: toFunctionSelector2(formatAbiItem22(abiItem))
    };
  }
  var docsPath22 = "/docs/contract/encodeFunctionData";
  var init_prepareEncodeFunctionData2 = __esm2(() => {
    init_abi2();
    init_toFunctionSelector2();
    init_formatAbiItem22();
    init_getAbiItem2();
  });
  function encodeFunctionData2(parameters) {
    const { args } = parameters;
    const { abi, functionName } = (() => {
      if (parameters.abi.length === 1 && parameters.functionName?.startsWith("0x"))
        return parameters;
      return prepareEncodeFunctionData2(parameters);
    })();
    const abiItem = abi[0];
    const signature = functionName;
    const data = "inputs" in abiItem && abiItem.inputs ? encodeAbiParameters2(abiItem.inputs, args ?? []) : void 0;
    return concatHex3([signature, data ?? "0x"]);
  }
  var init_encodeFunctionData2 = __esm2(() => {
    init_encodeAbiParameters2();
    init_prepareEncodeFunctionData2();
  });
  var panicReasons2;
  var solidityError2;
  var solidityPanic2;
  var init_solidity2 = __esm2(() => {
    panicReasons2 = {
      1: "An `assert` condition failed.",
      17: "Arithmetic operation resulted in underflow or overflow.",
      18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
      33: "Attempted to convert to an invalid type.",
      34: "Attempted to access a storage byte array that is incorrectly encoded.",
      49: "Performed `.pop()` on an empty array",
      50: "Array index is out of bounds.",
      65: "Allocated too much memory or created an array which is too large.",
      81: "Attempted to call a zero-initialized variable of internal function type."
    };
    solidityError2 = {
      inputs: [
        {
          name: "message",
          type: "string"
        }
      ],
      name: "Error",
      type: "error"
    };
    solidityPanic2 = {
      inputs: [
        {
          name: "reason",
          type: "uint256"
        }
      ],
      name: "Panic",
      type: "error"
    };
  });
  var NegativeOffsetError3;
  var PositionOutOfBoundsError3;
  var RecursiveReadLimitExceededError3;
  var init_cursor3 = __esm2(() => {
    init_base2();
    NegativeOffsetError3 = class NegativeOffsetError extends BaseError4 {
      constructor({ offset }) {
        super(`Offset \`${offset}\` cannot be negative.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NegativeOffsetError"
        });
      }
    };
    PositionOutOfBoundsError3 = class PositionOutOfBoundsError extends BaseError4 {
      constructor({ length, position }) {
        super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "PositionOutOfBoundsError"
        });
      }
    };
    RecursiveReadLimitExceededError3 = class RecursiveReadLimitExceededError extends BaseError4 {
      constructor({ count, limit }) {
        super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RecursiveReadLimitExceededError"
        });
      }
    };
  });
  function createCursor3(bytes22, { recursiveReadLimit = 8192 } = {}) {
    const cursor = Object.create(staticCursor3);
    cursor.bytes = bytes22;
    cursor.dataView = new DataView(bytes22.buffer, bytes22.byteOffset, bytes22.byteLength);
    cursor.positionReadCount = /* @__PURE__ */ new Map();
    cursor.recursiveReadLimit = recursiveReadLimit;
    return cursor;
  }
  var staticCursor3;
  var init_cursor22 = __esm2(() => {
    init_cursor3();
    staticCursor3 = {
      bytes: new Uint8Array(),
      dataView: new DataView(new ArrayBuffer(0)),
      position: 0,
      positionReadCount: /* @__PURE__ */ new Map(),
      recursiveReadCount: 0,
      recursiveReadLimit: Infinity,
      assertReadLimit() {
        if (this.recursiveReadCount >= this.recursiveReadLimit)
          throw new RecursiveReadLimitExceededError3({
            count: this.recursiveReadCount + 1,
            limit: this.recursiveReadLimit
          });
      },
      assertPosition(position) {
        if (position < 0 || position > this.bytes.length - 1)
          throw new PositionOutOfBoundsError3({
            length: this.bytes.length,
            position
          });
      },
      decrementPosition(offset) {
        if (offset < 0)
          throw new NegativeOffsetError3({ offset });
        const position = this.position - offset;
        this.assertPosition(position);
        this.position = position;
      },
      getReadCount(position) {
        return this.positionReadCount.get(position || this.position) || 0;
      },
      incrementPosition(offset) {
        if (offset < 0)
          throw new NegativeOffsetError3({ offset });
        const position = this.position + offset;
        this.assertPosition(position);
        this.position = position;
      },
      inspectByte(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position);
        return this.bytes[position];
      },
      inspectBytes(length, position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + length - 1);
        return this.bytes.subarray(position, position + length);
      },
      inspectUint8(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position);
        return this.bytes[position];
      },
      inspectUint16(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 1);
        return this.dataView.getUint16(position);
      },
      inspectUint24(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 2);
        return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
      },
      inspectUint32(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 3);
        return this.dataView.getUint32(position);
      },
      pushByte(byte) {
        this.assertPosition(this.position);
        this.bytes[this.position] = byte;
        this.position++;
      },
      pushBytes(bytes22) {
        this.assertPosition(this.position + bytes22.length - 1);
        this.bytes.set(bytes22, this.position);
        this.position += bytes22.length;
      },
      pushUint8(value) {
        this.assertPosition(this.position);
        this.bytes[this.position] = value;
        this.position++;
      },
      pushUint16(value) {
        this.assertPosition(this.position + 1);
        this.dataView.setUint16(this.position, value);
        this.position += 2;
      },
      pushUint24(value) {
        this.assertPosition(this.position + 2);
        this.dataView.setUint16(this.position, value >> 8);
        this.dataView.setUint8(this.position + 2, value & ~4294967040);
        this.position += 3;
      },
      pushUint32(value) {
        this.assertPosition(this.position + 3);
        this.dataView.setUint32(this.position, value);
        this.position += 4;
      },
      readByte() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectByte();
        this.position++;
        return value;
      },
      readBytes(length, size22) {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectBytes(length);
        this.position += size22 ?? length;
        return value;
      },
      readUint8() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint8();
        this.position += 1;
        return value;
      },
      readUint16() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint16();
        this.position += 2;
        return value;
      },
      readUint24() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint24();
        this.position += 3;
        return value;
      },
      readUint32() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint32();
        this.position += 4;
        return value;
      },
      get remaining() {
        return this.bytes.length - this.position;
      },
      setPosition(position) {
        const oldPosition = this.position;
        this.assertPosition(position);
        this.position = position;
        return () => this.position = oldPosition;
      },
      _touch() {
        if (this.recursiveReadLimit === Infinity)
          return;
        const count = this.getReadCount();
        this.positionReadCount.set(this.position, count + 1);
        if (count > 0)
          this.recursiveReadCount++;
      }
    };
  });
  function bytesToBigInt2(bytes22, opts = {}) {
    if (typeof opts.size !== "undefined")
      assertSize3(bytes22, { size: opts.size });
    const hex = bytesToHex4(bytes22, opts);
    return hexToBigInt3(hex, opts);
  }
  function bytesToBool2(bytes_, opts = {}) {
    let bytes22 = bytes_;
    if (typeof opts.size !== "undefined") {
      assertSize3(bytes22, { size: opts.size });
      bytes22 = trim3(bytes22);
    }
    if (bytes22.length > 1 || bytes22[0] > 1)
      throw new InvalidBytesBooleanError2(bytes22);
    return Boolean(bytes22[0]);
  }
  function bytesToNumber2(bytes22, opts = {}) {
    if (typeof opts.size !== "undefined")
      assertSize3(bytes22, { size: opts.size });
    const hex = bytesToHex4(bytes22, opts);
    return hexToNumber4(hex, opts);
  }
  function bytesToString2(bytes_, opts = {}) {
    let bytes22 = bytes_;
    if (typeof opts.size !== "undefined") {
      assertSize3(bytes22, { size: opts.size });
      bytes22 = trim3(bytes22, { dir: "right" });
    }
    return new TextDecoder().decode(bytes22);
  }
  var init_fromBytes2 = __esm2(() => {
    init_encoding2();
    init_fromHex2();
    init_toHex2();
  });
  function decodeAbiParameters2(params, data) {
    const bytes22 = typeof data === "string" ? hexToBytes4(data) : data;
    const cursor = createCursor3(bytes22);
    if (size4(bytes22) === 0 && params.length > 0)
      throw new AbiDecodingZeroDataError2();
    if (size4(data) && size4(data) < 32)
      throw new AbiDecodingDataSizeTooSmallError2({
        data: typeof data === "string" ? data : bytesToHex4(data),
        params,
        size: size4(data)
      });
    let consumed = 0;
    const values = [];
    for (let i = 0; i < params.length; ++i) {
      const param = params[i];
      cursor.setPosition(consumed);
      const [data2, consumed_] = decodeParameter2(cursor, param, {
        staticPosition: 0
      });
      consumed += consumed_;
      values.push(data2);
    }
    return values;
  }
  function decodeParameter2(cursor, param, { staticPosition }) {
    const arrayComponents = getArrayComponents2(param.type);
    if (arrayComponents) {
      const [length, type] = arrayComponents;
      return decodeArray2(cursor, { ...param, type }, { length, staticPosition });
    }
    if (param.type === "tuple")
      return decodeTuple2(cursor, param, { staticPosition });
    if (param.type === "address")
      return decodeAddress2(cursor);
    if (param.type === "bool")
      return decodeBool2(cursor);
    if (param.type.startsWith("bytes"))
      return decodeBytes2(cursor, param, { staticPosition });
    if (param.type.startsWith("uint") || param.type.startsWith("int"))
      return decodeNumber2(cursor, param);
    if (param.type === "string")
      return decodeString2(cursor, { staticPosition });
    throw new InvalidAbiDecodingTypeError2(param.type, {
      docsPath: "/docs/contract/decodeAbiParameters"
    });
  }
  function decodeAddress2(cursor) {
    const value = cursor.readBytes(32);
    return [checksumAddress3(bytesToHex4(sliceBytes3(value, -20))), 32];
  }
  function decodeArray2(cursor, param, { length, staticPosition }) {
    if (!length) {
      const offset = bytesToNumber2(cursor.readBytes(sizeOfOffset2));
      const start = staticPosition + offset;
      const startOfData = start + sizeOfLength2;
      cursor.setPosition(start);
      const length2 = bytesToNumber2(cursor.readBytes(sizeOfLength2));
      const dynamicChild = hasDynamicChild2(param);
      let consumed2 = 0;
      const value2 = [];
      for (let i = 0; i < length2; ++i) {
        cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed2));
        const [data, consumed_] = decodeParameter2(cursor, param, {
          staticPosition: startOfData
        });
        consumed2 += consumed_;
        value2.push(data);
      }
      cursor.setPosition(staticPosition + 32);
      return [value2, 32];
    }
    if (hasDynamicChild2(param)) {
      const offset = bytesToNumber2(cursor.readBytes(sizeOfOffset2));
      const start = staticPosition + offset;
      const value2 = [];
      for (let i = 0; i < length; ++i) {
        cursor.setPosition(start + i * 32);
        const [data] = decodeParameter2(cursor, param, {
          staticPosition: start
        });
        value2.push(data);
      }
      cursor.setPosition(staticPosition + 32);
      return [value2, 32];
    }
    let consumed = 0;
    const value = [];
    for (let i = 0; i < length; ++i) {
      const [data, consumed_] = decodeParameter2(cursor, param, {
        staticPosition: staticPosition + consumed
      });
      consumed += consumed_;
      value.push(data);
    }
    return [value, consumed];
  }
  function decodeBool2(cursor) {
    return [bytesToBool2(cursor.readBytes(32), { size: 32 }), 32];
  }
  function decodeBytes2(cursor, param, { staticPosition }) {
    const [_, size22] = param.type.split("bytes");
    if (!size22) {
      const offset = bytesToNumber2(cursor.readBytes(32));
      cursor.setPosition(staticPosition + offset);
      const length = bytesToNumber2(cursor.readBytes(32));
      if (length === 0) {
        cursor.setPosition(staticPosition + 32);
        return ["0x", 32];
      }
      const data = cursor.readBytes(length);
      cursor.setPosition(staticPosition + 32);
      return [bytesToHex4(data), 32];
    }
    const value = bytesToHex4(cursor.readBytes(parseInt(size22), 32));
    return [value, 32];
  }
  function decodeNumber2(cursor, param) {
    const signed = param.type.startsWith("int");
    const size22 = parseInt(param.type.split("int")[1] || "256");
    const value = cursor.readBytes(32);
    return [
      size22 > 48 ? bytesToBigInt2(value, { signed }) : bytesToNumber2(value, { signed }),
      32
    ];
  }
  function decodeTuple2(cursor, param, { staticPosition }) {
    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);
    const value = hasUnnamedChild ? [] : {};
    let consumed = 0;
    if (hasDynamicChild2(param)) {
      const offset = bytesToNumber2(cursor.readBytes(sizeOfOffset2));
      const start = staticPosition + offset;
      for (let i = 0; i < param.components.length; ++i) {
        const component = param.components[i];
        cursor.setPosition(start + consumed);
        const [data, consumed_] = decodeParameter2(cursor, component, {
          staticPosition: start
        });
        consumed += consumed_;
        value[hasUnnamedChild ? i : component?.name] = data;
      }
      cursor.setPosition(staticPosition + 32);
      return [value, 32];
    }
    for (let i = 0; i < param.components.length; ++i) {
      const component = param.components[i];
      const [data, consumed_] = decodeParameter2(cursor, component, {
        staticPosition
      });
      value[hasUnnamedChild ? i : component?.name] = data;
      consumed += consumed_;
    }
    return [value, consumed];
  }
  function decodeString2(cursor, { staticPosition }) {
    const offset = bytesToNumber2(cursor.readBytes(32));
    const start = staticPosition + offset;
    cursor.setPosition(start);
    const length = bytesToNumber2(cursor.readBytes(32));
    if (length === 0) {
      cursor.setPosition(staticPosition + 32);
      return ["", 32];
    }
    const data = cursor.readBytes(length, 32);
    const value = bytesToString2(trim3(data));
    cursor.setPosition(staticPosition + 32);
    return [value, 32];
  }
  function hasDynamicChild2(param) {
    const { type } = param;
    if (type === "string")
      return true;
    if (type === "bytes")
      return true;
    if (type.endsWith("[]"))
      return true;
    if (type === "tuple")
      return param.components?.some(hasDynamicChild2);
    const arrayComponents = getArrayComponents2(param.type);
    if (arrayComponents && hasDynamicChild2({ ...param, type: arrayComponents[1] }))
      return true;
    return false;
  }
  var sizeOfLength2 = 32;
  var sizeOfOffset2 = 32;
  var init_decodeAbiParameters2 = __esm2(() => {
    init_abi2();
    init_getAddress2();
    init_cursor22();
    init_size2();
    init_slice2();
    init_fromBytes2();
    init_toBytes2();
    init_toHex2();
    init_encodeAbiParameters2();
  });
  function decodeErrorResult2(parameters) {
    const { abi, data } = parameters;
    const signature = slice3(data, 0, 4);
    if (signature === "0x")
      throw new AbiDecodingZeroDataError2();
    const abi_ = [...abi || [], solidityError2, solidityPanic2];
    const abiItem = abi_.find((x) => x.type === "error" && signature === toFunctionSelector2(formatAbiItem22(x)));
    if (!abiItem)
      throw new AbiErrorSignatureNotFoundError2(signature, {
        docsPath: "/docs/contract/decodeErrorResult"
      });
    return {
      abiItem,
      args: "inputs" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? decodeAbiParameters2(abiItem.inputs, slice3(data, 4)) : void 0,
      errorName: abiItem.name
    };
  }
  var init_decodeErrorResult2 = __esm2(() => {
    init_solidity2();
    init_abi2();
    init_slice2();
    init_toFunctionSelector2();
    init_decodeAbiParameters2();
    init_formatAbiItem22();
  });
  var stringify2 = (value, replacer, space) => JSON.stringify(value, (key, value_) => {
    const value2 = typeof value_ === "bigint" ? value_.toString() : value_;
    return typeof replacer === "function" ? replacer(key, value2) : value2;
  }, space);
  function formatAbiItemWithArgs2({ abiItem, args, includeFunctionName = true, includeName = false }) {
    if (!("name" in abiItem))
      return;
    if (!("inputs" in abiItem))
      return;
    if (!abiItem.inputs)
      return;
    return `${includeFunctionName ? abiItem.name : ""}(${abiItem.inputs.map((input, i) => `${includeName && input.name ? `${input.name}: ` : ""}${typeof args[i] === "object" ? stringify2(args[i]) : args[i]}`).join(", ")})`;
  }
  var init_formatAbiItemWithArgs2 = () => {
  };
  var etherUnits2;
  var gweiUnits3;
  var init_unit2 = __esm2(() => {
    etherUnits2 = {
      gwei: 9,
      wei: 18
    };
    gweiUnits3 = {
      ether: -9,
      wei: 9
    };
  });
  function formatUnits3(value, decimals) {
    let display = value.toString();
    const negative = display.startsWith("-");
    if (negative)
      display = display.slice(1);
    display = display.padStart(decimals, "0");
    let [integer, fraction] = [
      display.slice(0, display.length - decimals),
      display.slice(display.length - decimals)
    ];
    fraction = fraction.replace(/(0+)$/, "");
    return `${negative ? "-" : ""}${integer || "0"}${fraction ? `.${fraction}` : ""}`;
  }
  function formatEther2(wei, unit = "wei") {
    return formatUnits3(wei, etherUnits2[unit]);
  }
  var init_formatEther2 = __esm2(() => {
    init_unit2();
  });
  function formatGwei3(wei, unit = "wei") {
    return formatUnits3(wei, gweiUnits3[unit]);
  }
  var init_formatGwei2 = __esm2(() => {
    init_unit2();
  });
  function prettyStateMapping2(stateMapping) {
    return stateMapping.reduce((pretty, { slot, value }) => {
      return `${pretty}        ${slot}: ${value}
`;
    }, "");
  }
  function prettyStateOverride2(stateOverride) {
    return stateOverride.reduce((pretty, { address, ...state }) => {
      let val = `${pretty}    ${address}:
`;
      if (state.nonce)
        val += `      nonce: ${state.nonce}
`;
      if (state.balance)
        val += `      balance: ${state.balance}
`;
      if (state.code)
        val += `      code: ${state.code}
`;
      if (state.state) {
        val += "      state:\n";
        val += prettyStateMapping2(state.state);
      }
      if (state.stateDiff) {
        val += "      stateDiff:\n";
        val += prettyStateMapping2(state.stateDiff);
      }
      return val;
    }, "  State Override:\n").slice(0, -1);
  }
  var AccountStateConflictError2;
  var StateAssignmentConflictError2;
  var init_stateOverride3 = __esm2(() => {
    init_base2();
    AccountStateConflictError2 = class AccountStateConflictError extends BaseError4 {
      constructor({ address }) {
        super(`State for account "${address}" is set multiple times.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AccountStateConflictError"
        });
      }
    };
    StateAssignmentConflictError2 = class StateAssignmentConflictError extends BaseError4 {
      constructor() {
        super("state and stateDiff are set on the same account.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "StateAssignmentConflictError"
        });
      }
    };
  });
  function prettyPrint3(args) {
    const entries = Object.entries(args).map(([key, value]) => {
      if (value === void 0 || value === false)
        return null;
      return [key, value];
    }).filter(Boolean);
    const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);
    return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join("\n");
  }
  var FeeConflictError2;
  var InvalidSerializableTransactionError3;
  var TransactionExecutionError2;
  var init_transaction2 = __esm2(() => {
    init_formatEther2();
    init_formatGwei2();
    init_base2();
    FeeConflictError2 = class FeeConflictError extends BaseError4 {
      constructor() {
        super([
          "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.",
          "Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FeeConflictError"
        });
      }
    };
    InvalidSerializableTransactionError3 = class InvalidSerializableTransactionError extends BaseError4 {
      constructor({ transaction }) {
        super("Cannot infer a transaction type from provided transaction.", {
          metaMessages: [
            "Provided Transaction:",
            "{",
            prettyPrint3(transaction),
            "}",
            "",
            "To infer the type, either provide:",
            "- a `type` to the Transaction, or",
            "- an EIP-1559 Transaction with `maxFeePerGas`, or",
            "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
            "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
            "- a Legacy Transaction with `gasPrice`"
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidSerializableTransactionError"
        });
      }
    };
    TransactionExecutionError2 = class TransactionExecutionError extends BaseError4 {
      constructor(cause, { account, docsPath: docsPath33, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
        const prettyArgs = prettyPrint3({
          chain: chain && `${chain?.name} (id: ${chain?.id})`,
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${formatEther2(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${formatGwei3(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei3(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei3(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        super(cause.shortMessage, {
          cause,
          docsPath: docsPath33,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Request Arguments:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionExecutionError"
        });
        this.cause = cause;
      }
    };
  });
  var CallExecutionError2;
  var ContractFunctionExecutionError2;
  var ContractFunctionRevertedError2;
  var ContractFunctionZeroDataError2;
  var RawContractError2;
  var init_contract3 = __esm2(() => {
    init_solidity2();
    init_decodeErrorResult2();
    init_formatAbiItem22();
    init_formatAbiItemWithArgs2();
    init_getAbiItem2();
    init_formatEther2();
    init_formatGwei2();
    init_abi2();
    init_base2();
    init_stateOverride3();
    init_transaction2();
    init_utils5();
    CallExecutionError2 = class CallExecutionError extends BaseError4 {
      constructor(cause, { account: account_, docsPath: docsPath33, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride }) {
        const account = account_ ? parseAccount2(account_) : void 0;
        let prettyArgs = prettyPrint3({
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${formatEther2(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${formatGwei3(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei3(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei3(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        if (stateOverride) {
          prettyArgs += `
${prettyStateOverride2(stateOverride)}`;
        }
        super(cause.shortMessage, {
          cause,
          docsPath: docsPath33,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Raw Call Arguments:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "CallExecutionError"
        });
        this.cause = cause;
      }
    };
    ContractFunctionExecutionError2 = class ContractFunctionExecutionError extends BaseError4 {
      constructor(cause, { abi, args, contractAddress, docsPath: docsPath33, functionName, sender }) {
        const abiItem = getAbiItem2({ abi, args, name: functionName });
        const formattedArgs = abiItem ? formatAbiItemWithArgs2({
          abiItem,
          args,
          includeFunctionName: false,
          includeName: false
        }) : void 0;
        const functionWithParams = abiItem ? formatAbiItem22(abiItem, { includeName: true }) : void 0;
        const prettyArgs = prettyPrint3({
          address: contractAddress && getContractAddress3(contractAddress),
          function: functionWithParams,
          args: formattedArgs && formattedArgs !== "()" && `${[...Array(functionName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}`,
          sender
        });
        super(cause.shortMessage || `An unknown error occurred while executing the contract function "${functionName}".`, {
          cause,
          docsPath: docsPath33,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Contract Call:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "abi", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "args", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "contractAddress", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "formattedArgs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "functionName", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "sender", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ContractFunctionExecutionError"
        });
        this.abi = abi;
        this.args = args;
        this.cause = cause;
        this.contractAddress = contractAddress;
        this.functionName = functionName;
        this.sender = sender;
      }
    };
    ContractFunctionRevertedError2 = class ContractFunctionRevertedError extends BaseError4 {
      constructor({ abi, data, functionName, message }) {
        let cause;
        let decodedData = void 0;
        let metaMessages;
        let reason;
        if (data && data !== "0x") {
          try {
            decodedData = decodeErrorResult2({ abi, data });
            const { abiItem, errorName, args: errorArgs } = decodedData;
            if (errorName === "Error") {
              reason = errorArgs[0];
            } else if (errorName === "Panic") {
              const [firstArg] = errorArgs;
              reason = panicReasons2[firstArg];
            } else {
              const errorWithParams = abiItem ? formatAbiItem22(abiItem, { includeName: true }) : void 0;
              const formattedArgs = abiItem && errorArgs ? formatAbiItemWithArgs2({
                abiItem,
                args: errorArgs,
                includeFunctionName: false,
                includeName: false
              }) : void 0;
              metaMessages = [
                errorWithParams ? `Error: ${errorWithParams}` : "",
                formattedArgs && formattedArgs !== "()" ? `       ${[...Array(errorName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}` : ""
              ];
            }
          } catch (err) {
            cause = err;
          }
        } else if (message)
          reason = message;
        let signature;
        if (cause instanceof AbiErrorSignatureNotFoundError2) {
          signature = cause.signature;
          metaMessages = [
            `Unable to decode signature "${signature}" as it was not found on the provided ABI.`,
            "Make sure you are using the correct ABI and that the error exists on it.",
            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
          ];
        }
        super(reason && reason !== "execution reverted" || signature ? [
          `The contract function "${functionName}" reverted with the following ${signature ? "signature" : "reason"}:`,
          reason || signature
        ].join("\n") : `The contract function "${functionName}" reverted.`, {
          cause,
          metaMessages
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ContractFunctionRevertedError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "reason", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = decodedData;
        this.reason = reason;
        this.signature = signature;
      }
    };
    ContractFunctionZeroDataError2 = class ContractFunctionZeroDataError extends BaseError4 {
      constructor({ functionName }) {
        super(`The contract function "${functionName}" returned no data ("0x").`, {
          metaMessages: [
            "This could be due to any of the following:",
            `  - The contract does not have the function "${functionName}",`,
            "  - The parameters passed to the contract function may be invalid, or",
            "  - The address is not a contract."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ContractFunctionZeroDataError"
        });
      }
    };
    RawContractError2 = class RawContractError extends BaseError4 {
      constructor({ data, message }) {
        super(message || "");
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: 3
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RawContractError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = data;
      }
    };
  });
  var HttpRequestError2;
  var RpcRequestError2;
  var init_request2 = __esm2(() => {
    init_base2();
    init_utils5();
    HttpRequestError2 = class HttpRequestError extends BaseError4 {
      constructor({ body, details, headers, status, url }) {
        super("HTTP request failed.", {
          details,
          metaMessages: [
            status && `Status: ${status}`,
            `URL: ${getUrl2(url)}`,
            body && `Request body: ${stringify2(body)}`
          ].filter(Boolean)
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "HttpRequestError"
        });
        Object.defineProperty(this, "body", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "status", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "url", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.body = body;
        this.headers = headers;
        this.status = status;
        this.url = url;
      }
    };
    RpcRequestError2 = class RpcRequestError extends BaseError4 {
      constructor({ body, error, url }) {
        super("RPC Request failed.", {
          cause: error,
          details: error.message,
          metaMessages: [`URL: ${getUrl2(url)}`, `Request body: ${stringify2(body)}`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RpcRequestError"
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.code = error.code;
      }
    };
  });
  var unknownErrorCode2 = -1;
  var RpcError2;
  var ProviderRpcError2;
  var ParseRpcError2;
  var InvalidRequestRpcError2;
  var MethodNotFoundRpcError2;
  var InvalidParamsRpcError2;
  var InternalRpcError2;
  var InvalidInputRpcError2;
  var ResourceNotFoundRpcError2;
  var ResourceUnavailableRpcError2;
  var TransactionRejectedRpcError2;
  var MethodNotSupportedRpcError2;
  var LimitExceededRpcError2;
  var JsonRpcVersionUnsupportedError2;
  var UserRejectedRequestError2;
  var UnauthorizedProviderError2;
  var UnsupportedProviderMethodError2;
  var ProviderDisconnectedError2;
  var ChainDisconnectedError2;
  var SwitchChainError2;
  var init_rpc2 = __esm2(() => {
    init_base2();
    init_request2();
    RpcError2 = class RpcError extends BaseError4 {
      constructor(cause, { code, docsPath: docsPath33, metaMessages, shortMessage }) {
        super(shortMessage, {
          cause,
          docsPath: docsPath33,
          metaMessages: metaMessages || cause?.metaMessages
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RpcError"
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.name = cause.name;
        this.code = cause instanceof RpcRequestError2 ? cause.code : code ?? unknownErrorCode2;
      }
    };
    ProviderRpcError2 = class ProviderRpcError extends RpcError2 {
      constructor(cause, options2) {
        super(cause, options2);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ProviderRpcError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = options2.data;
      }
    };
    ParseRpcError2 = class ParseRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: ParseRpcError3.code,
          shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ParseRpcError"
        });
      }
    };
    Object.defineProperty(ParseRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32700
    });
    InvalidRequestRpcError2 = class InvalidRequestRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: InvalidRequestRpcError3.code,
          shortMessage: "JSON is not a valid request object."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidRequestRpcError"
        });
      }
    };
    Object.defineProperty(InvalidRequestRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32600
    });
    MethodNotFoundRpcError2 = class MethodNotFoundRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: MethodNotFoundRpcError3.code,
          shortMessage: "The method does not exist / is not available."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "MethodNotFoundRpcError"
        });
      }
    };
    Object.defineProperty(MethodNotFoundRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32601
    });
    InvalidParamsRpcError2 = class InvalidParamsRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: InvalidParamsRpcError3.code,
          shortMessage: [
            "Invalid parameters were provided to the RPC method.",
            "Double check you have provided the correct parameters."
          ].join("\n")
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidParamsRpcError"
        });
      }
    };
    Object.defineProperty(InvalidParamsRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32602
    });
    InternalRpcError2 = class InternalRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: InternalRpcError3.code,
          shortMessage: "An internal error was received."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InternalRpcError"
        });
      }
    };
    Object.defineProperty(InternalRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32603
    });
    InvalidInputRpcError2 = class InvalidInputRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: InvalidInputRpcError3.code,
          shortMessage: [
            "Missing or invalid parameters.",
            "Double check you have provided the correct parameters."
          ].join("\n")
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidInputRpcError"
        });
      }
    };
    Object.defineProperty(InvalidInputRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32e3
    });
    ResourceNotFoundRpcError2 = class ResourceNotFoundRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: ResourceNotFoundRpcError3.code,
          shortMessage: "Requested resource not found."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ResourceNotFoundRpcError"
        });
      }
    };
    Object.defineProperty(ResourceNotFoundRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32001
    });
    ResourceUnavailableRpcError2 = class ResourceUnavailableRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: ResourceUnavailableRpcError3.code,
          shortMessage: "Requested resource not available."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ResourceUnavailableRpcError"
        });
      }
    };
    Object.defineProperty(ResourceUnavailableRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32002
    });
    TransactionRejectedRpcError2 = class TransactionRejectedRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: TransactionRejectedRpcError3.code,
          shortMessage: "Transaction creation failed."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionRejectedRpcError"
        });
      }
    };
    Object.defineProperty(TransactionRejectedRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32003
    });
    MethodNotSupportedRpcError2 = class MethodNotSupportedRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: MethodNotSupportedRpcError3.code,
          shortMessage: "Method is not implemented."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "MethodNotSupportedRpcError"
        });
      }
    };
    Object.defineProperty(MethodNotSupportedRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32004
    });
    LimitExceededRpcError2 = class LimitExceededRpcError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: LimitExceededRpcError3.code,
          shortMessage: "Request exceeds defined limit."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "LimitExceededRpcError"
        });
      }
    };
    Object.defineProperty(LimitExceededRpcError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32005
    });
    JsonRpcVersionUnsupportedError2 = class JsonRpcVersionUnsupportedError3 extends RpcError2 {
      constructor(cause) {
        super(cause, {
          code: JsonRpcVersionUnsupportedError3.code,
          shortMessage: "Version of JSON-RPC protocol is not supported."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "JsonRpcVersionUnsupportedError"
        });
      }
    };
    Object.defineProperty(JsonRpcVersionUnsupportedError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32006
    });
    UserRejectedRequestError2 = class UserRejectedRequestError3 extends ProviderRpcError2 {
      constructor(cause) {
        super(cause, {
          code: UserRejectedRequestError3.code,
          shortMessage: "User rejected the request."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UserRejectedRequestError"
        });
      }
    };
    Object.defineProperty(UserRejectedRequestError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4001
    });
    UnauthorizedProviderError2 = class UnauthorizedProviderError3 extends ProviderRpcError2 {
      constructor(cause) {
        super(cause, {
          code: UnauthorizedProviderError3.code,
          shortMessage: "The requested method and/or account has not been authorized by the user."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnauthorizedProviderError"
        });
      }
    };
    Object.defineProperty(UnauthorizedProviderError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4100
    });
    UnsupportedProviderMethodError2 = class UnsupportedProviderMethodError3 extends ProviderRpcError2 {
      constructor(cause) {
        super(cause, {
          code: UnsupportedProviderMethodError3.code,
          shortMessage: "The Provider does not support the requested method."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnsupportedProviderMethodError"
        });
      }
    };
    Object.defineProperty(UnsupportedProviderMethodError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4200
    });
    ProviderDisconnectedError2 = class ProviderDisconnectedError3 extends ProviderRpcError2 {
      constructor(cause) {
        super(cause, {
          code: ProviderDisconnectedError3.code,
          shortMessage: "The Provider is disconnected from all chains."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ProviderDisconnectedError"
        });
      }
    };
    Object.defineProperty(ProviderDisconnectedError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4900
    });
    ChainDisconnectedError2 = class ChainDisconnectedError3 extends ProviderRpcError2 {
      constructor(cause) {
        super(cause, {
          code: ChainDisconnectedError3.code,
          shortMessage: "The Provider is not connected to the requested chain."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainDisconnectedError"
        });
      }
    };
    Object.defineProperty(ChainDisconnectedError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4901
    });
    SwitchChainError2 = class SwitchChainError3 extends ProviderRpcError2 {
      constructor(cause) {
        super(cause, {
          code: SwitchChainError3.code,
          shortMessage: "An error occurred when attempting to switch chain."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SwitchChainError"
        });
      }
    };
    Object.defineProperty(SwitchChainError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4902
    });
  });
  var ExecutionRevertedError2;
  var FeeCapTooHighError3;
  var FeeCapTooLowError2;
  var NonceTooHighError2;
  var NonceTooLowError2;
  var NonceMaxValueError2;
  var InsufficientFundsError2;
  var IntrinsicGasTooHighError2;
  var IntrinsicGasTooLowError2;
  var TransactionTypeNotSupportedError2;
  var TipAboveFeeCapError3;
  var UnknownNodeError2;
  var init_node2 = __esm2(() => {
    init_formatGwei2();
    init_base2();
    ExecutionRevertedError2 = class ExecutionRevertedError extends BaseError4 {
      constructor({ cause, message } = {}) {
        const reason = message?.replace("execution reverted: ", "")?.replace("execution reverted", "");
        super(`Execution reverted ${reason ? `with reason: ${reason}` : "for an unknown reason"}.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ExecutionRevertedError"
        });
      }
    };
    Object.defineProperty(ExecutionRevertedError2, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 3
    });
    Object.defineProperty(ExecutionRevertedError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /execution reverted/
    });
    FeeCapTooHighError3 = class FeeCapTooHighError extends BaseError4 {
      constructor({ cause, maxFeePerGas } = {}) {
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei3(maxFeePerGas)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FeeCapTooHigh"
        });
      }
    };
    Object.defineProperty(FeeCapTooHighError3, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
    });
    FeeCapTooLowError2 = class FeeCapTooLowError extends BaseError4 {
      constructor({ cause, maxFeePerGas } = {}) {
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei3(maxFeePerGas)}` : ""} gwei) cannot be lower than the block base fee.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FeeCapTooLow"
        });
      }
    };
    Object.defineProperty(FeeCapTooLowError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
    });
    NonceTooHighError2 = class NonceTooHighError extends BaseError4 {
      constructor({ cause, nonce } = {}) {
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is higher than the next one expected.`, { cause });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NonceTooHighError"
        });
      }
    };
    Object.defineProperty(NonceTooHighError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce too high/
    });
    NonceTooLowError2 = class NonceTooLowError extends BaseError4 {
      constructor({ cause, nonce } = {}) {
        super([
          `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is lower than the current nonce of the account.`,
          "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
        ].join("\n"), { cause });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NonceTooLowError"
        });
      }
    };
    Object.defineProperty(NonceTooLowError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce too low|transaction already imported|already known/
    });
    NonceMaxValueError2 = class NonceMaxValueError extends BaseError4 {
      constructor({ cause, nonce } = {}) {
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}exceeds the maximum allowed nonce.`, { cause });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NonceMaxValueError"
        });
      }
    };
    Object.defineProperty(NonceMaxValueError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce has max value/
    });
    InsufficientFundsError2 = class InsufficientFundsError extends BaseError4 {
      constructor({ cause } = {}) {
        super([
          "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
        ].join("\n"), {
          cause,
          metaMessages: [
            "This error could arise when the account does not have enough funds to:",
            " - pay for the total gas fee,",
            " - pay for the value to send.",
            " ",
            "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
            " - `gas` is the amount of gas needed for transaction to execute,",
            " - `gas fee` is the gas fee,",
            " - `value` is the amount of ether to send to the recipient."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InsufficientFundsError"
        });
      }
    };
    Object.defineProperty(InsufficientFundsError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /insufficient funds/
    });
    IntrinsicGasTooHighError2 = class IntrinsicGasTooHighError extends BaseError4 {
      constructor({ cause, gas } = {}) {
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "IntrinsicGasTooHighError"
        });
      }
    };
    Object.defineProperty(IntrinsicGasTooHighError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /intrinsic gas too high|gas limit reached/
    });
    IntrinsicGasTooLowError2 = class IntrinsicGasTooLowError extends BaseError4 {
      constructor({ cause, gas } = {}) {
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction is too low.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "IntrinsicGasTooLowError"
        });
      }
    };
    Object.defineProperty(IntrinsicGasTooLowError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /intrinsic gas too low/
    });
    TransactionTypeNotSupportedError2 = class TransactionTypeNotSupportedError extends BaseError4 {
      constructor({ cause }) {
        super("The transaction type is not supported for this chain.", {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionTypeNotSupportedError"
        });
      }
    };
    Object.defineProperty(TransactionTypeNotSupportedError2, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /transaction type not valid/
    });
    TipAboveFeeCapError3 = class TipAboveFeeCapError extends BaseError4 {
      constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {
        super([
          `The provided tip (\`maxPriorityFeePerGas\`${maxPriorityFeePerGas ? ` = ${formatGwei3(maxPriorityFeePerGas)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei3(maxFeePerGas)} gwei` : ""}).`
        ].join("\n"), {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TipAboveFeeCapError"
        });
      }
    };
    Object.defineProperty(TipAboveFeeCapError3, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
    });
    UnknownNodeError2 = class UnknownNodeError extends BaseError4 {
      constructor({ cause }) {
        super(`An error occurred while executing: ${cause?.shortMessage}`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownNodeError"
        });
      }
    };
  });
  function getNodeError2(err, args) {
    const message = (err.details || "").toLowerCase();
    const executionRevertedError = err instanceof BaseError4 ? err.walk((e) => e.code === ExecutionRevertedError2.code) : err;
    if (executionRevertedError instanceof BaseError4) {
      return new ExecutionRevertedError2({
        cause: err,
        message: executionRevertedError.details
      });
    }
    if (ExecutionRevertedError2.nodeMessage.test(message))
      return new ExecutionRevertedError2({
        cause: err,
        message: err.details
      });
    if (FeeCapTooHighError3.nodeMessage.test(message))
      return new FeeCapTooHighError3({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas
      });
    if (FeeCapTooLowError2.nodeMessage.test(message))
      return new FeeCapTooLowError2({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas
      });
    if (NonceTooHighError2.nodeMessage.test(message))
      return new NonceTooHighError2({ cause: err, nonce: args?.nonce });
    if (NonceTooLowError2.nodeMessage.test(message))
      return new NonceTooLowError2({ cause: err, nonce: args?.nonce });
    if (NonceMaxValueError2.nodeMessage.test(message))
      return new NonceMaxValueError2({ cause: err, nonce: args?.nonce });
    if (InsufficientFundsError2.nodeMessage.test(message))
      return new InsufficientFundsError2({ cause: err });
    if (IntrinsicGasTooHighError2.nodeMessage.test(message))
      return new IntrinsicGasTooHighError2({ cause: err, gas: args?.gas });
    if (IntrinsicGasTooLowError2.nodeMessage.test(message))
      return new IntrinsicGasTooLowError2({ cause: err, gas: args?.gas });
    if (TransactionTypeNotSupportedError2.nodeMessage.test(message))
      return new TransactionTypeNotSupportedError2({ cause: err });
    if (TipAboveFeeCapError3.nodeMessage.test(message))
      return new TipAboveFeeCapError3({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas,
        maxPriorityFeePerGas: args?.maxPriorityFeePerGas
      });
    return new UnknownNodeError2({
      cause: err
    });
  }
  var init_getNodeError2 = __esm2(() => {
    init_base2();
    init_node2();
  });
  function extract2(value_, { format }) {
    if (!format)
      return {};
    const value = {};
    function extract_(formatted2) {
      const keys = Object.keys(formatted2);
      for (const key of keys) {
        if (key in value_)
          value[key] = value_[key];
        if (formatted2[key] && typeof formatted2[key] === "object" && !Array.isArray(formatted2[key]))
          extract_(formatted2[key]);
      }
    }
    const formatted = format(value_ || {});
    extract_(formatted);
    return value;
  }
  function formatTransactionRequest3(request) {
    const rpcRequest = {};
    if (typeof request.accessList !== "undefined")
      rpcRequest.accessList = request.accessList;
    if (typeof request.blobVersionedHashes !== "undefined")
      rpcRequest.blobVersionedHashes = request.blobVersionedHashes;
    if (typeof request.blobs !== "undefined") {
      if (typeof request.blobs[0] !== "string")
        rpcRequest.blobs = request.blobs.map((x) => bytesToHex4(x));
      else
        rpcRequest.blobs = request.blobs;
    }
    if (typeof request.data !== "undefined")
      rpcRequest.data = request.data;
    if (typeof request.from !== "undefined")
      rpcRequest.from = request.from;
    if (typeof request.gas !== "undefined")
      rpcRequest.gas = numberToHex3(request.gas);
    if (typeof request.gasPrice !== "undefined")
      rpcRequest.gasPrice = numberToHex3(request.gasPrice);
    if (typeof request.maxFeePerBlobGas !== "undefined")
      rpcRequest.maxFeePerBlobGas = numberToHex3(request.maxFeePerBlobGas);
    if (typeof request.maxFeePerGas !== "undefined")
      rpcRequest.maxFeePerGas = numberToHex3(request.maxFeePerGas);
    if (typeof request.maxPriorityFeePerGas !== "undefined")
      rpcRequest.maxPriorityFeePerGas = numberToHex3(request.maxPriorityFeePerGas);
    if (typeof request.nonce !== "undefined")
      rpcRequest.nonce = numberToHex3(request.nonce);
    if (typeof request.to !== "undefined")
      rpcRequest.to = request.to;
    if (typeof request.type !== "undefined")
      rpcRequest.type = rpcTransactionType3[request.type];
    if (typeof request.value !== "undefined")
      rpcRequest.value = numberToHex3(request.value);
    return rpcRequest;
  }
  var rpcTransactionType3;
  var init_transactionRequest2 = __esm2(() => {
    init_toHex2();
    rpcTransactionType3 = {
      legacy: "0x0",
      eip2930: "0x1",
      eip1559: "0x2",
      eip4844: "0x3"
    };
  });
  function assertRequest2(args) {
    const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to } = args;
    const account = account_ ? parseAccount2(account_) : void 0;
    if (account && !isAddress3(account.address))
      throw new InvalidAddressError3({ address: account.address });
    if (to && !isAddress3(to))
      throw new InvalidAddressError3({ address: to });
    if (typeof gasPrice !== "undefined" && (typeof maxFeePerGas !== "undefined" || typeof maxPriorityFeePerGas !== "undefined"))
      throw new FeeConflictError2();
    if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)
      throw new FeeCapTooHighError3({ maxFeePerGas });
    if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
      throw new TipAboveFeeCapError3({ maxFeePerGas, maxPriorityFeePerGas });
  }
  var init_assertRequest2 = __esm2(() => {
    init_address2();
    init_node2();
    init_transaction2();
    init_isAddress2();
  });
  function setBigUint643(view, byteOffset, value, isLE22) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE22);
    const _32n22 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n22 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE22 ? 4 : 0;
    const l = isLE22 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE22);
    view.setUint32(byteOffset + l, wl, isLE22);
  }
  var SHA2;
  var init__sha2 = __esm2(() => {
    init__assert();
    init_utils22();
    SHA2 = class SHA2 extends Hash3 {
      constructor(blockLen, outputLen, padOffset, isLE22) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE22;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = createView3(this.buffer);
      }
      update(data) {
        exists3(this);
        const { view, buffer: buffer2, blockLen } = this;
        data = toBytes23(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = createView3(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer2.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        exists3(this);
        output3(out, this);
        this.finished = true;
        const { buffer: buffer2, view, blockLen, isLE: isLE22 } = this;
        let { pos } = this;
        buffer2[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer2[i] = 0;
        setBigUint643(view, blockLen - 8, BigInt(this.length * 8), isLE22);
        this.process(view, 0);
        const oview = createView3(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE22);
      }
      digest() {
        const { buffer: buffer2, outputLen } = this;
        this.digestInto(buffer2);
        const res = buffer2.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer2);
        return to;
      }
    };
  });
  var Chi3 = (a, b, c) => a & b ^ ~a & c;
  var Maj3 = (a, b, c) => a & b ^ a & c ^ b & c;
  var SHA256_K3;
  var IV;
  var SHA256_W3;
  var SHA2563;
  var sha2564;
  var init_sha2562 = __esm2(() => {
    init__sha2();
    init_utils22();
    SHA256_K3 = /* @__PURE__ */ new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    IV = /* @__PURE__ */ new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    SHA256_W3 = /* @__PURE__ */ new Uint32Array(64);
    SHA2563 = class SHA256 extends SHA2 {
      constructor() {
        super(64, 32, 8, false);
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W3[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W3[i - 15];
          const W2 = SHA256_W3[i - 2];
          const s0 = rotr3(W15, 7) ^ rotr3(W15, 18) ^ W15 >>> 3;
          const s1 = rotr3(W2, 17) ^ rotr3(W2, 19) ^ W2 >>> 10;
          SHA256_W3[i] = s1 + SHA256_W3[i - 7] + s0 + SHA256_W3[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = rotr3(E, 6) ^ rotr3(E, 11) ^ rotr3(E, 25);
          const T1 = H + sigma1 + Chi3(E, F, G) + SHA256_K3[i] + SHA256_W3[i] | 0;
          const sigma0 = rotr3(A, 2) ^ rotr3(A, 13) ^ rotr3(A, 22);
          const T2 = sigma0 + Maj3(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W3.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    sha2564 = /* @__PURE__ */ wrapConstructor3(() => new SHA2563());
  });
  function decodeFunctionResult2(parameters) {
    const { abi, args, functionName, data } = parameters;
    let abiItem = abi[0];
    if (functionName) {
      const item = getAbiItem2({ abi, args, name: functionName });
      if (!item)
        throw new AbiFunctionNotFoundError2(functionName, { docsPath: docsPath42 });
      abiItem = item;
    }
    if (abiItem.type !== "function")
      throw new AbiFunctionNotFoundError2(void 0, { docsPath: docsPath42 });
    if (!abiItem.outputs)
      throw new AbiFunctionOutputsNotFoundError2(abiItem.name, { docsPath: docsPath42 });
    const values = decodeAbiParameters2(abiItem.outputs, data);
    if (values && values.length > 1)
      return values;
    if (values && values.length === 1)
      return values[0];
    return;
  }
  var docsPath42 = "/docs/contract/decodeFunctionResult";
  var init_decodeFunctionResult2 = __esm2(() => {
    init_abi2();
    init_decodeAbiParameters2();
    init_getAbiItem2();
  });
  var multicall3Abi2;
  var universalResolverErrors2;
  var universalResolverResolveAbi2;
  var universalResolverReverseAbi2;
  var init_abis2 = __esm2(() => {
    multicall3Abi2 = [
      {
        inputs: [
          {
            components: [
              {
                name: "target",
                type: "address"
              },
              {
                name: "allowFailure",
                type: "bool"
              },
              {
                name: "callData",
                type: "bytes"
              }
            ],
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate3",
        outputs: [
          {
            components: [
              {
                name: "success",
                type: "bool"
              },
              {
                name: "returnData",
                type: "bytes"
              }
            ],
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
    universalResolverErrors2 = [
      {
        inputs: [],
        name: "ResolverNotFound",
        type: "error"
      },
      {
        inputs: [],
        name: "ResolverWildcardNotSupported",
        type: "error"
      },
      {
        inputs: [],
        name: "ResolverNotContract",
        type: "error"
      },
      {
        inputs: [
          {
            name: "returnData",
            type: "bytes"
          }
        ],
        name: "ResolverError",
        type: "error"
      },
      {
        inputs: [
          {
            components: [
              {
                name: "status",
                type: "uint16"
              },
              {
                name: "message",
                type: "string"
              }
            ],
            name: "errors",
            type: "tuple[]"
          }
        ],
        name: "HttpError",
        type: "error"
      }
    ];
    universalResolverResolveAbi2 = [
      ...universalResolverErrors2,
      {
        name: "resolve",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes" },
          { name: "data", type: "bytes" }
        ],
        outputs: [
          { name: "", type: "bytes" },
          { name: "address", type: "address" }
        ]
      },
      {
        name: "resolve",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes" },
          { name: "data", type: "bytes" },
          { name: "gateways", type: "string[]" }
        ],
        outputs: [
          { name: "", type: "bytes" },
          { name: "address", type: "address" }
        ]
      }
    ];
    universalResolverReverseAbi2 = [
      ...universalResolverErrors2,
      {
        name: "reverse",
        type: "function",
        stateMutability: "view",
        inputs: [{ type: "bytes", name: "reverseName" }],
        outputs: [
          { type: "string", name: "resolvedName" },
          { type: "address", name: "resolvedAddress" },
          { type: "address", name: "reverseResolver" },
          { type: "address", name: "resolver" }
        ]
      },
      {
        name: "reverse",
        type: "function",
        stateMutability: "view",
        inputs: [
          { type: "bytes", name: "reverseName" },
          { type: "string[]", name: "gateways" }
        ],
        outputs: [
          { type: "string", name: "resolvedName" },
          { type: "address", name: "resolvedAddress" },
          { type: "address", name: "reverseResolver" },
          { type: "address", name: "resolver" }
        ]
      }
    ];
  });
  var aggregate3Signature2 = "0x82ad56cb";
  var ChainDoesNotSupportContract2;
  var ChainMismatchError2;
  var ChainNotFoundError2;
  var ClientChainNotConfiguredError2;
  var init_chain2 = __esm2(() => {
    init_base2();
    ChainDoesNotSupportContract2 = class ChainDoesNotSupportContract extends BaseError4 {
      constructor({ blockNumber, chain, contract }) {
        super(`Chain "${chain.name}" does not support contract "${contract.name}".`, {
          metaMessages: [
            "This could be due to any of the following:",
            ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [
              `- The contract "${contract.name}" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`
            ] : [
              `- The chain does not have the contract "${contract.name}" configured.`
            ]
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainDoesNotSupportContract"
        });
      }
    };
    ChainMismatchError2 = class ChainMismatchError extends BaseError4 {
      constructor({ chain, currentChainId }) {
        super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} \u2013 ${chain.name}).`, {
          metaMessages: [
            `Current Chain ID:  ${currentChainId}`,
            `Expected Chain ID: ${chain.id} \u2013 ${chain.name}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainMismatchError"
        });
      }
    };
    ChainNotFoundError2 = class ChainNotFoundError extends BaseError4 {
      constructor() {
        super([
          "No chain was provided to the request.",
          "Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainNotFoundError"
        });
      }
    };
    ClientChainNotConfiguredError2 = class ClientChainNotConfiguredError extends BaseError4 {
      constructor() {
        super("No chain was provided to the Client.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ClientChainNotConfiguredError"
        });
      }
    };
  });
  function getChainContractAddress2({ blockNumber, chain, contract: name }) {
    const contract = chain?.contracts?.[name];
    if (!contract)
      throw new ChainDoesNotSupportContract2({
        chain,
        contract: { name }
      });
    if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber)
      throw new ChainDoesNotSupportContract2({
        blockNumber,
        chain,
        contract: {
          name,
          blockCreated: contract.blockCreated
        }
      });
    return contract.address;
  }
  var init_getChainContractAddress2 = __esm2(() => {
    init_chain2();
  });
  function getCallError2(err, { docsPath: docsPath52, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError2(err, args);
      if (cause2 instanceof UnknownNodeError2)
        return err;
      return cause2;
    })();
    return new CallExecutionError2(cause, {
      docsPath: docsPath52,
      ...args
    });
  }
  var init_getCallError2 = __esm2(() => {
    init_contract3();
    init_node2();
    init_getNodeError2();
  });
  function createBatchScheduler2({ fn, id, shouldSplitBatch, wait: wait3 = 0, sort }) {
    const exec = async () => {
      const scheduler = getScheduler();
      flush();
      const args = scheduler.map(({ args: args2 }) => args2);
      if (args.length === 0)
        return;
      fn(args).then((data) => {
        if (sort && Array.isArray(data))
          data.sort(sort);
        for (let i = 0; i < scheduler.length; i++) {
          const { pendingPromise } = scheduler[i];
          pendingPromise.resolve?.([data[i], data]);
        }
      }).catch((err) => {
        for (let i = 0; i < scheduler.length; i++) {
          const { pendingPromise } = scheduler[i];
          pendingPromise.reject?.(err);
        }
      });
    };
    const flush = () => schedulerCache2.delete(id);
    const getBatchedArgs = () => getScheduler().map(({ args }) => args);
    const getScheduler = () => schedulerCache2.get(id) || [];
    const setScheduler = (item) => schedulerCache2.set(id, [...getScheduler(), item]);
    return {
      flush,
      async schedule(args) {
        const pendingPromise = {};
        const promise = new Promise((resolve, reject) => {
          pendingPromise.resolve = resolve;
          pendingPromise.reject = reject;
        });
        const split22 = shouldSplitBatch?.([...getBatchedArgs(), args]);
        if (split22)
          exec();
        const hasActiveScheduler = getScheduler().length > 0;
        if (hasActiveScheduler) {
          setScheduler({ args, pendingPromise });
          return promise;
        }
        setScheduler({ args, pendingPromise });
        setTimeout(exec, wait3);
        return promise;
      }
    };
  }
  var schedulerCache2;
  var init_createBatchScheduler2 = __esm2(() => {
    schedulerCache2 = /* @__PURE__ */ new Map();
  });
  var OffchainLookupError2;
  var OffchainLookupResponseMalformedError2;
  var OffchainLookupSenderMismatchError2;
  var init_ccip3 = __esm2(() => {
    init_base2();
    init_utils5();
    OffchainLookupError2 = class OffchainLookupError extends BaseError4 {
      constructor({ callbackSelector, cause, data, extraData, sender, urls }) {
        super(cause.shortMessage || "An error occurred while fetching for an offchain result.", {
          cause,
          metaMessages: [
            ...cause.metaMessages || [],
            cause.metaMessages?.length ? "" : [],
            "Offchain Gateway Call:",
            urls && [
              "  Gateway URL(s):",
              ...urls.map((url) => `    ${getUrl2(url)}`)
            ],
            `  Sender: ${sender}`,
            `  Data: ${data}`,
            `  Callback selector: ${callbackSelector}`,
            `  Extra data: ${extraData}`
          ].flat()
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "OffchainLookupError"
        });
      }
    };
    OffchainLookupResponseMalformedError2 = class OffchainLookupResponseMalformedError extends BaseError4 {
      constructor({ result, url }) {
        super("Offchain gateway response is malformed. Response data must be a hex value.", {
          metaMessages: [
            `Gateway URL: ${getUrl2(url)}`,
            `Response: ${stringify2(result)}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "OffchainLookupResponseMalformedError"
        });
      }
    };
    OffchainLookupSenderMismatchError2 = class OffchainLookupSenderMismatchError extends BaseError4 {
      constructor({ sender, to }) {
        super("Reverted sender address does not match target contract address (`to`).", {
          metaMessages: [
            `Contract address: ${to}`,
            `OffchainLookup sender address: ${sender}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "OffchainLookupSenderMismatchError"
        });
      }
    };
  });
  function isAddressEqual2(a, b) {
    if (!isAddress3(a, { strict: false }))
      throw new InvalidAddressError3({ address: a });
    if (!isAddress3(b, { strict: false }))
      throw new InvalidAddressError3({ address: b });
    return a.toLowerCase() === b.toLowerCase();
  }
  var init_isAddressEqual2 = __esm2(() => {
    init_address2();
    init_isAddress2();
  });
  var exports_ccip = {};
  __export3(exports_ccip, {
    offchainLookupSignature: () => offchainLookupSignature2,
    offchainLookupAbiItem: () => offchainLookupAbiItem2,
    offchainLookup: () => offchainLookup2,
    ccipRequest: () => ccipRequest2
  });
  async function offchainLookup2(client, { blockNumber, blockTag, data, to }) {
    const { args } = decodeErrorResult2({
      data,
      abi: [offchainLookupAbiItem2]
    });
    const [sender, urls, callData, callbackSelector, extraData] = args;
    const { ccipRead } = client;
    const ccipRequest_ = ccipRead && typeof ccipRead?.request === "function" ? ccipRead.request : ccipRequest2;
    try {
      if (!isAddressEqual2(to, sender))
        throw new OffchainLookupSenderMismatchError2({ sender, to });
      const result = await ccipRequest_({ data: callData, sender, urls });
      const { data: data_ } = await call2(client, {
        blockNumber,
        blockTag,
        data: concat2([
          callbackSelector,
          encodeAbiParameters2([{ type: "bytes" }, { type: "bytes" }], [result, extraData])
        ]),
        to
      });
      return data_;
    } catch (err) {
      throw new OffchainLookupError2({
        callbackSelector,
        cause: err,
        data,
        extraData,
        sender,
        urls
      });
    }
  }
  async function ccipRequest2({ data, sender, urls }) {
    let error = new Error("An unknown error occurred.");
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      const method = url.includes("{data}") ? "GET" : "POST";
      const body = method === "POST" ? { data, sender } : void 0;
      try {
        const response = await fetch(url.replace("{sender}", sender).replace("{data}", data), {
          body: JSON.stringify(body),
          method
        });
        let result;
        if (response.headers.get("Content-Type")?.startsWith("application/json")) {
          result = (await response.json()).data;
        } else {
          result = await response.text();
        }
        if (!response.ok) {
          error = new HttpRequestError2({
            body,
            details: result?.error ? stringify2(result.error) : response.statusText,
            headers: response.headers,
            status: response.status,
            url
          });
          continue;
        }
        if (!isHex3(result)) {
          error = new OffchainLookupResponseMalformedError2({
            result,
            url
          });
          continue;
        }
        return result;
      } catch (err) {
        error = new HttpRequestError2({
          body,
          details: err.message,
          url
        });
      }
    }
    throw error;
  }
  var offchainLookupSignature2 = "0x556f1830";
  var offchainLookupAbiItem2;
  var init_ccip22 = __esm2(() => {
    init_call2();
    init_ccip3();
    init_request2();
    init_decodeErrorResult2();
    init_encodeAbiParameters2();
    init_isAddressEqual2();
    offchainLookupAbiItem2 = {
      name: "OffchainLookup",
      type: "error",
      inputs: [
        {
          name: "sender",
          type: "address"
        },
        {
          name: "urls",
          type: "string[]"
        },
        {
          name: "callData",
          type: "bytes"
        },
        {
          name: "callbackFunction",
          type: "bytes4"
        },
        {
          name: "extraData",
          type: "bytes"
        }
      ]
    };
  });
  async function call2(client, args) {
    const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = "latest", accessList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;
    const account = account_ ? parseAccount2(account_) : void 0;
    try {
      assertRequest2(args);
      const blockNumberHex = blockNumber ? numberToHex3(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      const rpcStateOverride = parseStateOverride(stateOverride);
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || formatTransactionRequest3;
      const request = format({
        ...extract2(rest, { format: chainFormat }),
        from: account?.address,
        accessList,
        blobs,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      if (batch && shouldPerformMulticall2({ request }) && !rpcStateOverride) {
        try {
          return await scheduleMulticall2(client, {
            ...request,
            blockNumber,
            blockTag
          });
        } catch (err) {
          if (!(err instanceof ClientChainNotConfiguredError2) && !(err instanceof ChainDoesNotSupportContract2))
            throw err;
        }
      }
      const response = await client.request({
        method: "eth_call",
        params: rpcStateOverride ? [
          request,
          block,
          rpcStateOverride
        ] : [request, block]
      });
      if (response === "0x")
        return { data: void 0 };
      return { data: response };
    } catch (err) {
      const data2 = getRevertErrorData2(err);
      const { offchainLookup: offchainLookup22, offchainLookupSignature: offchainLookupSignature22 } = await Promise.resolve().then(() => (init_ccip22(), exports_ccip));
      if (client.ccipRead !== false && data2?.slice(0, 10) === offchainLookupSignature22 && to)
        return { data: await offchainLookup22(client, { data: data2, to }) };
      throw getCallError2(err, {
        ...args,
        account,
        chain: client.chain
      });
    }
  }
  function shouldPerformMulticall2({ request }) {
    const { data, to, ...request_ } = request;
    if (!data)
      return false;
    if (data.startsWith(aggregate3Signature2))
      return false;
    if (!to)
      return false;
    if (Object.values(request_).filter((x) => typeof x !== "undefined").length > 0)
      return false;
    return true;
  }
  async function scheduleMulticall2(client, args) {
    const { batchSize = 1024, wait: wait3 = 0 } = typeof client.batch?.multicall === "object" ? client.batch.multicall : {};
    const { blockNumber, blockTag = "latest", data, multicallAddress: multicallAddress_, to } = args;
    let multicallAddress = multicallAddress_;
    if (!multicallAddress) {
      if (!client.chain)
        throw new ClientChainNotConfiguredError2();
      multicallAddress = getChainContractAddress2({
        blockNumber,
        chain: client.chain,
        contract: "multicall3"
      });
    }
    const blockNumberHex = blockNumber ? numberToHex3(blockNumber) : void 0;
    const block = blockNumberHex || blockTag;
    const { schedule } = createBatchScheduler2({
      id: `${client.uid}.${block}`,
      wait: wait3,
      shouldSplitBatch(args2) {
        const size22 = args2.reduce((size32, { data: data2 }) => size32 + (data2.length - 2), 0);
        return size22 > batchSize * 2;
      },
      fn: async (requests) => {
        const calls = requests.map((request) => ({
          allowFailure: true,
          callData: request.data,
          target: request.to
        }));
        const calldata = encodeFunctionData2({
          abi: multicall3Abi2,
          args: [calls],
          functionName: "aggregate3"
        });
        const data2 = await client.request({
          method: "eth_call",
          params: [
            {
              data: calldata,
              to: multicallAddress
            },
            block
          ]
        });
        return decodeFunctionResult2({
          abi: multicall3Abi2,
          args: [calls],
          functionName: "aggregate3",
          data: data2 || "0x"
        });
      }
    });
    const [{ returnData, success }] = await schedule({ data, to });
    if (!success)
      throw new RawContractError2({ data: returnData });
    if (returnData === "0x")
      return { data: void 0 };
    return { data: returnData };
  }
  function getRevertErrorData2(err) {
    if (!(err instanceof BaseError4))
      return;
    const error = err.walk();
    return typeof error?.data === "object" ? error.data?.data : error.data;
  }
  function parseStateMapping(stateMapping) {
    if (!stateMapping || stateMapping.length === 0)
      return;
    return stateMapping.reduce((acc, { slot, value }) => {
      if (slot.length !== 66)
        throw new InvalidBytesLengthError2({
          size: slot.length,
          targetSize: 66,
          type: "hex"
        });
      if (value.length !== 66)
        throw new InvalidBytesLengthError2({
          size: value.length,
          targetSize: 66,
          type: "hex"
        });
      acc[slot] = value;
      return acc;
    }, {});
  }
  function parseAccountStateOverride(args) {
    const { balance, nonce, state, stateDiff, code } = args;
    const rpcAccountStateOverride = {};
    if (code !== void 0)
      rpcAccountStateOverride.code = code;
    if (balance !== void 0)
      rpcAccountStateOverride.balance = numberToHex3(balance);
    if (nonce !== void 0)
      rpcAccountStateOverride.nonce = numberToHex3(nonce);
    if (state !== void 0)
      rpcAccountStateOverride.state = parseStateMapping(state);
    if (stateDiff !== void 0) {
      if (rpcAccountStateOverride.state)
        throw new StateAssignmentConflictError2();
      rpcAccountStateOverride.stateDiff = parseStateMapping(stateDiff);
    }
    return rpcAccountStateOverride;
  }
  function parseStateOverride(args) {
    if (!args)
      return;
    const rpcStateOverride = {};
    for (const { address, ...accountState } of args) {
      if (!isAddress3(address, { strict: false }))
        throw new InvalidAddressError3({ address });
      if (rpcStateOverride[address])
        throw new AccountStateConflictError2({ address });
      rpcStateOverride[address] = parseAccountStateOverride(accountState);
    }
    return rpcStateOverride;
  }
  var init_call2 = __esm2(() => {
    init_abis2();
    init_address2();
    init_base2();
    init_chain2();
    init_contract3();
    init_data2();
    init_stateOverride3();
    init_decodeFunctionResult2();
    init_encodeFunctionData2();
    init_isAddress2();
    init_getChainContractAddress2();
    init_toHex2();
    init_getCallError2();
    init_transactionRequest2();
    init_createBatchScheduler2();
    init_assertRequest2();
  });
  var require_defineChain = __commonJS2((exports2) => {
    function defineChain2(chain) {
      return {
        formatters: void 0,
        fees: void 0,
        serializers: void 0,
        ...chain
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineChain = void 0;
    exports2.defineChain = defineChain2;
  });
  var require_acala = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.acala = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.acala = (0, defineChain_js_1.defineChain)({
      id: 787,
      name: "Acala",
      network: "acala",
      nativeCurrency: {
        name: "Acala",
        symbol: "ACA",
        decimals: 18
      },
      rpcUrls: {
        public: {
          http: ["https://eth-rpc-acala.aca-api.network"],
          webSocket: ["wss://eth-rpc-acala.aca-api.network"]
        },
        default: {
          http: ["https://eth-rpc-acala.aca-api.network"],
          webSocket: ["wss://eth-rpc-acala.aca-api.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Acala Blockscout",
          url: "https://blockscout.acala.network",
          apiUrl: "https://blockscout.acala.network/api"
        }
      },
      testnet: false
    });
  });
  var require_contracts = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.contracts = void 0;
    exports2.contracts = {
      gasPriceOracle: { address: "0x420000000000000000000000000000000000000F" },
      l1Block: { address: "0x4200000000000000000000000000000000000015" },
      l2CrossDomainMessenger: {
        address: "0x4200000000000000000000000000000000000007"
      },
      l2Erc721Bridge: { address: "0x4200000000000000000000000000000000000014" },
      l2StandardBridge: { address: "0x4200000000000000000000000000000000000010" },
      l2ToL1MessagePasser: {
        address: "0x4200000000000000000000000000000000000016"
      }
    };
  });
  var require_version = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.version = void 0;
    exports2.version = "2.9.20";
  });
  var require_utils = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getVersion = exports2.getUrl = exports2.getContractAddress = void 0;
    var version_js_1 = require_version();
    var getContractAddress22 = (address) => address;
    exports2.getContractAddress = getContractAddress22;
    var getUrl22 = (url) => url;
    exports2.getUrl = getUrl22;
    var getVersion2 = () => `viem@${version_js_1.version}`;
    exports2.getVersion = getVersion2;
  });
  var require_base = __commonJS2((exports2) => {
    function walk22(err, fn) {
      if (fn?.(err))
        return err;
      if (err && typeof err === "object" && "cause" in err)
        return walk22(err.cause, fn);
      return fn ? null : err;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseError = void 0;
    var utils_js_1 = require_utils();
    class BaseError22 extends Error {
      constructor(shortMessage, args = {}) {
        super();
        Object.defineProperty(this, "details", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "docsPath", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "metaMessages", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "shortMessage", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ViemError"
        });
        Object.defineProperty(this, "version", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (0, utils_js_1.getVersion)()
        });
        const details = args.cause instanceof BaseError22 ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath52 = args.cause instanceof BaseError22 ? args.cause.docsPath || args.docsPath : args.docsPath;
        this.message = [
          shortMessage || "An error occurred.",
          "",
          ...args.metaMessages ? [...args.metaMessages, ""] : [],
          ...docsPath52 ? [
            `Docs: https://viem.sh${docsPath52}${args.docsSlug ? `#${args.docsSlug}` : ""}`
          ] : [],
          ...details ? [`Details: ${details}`] : [],
          `Version: ${this.version}`
        ].join("\n");
        if (args.cause)
          this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath52;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
      }
      walk(fn) {
        return walk22(this, fn);
      }
    }
    exports2.BaseError = BaseError22;
  });
  var require_encoding = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SizeOverflowError = exports2.InvalidHexValueError = exports2.InvalidHexBooleanError = exports2.InvalidBytesBooleanError = exports2.IntegerOutOfRangeError = void 0;
    var base_js_1 = require_base();
    class IntegerOutOfRangeError22 extends base_js_1.BaseError {
      constructor({ max, min, signed, size: size22, value }) {
        super(`Number "${value}" is not in safe ${size22 ? `${size22 * 8}-bit ${signed ? "signed" : "unsigned"} ` : ""}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "IntegerOutOfRangeError"
        });
      }
    }
    exports2.IntegerOutOfRangeError = IntegerOutOfRangeError22;
    class InvalidBytesBooleanError22 extends base_js_1.BaseError {
      constructor(bytes22) {
        super(`Bytes value "${bytes22}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidBytesBooleanError"
        });
      }
    }
    exports2.InvalidBytesBooleanError = InvalidBytesBooleanError22;
    class InvalidHexBooleanError2 extends base_js_1.BaseError {
      constructor(hex) {
        super(`Hex value "${hex}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidHexBooleanError"
        });
      }
    }
    exports2.InvalidHexBooleanError = InvalidHexBooleanError2;
    class InvalidHexValueError2 extends base_js_1.BaseError {
      constructor(value) {
        super(`Hex value "${value}" is an odd length (${value.length}). It must be an even length.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidHexValueError"
        });
      }
    }
    exports2.InvalidHexValueError = InvalidHexValueError2;
    class SizeOverflowError22 extends base_js_1.BaseError {
      constructor({ givenSize, maxSize }) {
        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SizeOverflowError"
        });
      }
    }
    exports2.SizeOverflowError = SizeOverflowError22;
  });
  var require_isHex = __commonJS2((exports2) => {
    function isHex22(value, { strict = true } = {}) {
      if (!value)
        return false;
      if (typeof value !== "string")
        return false;
      return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith("0x");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isHex = void 0;
    exports2.isHex = isHex22;
  });
  var require_size = __commonJS2((exports2) => {
    function size22(value) {
      if ((0, isHex_js_1.isHex)(value, { strict: false }))
        return Math.ceil((value.length - 2) / 2);
      return value.length;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.size = void 0;
    var isHex_js_1 = require_isHex();
    exports2.size = size22;
  });
  var require_trim = __commonJS2((exports2) => {
    function trim22(hexOrBytes, { dir = "left" } = {}) {
      let data = typeof hexOrBytes === "string" ? hexOrBytes.replace("0x", "") : hexOrBytes;
      let sliceLength = 0;
      for (let i = 0; i < data.length - 1; i++) {
        if (data[dir === "left" ? i : data.length - i - 1].toString() === "0")
          sliceLength++;
        else
          break;
      }
      data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
      if (typeof hexOrBytes === "string") {
        if (data.length === 1 && dir === "right")
          data = `${data}0`;
        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;
      }
      return data;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.trim = void 0;
    exports2.trim = trim22;
  });
  var require_data = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidBytesLengthError = exports2.SizeExceedsPaddingSizeError = exports2.SliceOffsetOutOfBoundsError = void 0;
    var base_js_1 = require_base();
    class SliceOffsetOutOfBoundsError22 extends base_js_1.BaseError {
      constructor({ offset, position, size: size22 }) {
        super(`Slice ${position === "start" ? "starting" : "ending"} at offset "${offset}" is out-of-bounds (size: ${size22}).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SliceOffsetOutOfBoundsError"
        });
      }
    }
    exports2.SliceOffsetOutOfBoundsError = SliceOffsetOutOfBoundsError22;
    class SizeExceedsPaddingSizeError22 extends base_js_1.BaseError {
      constructor({ size: size22, targetSize, type }) {
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size22}) exceeds padding size (${targetSize}).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SizeExceedsPaddingSizeError"
        });
      }
    }
    exports2.SizeExceedsPaddingSizeError = SizeExceedsPaddingSizeError22;
    class InvalidBytesLengthError22 extends base_js_1.BaseError {
      constructor({ size: size22, targetSize, type }) {
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size22} ${type} long.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidBytesLengthError"
        });
      }
    }
    exports2.InvalidBytesLengthError = InvalidBytesLengthError22;
  });
  var require_pad = __commonJS2((exports2) => {
    function pad22(hexOrBytes, { dir, size: size22 = 32 } = {}) {
      if (typeof hexOrBytes === "string")
        return padHex22(hexOrBytes, { dir, size: size22 });
      return padBytes22(hexOrBytes, { dir, size: size22 });
    }
    function padHex22(hex_, { dir, size: size22 = 32 } = {}) {
      if (size22 === null)
        return hex_;
      const hex = hex_.replace("0x", "");
      if (hex.length > size22 * 2)
        throw new data_js_1.SizeExceedsPaddingSizeError({
          size: Math.ceil(hex.length / 2),
          targetSize: size22,
          type: "hex"
        });
      return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size22 * 2, "0")}`;
    }
    function padBytes22(bytes22, { dir, size: size22 = 32 } = {}) {
      if (size22 === null)
        return bytes22;
      if (bytes22.length > size22)
        throw new data_js_1.SizeExceedsPaddingSizeError({
          size: bytes22.length,
          targetSize: size22,
          type: "bytes"
        });
      const paddedBytes = new Uint8Array(size22);
      for (let i = 0; i < size22; i++) {
        const padEnd = dir === "right";
        paddedBytes[padEnd ? i : size22 - i - 1] = bytes22[padEnd ? i : bytes22.length - i - 1];
      }
      return paddedBytes;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.padBytes = exports2.padHex = exports2.pad = void 0;
    var data_js_1 = require_data();
    exports2.pad = pad22;
    exports2.padHex = padHex22;
    exports2.padBytes = padBytes22;
  });
  var require_toHex = __commonJS2((exports2) => {
    function toHex22(value, opts = {}) {
      if (typeof value === "number" || typeof value === "bigint")
        return numberToHex22(value, opts);
      if (typeof value === "string") {
        return stringToHex22(value, opts);
      }
      if (typeof value === "boolean")
        return boolToHex22(value, opts);
      return bytesToHex22(value, opts);
    }
    function boolToHex22(value, opts = {}) {
      const hex = `0x${Number(value)}`;
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(hex, { size: opts.size });
        return (0, pad_js_1.pad)(hex, { size: opts.size });
      }
      return hex;
    }
    function bytesToHex22(value, opts = {}) {
      let string = "";
      for (let i = 0; i < value.length; i++) {
        string += hexes22[value[i]];
      }
      const hex = `0x${string}`;
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(hex, { size: opts.size });
        return (0, pad_js_1.pad)(hex, { dir: "right", size: opts.size });
      }
      return hex;
    }
    function numberToHex22(value_, opts = {}) {
      const { signed, size: size22 } = opts;
      const value = BigInt(value_);
      let maxValue;
      if (size22) {
        if (signed)
          maxValue = (1n << BigInt(size22) * 8n - 1n) - 1n;
        else
          maxValue = 2n ** (BigInt(size22) * 8n) - 1n;
      } else if (typeof value_ === "number") {
        maxValue = BigInt(Number.MAX_SAFE_INTEGER);
      }
      const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
      if (maxValue && value > maxValue || value < minValue) {
        const suffix = typeof value_ === "bigint" ? "n" : "";
        throw new encoding_js_1.IntegerOutOfRangeError({
          max: maxValue ? `${maxValue}${suffix}` : void 0,
          min: `${minValue}${suffix}`,
          signed,
          size: size22,
          value: `${value_}${suffix}`
        });
      }
      const hex = `0x${(signed && value < 0 ? (1n << BigInt(size22 * 8)) + BigInt(value) : value).toString(16)}`;
      if (size22)
        return (0, pad_js_1.pad)(hex, { size: size22 });
      return hex;
    }
    function stringToHex22(value_, opts = {}) {
      const value = encoder32.encode(value_);
      return bytesToHex22(value, opts);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringToHex = exports2.numberToHex = exports2.bytesToHex = exports2.boolToHex = exports2.toHex = void 0;
    var encoding_js_1 = require_encoding();
    var pad_js_1 = require_pad();
    var fromHex_js_1 = require_fromHex();
    var hexes22 = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
    exports2.toHex = toHex22;
    exports2.boolToHex = boolToHex22;
    exports2.bytesToHex = bytesToHex22;
    exports2.numberToHex = numberToHex22;
    var encoder32 = new TextEncoder();
    exports2.stringToHex = stringToHex22;
  });
  var require_toBytes = __commonJS2((exports2) => {
    function toBytes32(value, opts = {}) {
      if (typeof value === "number" || typeof value === "bigint")
        return numberToBytes22(value, opts);
      if (typeof value === "boolean")
        return boolToBytes22(value, opts);
      if ((0, isHex_js_1.isHex)(value))
        return hexToBytes22(value, opts);
      return stringToBytes22(value, opts);
    }
    function boolToBytes22(value, opts = {}) {
      const bytes22 = new Uint8Array(1);
      bytes22[0] = Number(value);
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(bytes22, { size: opts.size });
        return (0, pad_js_1.pad)(bytes22, { size: opts.size });
      }
      return bytes22;
    }
    function charCodeToBase1622(char) {
      if (char >= charCodeMap22.zero && char <= charCodeMap22.nine)
        return char - charCodeMap22.zero;
      if (char >= charCodeMap22.A && char <= charCodeMap22.F)
        return char - (charCodeMap22.A - 10);
      if (char >= charCodeMap22.a && char <= charCodeMap22.f)
        return char - (charCodeMap22.a - 10);
      return;
    }
    function hexToBytes22(hex_, opts = {}) {
      let hex = hex_;
      if (opts.size) {
        (0, fromHex_js_1.assertSize)(hex, { size: opts.size });
        hex = (0, pad_js_1.pad)(hex, { dir: "right", size: opts.size });
      }
      let hexString = hex.slice(2);
      if (hexString.length % 2)
        hexString = `0${hexString}`;
      const length = hexString.length / 2;
      const bytes22 = new Uint8Array(length);
      for (let index2 = 0, j = 0; index2 < length; index2++) {
        const nibbleLeft = charCodeToBase1622(hexString.charCodeAt(j++));
        const nibbleRight = charCodeToBase1622(hexString.charCodeAt(j++));
        if (nibbleLeft === void 0 || nibbleRight === void 0) {
          throw new base_js_1.BaseError(`Invalid byte sequence ("${hexString[j - 2]}${hexString[j - 1]}" in "${hexString}").`);
        }
        bytes22[index2] = nibbleLeft * 16 + nibbleRight;
      }
      return bytes22;
    }
    function numberToBytes22(value, opts) {
      const hex = (0, toHex_js_1.numberToHex)(value, opts);
      return hexToBytes22(hex);
    }
    function stringToBytes22(value, opts = {}) {
      const bytes22 = encoder32.encode(value);
      if (typeof opts.size === "number") {
        (0, fromHex_js_1.assertSize)(bytes22, { size: opts.size });
        return (0, pad_js_1.pad)(bytes22, { dir: "right", size: opts.size });
      }
      return bytes22;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringToBytes = exports2.numberToBytes = exports2.hexToBytes = exports2.boolToBytes = exports2.toBytes = void 0;
    var base_js_1 = require_base();
    var isHex_js_1 = require_isHex();
    var pad_js_1 = require_pad();
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    var encoder32 = new TextEncoder();
    exports2.toBytes = toBytes32;
    exports2.boolToBytes = boolToBytes22;
    var charCodeMap22 = {
      zero: 48,
      nine: 57,
      A: 65,
      F: 70,
      a: 97,
      f: 102
    };
    exports2.hexToBytes = hexToBytes22;
    exports2.numberToBytes = numberToBytes22;
    exports2.stringToBytes = stringToBytes22;
  });
  var require_fromHex = __commonJS2((exports2) => {
    function assertSize22(hexOrBytes, { size: size22 }) {
      if ((0, size_js_1.size)(hexOrBytes) > size22)
        throw new encoding_js_1.SizeOverflowError({
          givenSize: (0, size_js_1.size)(hexOrBytes),
          maxSize: size22
        });
    }
    function fromHex2(hex, toOrOpts) {
      const opts = typeof toOrOpts === "string" ? { to: toOrOpts } : toOrOpts;
      const to = opts.to;
      if (to === "number")
        return hexToNumber22(hex, opts);
      if (to === "bigint")
        return hexToBigInt22(hex, opts);
      if (to === "string")
        return hexToString2(hex, opts);
      if (to === "boolean")
        return hexToBool2(hex, opts);
      return (0, toBytes_js_1.hexToBytes)(hex, opts);
    }
    function hexToBigInt22(hex, opts = {}) {
      const { signed } = opts;
      if (opts.size)
        assertSize22(hex, { size: opts.size });
      const value = BigInt(hex);
      if (!signed)
        return value;
      const size22 = (hex.length - 2) / 2;
      const max = (1n << BigInt(size22) * 8n - 1n) - 1n;
      if (value <= max)
        return value;
      return value - BigInt(`0x${"f".padStart(size22 * 2, "f")}`) - 1n;
    }
    function hexToBool2(hex_, opts = {}) {
      let hex = hex_;
      if (opts.size) {
        assertSize22(hex, { size: opts.size });
        hex = (0, trim_js_1.trim)(hex);
      }
      if ((0, trim_js_1.trim)(hex) === "0x00")
        return false;
      if ((0, trim_js_1.trim)(hex) === "0x01")
        return true;
      throw new encoding_js_1.InvalidHexBooleanError(hex);
    }
    function hexToNumber22(hex, opts = {}) {
      return Number(hexToBigInt22(hex, opts));
    }
    function hexToString2(hex, opts = {}) {
      let bytes22 = (0, toBytes_js_1.hexToBytes)(hex);
      if (opts.size) {
        assertSize22(bytes22, { size: opts.size });
        bytes22 = (0, trim_js_1.trim)(bytes22, { dir: "right" });
      }
      return new TextDecoder().decode(bytes22);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hexToString = exports2.hexToNumber = exports2.hexToBool = exports2.hexToBigInt = exports2.fromHex = exports2.assertSize = void 0;
    var encoding_js_1 = require_encoding();
    var size_js_1 = require_size();
    var trim_js_1 = require_trim();
    var toBytes_js_1 = require_toBytes();
    exports2.assertSize = assertSize22;
    exports2.fromHex = fromHex2;
    exports2.hexToBigInt = hexToBigInt22;
    exports2.hexToBool = hexToBool2;
    exports2.hexToNumber = hexToNumber22;
    exports2.hexToString = hexToString2;
  });
  var require_formatter = __commonJS2((exports2) => {
    function defineFormatter2(type, format) {
      return ({ exclude, format: overrides }) => {
        return {
          exclude,
          format: (args) => {
            const formatted = format(args);
            if (exclude) {
              for (const key of exclude) {
                delete formatted[key];
              }
            }
            return {
              ...formatted,
              ...overrides(args)
            };
          },
          type
        };
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineFormatter = void 0;
    exports2.defineFormatter = defineFormatter2;
  });
  var require_transaction = __commonJS2((exports2) => {
    function formatTransaction22(transaction) {
      const transaction_ = {
        ...transaction,
        blockHash: transaction.blockHash ? transaction.blockHash : null,
        blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
        chainId: transaction.chainId ? (0, fromHex_js_1.hexToNumber)(transaction.chainId) : void 0,
        gas: transaction.gas ? BigInt(transaction.gas) : void 0,
        gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
        maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
        maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
        nonce: transaction.nonce ? (0, fromHex_js_1.hexToNumber)(transaction.nonce) : void 0,
        to: transaction.to ? transaction.to : null,
        transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
        type: transaction.type ? exports2.transactionType[transaction.type] : void 0,
        typeHex: transaction.type ? transaction.type : void 0,
        value: transaction.value ? BigInt(transaction.value) : void 0,
        v: transaction.v ? BigInt(transaction.v) : void 0
      };
      transaction_.yParity = (() => {
        if (transaction.yParity)
          return Number(transaction.yParity);
        if (typeof transaction_.v === "bigint") {
          if (transaction_.v === 0n || transaction_.v === 27n)
            return 0;
          if (transaction_.v === 1n || transaction_.v === 28n)
            return 1;
          if (transaction_.v >= 35n)
            return transaction_.v % 2n === 0n ? 1 : 0;
        }
        return;
      })();
      if (transaction_.type === "legacy") {
        delete transaction_.accessList;
        delete transaction_.maxFeePerBlobGas;
        delete transaction_.maxFeePerGas;
        delete transaction_.maxPriorityFeePerGas;
        delete transaction_.yParity;
      }
      if (transaction_.type === "eip2930") {
        delete transaction_.maxFeePerBlobGas;
        delete transaction_.maxFeePerGas;
        delete transaction_.maxPriorityFeePerGas;
      }
      if (transaction_.type === "eip1559") {
        delete transaction_.maxFeePerBlobGas;
      }
      return transaction_;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineTransaction = exports2.formatTransaction = exports2.transactionType = void 0;
    var fromHex_js_1 = require_fromHex();
    var formatter_js_1 = require_formatter();
    exports2.transactionType = {
      "0x0": "legacy",
      "0x1": "eip2930",
      "0x2": "eip1559",
      "0x3": "eip4844"
    };
    exports2.formatTransaction = formatTransaction22;
    exports2.defineTransaction = (0, formatter_js_1.defineFormatter)("transaction", formatTransaction22);
  });
  var require_block = __commonJS2((exports2) => {
    function formatBlock22(block) {
      const transactions = block.transactions?.map((transaction) => {
        if (typeof transaction === "string")
          return transaction;
        return (0, transaction_js_1.formatTransaction)(transaction);
      });
      return {
        ...block,
        baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
        blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
        difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
        excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
        gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
        gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
        hash: block.hash ? block.hash : null,
        logsBloom: block.logsBloom ? block.logsBloom : null,
        nonce: block.nonce ? block.nonce : null,
        number: block.number ? BigInt(block.number) : null,
        size: block.size ? BigInt(block.size) : void 0,
        timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
        transactions,
        totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineBlock = exports2.formatBlock = void 0;
    var formatter_js_1 = require_formatter();
    var transaction_js_1 = require_transaction();
    exports2.formatBlock = formatBlock22;
    exports2.defineBlock = (0, formatter_js_1.defineFormatter)("block", formatBlock22);
  });
  var require_log = __commonJS2((exports2) => {
    function formatLog22(log, { args, eventName } = {}) {
      return {
        ...log,
        blockHash: log.blockHash ? log.blockHash : null,
        blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
        logIndex: log.logIndex ? Number(log.logIndex) : null,
        transactionHash: log.transactionHash ? log.transactionHash : null,
        transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
        ...eventName ? { args, eventName } : {}
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatLog = void 0;
    exports2.formatLog = formatLog22;
  });
  var require_transactionReceipt = __commonJS2((exports2) => {
    function formatTransactionReceipt3(transactionReceipt) {
      const receipt = {
        ...transactionReceipt,
        blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
        contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
        cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
        effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
        gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
        logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => (0, log_js_1.formatLog)(log)) : null,
        to: transactionReceipt.to ? transactionReceipt.to : null,
        transactionIndex: transactionReceipt.transactionIndex ? (0, fromHex_js_1.hexToNumber)(transactionReceipt.transactionIndex) : null,
        status: transactionReceipt.status ? exports2.receiptStatuses[transactionReceipt.status] : null,
        type: transactionReceipt.type ? transaction_js_1.transactionType[transactionReceipt.type] || transactionReceipt.type : null
      };
      if (transactionReceipt.blobGasPrice)
        receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
      if (transactionReceipt.blobGasUsed)
        receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
      return receipt;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineTransactionReceipt = exports2.formatTransactionReceipt = exports2.receiptStatuses = void 0;
    var fromHex_js_1 = require_fromHex();
    var formatter_js_1 = require_formatter();
    var log_js_1 = require_log();
    var transaction_js_1 = require_transaction();
    exports2.receiptStatuses = {
      "0x0": "reverted",
      "0x1": "success"
    };
    exports2.formatTransactionReceipt = formatTransactionReceipt3;
    exports2.defineTransactionReceipt = (0, formatter_js_1.defineFormatter)("transactionReceipt", formatTransactionReceipt3);
  });
  var require_formatters = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatters = void 0;
    var fromHex_js_1 = require_fromHex();
    var block_js_1 = require_block();
    var transaction_js_1 = require_transaction();
    var transactionReceipt_js_1 = require_transactionReceipt();
    exports2.formatters = {
      block: (0, block_js_1.defineBlock)({
        format(args) {
          const transactions = args.transactions?.map((transaction) => {
            if (typeof transaction === "string")
              return transaction;
            const formatted = (0, transaction_js_1.formatTransaction)(transaction);
            if (formatted.typeHex === "0x7e") {
              formatted.isSystemTx = transaction.isSystemTx;
              formatted.mint = transaction.mint ? (0, fromHex_js_1.hexToBigInt)(transaction.mint) : void 0;
              formatted.sourceHash = transaction.sourceHash;
              formatted.type = "deposit";
            }
            return formatted;
          });
          return {
            transactions,
            stateRoot: args.stateRoot
          };
        }
      }),
      transaction: (0, transaction_js_1.defineTransaction)({
        format(args) {
          const transaction = {};
          if (args.type === "0x7e") {
            transaction.isSystemTx = args.isSystemTx;
            transaction.mint = args.mint ? (0, fromHex_js_1.hexToBigInt)(args.mint) : void 0;
            transaction.sourceHash = args.sourceHash;
            transaction.type = "deposit";
          }
          return transaction;
        }
      }),
      transactionReceipt: (0, transactionReceipt_js_1.defineTransactionReceipt)({
        format(args) {
          return {
            l1GasPrice: args.l1GasPrice ? (0, fromHex_js_1.hexToBigInt)(args.l1GasPrice) : null,
            l1GasUsed: args.l1GasUsed ? (0, fromHex_js_1.hexToBigInt)(args.l1GasUsed) : null,
            l1Fee: args.l1Fee ? (0, fromHex_js_1.hexToBigInt)(args.l1Fee) : null,
            l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null
          };
        }
      })
    };
  });
  var require_address = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidAddressError = void 0;
    var base_js_1 = require_base();
    class InvalidAddressError22 extends base_js_1.BaseError {
      constructor({ address }) {
        super(`Address "${address}" is invalid.`, {
          metaMessages: [
            "- Address must be a hex value of 20 bytes (40 hex characters).",
            "- Address must match its checksum counterpart."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAddressError"
        });
      }
    }
    exports2.InvalidAddressError = InvalidAddressError22;
  });
  var require_lru = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LruMap = void 0;
    class LruMap22 extends Map {
      constructor(size22) {
        super();
        Object.defineProperty(this, "maxSize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.maxSize = size22;
      }
      set(key, value) {
        super.set(key, value);
        if (this.maxSize && this.size > this.maxSize)
          this.delete(this.keys().next().value);
        return this;
      }
    }
    exports2.LruMap = LruMap22;
  });
  var require__assert = __commonJS2((exports2) => {
    function number22(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
    }
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`Expected boolean, not ${b}`);
    }
    function bytes22(b, ...lengths) {
      if (!(b instanceof Uint8Array))
        throw new Error("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    function hash22(hash32) {
      if (typeof hash32 !== "function" || typeof hash32.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number22(hash32.outputLen);
      number22(hash32.blockLen);
    }
    function exists22(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    function output22(out, instance) {
      bytes22(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.output = exports2.exists = exports2.hash = exports2.bytes = exports2.bool = exports2.number = void 0;
    exports2.number = number22;
    exports2.bool = bool;
    exports2.bytes = bytes22;
    exports2.hash = hash22;
    exports2.exists = exists22;
    exports2.output = output22;
    var assert = { number: number22, bool, bytes: bytes22, hash: hash22, exists: exists22, output: output22 };
    exports2.default = assert;
  });
  var require__u64 = __commonJS2((exports2) => {
    function fromBig22(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK6422), l: Number(n >> _32n22 & U32_MASK6422) };
      return { h: Number(n >> _32n22 & U32_MASK6422) | 0, l: Number(n & U32_MASK6422) | 0 };
    }
    function split22(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig22(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.add5L = exports2.add5H = exports2.add4H = exports2.add4L = exports2.add3H = exports2.add3L = exports2.add = exports2.rotlBL = exports2.rotlBH = exports2.rotlSL = exports2.rotlSH = exports2.rotr32L = exports2.rotr32H = exports2.rotrBL = exports2.rotrBH = exports2.rotrSL = exports2.rotrSH = exports2.shrSL = exports2.shrSH = exports2.toBig = exports2.split = exports2.fromBig = void 0;
    var U32_MASK6422 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    var _32n22 = /* @__PURE__ */ BigInt(32);
    exports2.fromBig = fromBig22;
    exports2.split = split22;
    var toBig = (h, l) => BigInt(h >>> 0) << _32n22 | BigInt(l >>> 0);
    exports2.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports2.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports2.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports2.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports2.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports2.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports2.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports2.rotr32L = rotr32L;
    var rotlSH22 = (h, l, s) => h << s | l >>> 32 - s;
    exports2.rotlSH = rotlSH22;
    var rotlSL22 = (h, l, s) => l << s | h >>> 32 - s;
    exports2.rotlSL = rotlSL22;
    var rotlBH22 = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports2.rotlBH = rotlBH22;
    var rotlBL22 = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports2.rotlBL = rotlBL22;
    exports2.add = add;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports2.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports2.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports2.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports2.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports2.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports2.add5H = add5H;
    var u64 = {
      fromBig: fromBig22,
      split: split22,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH: rotlSH22,
      rotlSL: rotlSL22,
      rotlBH: rotlBH22,
      rotlBL: rotlBL22,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports2.default = u64;
  });
  var require_cryptoNode = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crypto = void 0;
    var nc2 = __require5("node:crypto");
    exports2.crypto = nc2 && typeof nc2 === "object" && "webcrypto" in nc2 ? nc2.webcrypto : void 0;
  });
  var require_utils2 = __commonJS2((exports2) => {
    function bytesToHex22(bytes22) {
      if (!u8a2(bytes22))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes22.length; i++) {
        hex += hexes22[bytes22[i]];
      }
      return hex;
    }
    function hexToBytes22(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff2 = Date.now() - ts;
        if (diff2 >= 0 && diff2 < tick)
          continue;
        await (0, exports2.nextTick)();
        ts += diff2;
      }
    }
    function utf8ToBytes22(str2) {
      if (typeof str2 !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
      return new Uint8Array(new TextEncoder().encode(str2));
    }
    function toBytes32(data) {
      if (typeof data === "string")
        data = utf8ToBytes22(data);
      if (!u8a2(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
      return data;
    }
    function concatBytes22(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad22 = 0;
      arrays.forEach((a) => {
        if (!u8a2(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad22);
        pad22 += a.length;
      });
      return r;
    }
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr22.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    function wrapConstructor22(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes32(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes32(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function wrapXOFConstructorWithOpts22(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes32(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    function randomBytes2(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.randomBytes = exports2.wrapXOFConstructorWithOpts = exports2.wrapConstructorWithOpts = exports2.wrapConstructor = exports2.checkOpts = exports2.Hash = exports2.concatBytes = exports2.toBytes = exports2.utf8ToBytes = exports2.asyncLoop = exports2.nextTick = exports2.hexToBytes = exports2.bytesToHex = exports2.isLE = exports2.rotr = exports2.createView = exports2.u32 = exports2.u8 = void 0;
    var crypto_1 = require_cryptoNode();
    var u8a2 = (a) => a instanceof Uint8Array;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.u8 = u8;
    var u3222 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports2.u32 = u3222;
    var createView22 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports2.createView = createView22;
    var rotr22 = (word, shift) => word << 32 - shift | word >>> shift;
    exports2.rotr = rotr22;
    exports2.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports2.isLE)
      throw new Error("Non little-endian hardware is not supported");
    var hexes22 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    exports2.bytesToHex = bytesToHex22;
    exports2.hexToBytes = hexToBytes22;
    var nextTick = async () => {
    };
    exports2.nextTick = nextTick;
    exports2.asyncLoop = asyncLoop;
    exports2.utf8ToBytes = utf8ToBytes22;
    exports2.toBytes = toBytes32;
    exports2.concatBytes = concatBytes22;
    class Hash22 {
      clone() {
        return this._cloneInto();
      }
    }
    exports2.Hash = Hash22;
    var toStr22 = {}.toString;
    exports2.checkOpts = checkOpts;
    exports2.wrapConstructor = wrapConstructor22;
    exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
    exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts22;
    exports2.randomBytes = randomBytes2;
  });
  var require_sha3 = __commonJS2((exports2) => {
    function keccakP22(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH22(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL22(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL22[t];
          const Th = rotlH22(curH, curL, shift);
          const Tl = rotlL22(curH, curL, shift);
          const PI = SHA3_PI22[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H22[round];
        s[1] ^= SHA3_IOTA_L22[round];
      }
      B.fill(0);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shake256 = exports2.shake128 = exports2.keccak_512 = exports2.keccak_384 = exports2.keccak_256 = exports2.keccak_224 = exports2.sha3_512 = exports2.sha3_384 = exports2.sha3_256 = exports2.sha3_224 = exports2.Keccak = exports2.keccakP = void 0;
    var _assert_js_1 = require__assert();
    var _u64_js_1 = require__u64();
    var utils_js_1 = require_utils2();
    var [SHA3_PI22, SHA3_ROTL22, _SHA3_IOTA22] = [[], [], []];
    var _0n22 = /* @__PURE__ */ BigInt(0);
    var _1n22 = /* @__PURE__ */ BigInt(1);
    var _2n22 = /* @__PURE__ */ BigInt(2);
    var _7n22 = /* @__PURE__ */ BigInt(7);
    var _256n22 = /* @__PURE__ */ BigInt(256);
    var _0x71n22 = /* @__PURE__ */ BigInt(113);
    for (let round = 0, R = _1n22, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI22.push(2 * (5 * y + x));
      SHA3_ROTL22.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n22;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n22 ^ (R >> _7n22) * _0x71n22) % _256n22;
        if (R & _2n22)
          t ^= _1n22 << (_1n22 << /* @__PURE__ */ BigInt(j)) - _1n22;
      }
      _SHA3_IOTA22.push(t);
    }
    var [SHA3_IOTA_H22, SHA3_IOTA_L22] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA22, true);
    var rotlH22 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL22 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    exports2.keccakP = keccakP22;
    class Keccak22 extends utils_js_1.Hash {
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        keccakP22(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes22) {
        (0, _assert_js_1.number)(bytes22);
        return this.xofInto(new Uint8Array(bytes22));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak22(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    }
    exports2.Keccak = Keccak22;
    var gen22 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak22(blockLen, suffix, outputLen));
    exports2.sha3_224 = gen22(6, 144, 224 / 8);
    exports2.sha3_256 = gen22(6, 136, 256 / 8);
    exports2.sha3_384 = gen22(6, 104, 384 / 8);
    exports2.sha3_512 = gen22(6, 72, 512 / 8);
    exports2.keccak_224 = gen22(1, 144, 224 / 8);
    exports2.keccak_256 = gen22(1, 136, 256 / 8);
    exports2.keccak_384 = gen22(1, 104, 384 / 8);
    exports2.keccak_512 = gen22(1, 72, 512 / 8);
    var genShake22 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak22(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports2.shake128 = genShake22(31, 168, 128 / 8);
    exports2.shake256 = genShake22(31, 136, 256 / 8);
  });
  var require_keccak256 = __commonJS2((exports2) => {
    function keccak25622(value, to_) {
      const to = to_ || "hex";
      const bytes22 = (0, sha3_1.keccak_256)((0, isHex_js_1.isHex)(value, { strict: false }) ? (0, toBytes_js_1.toBytes)(value) : value);
      if (to === "bytes")
        return bytes22;
      return (0, toHex_js_1.toHex)(bytes22);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.keccak256 = void 0;
    var sha3_1 = require_sha3();
    var isHex_js_1 = require_isHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.keccak256 = keccak25622;
  });
  var require_getAddress = __commonJS2((exports2) => {
    function checksumAddress22(address_, chainId) {
      const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();
      const hash22 = (0, keccak256_js_1.keccak256)((0, toBytes_js_1.stringToBytes)(hexAddress), "bytes");
      const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split("");
      for (let i = 0; i < 40; i += 2) {
        if (hash22[i >> 1] >> 4 >= 8 && address[i]) {
          address[i] = address[i].toUpperCase();
        }
        if ((hash22[i >> 1] & 15) >= 8 && address[i + 1]) {
          address[i + 1] = address[i + 1].toUpperCase();
        }
      }
      return `0x${address.join("")}`;
    }
    function getAddress2(address, chainId) {
      if (!(0, isAddress_js_1.isAddress)(address, { strict: false }))
        throw new address_js_1.InvalidAddressError({ address });
      return checksumAddress22(address, chainId);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAddress = exports2.checksumAddress = void 0;
    var address_js_1 = require_address();
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var isAddress_js_1 = require_isAddress();
    exports2.checksumAddress = checksumAddress22;
    exports2.getAddress = getAddress2;
  });
  var require_isAddress = __commonJS2((exports2) => {
    function isAddress22(address, options2) {
      const { strict = true } = options2 ?? {};
      if (exports2.isAddressCache.has(address))
        return exports2.isAddressCache.get(address);
      const result = (() => {
        if (!addressRegex22.test(address))
          return false;
        if (address.toLowerCase() === address)
          return true;
        if (strict)
          return (0, getAddress_js_1.checksumAddress)(address) === address;
        return true;
      })();
      exports2.isAddressCache.set(address, result);
      return result;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAddress = exports2.isAddressCache = void 0;
    var lru_js_1 = require_lru();
    var getAddress_js_1 = require_getAddress();
    var addressRegex22 = /^0x[a-fA-F0-9]{40}$/;
    exports2.isAddressCache = new lru_js_1.LruMap(8192);
    exports2.isAddress = isAddress22;
  });
  var require_concat = __commonJS2((exports2) => {
    function concat22(values) {
      if (typeof values[0] === "string")
        return concatHex22(values);
      return concatBytes22(values);
    }
    function concatBytes22(values) {
      let length = 0;
      for (const arr of values) {
        length += arr.length;
      }
      const result = new Uint8Array(length);
      let offset = 0;
      for (const arr of values) {
        result.set(arr, offset);
        offset += arr.length;
      }
      return result;
    }
    function concatHex22(values) {
      return `0x${values.reduce((acc, x) => acc + x.replace("0x", ""), "")}`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.concatHex = exports2.concatBytes = exports2.concat = void 0;
    exports2.concat = concat22;
    exports2.concatBytes = concatBytes22;
    exports2.concatHex = concatHex22;
  });
  var require_version2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.version = void 0;
    exports2.version = "1.0.0";
  });
  var require_errors = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseError = void 0;
    var version_js_1 = require_version2();
    class BaseError22 extends Error {
      constructor(shortMessage, args = {}) {
        const details = args.cause instanceof BaseError22 ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath52 = args.cause instanceof BaseError22 ? args.cause.docsPath || args.docsPath : args.docsPath;
        const message = [
          shortMessage || "An error occurred.",
          "",
          ...args.metaMessages ? [...args.metaMessages, ""] : [],
          ...docsPath52 ? [`Docs: https://abitype.dev${docsPath52}`] : [],
          ...details ? [`Details: ${details}`] : [],
          `Version: abitype@${version_js_1.version}`
        ].join("\n");
        super(message);
        Object.defineProperty(this, "details", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "docsPath", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "metaMessages", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "shortMessage", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiTypeError"
        });
        if (args.cause)
          this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath52;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
      }
    }
    exports2.BaseError = BaseError22;
  });
  var require_narrow = __commonJS2((exports2) => {
    function narrow(value) {
      return value;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.narrow = void 0;
    exports2.narrow = narrow;
  });
  var require_regex = __commonJS2((exports2) => {
    function execTyped22(regex, string) {
      const match = regex.exec(string);
      return match?.groups;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isTupleRegex = exports2.integerRegex = exports2.bytesRegex = exports2.execTyped = void 0;
    exports2.execTyped = execTyped22;
    exports2.bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
    exports2.integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
    exports2.isTupleRegex = /^\(.+?\).*?$/;
  });
  var require_formatAbiParameter = __commonJS2((exports2) => {
    function formatAbiParameter22(abiParameter) {
      let type = abiParameter.type;
      if (tupleRegex22.test(abiParameter.type) && "components" in abiParameter) {
        type = "(";
        const length = abiParameter.components.length;
        for (let i = 0; i < length; i++) {
          const component = abiParameter.components[i];
          type += formatAbiParameter22(component);
          if (i < length - 1)
            type += ", ";
        }
        const result = (0, regex_js_1.execTyped)(tupleRegex22, abiParameter.type);
        type += `)${result?.array ?? ""}`;
        return formatAbiParameter22({
          ...abiParameter,
          type
        });
      }
      if ("indexed" in abiParameter && abiParameter.indexed)
        type = `${type} indexed`;
      if (abiParameter.name)
        return `${type} ${abiParameter.name}`;
      return type;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiParameter = void 0;
    var regex_js_1 = require_regex();
    var tupleRegex22 = /^tuple(?<array>(\[(\d*)\])*)$/;
    exports2.formatAbiParameter = formatAbiParameter22;
  });
  var require_formatAbiParameters = __commonJS2((exports2) => {
    function formatAbiParameters22(abiParameters) {
      let params = "";
      const length = abiParameters.length;
      for (let i = 0; i < length; i++) {
        const abiParameter = abiParameters[i];
        params += (0, formatAbiParameter_js_1.formatAbiParameter)(abiParameter);
        if (i !== length - 1)
          params += ", ";
      }
      return params;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiParameters = void 0;
    var formatAbiParameter_js_1 = require_formatAbiParameter();
    exports2.formatAbiParameters = formatAbiParameters22;
  });
  var require_formatAbiItem = __commonJS2((exports2) => {
    function formatAbiItem32(abiItem) {
      if (abiItem.type === "function")
        return `function ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== "nonpayable" ? ` ${abiItem.stateMutability}` : ""}${abiItem.outputs.length ? ` returns (${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.outputs)})` : ""}`;
      else if (abiItem.type === "event")
        return `event ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})`;
      else if (abiItem.type === "error")
        return `error ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})`;
      else if (abiItem.type === "constructor")
        return `constructor(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability === "payable" ? " payable" : ""}`;
      else if (abiItem.type === "fallback")
        return "fallback()";
      return "receive() external payable";
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiItem = void 0;
    var formatAbiParameters_js_1 = require_formatAbiParameters();
    exports2.formatAbiItem = formatAbiItem32;
  });
  var require_formatAbi = __commonJS2((exports2) => {
    function formatAbi(abi) {
      const signatures = [];
      const length = abi.length;
      for (let i = 0; i < length; i++) {
        const abiItem = abi[i];
        const signature = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);
        signatures.push(signature);
      }
      return signatures;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbi = void 0;
    var formatAbiItem_js_1 = require_formatAbiItem();
    exports2.formatAbi = formatAbi;
  });
  var require_signatures = __commonJS2((exports2) => {
    function isErrorSignature2(signature) {
      return errorSignatureRegex2.test(signature);
    }
    function execErrorSignature2(signature) {
      return (0, regex_js_1.execTyped)(errorSignatureRegex2, signature);
    }
    function isEventSignature2(signature) {
      return eventSignatureRegex2.test(signature);
    }
    function execEventSignature2(signature) {
      return (0, regex_js_1.execTyped)(eventSignatureRegex2, signature);
    }
    function isFunctionSignature2(signature) {
      return functionSignatureRegex2.test(signature);
    }
    function execFunctionSignature2(signature) {
      return (0, regex_js_1.execTyped)(functionSignatureRegex2, signature);
    }
    function isStructSignature2(signature) {
      return structSignatureRegex2.test(signature);
    }
    function execStructSignature2(signature) {
      return (0, regex_js_1.execTyped)(structSignatureRegex2, signature);
    }
    function isConstructorSignature2(signature) {
      return constructorSignatureRegex2.test(signature);
    }
    function execConstructorSignature2(signature) {
      return (0, regex_js_1.execTyped)(constructorSignatureRegex2, signature);
    }
    function isFallbackSignature2(signature) {
      return fallbackSignatureRegex2.test(signature);
    }
    function isReceiveSignature2(signature) {
      return receiveSignatureRegex2.test(signature);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.functionModifiers = exports2.eventModifiers = exports2.modifiers = exports2.isReceiveSignature = exports2.isFallbackSignature = exports2.execConstructorSignature = exports2.isConstructorSignature = exports2.execStructSignature = exports2.isStructSignature = exports2.execFunctionSignature = exports2.isFunctionSignature = exports2.execEventSignature = exports2.isEventSignature = exports2.execErrorSignature = exports2.isErrorSignature = void 0;
    var regex_js_1 = require_regex();
    var errorSignatureRegex2 = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
    exports2.isErrorSignature = isErrorSignature2;
    exports2.execErrorSignature = execErrorSignature2;
    var eventSignatureRegex2 = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)$/;
    exports2.isEventSignature = isEventSignature2;
    exports2.execEventSignature = execEventSignature2;
    var functionSignatureRegex2 = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\s?\((?<returns>.*?)\))?$/;
    exports2.isFunctionSignature = isFunctionSignature2;
    exports2.execFunctionSignature = execFunctionSignature2;
    var structSignatureRegex2 = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \{(?<properties>.*?)\}$/;
    exports2.isStructSignature = isStructSignature2;
    exports2.execStructSignature = execStructSignature2;
    var constructorSignatureRegex2 = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
    exports2.isConstructorSignature = isConstructorSignature2;
    exports2.execConstructorSignature = execConstructorSignature2;
    var fallbackSignatureRegex2 = /^fallback\(\)$/;
    exports2.isFallbackSignature = isFallbackSignature2;
    var receiveSignatureRegex2 = /^receive\(\) external payable$/;
    exports2.isReceiveSignature = isReceiveSignature2;
    exports2.modifiers = /* @__PURE__ */ new Set([
      "memory",
      "indexed",
      "storage",
      "calldata"
    ]);
    exports2.eventModifiers = /* @__PURE__ */ new Set(["indexed"]);
    exports2.functionModifiers = /* @__PURE__ */ new Set([
      "calldata",
      "memory",
      "storage"
    ]);
  });
  var require_abiItem = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownSolidityTypeError = exports2.UnknownTypeError = exports2.InvalidAbiItemError = void 0;
    var errors_js_1 = require_errors();
    class InvalidAbiItemError2 extends errors_js_1.BaseError {
      constructor({ signature }) {
        super("Failed to parse ABI item.", {
          details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,
          docsPath: "/api/human#parseabiitem-1"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiItemError"
        });
      }
    }
    exports2.InvalidAbiItemError = InvalidAbiItemError2;
    class UnknownTypeError2 extends errors_js_1.BaseError {
      constructor({ type }) {
        super("Unknown type.", {
          metaMessages: [
            `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownTypeError"
        });
      }
    }
    exports2.UnknownTypeError = UnknownTypeError2;
    class UnknownSolidityTypeError2 extends errors_js_1.BaseError {
      constructor({ type }) {
        super("Unknown type.", {
          metaMessages: [`Type "${type}" is not a valid ABI type.`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownSolidityTypeError"
        });
      }
    }
    exports2.UnknownSolidityTypeError = UnknownSolidityTypeError2;
  });
  var require_abiParameter = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidAbiTypeParameterError = exports2.InvalidFunctionModifierError = exports2.InvalidModifierError = exports2.SolidityProtectedKeywordError = exports2.InvalidParameterError = exports2.InvalidAbiParametersError = exports2.InvalidAbiParameterError = void 0;
    var errors_js_1 = require_errors();
    class InvalidAbiParameterError2 extends errors_js_1.BaseError {
      constructor({ param }) {
        super("Failed to parse ABI parameter.", {
          details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
          docsPath: "/api/human#parseabiparameter-1"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiParameterError"
        });
      }
    }
    exports2.InvalidAbiParameterError = InvalidAbiParameterError2;
    class InvalidAbiParametersError2 extends errors_js_1.BaseError {
      constructor({ params }) {
        super("Failed to parse ABI parameters.", {
          details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,
          docsPath: "/api/human#parseabiparameters-1"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiParametersError"
        });
      }
    }
    exports2.InvalidAbiParametersError = InvalidAbiParametersError2;
    class InvalidParameterError2 extends errors_js_1.BaseError {
      constructor({ param }) {
        super("Invalid ABI parameter.", {
          details: param
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidParameterError"
        });
      }
    }
    exports2.InvalidParameterError = InvalidParameterError2;
    class SolidityProtectedKeywordError2 extends errors_js_1.BaseError {
      constructor({ param, name }) {
        super("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `"${name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SolidityProtectedKeywordError"
        });
      }
    }
    exports2.SolidityProtectedKeywordError = SolidityProtectedKeywordError2;
    class InvalidModifierError2 extends errors_js_1.BaseError {
      constructor({ param, type, modifier }) {
        super("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidModifierError"
        });
      }
    }
    exports2.InvalidModifierError = InvalidModifierError2;
    class InvalidFunctionModifierError2 extends errors_js_1.BaseError {
      constructor({ param, type, modifier }) {
        super("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `Modifier "${modifier}" not allowed${type ? ` in "${type}" type` : ""}.`,
            `Data location can only be specified for array, struct, or mapping types, but "${modifier}" was given.`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidFunctionModifierError"
        });
      }
    }
    exports2.InvalidFunctionModifierError = InvalidFunctionModifierError2;
    class InvalidAbiTypeParameterError2 extends errors_js_1.BaseError {
      constructor({ abiParameter }) {
        super("Invalid ABI parameter.", {
          details: JSON.stringify(abiParameter, null, 2),
          metaMessages: ["ABI parameter type is invalid."]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiTypeParameterError"
        });
      }
    }
    exports2.InvalidAbiTypeParameterError = InvalidAbiTypeParameterError2;
  });
  var require_signature = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidStructSignatureError = exports2.UnknownSignatureError = exports2.InvalidSignatureError = void 0;
    var errors_js_1 = require_errors();
    class InvalidSignatureError2 extends errors_js_1.BaseError {
      constructor({ signature, type }) {
        super(`Invalid ${type} signature.`, {
          details: signature
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidSignatureError"
        });
      }
    }
    exports2.InvalidSignatureError = InvalidSignatureError2;
    class UnknownSignatureError2 extends errors_js_1.BaseError {
      constructor({ signature }) {
        super("Unknown signature.", {
          details: signature
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownSignatureError"
        });
      }
    }
    exports2.UnknownSignatureError = UnknownSignatureError2;
    class InvalidStructSignatureError2 extends errors_js_1.BaseError {
      constructor({ signature }) {
        super("Invalid struct signature.", {
          details: signature,
          metaMessages: ["No properties exist."]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidStructSignatureError"
        });
      }
    }
    exports2.InvalidStructSignatureError = InvalidStructSignatureError2;
  });
  var require_struct = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CircularReferenceError = void 0;
    var errors_js_1 = require_errors();
    class CircularReferenceError2 extends errors_js_1.BaseError {
      constructor({ type }) {
        super("Circular reference detected.", {
          metaMessages: [`Struct "${type}" is a circular reference.`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "CircularReferenceError"
        });
      }
    }
    exports2.CircularReferenceError = CircularReferenceError2;
  });
  var require_splitParameters = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidParenthesisError = void 0;
    var errors_js_1 = require_errors();
    class InvalidParenthesisError2 extends errors_js_1.BaseError {
      constructor({ current, depth }) {
        super("Unbalanced parentheses.", {
          metaMessages: [
            `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
          ],
          details: `Depth "${depth}"`
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidParenthesisError"
        });
      }
    }
    exports2.InvalidParenthesisError = InvalidParenthesisError2;
  });
  var require_cache = __commonJS2((exports2) => {
    function getParameterCacheKey2(param, type) {
      if (type)
        return `${type}:${param}`;
      return param;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parameterCache = exports2.getParameterCacheKey = void 0;
    exports2.getParameterCacheKey = getParameterCacheKey2;
    exports2.parameterCache = /* @__PURE__ */ new Map([
      ["address", { type: "address" }],
      ["bool", { type: "bool" }],
      ["bytes", { type: "bytes" }],
      ["bytes32", { type: "bytes32" }],
      ["int", { type: "int256" }],
      ["int256", { type: "int256" }],
      ["string", { type: "string" }],
      ["uint", { type: "uint256" }],
      ["uint8", { type: "uint8" }],
      ["uint16", { type: "uint16" }],
      ["uint24", { type: "uint24" }],
      ["uint32", { type: "uint32" }],
      ["uint64", { type: "uint64" }],
      ["uint96", { type: "uint96" }],
      ["uint112", { type: "uint112" }],
      ["uint160", { type: "uint160" }],
      ["uint192", { type: "uint192" }],
      ["uint256", { type: "uint256" }],
      ["address owner", { type: "address", name: "owner" }],
      ["address to", { type: "address", name: "to" }],
      ["bool approved", { type: "bool", name: "approved" }],
      ["bytes _data", { type: "bytes", name: "_data" }],
      ["bytes data", { type: "bytes", name: "data" }],
      ["bytes signature", { type: "bytes", name: "signature" }],
      ["bytes32 hash", { type: "bytes32", name: "hash" }],
      ["bytes32 r", { type: "bytes32", name: "r" }],
      ["bytes32 root", { type: "bytes32", name: "root" }],
      ["bytes32 s", { type: "bytes32", name: "s" }],
      ["string name", { type: "string", name: "name" }],
      ["string symbol", { type: "string", name: "symbol" }],
      ["string tokenURI", { type: "string", name: "tokenURI" }],
      ["uint tokenId", { type: "uint256", name: "tokenId" }],
      ["uint8 v", { type: "uint8", name: "v" }],
      ["uint256 balance", { type: "uint256", name: "balance" }],
      ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
      ["uint256 value", { type: "uint256", name: "value" }],
      [
        "event:address indexed from",
        { type: "address", name: "from", indexed: true }
      ],
      ["event:address indexed to", { type: "address", name: "to", indexed: true }],
      [
        "event:uint indexed tokenId",
        { type: "uint256", name: "tokenId", indexed: true }
      ],
      [
        "event:uint256 indexed tokenId",
        { type: "uint256", name: "tokenId", indexed: true }
      ]
    ]);
  });
  var require_utils3 = __commonJS2((exports2) => {
    function parseSignature2(signature, structs = {}) {
      if ((0, signatures_js_1.isFunctionSignature)(signature)) {
        const match = (0, signatures_js_1.execFunctionSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "function" });
        const inputParams = splitParameters2(match.parameters);
        const inputs = [];
        const inputLength = inputParams.length;
        for (let i = 0; i < inputLength; i++) {
          inputs.push(parseAbiParameter3(inputParams[i], {
            modifiers: signatures_js_1.functionModifiers,
            structs,
            type: "function"
          }));
        }
        const outputs = [];
        if (match.returns) {
          const outputParams = splitParameters2(match.returns);
          const outputLength = outputParams.length;
          for (let i = 0; i < outputLength; i++) {
            outputs.push(parseAbiParameter3(outputParams[i], {
              modifiers: signatures_js_1.functionModifiers,
              structs,
              type: "function"
            }));
          }
        }
        return {
          name: match.name,
          type: "function",
          stateMutability: match.stateMutability ?? "nonpayable",
          inputs,
          outputs
        };
      }
      if ((0, signatures_js_1.isEventSignature)(signature)) {
        const match = (0, signatures_js_1.execEventSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "event" });
        const params = splitParameters2(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push(parseAbiParameter3(params[i], {
            modifiers: signatures_js_1.eventModifiers,
            structs,
            type: "event"
          }));
        }
        return { name: match.name, type: "event", inputs: abiParameters };
      }
      if ((0, signatures_js_1.isErrorSignature)(signature)) {
        const match = (0, signatures_js_1.execErrorSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "error" });
        const params = splitParameters2(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push(parseAbiParameter3(params[i], { structs, type: "error" }));
        }
        return { name: match.name, type: "error", inputs: abiParameters };
      }
      if ((0, signatures_js_1.isConstructorSignature)(signature)) {
        const match = (0, signatures_js_1.execConstructorSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "constructor" });
        const params = splitParameters2(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push(parseAbiParameter3(params[i], { structs, type: "constructor" }));
        }
        return {
          type: "constructor",
          stateMutability: match.stateMutability ?? "nonpayable",
          inputs: abiParameters
        };
      }
      if ((0, signatures_js_1.isFallbackSignature)(signature))
        return { type: "fallback" };
      if ((0, signatures_js_1.isReceiveSignature)(signature))
        return {
          type: "receive",
          stateMutability: "payable"
        };
      throw new signature_js_1.UnknownSignatureError({ signature });
    }
    function parseAbiParameter3(param, options2) {
      const parameterCacheKey = (0, cache_js_1.getParameterCacheKey)(param, options2?.type);
      if (cache_js_1.parameterCache.has(parameterCacheKey))
        return cache_js_1.parameterCache.get(parameterCacheKey);
      const isTuple = regex_js_1.isTupleRegex.test(param);
      const match = (0, regex_js_1.execTyped)(isTuple ? abiParameterWithTupleRegex2 : abiParameterWithoutTupleRegex2, param);
      if (!match)
        throw new abiParameter_js_1.InvalidParameterError({ param });
      if (match.name && isSolidityKeyword2(match.name))
        throw new abiParameter_js_1.SolidityProtectedKeywordError({ param, name: match.name });
      const name = match.name ? { name: match.name } : {};
      const indexed = match.modifier === "indexed" ? { indexed: true } : {};
      const structs = options2?.structs ?? {};
      let type;
      let components = {};
      if (isTuple) {
        type = "tuple";
        const params = splitParameters2(match.type);
        const components_ = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          components_.push(parseAbiParameter3(params[i], { structs }));
        }
        components = { components: components_ };
      } else if (match.type in structs) {
        type = "tuple";
        components = { components: structs[match.type] };
      } else if (dynamicIntegerRegex2.test(match.type)) {
        type = `${match.type}256`;
      } else {
        type = match.type;
        if (!(options2?.type === "struct") && !isSolidityType2(type))
          throw new abiItem_js_1.UnknownSolidityTypeError({ type });
      }
      if (match.modifier) {
        if (!options2?.modifiers?.has?.(match.modifier))
          throw new abiParameter_js_1.InvalidModifierError({
            param,
            type: options2?.type,
            modifier: match.modifier
          });
        if (signatures_js_1.functionModifiers.has(match.modifier) && !isValidDataLocation2(type, !!match.array))
          throw new abiParameter_js_1.InvalidFunctionModifierError({
            param,
            type: options2?.type,
            modifier: match.modifier
          });
      }
      const abiParameter = {
        type: `${type}${match.array ?? ""}`,
        ...name,
        ...indexed,
        ...components
      };
      cache_js_1.parameterCache.set(parameterCacheKey, abiParameter);
      return abiParameter;
    }
    function splitParameters2(params, result = [], current = "", depth = 0) {
      const length = params.trim().length;
      for (let i = 0; i < length; i++) {
        const char = params[i];
        const tail = params.slice(i + 1);
        switch (char) {
          case ",":
            return depth === 0 ? splitParameters2(tail, [...result, current.trim()]) : splitParameters2(tail, result, `${current}${char}`, depth);
          case "(":
            return splitParameters2(tail, result, `${current}${char}`, depth + 1);
          case ")":
            return splitParameters2(tail, result, `${current}${char}`, depth - 1);
          default:
            return splitParameters2(tail, result, `${current}${char}`, depth);
        }
      }
      if (current === "")
        return result;
      if (depth !== 0)
        throw new splitParameters_js_1.InvalidParenthesisError({ current, depth });
      result.push(current.trim());
      return result;
    }
    function isSolidityType2(type) {
      return type === "address" || type === "bool" || type === "function" || type === "string" || regex_js_1.bytesRegex.test(type) || regex_js_1.integerRegex.test(type);
    }
    function isSolidityKeyword2(name) {
      return name === "address" || name === "bool" || name === "function" || name === "string" || name === "tuple" || regex_js_1.bytesRegex.test(name) || regex_js_1.integerRegex.test(name) || protectedKeywordsRegex2.test(name);
    }
    function isValidDataLocation2(type, isArray) {
      return isArray || type === "bytes" || type === "string" || type === "tuple";
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidDataLocation = exports2.isSolidityKeyword = exports2.isSolidityType = exports2.splitParameters = exports2.parseAbiParameter = exports2.parseSignature = void 0;
    var regex_js_1 = require_regex();
    var abiItem_js_1 = require_abiItem();
    var abiParameter_js_1 = require_abiParameter();
    var signature_js_1 = require_signature();
    var splitParameters_js_1 = require_splitParameters();
    var cache_js_1 = require_cache();
    var signatures_js_1 = require_signatures();
    exports2.parseSignature = parseSignature2;
    var abiParameterWithoutTupleRegex2 = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
    var abiParameterWithTupleRegex2 = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;
    var dynamicIntegerRegex2 = /^u?int$/;
    exports2.parseAbiParameter = parseAbiParameter3;
    exports2.splitParameters = splitParameters2;
    exports2.isSolidityType = isSolidityType2;
    var protectedKeywordsRegex2 = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
    exports2.isSolidityKeyword = isSolidityKeyword2;
    exports2.isValidDataLocation = isValidDataLocation2;
  });
  var require_structs = __commonJS2((exports2) => {
    function parseStructs2(signatures) {
      const shallowStructs = {};
      const signaturesLength = signatures.length;
      for (let i = 0; i < signaturesLength; i++) {
        const signature = signatures[i];
        if (!(0, signatures_js_1.isStructSignature)(signature))
          continue;
        const match = (0, signatures_js_1.execStructSignature)(signature);
        if (!match)
          throw new signature_js_1.InvalidSignatureError({ signature, type: "struct" });
        const properties = match.properties.split(";");
        const components = [];
        const propertiesLength = properties.length;
        for (let k = 0; k < propertiesLength; k++) {
          const property = properties[k];
          const trimmed = property.trim();
          if (!trimmed)
            continue;
          const abiParameter = (0, utils_js_1.parseAbiParameter)(trimmed, {
            type: "struct"
          });
          components.push(abiParameter);
        }
        if (!components.length)
          throw new signature_js_1.InvalidStructSignatureError({ signature });
        shallowStructs[match.name] = components;
      }
      const resolvedStructs = {};
      const entries = Object.entries(shallowStructs);
      const entriesLength = entries.length;
      for (let i = 0; i < entriesLength; i++) {
        const [name, parameters] = entries[i];
        resolvedStructs[name] = resolveStructs2(parameters, shallowStructs);
      }
      return resolvedStructs;
    }
    function resolveStructs2(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
      const components = [];
      const length = abiParameters.length;
      for (let i = 0; i < length; i++) {
        const abiParameter = abiParameters[i];
        const isTuple = regex_js_1.isTupleRegex.test(abiParameter.type);
        if (isTuple)
          components.push(abiParameter);
        else {
          const match = (0, regex_js_1.execTyped)(typeWithoutTupleRegex2, abiParameter.type);
          if (!match?.type)
            throw new abiParameter_js_1.InvalidAbiTypeParameterError({ abiParameter });
          const { array, type } = match;
          if (type in structs) {
            if (ancestors.has(type))
              throw new struct_js_1.CircularReferenceError({ type });
            components.push({
              ...abiParameter,
              type: `tuple${array ?? ""}`,
              components: resolveStructs2(structs[type] ?? [], structs, /* @__PURE__ */ new Set([...ancestors, type]))
            });
          } else {
            if ((0, utils_js_1.isSolidityType)(type))
              components.push(abiParameter);
            else
              throw new abiItem_js_1.UnknownTypeError({ type });
          }
        }
      }
      return components;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseStructs = void 0;
    var regex_js_1 = require_regex();
    var abiItem_js_1 = require_abiItem();
    var abiParameter_js_1 = require_abiParameter();
    var signature_js_1 = require_signature();
    var struct_js_1 = require_struct();
    var signatures_js_1 = require_signatures();
    var utils_js_1 = require_utils3();
    exports2.parseStructs = parseStructs2;
    var typeWithoutTupleRegex2 = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\[\d*?\])+?)?$/;
  });
  var require_parseAbi = __commonJS2((exports2) => {
    function parseAbi2(signatures) {
      const structs = (0, structs_js_1.parseStructs)(signatures);
      const abi = [];
      const length = signatures.length;
      for (let i = 0; i < length; i++) {
        const signature = signatures[i];
        if ((0, signatures_js_1.isStructSignature)(signature))
          continue;
        abi.push((0, utils_js_1.parseSignature)(signature, structs));
      }
      return abi;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbi = void 0;
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils3();
    exports2.parseAbi = parseAbi2;
  });
  var require_parseAbiItem = __commonJS2((exports2) => {
    function parseAbiItem2(signature) {
      let abiItem;
      if (typeof signature === "string")
        abiItem = (0, utils_js_1.parseSignature)(signature);
      else {
        const structs = (0, structs_js_1.parseStructs)(signature);
        const length = signature.length;
        for (let i = 0; i < length; i++) {
          const signature_ = signature[i];
          if ((0, signatures_js_1.isStructSignature)(signature_))
            continue;
          abiItem = (0, utils_js_1.parseSignature)(signature_, structs);
          break;
        }
      }
      if (!abiItem)
        throw new abiItem_js_1.InvalidAbiItemError({ signature });
      return abiItem;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbiItem = void 0;
    var abiItem_js_1 = require_abiItem();
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils3();
    exports2.parseAbiItem = parseAbiItem2;
  });
  var require_parseAbiParameter = __commonJS2((exports2) => {
    function parseAbiParameter3(param) {
      let abiParameter;
      if (typeof param === "string")
        abiParameter = (0, utils_js_1.parseAbiParameter)(param, {
          modifiers: signatures_js_1.modifiers
        });
      else {
        const structs = (0, structs_js_1.parseStructs)(param);
        const length = param.length;
        for (let i = 0; i < length; i++) {
          const signature = param[i];
          if ((0, signatures_js_1.isStructSignature)(signature))
            continue;
          abiParameter = (0, utils_js_1.parseAbiParameter)(signature, { modifiers: signatures_js_1.modifiers, structs });
          break;
        }
      }
      if (!abiParameter)
        throw new abiParameter_js_1.InvalidAbiParameterError({ param });
      return abiParameter;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbiParameter = void 0;
    var abiParameter_js_1 = require_abiParameter();
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils3();
    exports2.parseAbiParameter = parseAbiParameter3;
  });
  var require_parseAbiParameters = __commonJS2((exports2) => {
    function parseAbiParameters2(params) {
      const abiParameters = [];
      if (typeof params === "string") {
        const parameters = (0, utils_js_1.splitParameters)(params);
        const length = parameters.length;
        for (let i = 0; i < length; i++) {
          abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[i], { modifiers: signatures_js_1.modifiers }));
        }
      } else {
        const structs = (0, structs_js_1.parseStructs)(params);
        const length = params.length;
        for (let i = 0; i < length; i++) {
          const signature = params[i];
          if ((0, signatures_js_1.isStructSignature)(signature))
            continue;
          const parameters = (0, utils_js_1.splitParameters)(signature);
          const length2 = parameters.length;
          for (let k = 0; k < length2; k++) {
            abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[k], { modifiers: signatures_js_1.modifiers, structs }));
          }
        }
      }
      if (abiParameters.length === 0)
        throw new abiParameter_js_1.InvalidAbiParametersError({ params });
      return abiParameters;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAbiParameters = void 0;
    var abiParameter_js_1 = require_abiParameter();
    var signatures_js_1 = require_signatures();
    var structs_js_1 = require_structs();
    var utils_js_1 = require_utils3();
    var utils_js_2 = require_utils3();
    exports2.parseAbiParameters = parseAbiParameters2;
  });
  var require_exports = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CircularReferenceError = exports2.InvalidParenthesisError = exports2.UnknownSignatureError = exports2.InvalidSignatureError = exports2.InvalidStructSignatureError = exports2.InvalidAbiParameterError = exports2.InvalidAbiParametersError = exports2.InvalidParameterError = exports2.SolidityProtectedKeywordError = exports2.InvalidModifierError = exports2.InvalidFunctionModifierError = exports2.InvalidAbiTypeParameterError = exports2.UnknownSolidityTypeError = exports2.InvalidAbiItemError = exports2.UnknownTypeError = exports2.parseAbiParameters = exports2.parseAbiParameter = exports2.parseAbiItem = exports2.parseAbi = exports2.formatAbiParameters = exports2.formatAbiParameter = exports2.formatAbiItem = exports2.formatAbi = exports2.narrow = exports2.BaseError = void 0;
    var errors_js_1 = require_errors();
    Object.defineProperty(exports2, "BaseError", { enumerable: true, get: function() {
      return errors_js_1.BaseError;
    } });
    var narrow_js_1 = require_narrow();
    Object.defineProperty(exports2, "narrow", { enumerable: true, get: function() {
      return narrow_js_1.narrow;
    } });
    var formatAbi_js_1 = require_formatAbi();
    Object.defineProperty(exports2, "formatAbi", { enumerable: true, get: function() {
      return formatAbi_js_1.formatAbi;
    } });
    var formatAbiItem_js_1 = require_formatAbiItem();
    Object.defineProperty(exports2, "formatAbiItem", { enumerable: true, get: function() {
      return formatAbiItem_js_1.formatAbiItem;
    } });
    var formatAbiParameter_js_1 = require_formatAbiParameter();
    Object.defineProperty(exports2, "formatAbiParameter", { enumerable: true, get: function() {
      return formatAbiParameter_js_1.formatAbiParameter;
    } });
    var formatAbiParameters_js_1 = require_formatAbiParameters();
    Object.defineProperty(exports2, "formatAbiParameters", { enumerable: true, get: function() {
      return formatAbiParameters_js_1.formatAbiParameters;
    } });
    var parseAbi_js_1 = require_parseAbi();
    Object.defineProperty(exports2, "parseAbi", { enumerable: true, get: function() {
      return parseAbi_js_1.parseAbi;
    } });
    var parseAbiItem_js_1 = require_parseAbiItem();
    Object.defineProperty(exports2, "parseAbiItem", { enumerable: true, get: function() {
      return parseAbiItem_js_1.parseAbiItem;
    } });
    var parseAbiParameter_js_1 = require_parseAbiParameter();
    Object.defineProperty(exports2, "parseAbiParameter", { enumerable: true, get: function() {
      return parseAbiParameter_js_1.parseAbiParameter;
    } });
    var parseAbiParameters_js_1 = require_parseAbiParameters();
    Object.defineProperty(exports2, "parseAbiParameters", { enumerable: true, get: function() {
      return parseAbiParameters_js_1.parseAbiParameters;
    } });
    var abiItem_js_1 = require_abiItem();
    Object.defineProperty(exports2, "UnknownTypeError", { enumerable: true, get: function() {
      return abiItem_js_1.UnknownTypeError;
    } });
    Object.defineProperty(exports2, "InvalidAbiItemError", { enumerable: true, get: function() {
      return abiItem_js_1.InvalidAbiItemError;
    } });
    Object.defineProperty(exports2, "UnknownSolidityTypeError", { enumerable: true, get: function() {
      return abiItem_js_1.UnknownSolidityTypeError;
    } });
    var abiParameter_js_1 = require_abiParameter();
    Object.defineProperty(exports2, "InvalidAbiTypeParameterError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidAbiTypeParameterError;
    } });
    Object.defineProperty(exports2, "InvalidFunctionModifierError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidFunctionModifierError;
    } });
    Object.defineProperty(exports2, "InvalidModifierError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidModifierError;
    } });
    Object.defineProperty(exports2, "SolidityProtectedKeywordError", { enumerable: true, get: function() {
      return abiParameter_js_1.SolidityProtectedKeywordError;
    } });
    Object.defineProperty(exports2, "InvalidParameterError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidParameterError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParametersError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidAbiParametersError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParameterError", { enumerable: true, get: function() {
      return abiParameter_js_1.InvalidAbiParameterError;
    } });
    var signature_js_1 = require_signature();
    Object.defineProperty(exports2, "InvalidStructSignatureError", { enumerable: true, get: function() {
      return signature_js_1.InvalidStructSignatureError;
    } });
    Object.defineProperty(exports2, "InvalidSignatureError", { enumerable: true, get: function() {
      return signature_js_1.InvalidSignatureError;
    } });
    Object.defineProperty(exports2, "UnknownSignatureError", { enumerable: true, get: function() {
      return signature_js_1.UnknownSignatureError;
    } });
    var splitParameters_js_1 = require_splitParameters();
    Object.defineProperty(exports2, "InvalidParenthesisError", { enumerable: true, get: function() {
      return splitParameters_js_1.InvalidParenthesisError;
    } });
    var struct_js_1 = require_struct();
    Object.defineProperty(exports2, "CircularReferenceError", { enumerable: true, get: function() {
      return struct_js_1.CircularReferenceError;
    } });
  });
  var require_getAction = __commonJS2((exports2) => {
    function getAction22(client, action, name) {
      return (params) => client[action.name]?.(params) ?? client[name]?.(params) ?? action(client, params);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAction = void 0;
    exports2.getAction = getAction22;
  });
  var require_formatAbiItem2 = __commonJS2((exports2) => {
    function formatAbiItem32(abiItem, { includeName = false } = {}) {
      if (abiItem.type !== "function" && abiItem.type !== "event" && abiItem.type !== "error")
        throw new abi_js_1.InvalidDefinitionTypeError(abiItem.type);
      return `${abiItem.name}(${formatAbiParams22(abiItem.inputs, { includeName })})`;
    }
    function formatAbiParams22(params, { includeName = false } = {}) {
      if (!params)
        return "";
      return params.map((param) => formatAbiParam22(param, { includeName })).join(includeName ? ", " : ",");
    }
    function formatAbiParam22(param, { includeName }) {
      if (param.type.startsWith("tuple")) {
        return `(${formatAbiParams22(param.components, { includeName })})${param.type.slice("tuple".length)}`;
      }
      return param.type + (includeName && param.name ? ` ${param.name}` : "");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiParams = exports2.formatAbiItem = void 0;
    var abi_js_1 = require_abi();
    exports2.formatAbiItem = formatAbiItem32;
    exports2.formatAbiParams = formatAbiParams22;
  });
  var require_abi = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnsupportedPackedAbiType = exports2.InvalidDefinitionTypeError = exports2.InvalidArrayError = exports2.InvalidAbiDecodingTypeError = exports2.InvalidAbiEncodingTypeError = exports2.DecodeLogTopicsMismatch = exports2.DecodeLogDataMismatch = exports2.BytesSizeMismatchError = exports2.AbiItemAmbiguityError = exports2.AbiFunctionSignatureNotFoundError = exports2.AbiFunctionOutputsNotFoundError = exports2.AbiFunctionNotFoundError = exports2.AbiEventNotFoundError = exports2.AbiEventSignatureNotFoundError = exports2.AbiEventSignatureEmptyTopicsError = exports2.AbiErrorSignatureNotFoundError = exports2.AbiErrorNotFoundError = exports2.AbiErrorInputsNotFoundError = exports2.AbiEncodingLengthMismatchError = exports2.AbiEncodingBytesSizeMismatchError = exports2.AbiEncodingArrayLengthMismatchError = exports2.AbiDecodingZeroDataError = exports2.AbiDecodingOffsetOutOfBoundsError = exports2.AbiDecodingDataSizeTooSmallError = exports2.AbiDecodingDataSizeInvalidError = exports2.AbiConstructorParamsNotFoundError = exports2.AbiConstructorNotFoundError = void 0;
    var formatAbiItem_js_1 = require_formatAbiItem2();
    var size_js_1 = require_size();
    var base_js_1 = require_base();
    class AbiConstructorNotFoundError2 extends base_js_1.BaseError {
      constructor({ docsPath: docsPath52 }) {
        super([
          "A constructor was not found on the ABI.",
          "Make sure you are using the correct ABI and that the constructor exists on it."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiConstructorNotFoundError"
        });
      }
    }
    exports2.AbiConstructorNotFoundError = AbiConstructorNotFoundError2;
    class AbiConstructorParamsNotFoundError2 extends base_js_1.BaseError {
      constructor({ docsPath: docsPath52 }) {
        super([
          "Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.",
          "Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiConstructorParamsNotFoundError"
        });
      }
    }
    exports2.AbiConstructorParamsNotFoundError = AbiConstructorParamsNotFoundError2;
    class AbiDecodingDataSizeInvalidError2 extends base_js_1.BaseError {
      constructor({ data, size: size22 }) {
        super([
          `Data size of ${size22} bytes is invalid.`,
          "Size must be in increments of 32 bytes (size % 32 === 0)."
        ].join("\n"), { metaMessages: [`Data: ${data} (${size22} bytes)`] });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiDecodingDataSizeInvalidError"
        });
      }
    }
    exports2.AbiDecodingDataSizeInvalidError = AbiDecodingDataSizeInvalidError2;
    class AbiDecodingDataSizeTooSmallError22 extends base_js_1.BaseError {
      constructor({ data, params, size: size22 }) {
        super([`Data size of ${size22} bytes is too small for given parameters.`].join("\n"), {
          metaMessages: [
            `Params: (${(0, formatAbiItem_js_1.formatAbiParams)(params, { includeName: true })})`,
            `Data:   ${data} (${size22} bytes)`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiDecodingDataSizeTooSmallError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = data;
        this.params = params;
        this.size = size22;
      }
    }
    exports2.AbiDecodingDataSizeTooSmallError = AbiDecodingDataSizeTooSmallError22;
    class AbiDecodingOffsetOutOfBoundsError extends base_js_1.BaseError {
      constructor({ offset, position }) {
        super(`Offset at "${offset}" is out-of-bounds (current position: "${position}").`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiDecodingOffsetOutOfBoundsError"
        });
      }
    }
    exports2.AbiDecodingOffsetOutOfBoundsError = AbiDecodingOffsetOutOfBoundsError;
    class AbiDecodingZeroDataError22 extends base_js_1.BaseError {
      constructor() {
        super('Cannot decode zero data ("0x") with ABI parameters.');
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiDecodingZeroDataError"
        });
      }
    }
    exports2.AbiDecodingZeroDataError = AbiDecodingZeroDataError22;
    class AbiEncodingArrayLengthMismatchError22 extends base_js_1.BaseError {
      constructor({ expectedLength, givenLength, type }) {
        super([
          `ABI encoding array length mismatch for type ${type}.`,
          `Expected length: ${expectedLength}`,
          `Given length: ${givenLength}`
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEncodingArrayLengthMismatchError"
        });
      }
    }
    exports2.AbiEncodingArrayLengthMismatchError = AbiEncodingArrayLengthMismatchError22;
    class AbiEncodingBytesSizeMismatchError22 extends base_js_1.BaseError {
      constructor({ expectedSize, value }) {
        super(`Size of bytes "${value}" (bytes${(0, size_js_1.size)(value)}) does not match expected size (bytes${expectedSize}).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEncodingBytesSizeMismatchError"
        });
      }
    }
    exports2.AbiEncodingBytesSizeMismatchError = AbiEncodingBytesSizeMismatchError22;
    class AbiEncodingLengthMismatchError22 extends base_js_1.BaseError {
      constructor({ expectedLength, givenLength }) {
        super([
          "ABI encoding params/values length mismatch.",
          `Expected length (params): ${expectedLength}`,
          `Given length (values): ${givenLength}`
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEncodingLengthMismatchError"
        });
      }
    }
    exports2.AbiEncodingLengthMismatchError = AbiEncodingLengthMismatchError22;
    class AbiErrorInputsNotFoundError2 extends base_js_1.BaseError {
      constructor(errorName, { docsPath: docsPath52 }) {
        super([
          `Arguments (\`args\`) were provided to "${errorName}", but "${errorName}" on the ABI does not contain any parameters (\`inputs\`).`,
          "Cannot encode error result without knowing what the parameter types are.",
          "Make sure you are using the correct ABI and that the inputs exist on it."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiErrorInputsNotFoundError"
        });
      }
    }
    exports2.AbiErrorInputsNotFoundError = AbiErrorInputsNotFoundError2;
    class AbiErrorNotFoundError2 extends base_js_1.BaseError {
      constructor(errorName, { docsPath: docsPath52 } = {}) {
        super([
          `Error ${errorName ? `"${errorName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the error exists on it."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiErrorNotFoundError"
        });
      }
    }
    exports2.AbiErrorNotFoundError = AbiErrorNotFoundError2;
    class AbiErrorSignatureNotFoundError22 extends base_js_1.BaseError {
      constructor(signature, { docsPath: docsPath52 }) {
        super([
          `Encoded error signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the error exists on it.",
          `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiErrorSignatureNotFoundError"
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.signature = signature;
      }
    }
    exports2.AbiErrorSignatureNotFoundError = AbiErrorSignatureNotFoundError22;
    class AbiEventSignatureEmptyTopicsError22 extends base_js_1.BaseError {
      constructor({ docsPath: docsPath52 }) {
        super("Cannot extract event signature from empty topics.", {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEventSignatureEmptyTopicsError"
        });
      }
    }
    exports2.AbiEventSignatureEmptyTopicsError = AbiEventSignatureEmptyTopicsError22;
    class AbiEventSignatureNotFoundError22 extends base_js_1.BaseError {
      constructor(signature, { docsPath: docsPath52 }) {
        super([
          `Encoded event signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the event exists on it.",
          `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEventSignatureNotFoundError"
        });
      }
    }
    exports2.AbiEventSignatureNotFoundError = AbiEventSignatureNotFoundError22;
    class AbiEventNotFoundError22 extends base_js_1.BaseError {
      constructor(eventName, { docsPath: docsPath52 } = {}) {
        super([
          `Event ${eventName ? `"${eventName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the event exists on it."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiEventNotFoundError"
        });
      }
    }
    exports2.AbiEventNotFoundError = AbiEventNotFoundError22;
    class AbiFunctionNotFoundError22 extends base_js_1.BaseError {
      constructor(functionName, { docsPath: docsPath52 } = {}) {
        super([
          `Function ${functionName ? `"${functionName}" ` : ""}not found on ABI.`,
          "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiFunctionNotFoundError"
        });
      }
    }
    exports2.AbiFunctionNotFoundError = AbiFunctionNotFoundError22;
    class AbiFunctionOutputsNotFoundError22 extends base_js_1.BaseError {
      constructor(functionName, { docsPath: docsPath52 }) {
        super([
          `Function "${functionName}" does not contain any \`outputs\` on ABI.`,
          "Cannot decode function result without knowing what the parameter types are.",
          "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiFunctionOutputsNotFoundError"
        });
      }
    }
    exports2.AbiFunctionOutputsNotFoundError = AbiFunctionOutputsNotFoundError22;
    class AbiFunctionSignatureNotFoundError2 extends base_js_1.BaseError {
      constructor(signature, { docsPath: docsPath52 }) {
        super([
          `Encoded function signature "${signature}" not found on ABI.`,
          "Make sure you are using the correct ABI and that the function exists on it.",
          `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
          docsPath: docsPath52
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiFunctionSignatureNotFoundError"
        });
      }
    }
    exports2.AbiFunctionSignatureNotFoundError = AbiFunctionSignatureNotFoundError2;
    class AbiItemAmbiguityError22 extends base_js_1.BaseError {
      constructor(x, y) {
        super("Found ambiguous types in overloaded ABI items.", {
          metaMessages: [
            `\`${x.type}\` in \`${(0, formatAbiItem_js_1.formatAbiItem)(x.abiItem)}\`, and`,
            `\`${y.type}\` in \`${(0, formatAbiItem_js_1.formatAbiItem)(y.abiItem)}\``,
            "",
            "These types encode differently and cannot be distinguished at runtime.",
            "Remove one of the ambiguous items in the ABI."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AbiItemAmbiguityError"
        });
      }
    }
    exports2.AbiItemAmbiguityError = AbiItemAmbiguityError22;
    class BytesSizeMismatchError2 extends base_js_1.BaseError {
      constructor({ expectedSize, givenSize }) {
        super(`Expected bytes${expectedSize}, got bytes${givenSize}.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BytesSizeMismatchError"
        });
      }
    }
    exports2.BytesSizeMismatchError = BytesSizeMismatchError2;
    class DecodeLogDataMismatch22 extends base_js_1.BaseError {
      constructor({ abiItem, data, params, size: size22 }) {
        super([
          `Data size of ${size22} bytes is too small for non-indexed event parameters.`
        ].join("\n"), {
          metaMessages: [
            `Params: (${(0, formatAbiItem_js_1.formatAbiParams)(params, { includeName: true })})`,
            `Data:   ${data} (${size22} bytes)`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "DecodeLogDataMismatch"
        });
        Object.defineProperty(this, "abiItem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abiItem = abiItem;
        this.data = data;
        this.params = params;
        this.size = size22;
      }
    }
    exports2.DecodeLogDataMismatch = DecodeLogDataMismatch22;
    class DecodeLogTopicsMismatch22 extends base_js_1.BaseError {
      constructor({ abiItem, param }) {
        super([
          `Expected a topic for indexed event parameter${param.name ? ` "${param.name}"` : ""} on event "${(0, formatAbiItem_js_1.formatAbiItem)(abiItem, { includeName: true })}".`
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "DecodeLogTopicsMismatch"
        });
        Object.defineProperty(this, "abiItem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.abiItem = abiItem;
      }
    }
    exports2.DecodeLogTopicsMismatch = DecodeLogTopicsMismatch22;
    class InvalidAbiEncodingTypeError22 extends base_js_1.BaseError {
      constructor(type, { docsPath: docsPath52 }) {
        super([
          `Type "${type}" is not a valid encoding type.`,
          "Please provide a valid ABI type."
        ].join("\n"), { docsPath: docsPath52 });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiEncodingType"
        });
      }
    }
    exports2.InvalidAbiEncodingTypeError = InvalidAbiEncodingTypeError22;
    class InvalidAbiDecodingTypeError22 extends base_js_1.BaseError {
      constructor(type, { docsPath: docsPath52 }) {
        super([
          `Type "${type}" is not a valid decoding type.`,
          "Please provide a valid ABI type."
        ].join("\n"), { docsPath: docsPath52 });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidAbiDecodingType"
        });
      }
    }
    exports2.InvalidAbiDecodingTypeError = InvalidAbiDecodingTypeError22;
    class InvalidArrayError22 extends base_js_1.BaseError {
      constructor(value) {
        super([`Value "${value}" is not a valid array.`].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidArrayError"
        });
      }
    }
    exports2.InvalidArrayError = InvalidArrayError22;
    class InvalidDefinitionTypeError22 extends base_js_1.BaseError {
      constructor(type) {
        super([
          `"${type}" is not a valid definition type.`,
          'Valid types: "function", "event", "error"'
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidDefinitionTypeError"
        });
      }
    }
    exports2.InvalidDefinitionTypeError = InvalidDefinitionTypeError22;
    class UnsupportedPackedAbiType2 extends base_js_1.BaseError {
      constructor(type) {
        super(`Type "${type}" is not supported for packed encoding.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnsupportedPackedAbiType"
        });
      }
    }
    exports2.UnsupportedPackedAbiType = UnsupportedPackedAbiType2;
  });
  var require_log2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterTypeNotSupportedError = void 0;
    var base_js_1 = require_base();
    class FilterTypeNotSupportedError22 extends base_js_1.BaseError {
      constructor(type) {
        super(`Filter type "${type}" is not supported.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FilterTypeNotSupportedError"
        });
      }
    }
    exports2.FilterTypeNotSupportedError = FilterTypeNotSupportedError22;
  });
  var require_hashSignature = __commonJS2((exports2) => {
    function hashSignature22(sig) {
      return hash22(sig);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashSignature = void 0;
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var hash22 = (value) => (0, keccak256_js_1.keccak256)((0, toBytes_js_1.toBytes)(value));
    exports2.hashSignature = hashSignature22;
  });
  var require_normalizeSignature = __commonJS2((exports2) => {
    function normalizeSignature22(signature) {
      let active = true;
      let current = "";
      let level = 0;
      let result = "";
      let valid = false;
      for (let i = 0; i < signature.length; i++) {
        const char = signature[i];
        if (["(", ")", ","].includes(char))
          active = true;
        if (char === "(")
          level++;
        if (char === ")")
          level--;
        if (!active)
          continue;
        if (level === 0) {
          if (char === " " && ["event", "function", ""].includes(result))
            result = "";
          else {
            result += char;
            if (char === ")") {
              valid = true;
              break;
            }
          }
          continue;
        }
        if (char === " ") {
          if (signature[i - 1] !== "," && current !== "," && current !== ",(") {
            current = "";
            active = false;
          }
          continue;
        }
        result += char;
        current += char;
      }
      if (!valid)
        throw new base_js_1.BaseError("Unable to normalize signature.");
      return result;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeSignature = void 0;
    var base_js_1 = require_base();
    exports2.normalizeSignature = normalizeSignature22;
  });
  var require_toSignature = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSignature = void 0;
    var abitype_1 = require_exports();
    var normalizeSignature_js_1 = require_normalizeSignature();
    var toSignature22 = (def) => {
      const def_ = (() => {
        if (typeof def === "string")
          return def;
        return (0, abitype_1.formatAbiItem)(def);
      })();
      return (0, normalizeSignature_js_1.normalizeSignature)(def_);
    };
    exports2.toSignature = toSignature22;
  });
  var require_toSignatureHash = __commonJS2((exports2) => {
    function toSignatureHash22(fn) {
      return (0, hashSignature_js_1.hashSignature)((0, toSignature_js_1.toSignature)(fn));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toSignatureHash = void 0;
    var hashSignature_js_1 = require_hashSignature();
    var toSignature_js_1 = require_toSignature();
    exports2.toSignatureHash = toSignatureHash22;
  });
  var require_toEventSelector = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEventSelector = void 0;
    var toSignatureHash_js_1 = require_toSignatureHash();
    exports2.toEventSelector = toSignatureHash_js_1.toSignatureHash;
  });
  var require_slice = __commonJS2((exports2) => {
    function slice22(value, start, end, { strict } = {}) {
      if ((0, isHex_js_1.isHex)(value, { strict: false }))
        return sliceHex22(value, start, end, {
          strict
        });
      return sliceBytes22(value, start, end, {
        strict
      });
    }
    function assertStartOffset22(value, start) {
      if (typeof start === "number" && start > 0 && start > (0, size_js_1.size)(value) - 1)
        throw new data_js_1.SliceOffsetOutOfBoundsError({
          offset: start,
          position: "start",
          size: (0, size_js_1.size)(value)
        });
    }
    function assertEndOffset22(value, start, end) {
      if (typeof start === "number" && typeof end === "number" && (0, size_js_1.size)(value) !== end - start) {
        throw new data_js_1.SliceOffsetOutOfBoundsError({
          offset: end,
          position: "end",
          size: (0, size_js_1.size)(value)
        });
      }
    }
    function sliceBytes22(value_, start, end, { strict } = {}) {
      assertStartOffset22(value_, start);
      const value = value_.slice(start, end);
      if (strict)
        assertEndOffset22(value, start, end);
      return value;
    }
    function sliceHex22(value_, start, end, { strict } = {}) {
      assertStartOffset22(value_, start);
      const value = `0x${value_.replace("0x", "").slice((start ?? 0) * 2, (end ?? value_.length) * 2)}`;
      if (strict)
        assertEndOffset22(value, start, end);
      return value;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sliceHex = exports2.sliceBytes = exports2.slice = void 0;
    var data_js_1 = require_data();
    var isHex_js_1 = require_isHex();
    var size_js_1 = require_size();
    exports2.slice = slice22;
    exports2.sliceBytes = sliceBytes22;
    exports2.sliceHex = sliceHex22;
  });
  var require_encodeAbiParameters = __commonJS2((exports2) => {
    function encodeAbiParameters22(params, values) {
      if (params.length !== values.length)
        throw new abi_js_1.AbiEncodingLengthMismatchError({
          expectedLength: params.length,
          givenLength: values.length
        });
      const preparedParams = prepareParams22({
        params,
        values
      });
      const data = encodeParams22(preparedParams);
      if (data.length === 0)
        return "0x";
      return data;
    }
    function prepareParams22({ params, values }) {
      const preparedParams = [];
      for (let i = 0; i < params.length; i++) {
        preparedParams.push(prepareParam22({ param: params[i], value: values[i] }));
      }
      return preparedParams;
    }
    function prepareParam22({ param, value }) {
      const arrayComponents = getArrayComponents22(param.type);
      if (arrayComponents) {
        const [length, type] = arrayComponents;
        return encodeArray22(value, { length, param: { ...param, type } });
      }
      if (param.type === "tuple") {
        return encodeTuple22(value, {
          param
        });
      }
      if (param.type === "address") {
        return encodeAddress22(value);
      }
      if (param.type === "bool") {
        return encodeBool22(value);
      }
      if (param.type.startsWith("uint") || param.type.startsWith("int")) {
        const signed = param.type.startsWith("int");
        return encodeNumber22(value, { signed });
      }
      if (param.type.startsWith("bytes")) {
        return encodeBytes22(value, { param });
      }
      if (param.type === "string") {
        return encodeString22(value);
      }
      throw new abi_js_1.InvalidAbiEncodingTypeError(param.type, {
        docsPath: "/docs/contract/encodeAbiParameters"
      });
    }
    function encodeParams22(preparedParams) {
      let staticSize = 0;
      for (let i = 0; i < preparedParams.length; i++) {
        const { dynamic, encoded } = preparedParams[i];
        if (dynamic)
          staticSize += 32;
        else
          staticSize += (0, size_js_1.size)(encoded);
      }
      const staticParams = [];
      const dynamicParams = [];
      let dynamicSize = 0;
      for (let i = 0; i < preparedParams.length; i++) {
        const { dynamic, encoded } = preparedParams[i];
        if (dynamic) {
          staticParams.push((0, toHex_js_1.numberToHex)(staticSize + dynamicSize, { size: 32 }));
          dynamicParams.push(encoded);
          dynamicSize += (0, size_js_1.size)(encoded);
        } else {
          staticParams.push(encoded);
        }
      }
      return (0, concat_js_1.concat)([...staticParams, ...dynamicParams]);
    }
    function encodeAddress22(value) {
      if (!(0, isAddress_js_1.isAddress)(value))
        throw new address_js_1.InvalidAddressError({ address: value });
      return { dynamic: false, encoded: (0, pad_js_1.padHex)(value.toLowerCase()) };
    }
    function encodeArray22(value, { length, param }) {
      const dynamic = length === null;
      if (!Array.isArray(value))
        throw new abi_js_1.InvalidArrayError(value);
      if (!dynamic && value.length !== length)
        throw new abi_js_1.AbiEncodingArrayLengthMismatchError({
          expectedLength: length,
          givenLength: value.length,
          type: `${param.type}[${length}]`
        });
      let dynamicChild = false;
      const preparedParams = [];
      for (let i = 0; i < value.length; i++) {
        const preparedParam = prepareParam22({ param, value: value[i] });
        if (preparedParam.dynamic)
          dynamicChild = true;
        preparedParams.push(preparedParam);
      }
      if (dynamic || dynamicChild) {
        const data = encodeParams22(preparedParams);
        if (dynamic) {
          const length2 = (0, toHex_js_1.numberToHex)(preparedParams.length, { size: 32 });
          return {
            dynamic: true,
            encoded: preparedParams.length > 0 ? (0, concat_js_1.concat)([length2, data]) : length2
          };
        }
        if (dynamicChild)
          return { dynamic: true, encoded: data };
      }
      return {
        dynamic: false,
        encoded: (0, concat_js_1.concat)(preparedParams.map(({ encoded }) => encoded))
      };
    }
    function encodeBytes22(value, { param }) {
      const [, paramSize] = param.type.split("bytes");
      const bytesSize = (0, size_js_1.size)(value);
      if (!paramSize) {
        let value_ = value;
        if (bytesSize % 32 !== 0)
          value_ = (0, pad_js_1.padHex)(value_, {
            dir: "right",
            size: Math.ceil((value.length - 2) / 2 / 32) * 32
          });
        return {
          dynamic: true,
          encoded: (0, concat_js_1.concat)([(0, pad_js_1.padHex)((0, toHex_js_1.numberToHex)(bytesSize, { size: 32 })), value_])
        };
      }
      if (bytesSize !== parseInt(paramSize))
        throw new abi_js_1.AbiEncodingBytesSizeMismatchError({
          expectedSize: parseInt(paramSize),
          value
        });
      return { dynamic: false, encoded: (0, pad_js_1.padHex)(value, { dir: "right" }) };
    }
    function encodeBool22(value) {
      if (typeof value !== "boolean")
        throw new base_js_1.BaseError(`Invalid boolean value: "${value}" (type: ${typeof value}). Expected: \`true\` or \`false\`.`);
      return { dynamic: false, encoded: (0, pad_js_1.padHex)((0, toHex_js_1.boolToHex)(value)) };
    }
    function encodeNumber22(value, { signed }) {
      return {
        dynamic: false,
        encoded: (0, toHex_js_1.numberToHex)(value, {
          size: 32,
          signed
        })
      };
    }
    function encodeString22(value) {
      const hexValue = (0, toHex_js_1.stringToHex)(value);
      const partsLength = Math.ceil((0, size_js_1.size)(hexValue) / 32);
      const parts = [];
      for (let i = 0; i < partsLength; i++) {
        parts.push((0, pad_js_1.padHex)((0, slice_js_1.slice)(hexValue, i * 32, (i + 1) * 32), {
          dir: "right"
        }));
      }
      return {
        dynamic: true,
        encoded: (0, concat_js_1.concat)([
          (0, pad_js_1.padHex)((0, toHex_js_1.numberToHex)((0, size_js_1.size)(hexValue), { size: 32 })),
          ...parts
        ])
      };
    }
    function encodeTuple22(value, { param }) {
      let dynamic = false;
      const preparedParams = [];
      for (let i = 0; i < param.components.length; i++) {
        const param_ = param.components[i];
        const index2 = Array.isArray(value) ? i : param_.name;
        const preparedParam = prepareParam22({
          param: param_,
          value: value[index2]
        });
        preparedParams.push(preparedParam);
        if (preparedParam.dynamic)
          dynamic = true;
      }
      return {
        dynamic,
        encoded: dynamic ? encodeParams22(preparedParams) : (0, concat_js_1.concat)(preparedParams.map(({ encoded }) => encoded))
      };
    }
    function getArrayComponents22(type) {
      const matches = type.match(/^(.*)\[(\d+)?\]$/);
      return matches ? [matches[2] ? Number(matches[2]) : null, matches[1]] : void 0;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArrayComponents = exports2.encodeAbiParameters = void 0;
    var abi_js_1 = require_abi();
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var pad_js_1 = require_pad();
    var size_js_1 = require_size();
    var slice_js_1 = require_slice();
    var toHex_js_1 = require_toHex();
    exports2.encodeAbiParameters = encodeAbiParameters22;
    exports2.getArrayComponents = getArrayComponents22;
  });
  var require_toFunctionSelector = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toFunctionSelector = void 0;
    var slice_js_1 = require_slice();
    var toSignatureHash_js_1 = require_toSignatureHash();
    var toFunctionSelector22 = (fn) => (0, slice_js_1.slice)((0, toSignatureHash_js_1.toSignatureHash)(fn), 0, 4);
    exports2.toFunctionSelector = toFunctionSelector22;
  });
  var require_getAbiItem = __commonJS2((exports2) => {
    function getAbiItem22(parameters) {
      const { abi, args = [], name } = parameters;
      const isSelector = (0, isHex_js_1.isHex)(name, { strict: false });
      const abiItems = abi.filter((abiItem) => {
        if (isSelector) {
          if (abiItem.type === "function")
            return (0, toFunctionSelector_js_1.toFunctionSelector)(abiItem) === name;
          if (abiItem.type === "event")
            return (0, toEventSelector_js_1.toEventSelector)(abiItem) === name;
          return false;
        }
        return "name" in abiItem && abiItem.name === name;
      });
      if (abiItems.length === 0)
        return;
      if (abiItems.length === 1)
        return abiItems[0];
      let matchedAbiItem = void 0;
      for (const abiItem of abiItems) {
        if (!("inputs" in abiItem))
          continue;
        if (!args || args.length === 0) {
          if (!abiItem.inputs || abiItem.inputs.length === 0)
            return abiItem;
          continue;
        }
        if (!abiItem.inputs)
          continue;
        if (abiItem.inputs.length === 0)
          continue;
        if (abiItem.inputs.length !== args.length)
          continue;
        const matched = args.every((arg, index2) => {
          const abiParameter = "inputs" in abiItem && abiItem.inputs[index2];
          if (!abiParameter)
            return false;
          return isArgOfType22(arg, abiParameter);
        });
        if (matched) {
          if (matchedAbiItem && "inputs" in matchedAbiItem && matchedAbiItem.inputs) {
            const ambiguousTypes = getAmbiguousTypes22(abiItem.inputs, matchedAbiItem.inputs, args);
            if (ambiguousTypes)
              throw new abi_js_1.AbiItemAmbiguityError({
                abiItem,
                type: ambiguousTypes[0]
              }, {
                abiItem: matchedAbiItem,
                type: ambiguousTypes[1]
              });
          }
          matchedAbiItem = abiItem;
        }
      }
      if (matchedAbiItem)
        return matchedAbiItem;
      return abiItems[0];
    }
    function isArgOfType22(arg, abiParameter) {
      const argType = typeof arg;
      const abiParameterType = abiParameter.type;
      switch (abiParameterType) {
        case "address":
          return (0, isAddress_js_1.isAddress)(arg, { strict: false });
        case "bool":
          return argType === "boolean";
        case "function":
          return argType === "string";
        case "string":
          return argType === "string";
        default: {
          if (abiParameterType === "tuple" && "components" in abiParameter)
            return Object.values(abiParameter.components).every((component, index2) => {
              return isArgOfType22(Object.values(arg)[index2], component);
            });
          if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType))
            return argType === "number" || argType === "bigint";
          if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))
            return argType === "string" || arg instanceof Uint8Array;
          if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(abiParameterType)) {
            return Array.isArray(arg) && arg.every((x) => isArgOfType22(x, {
              ...abiParameter,
              type: abiParameterType.replace(/(\[[0-9]{0,}\])$/, "")
            }));
          }
          return false;
        }
      }
    }
    function getAmbiguousTypes22(sourceParameters, targetParameters, args) {
      for (const parameterIndex in sourceParameters) {
        const sourceParameter = sourceParameters[parameterIndex];
        const targetParameter = targetParameters[parameterIndex];
        if (sourceParameter.type === "tuple" && targetParameter.type === "tuple" && "components" in sourceParameter && "components" in targetParameter)
          return getAmbiguousTypes22(sourceParameter.components, targetParameter.components, args[parameterIndex]);
        const types = [sourceParameter.type, targetParameter.type];
        const ambiguous = (() => {
          if (types.includes("address") && types.includes("bytes20"))
            return true;
          if (types.includes("address") && types.includes("string"))
            return (0, isAddress_js_1.isAddress)(args[parameterIndex], { strict: false });
          if (types.includes("address") && types.includes("bytes"))
            return (0, isAddress_js_1.isAddress)(args[parameterIndex], { strict: false });
          return false;
        })();
        if (ambiguous)
          return types;
      }
      return;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAmbiguousTypes = exports2.isArgOfType = exports2.getAbiItem = void 0;
    var abi_js_1 = require_abi();
    var isHex_js_1 = require_isHex();
    var isAddress_js_1 = require_isAddress();
    var toEventSelector_js_1 = require_toEventSelector();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    exports2.getAbiItem = getAbiItem22;
    exports2.isArgOfType = isArgOfType22;
    exports2.getAmbiguousTypes = getAmbiguousTypes22;
  });
  var require_encodeEventTopics = __commonJS2((exports2) => {
    function encodeEventTopics22(parameters) {
      const { abi, eventName, args } = parameters;
      let abiItem = abi[0];
      if (eventName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, name: eventName });
        if (!item)
          throw new abi_js_1.AbiEventNotFoundError(eventName, { docsPath: docsPath52 });
        abiItem = item;
      }
      if (abiItem.type !== "event")
        throw new abi_js_1.AbiEventNotFoundError(void 0, { docsPath: docsPath52 });
      const definition = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);
      const signature = (0, toEventSelector_js_1.toEventSelector)(definition);
      let topics = [];
      if (args && "inputs" in abiItem) {
        const indexedInputs = abiItem.inputs?.filter((param) => "indexed" in param && param.indexed);
        const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map((x) => args[x.name]) ?? [] : [];
        if (args_.length > 0) {
          topics = indexedInputs?.map((param, i) => Array.isArray(args_[i]) ? args_[i].map((_, j) => encodeArg22({ param, value: args_[i][j] })) : args_[i] ? encodeArg22({ param, value: args_[i] }) : null) ?? [];
        }
      }
      return [signature, ...topics];
    }
    function encodeArg22({ param, value }) {
      if (param.type === "string" || param.type === "bytes")
        return (0, keccak256_js_1.keccak256)((0, toBytes_js_1.toBytes)(value));
      if (param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
        throw new log_js_1.FilterTypeNotSupportedError(param.type);
      return (0, encodeAbiParameters_js_1.encodeAbiParameters)([param], [value]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeEventTopics = void 0;
    var abi_js_1 = require_abi();
    var log_js_1 = require_log2();
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    var toEventSelector_js_1 = require_toEventSelector();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath52 = "/docs/contract/encodeEventTopics";
    exports2.encodeEventTopics = encodeEventTopics22;
  });
  var require_createFilterRequestScope = __commonJS2((exports2) => {
    function createFilterRequestScope22(client, { method }) {
      const requestMap = {};
      if (client.transport.type === "fallback")
        client.transport.onResponse?.(({ method: method_, response: id, status, transport }) => {
          if (status === "success" && method === method_)
            requestMap[id] = transport.request;
        });
      return (id) => requestMap[id] || client.request;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createFilterRequestScope = void 0;
    exports2.createFilterRequestScope = createFilterRequestScope22;
  });
  var require_createContractEventFilter = __commonJS2((exports2) => {
    async function createContractEventFilter22(client, parameters) {
      const { address, abi, args, eventName, fromBlock, strict, toBlock } = parameters;
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newFilter"
      });
      const topics = eventName ? (0, encodeEventTopics_js_1.encodeEventTopics)({
        abi,
        args,
        eventName
      }) : void 0;
      const id = await client.request({
        method: "eth_newFilter",
        params: [
          {
            address,
            fromBlock: typeof fromBlock === "bigint" ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,
            topics
          }
        ]
      });
      return {
        abi,
        args,
        eventName,
        id,
        request: getRequest(id),
        strict: Boolean(strict),
        type: "event"
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createContractEventFilter = void 0;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var toHex_js_1 = require_toHex();
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    exports2.createContractEventFilter = createContractEventFilter22;
  });
  var require_parseAccount = __commonJS2((exports2) => {
    function parseAccount22(account) {
      if (typeof account === "string")
        return { address: account, type: "json-rpc" };
      return account;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAccount = void 0;
    exports2.parseAccount = parseAccount22;
  });
  var require_prepareEncodeFunctionData = __commonJS2((exports2) => {
    function prepareEncodeFunctionData22(parameters) {
      const { abi, args, functionName } = parameters;
      let abiItem = abi[0];
      if (functionName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({
          abi,
          args,
          name: functionName
        });
        if (!item)
          throw new abi_js_1.AbiFunctionNotFoundError(functionName, { docsPath: docsPath52 });
        abiItem = item;
      }
      if (abiItem.type !== "function")
        throw new abi_js_1.AbiFunctionNotFoundError(void 0, { docsPath: docsPath52 });
      return {
        abi: [abiItem],
        functionName: (0, toFunctionSelector_js_1.toFunctionSelector)((0, formatAbiItem_js_1.formatAbiItem)(abiItem))
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareEncodeFunctionData = void 0;
    var abi_js_1 = require_abi();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath52 = "/docs/contract/encodeFunctionData";
    exports2.prepareEncodeFunctionData = prepareEncodeFunctionData22;
  });
  var require_encodeFunctionData = __commonJS2((exports2) => {
    function encodeFunctionData22(parameters) {
      const { args } = parameters;
      const { abi, functionName } = (() => {
        if (parameters.abi.length === 1 && parameters.functionName?.startsWith("0x"))
          return parameters;
        return (0, prepareEncodeFunctionData_js_1.prepareEncodeFunctionData)(parameters);
      })();
      const abiItem = abi[0];
      const signature = functionName;
      const data = "inputs" in abiItem && abiItem.inputs ? (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.inputs, args ?? []) : void 0;
      return (0, concat_js_1.concatHex)([signature, data ?? "0x"]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeFunctionData = void 0;
    var concat_js_1 = require_concat();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var prepareEncodeFunctionData_js_1 = require_prepareEncodeFunctionData();
    exports2.encodeFunctionData = encodeFunctionData22;
  });
  var require_solidity = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.solidityPanic = exports2.solidityError = exports2.panicReasons = void 0;
    exports2.panicReasons = {
      1: "An `assert` condition failed.",
      17: "Arithmetic operation resulted in underflow or overflow.",
      18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
      33: "Attempted to convert to an invalid type.",
      34: "Attempted to access a storage byte array that is incorrectly encoded.",
      49: "Performed `.pop()` on an empty array",
      50: "Array index is out of bounds.",
      65: "Allocated too much memory or created an array which is too large.",
      81: "Attempted to call a zero-initialized variable of internal function type."
    };
    exports2.solidityError = {
      inputs: [
        {
          name: "message",
          type: "string"
        }
      ],
      name: "Error",
      type: "error"
    };
    exports2.solidityPanic = {
      inputs: [
        {
          name: "reason",
          type: "uint256"
        }
      ],
      name: "Panic",
      type: "error"
    };
  });
  var require_cursor = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RecursiveReadLimitExceededError = exports2.PositionOutOfBoundsError = exports2.NegativeOffsetError = void 0;
    var base_js_1 = require_base();
    class NegativeOffsetError22 extends base_js_1.BaseError {
      constructor({ offset }) {
        super(`Offset \`${offset}\` cannot be negative.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NegativeOffsetError"
        });
      }
    }
    exports2.NegativeOffsetError = NegativeOffsetError22;
    class PositionOutOfBoundsError22 extends base_js_1.BaseError {
      constructor({ length, position }) {
        super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "PositionOutOfBoundsError"
        });
      }
    }
    exports2.PositionOutOfBoundsError = PositionOutOfBoundsError22;
    class RecursiveReadLimitExceededError22 extends base_js_1.BaseError {
      constructor({ count, limit }) {
        super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RecursiveReadLimitExceededError"
        });
      }
    }
    exports2.RecursiveReadLimitExceededError = RecursiveReadLimitExceededError22;
  });
  var require_cursor2 = __commonJS2((exports2) => {
    function createCursor22(bytes22, { recursiveReadLimit = 8192 } = {}) {
      const cursor = Object.create(staticCursor22);
      cursor.bytes = bytes22;
      cursor.dataView = new DataView(bytes22.buffer, bytes22.byteOffset, bytes22.byteLength);
      cursor.positionReadCount = /* @__PURE__ */ new Map();
      cursor.recursiveReadLimit = recursiveReadLimit;
      return cursor;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCursor = void 0;
    var cursor_js_1 = require_cursor();
    var staticCursor22 = {
      bytes: new Uint8Array(),
      dataView: new DataView(new ArrayBuffer(0)),
      position: 0,
      positionReadCount: /* @__PURE__ */ new Map(),
      recursiveReadCount: 0,
      recursiveReadLimit: Infinity,
      assertReadLimit() {
        if (this.recursiveReadCount >= this.recursiveReadLimit)
          throw new cursor_js_1.RecursiveReadLimitExceededError({
            count: this.recursiveReadCount + 1,
            limit: this.recursiveReadLimit
          });
      },
      assertPosition(position) {
        if (position < 0 || position > this.bytes.length - 1)
          throw new cursor_js_1.PositionOutOfBoundsError({
            length: this.bytes.length,
            position
          });
      },
      decrementPosition(offset) {
        if (offset < 0)
          throw new cursor_js_1.NegativeOffsetError({ offset });
        const position = this.position - offset;
        this.assertPosition(position);
        this.position = position;
      },
      getReadCount(position) {
        return this.positionReadCount.get(position || this.position) || 0;
      },
      incrementPosition(offset) {
        if (offset < 0)
          throw new cursor_js_1.NegativeOffsetError({ offset });
        const position = this.position + offset;
        this.assertPosition(position);
        this.position = position;
      },
      inspectByte(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position);
        return this.bytes[position];
      },
      inspectBytes(length, position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + length - 1);
        return this.bytes.subarray(position, position + length);
      },
      inspectUint8(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position);
        return this.bytes[position];
      },
      inspectUint16(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 1);
        return this.dataView.getUint16(position);
      },
      inspectUint24(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 2);
        return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
      },
      inspectUint32(position_) {
        const position = position_ ?? this.position;
        this.assertPosition(position + 3);
        return this.dataView.getUint32(position);
      },
      pushByte(byte) {
        this.assertPosition(this.position);
        this.bytes[this.position] = byte;
        this.position++;
      },
      pushBytes(bytes22) {
        this.assertPosition(this.position + bytes22.length - 1);
        this.bytes.set(bytes22, this.position);
        this.position += bytes22.length;
      },
      pushUint8(value) {
        this.assertPosition(this.position);
        this.bytes[this.position] = value;
        this.position++;
      },
      pushUint16(value) {
        this.assertPosition(this.position + 1);
        this.dataView.setUint16(this.position, value);
        this.position += 2;
      },
      pushUint24(value) {
        this.assertPosition(this.position + 2);
        this.dataView.setUint16(this.position, value >> 8);
        this.dataView.setUint8(this.position + 2, value & ~4294967040);
        this.position += 3;
      },
      pushUint32(value) {
        this.assertPosition(this.position + 3);
        this.dataView.setUint32(this.position, value);
        this.position += 4;
      },
      readByte() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectByte();
        this.position++;
        return value;
      },
      readBytes(length, size22) {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectBytes(length);
        this.position += size22 ?? length;
        return value;
      },
      readUint8() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint8();
        this.position += 1;
        return value;
      },
      readUint16() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint16();
        this.position += 2;
        return value;
      },
      readUint24() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint24();
        this.position += 3;
        return value;
      },
      readUint32() {
        this.assertReadLimit();
        this._touch();
        const value = this.inspectUint32();
        this.position += 4;
        return value;
      },
      get remaining() {
        return this.bytes.length - this.position;
      },
      setPosition(position) {
        const oldPosition = this.position;
        this.assertPosition(position);
        this.position = position;
        return () => this.position = oldPosition;
      },
      _touch() {
        if (this.recursiveReadLimit === Infinity)
          return;
        const count = this.getReadCount();
        this.positionReadCount.set(this.position, count + 1);
        if (count > 0)
          this.recursiveReadCount++;
      }
    };
    exports2.createCursor = createCursor22;
  });
  var require_fromBytes = __commonJS2((exports2) => {
    function fromBytes(bytes22, toOrOpts) {
      const opts = typeof toOrOpts === "string" ? { to: toOrOpts } : toOrOpts;
      const to = opts.to;
      if (to === "number")
        return bytesToNumber22(bytes22, opts);
      if (to === "bigint")
        return bytesToBigInt22(bytes22, opts);
      if (to === "boolean")
        return bytesToBool22(bytes22, opts);
      if (to === "string")
        return bytesToString22(bytes22, opts);
      return (0, toHex_js_1.bytesToHex)(bytes22, opts);
    }
    function bytesToBigInt22(bytes22, opts = {}) {
      if (typeof opts.size !== "undefined")
        (0, fromHex_js_1.assertSize)(bytes22, { size: opts.size });
      const hex = (0, toHex_js_1.bytesToHex)(bytes22, opts);
      return (0, fromHex_js_1.hexToBigInt)(hex, opts);
    }
    function bytesToBool22(bytes_, opts = {}) {
      let bytes22 = bytes_;
      if (typeof opts.size !== "undefined") {
        (0, fromHex_js_1.assertSize)(bytes22, { size: opts.size });
        bytes22 = (0, trim_js_1.trim)(bytes22);
      }
      if (bytes22.length > 1 || bytes22[0] > 1)
        throw new encoding_js_1.InvalidBytesBooleanError(bytes22);
      return Boolean(bytes22[0]);
    }
    function bytesToNumber22(bytes22, opts = {}) {
      if (typeof opts.size !== "undefined")
        (0, fromHex_js_1.assertSize)(bytes22, { size: opts.size });
      const hex = (0, toHex_js_1.bytesToHex)(bytes22, opts);
      return (0, fromHex_js_1.hexToNumber)(hex, opts);
    }
    function bytesToString22(bytes_, opts = {}) {
      let bytes22 = bytes_;
      if (typeof opts.size !== "undefined") {
        (0, fromHex_js_1.assertSize)(bytes22, { size: opts.size });
        bytes22 = (0, trim_js_1.trim)(bytes22, { dir: "right" });
      }
      return new TextDecoder().decode(bytes22);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytesToString = exports2.bytesToNumber = exports2.bytesToBool = exports2.bytesToBigInt = exports2.fromBytes = void 0;
    var encoding_js_1 = require_encoding();
    var trim_js_1 = require_trim();
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    exports2.fromBytes = fromBytes;
    exports2.bytesToBigInt = bytesToBigInt22;
    exports2.bytesToBool = bytesToBool22;
    exports2.bytesToNumber = bytesToNumber22;
    exports2.bytesToString = bytesToString22;
  });
  var require_decodeAbiParameters = __commonJS2((exports2) => {
    function decodeAbiParameters22(params, data) {
      const bytes22 = typeof data === "string" ? (0, toBytes_js_1.hexToBytes)(data) : data;
      const cursor = (0, cursor_js_1.createCursor)(bytes22);
      if ((0, size_js_1.size)(bytes22) === 0 && params.length > 0)
        throw new abi_js_1.AbiDecodingZeroDataError();
      if ((0, size_js_1.size)(data) && (0, size_js_1.size)(data) < 32)
        throw new abi_js_1.AbiDecodingDataSizeTooSmallError({
          data: typeof data === "string" ? data : (0, toHex_js_1.bytesToHex)(data),
          params,
          size: (0, size_js_1.size)(data)
        });
      let consumed = 0;
      const values = [];
      for (let i = 0; i < params.length; ++i) {
        const param = params[i];
        cursor.setPosition(consumed);
        const [data2, consumed_] = decodeParameter22(cursor, param, {
          staticPosition: 0
        });
        consumed += consumed_;
        values.push(data2);
      }
      return values;
    }
    function decodeParameter22(cursor, param, { staticPosition }) {
      const arrayComponents = (0, encodeAbiParameters_js_1.getArrayComponents)(param.type);
      if (arrayComponents) {
        const [length, type] = arrayComponents;
        return decodeArray22(cursor, { ...param, type }, { length, staticPosition });
      }
      if (param.type === "tuple")
        return decodeTuple22(cursor, param, { staticPosition });
      if (param.type === "address")
        return decodeAddress22(cursor);
      if (param.type === "bool")
        return decodeBool22(cursor);
      if (param.type.startsWith("bytes"))
        return decodeBytes22(cursor, param, { staticPosition });
      if (param.type.startsWith("uint") || param.type.startsWith("int"))
        return decodeNumber22(cursor, param);
      if (param.type === "string")
        return decodeString22(cursor, { staticPosition });
      throw new abi_js_1.InvalidAbiDecodingTypeError(param.type, {
        docsPath: "/docs/contract/decodeAbiParameters"
      });
    }
    function decodeAddress22(cursor) {
      const value = cursor.readBytes(32);
      return [(0, getAddress_js_1.checksumAddress)((0, toHex_js_1.bytesToHex)((0, slice_js_1.sliceBytes)(value, -20))), 32];
    }
    function decodeArray22(cursor, param, { length, staticPosition }) {
      if (!length) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfOffset22));
        const start = staticPosition + offset;
        const startOfData = start + sizeOfLength22;
        cursor.setPosition(start);
        const length2 = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfLength22));
        const dynamicChild = hasDynamicChild22(param);
        let consumed2 = 0;
        const value2 = [];
        for (let i = 0; i < length2; ++i) {
          cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed2));
          const [data, consumed_] = decodeParameter22(cursor, param, {
            staticPosition: startOfData
          });
          consumed2 += consumed_;
          value2.push(data);
        }
        cursor.setPosition(staticPosition + 32);
        return [value2, 32];
      }
      if (hasDynamicChild22(param)) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfOffset22));
        const start = staticPosition + offset;
        const value2 = [];
        for (let i = 0; i < length; ++i) {
          cursor.setPosition(start + i * 32);
          const [data] = decodeParameter22(cursor, param, {
            staticPosition: start
          });
          value2.push(data);
        }
        cursor.setPosition(staticPosition + 32);
        return [value2, 32];
      }
      let consumed = 0;
      const value = [];
      for (let i = 0; i < length; ++i) {
        const [data, consumed_] = decodeParameter22(cursor, param, {
          staticPosition: staticPosition + consumed
        });
        consumed += consumed_;
        value.push(data);
      }
      return [value, consumed];
    }
    function decodeBool22(cursor) {
      return [(0, fromBytes_js_1.bytesToBool)(cursor.readBytes(32), { size: 32 }), 32];
    }
    function decodeBytes22(cursor, param, { staticPosition }) {
      const [_, size22] = param.type.split("bytes");
      if (!size22) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
        cursor.setPosition(staticPosition + offset);
        const length = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
        if (length === 0) {
          cursor.setPosition(staticPosition + 32);
          return ["0x", 32];
        }
        const data = cursor.readBytes(length);
        cursor.setPosition(staticPosition + 32);
        return [(0, toHex_js_1.bytesToHex)(data), 32];
      }
      const value = (0, toHex_js_1.bytesToHex)(cursor.readBytes(parseInt(size22), 32));
      return [value, 32];
    }
    function decodeNumber22(cursor, param) {
      const signed = param.type.startsWith("int");
      const size22 = parseInt(param.type.split("int")[1] || "256");
      const value = cursor.readBytes(32);
      return [
        size22 > 48 ? (0, fromBytes_js_1.bytesToBigInt)(value, { signed }) : (0, fromBytes_js_1.bytesToNumber)(value, { signed }),
        32
      ];
    }
    function decodeTuple22(cursor, param, { staticPosition }) {
      const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name }) => !name);
      const value = hasUnnamedChild ? [] : {};
      let consumed = 0;
      if (hasDynamicChild22(param)) {
        const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(sizeOfOffset22));
        const start = staticPosition + offset;
        for (let i = 0; i < param.components.length; ++i) {
          const component = param.components[i];
          cursor.setPosition(start + consumed);
          const [data, consumed_] = decodeParameter22(cursor, component, {
            staticPosition: start
          });
          consumed += consumed_;
          value[hasUnnamedChild ? i : component?.name] = data;
        }
        cursor.setPosition(staticPosition + 32);
        return [value, 32];
      }
      for (let i = 0; i < param.components.length; ++i) {
        const component = param.components[i];
        const [data, consumed_] = decodeParameter22(cursor, component, {
          staticPosition
        });
        value[hasUnnamedChild ? i : component?.name] = data;
        consumed += consumed_;
      }
      return [value, consumed];
    }
    function decodeString22(cursor, { staticPosition }) {
      const offset = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
      const start = staticPosition + offset;
      cursor.setPosition(start);
      const length = (0, fromBytes_js_1.bytesToNumber)(cursor.readBytes(32));
      if (length === 0) {
        cursor.setPosition(staticPosition + 32);
        return ["", 32];
      }
      const data = cursor.readBytes(length, 32);
      const value = (0, fromBytes_js_1.bytesToString)((0, trim_js_1.trim)(data));
      cursor.setPosition(staticPosition + 32);
      return [value, 32];
    }
    function hasDynamicChild22(param) {
      const { type } = param;
      if (type === "string")
        return true;
      if (type === "bytes")
        return true;
      if (type.endsWith("[]"))
        return true;
      if (type === "tuple")
        return param.components?.some(hasDynamicChild22);
      const arrayComponents = (0, encodeAbiParameters_js_1.getArrayComponents)(param.type);
      if (arrayComponents && hasDynamicChild22({ ...param, type: arrayComponents[1] }))
        return true;
      return false;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeAbiParameters = void 0;
    var abi_js_1 = require_abi();
    var getAddress_js_1 = require_getAddress();
    var cursor_js_1 = require_cursor2();
    var size_js_1 = require_size();
    var slice_js_1 = require_slice();
    var trim_js_1 = require_trim();
    var fromBytes_js_1 = require_fromBytes();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    exports2.decodeAbiParameters = decodeAbiParameters22;
    var sizeOfLength22 = 32;
    var sizeOfOffset22 = 32;
  });
  var require_decodeErrorResult = __commonJS2((exports2) => {
    function decodeErrorResult22(parameters) {
      const { abi, data } = parameters;
      const signature = (0, slice_js_1.slice)(data, 0, 4);
      if (signature === "0x")
        throw new abi_js_1.AbiDecodingZeroDataError();
      const abi_ = [...abi || [], solidity_js_1.solidityError, solidity_js_1.solidityPanic];
      const abiItem = abi_.find((x) => x.type === "error" && signature === (0, toFunctionSelector_js_1.toFunctionSelector)((0, formatAbiItem_js_1.formatAbiItem)(x)));
      if (!abiItem)
        throw new abi_js_1.AbiErrorSignatureNotFoundError(signature, {
          docsPath: "/docs/contract/decodeErrorResult"
        });
      return {
        abiItem,
        args: "inputs" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? (0, decodeAbiParameters_js_1.decodeAbiParameters)(abiItem.inputs, (0, slice_js_1.slice)(data, 4)) : void 0,
        errorName: abiItem.name
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeErrorResult = void 0;
    var solidity_js_1 = require_solidity();
    var abi_js_1 = require_abi();
    var slice_js_1 = require_slice();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    exports2.decodeErrorResult = decodeErrorResult22;
  });
  var require_stringify = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringify = void 0;
    var stringify22 = (value, replacer, space) => JSON.stringify(value, (key, value_) => {
      const value2 = typeof value_ === "bigint" ? value_.toString() : value_;
      return typeof replacer === "function" ? replacer(key, value2) : value2;
    }, space);
    exports2.stringify = stringify22;
  });
  var require_formatAbiItemWithArgs = __commonJS2((exports2) => {
    function formatAbiItemWithArgs22({ abiItem, args, includeFunctionName = true, includeName = false }) {
      if (!("name" in abiItem))
        return;
      if (!("inputs" in abiItem))
        return;
      if (!abiItem.inputs)
        return;
      return `${includeFunctionName ? abiItem.name : ""}(${abiItem.inputs.map((input, i) => `${includeName && input.name ? `${input.name}: ` : ""}${typeof args[i] === "object" ? (0, stringify_js_1.stringify)(args[i]) : args[i]}`).join(", ")})`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatAbiItemWithArgs = void 0;
    var stringify_js_1 = require_stringify();
    exports2.formatAbiItemWithArgs = formatAbiItemWithArgs22;
  });
  var require_unit = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.weiUnits = exports2.gweiUnits = exports2.etherUnits = void 0;
    exports2.etherUnits = {
      gwei: 9,
      wei: 18
    };
    exports2.gweiUnits = {
      ether: -9,
      wei: 9
    };
    exports2.weiUnits = {
      ether: -18,
      gwei: -9
    };
  });
  var require_formatUnits = __commonJS2((exports2) => {
    function formatUnits22(value, decimals) {
      let display = value.toString();
      const negative = display.startsWith("-");
      if (negative)
        display = display.slice(1);
      display = display.padStart(decimals, "0");
      let [integer, fraction] = [
        display.slice(0, display.length - decimals),
        display.slice(display.length - decimals)
      ];
      fraction = fraction.replace(/(0+)$/, "");
      return `${negative ? "-" : ""}${integer || "0"}${fraction ? `.${fraction}` : ""}`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatUnits = void 0;
    exports2.formatUnits = formatUnits22;
  });
  var require_formatEther = __commonJS2((exports2) => {
    function formatEther22(wei, unit = "wei") {
      return (0, formatUnits_js_1.formatUnits)(wei, unit_js_1.etherUnits[unit]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatEther = void 0;
    var unit_js_1 = require_unit();
    var formatUnits_js_1 = require_formatUnits();
    exports2.formatEther = formatEther22;
  });
  var require_formatGwei = __commonJS2((exports2) => {
    function formatGwei22(wei, unit = "wei") {
      return (0, formatUnits_js_1.formatUnits)(wei, unit_js_1.gweiUnits[unit]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatGwei = void 0;
    var unit_js_1 = require_unit();
    var formatUnits_js_1 = require_formatUnits();
    exports2.formatGwei = formatGwei22;
  });
  var require_stateOverride = __commonJS2((exports2) => {
    function prettyStateMapping22(stateMapping) {
      return stateMapping.reduce((pretty, { slot, value }) => {
        return `${pretty}        ${slot}: ${value}
`;
      }, "");
    }
    function prettyStateOverride22(stateOverride) {
      return stateOverride.reduce((pretty, { address, ...state }) => {
        let val = `${pretty}    ${address}:
`;
        if (state.nonce)
          val += `      nonce: ${state.nonce}
`;
        if (state.balance)
          val += `      balance: ${state.balance}
`;
        if (state.code)
          val += `      code: ${state.code}
`;
        if (state.state) {
          val += "      state:\n";
          val += prettyStateMapping22(state.state);
        }
        if (state.stateDiff) {
          val += "      stateDiff:\n";
          val += prettyStateMapping22(state.stateDiff);
        }
        return val;
      }, "  State Override:\n").slice(0, -1);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prettyStateOverride = exports2.prettyStateMapping = exports2.StateAssignmentConflictError = exports2.AccountStateConflictError = void 0;
    var base_js_1 = require_base();
    class AccountStateConflictError22 extends base_js_1.BaseError {
      constructor({ address }) {
        super(`State for account "${address}" is set multiple times.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AccountStateConflictError"
        });
      }
    }
    exports2.AccountStateConflictError = AccountStateConflictError22;
    class StateAssignmentConflictError22 extends base_js_1.BaseError {
      constructor() {
        super("state and stateDiff are set on the same account.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "StateAssignmentConflictError"
        });
      }
    }
    exports2.StateAssignmentConflictError = StateAssignmentConflictError22;
    exports2.prettyStateMapping = prettyStateMapping22;
    exports2.prettyStateOverride = prettyStateOverride22;
  });
  var require_transaction2 = __commonJS2((exports2) => {
    function prettyPrint22(args) {
      const entries = Object.entries(args).map(([key, value]) => {
        if (value === void 0 || value === false)
          return null;
        return [key, value];
      }).filter(Boolean);
      const maxLength = entries.reduce((acc, [key]) => Math.max(acc, key.length), 0);
      return entries.map(([key, value]) => `  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join("\n");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WaitForTransactionReceiptTimeoutError = exports2.TransactionReceiptNotFoundError = exports2.TransactionNotFoundError = exports2.TransactionExecutionError = exports2.InvalidStorageKeySizeError = exports2.InvalidSerializedTransactionError = exports2.InvalidSerializedTransactionTypeError = exports2.InvalidSerializableTransactionError = exports2.InvalidLegacyVError = exports2.FeeConflictError = exports2.prettyPrint = void 0;
    var formatEther_js_1 = require_formatEther();
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    exports2.prettyPrint = prettyPrint22;
    class FeeConflictError22 extends base_js_1.BaseError {
      constructor() {
        super([
          "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.",
          "Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FeeConflictError"
        });
      }
    }
    exports2.FeeConflictError = FeeConflictError22;
    class InvalidLegacyVError2 extends base_js_1.BaseError {
      constructor({ v }) {
        super(`Invalid \`v\` value "${v}". Expected 27 or 28.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidLegacyVError"
        });
      }
    }
    exports2.InvalidLegacyVError = InvalidLegacyVError2;
    class InvalidSerializableTransactionError22 extends base_js_1.BaseError {
      constructor({ transaction }) {
        super("Cannot infer a transaction type from provided transaction.", {
          metaMessages: [
            "Provided Transaction:",
            "{",
            prettyPrint22(transaction),
            "}",
            "",
            "To infer the type, either provide:",
            "- a `type` to the Transaction, or",
            "- an EIP-1559 Transaction with `maxFeePerGas`, or",
            "- an EIP-2930 Transaction with `gasPrice` & `accessList`, or",
            "- an EIP-4844 Transaction with `blobs`, `blobVersionedHashes`, `sidecars`, or",
            "- a Legacy Transaction with `gasPrice`"
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidSerializableTransactionError"
        });
      }
    }
    exports2.InvalidSerializableTransactionError = InvalidSerializableTransactionError22;
    class InvalidSerializedTransactionTypeError extends base_js_1.BaseError {
      constructor({ serializedType }) {
        super(`Serialized transaction type "${serializedType}" is invalid.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidSerializedTransactionType"
        });
        Object.defineProperty(this, "serializedType", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.serializedType = serializedType;
      }
    }
    exports2.InvalidSerializedTransactionTypeError = InvalidSerializedTransactionTypeError;
    class InvalidSerializedTransactionError extends base_js_1.BaseError {
      constructor({ attributes, serializedTransaction, type }) {
        const missing = Object.entries(attributes).map(([key, value]) => typeof value === "undefined" ? key : void 0).filter(Boolean);
        super(`Invalid serialized transaction of type "${type}" was provided.`, {
          metaMessages: [
            `Serialized Transaction: "${serializedTransaction}"`,
            missing.length > 0 ? `Missing Attributes: ${missing.join(", ")}` : ""
          ].filter(Boolean)
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidSerializedTransactionError"
        });
        Object.defineProperty(this, "serializedTransaction", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "type", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.serializedTransaction = serializedTransaction;
        this.type = type;
      }
    }
    exports2.InvalidSerializedTransactionError = InvalidSerializedTransactionError;
    class InvalidStorageKeySizeError2 extends base_js_1.BaseError {
      constructor({ storageKey }) {
        super(`Size for storage key "${storageKey}" is invalid. Expected 32 bytes. Got ${Math.floor((storageKey.length - 2) / 2)} bytes.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidStorageKeySizeError"
        });
      }
    }
    exports2.InvalidStorageKeySizeError = InvalidStorageKeySizeError2;
    class TransactionExecutionError22 extends base_js_1.BaseError {
      constructor(cause, { account, docsPath: docsPath52, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
        const prettyArgs = prettyPrint22({
          chain: chain && `${chain?.name} (id: ${chain?.id})`,
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${(0, formatEther_js_1.formatEther)(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        super(cause.shortMessage, {
          cause,
          docsPath: docsPath52,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Request Arguments:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionExecutionError"
        });
        this.cause = cause;
      }
    }
    exports2.TransactionExecutionError = TransactionExecutionError22;
    class TransactionNotFoundError2 extends base_js_1.BaseError {
      constructor({ blockHash, blockNumber, blockTag, hash: hash22, index: index2 }) {
        let identifier = "Transaction";
        if (blockTag && index2 !== void 0)
          identifier = `Transaction at block time "${blockTag}" at index "${index2}"`;
        if (blockHash && index2 !== void 0)
          identifier = `Transaction at block hash "${blockHash}" at index "${index2}"`;
        if (blockNumber && index2 !== void 0)
          identifier = `Transaction at block number "${blockNumber}" at index "${index2}"`;
        if (hash22)
          identifier = `Transaction with hash "${hash22}"`;
        super(`${identifier} could not be found.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionNotFoundError"
        });
      }
    }
    exports2.TransactionNotFoundError = TransactionNotFoundError2;
    class TransactionReceiptNotFoundError2 extends base_js_1.BaseError {
      constructor({ hash: hash22 }) {
        super(`Transaction receipt with hash "${hash22}" could not be found. The Transaction may not be processed on a block yet.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionReceiptNotFoundError"
        });
      }
    }
    exports2.TransactionReceiptNotFoundError = TransactionReceiptNotFoundError2;
    class WaitForTransactionReceiptTimeoutError extends base_js_1.BaseError {
      constructor({ hash: hash22 }) {
        super(`Timed out while waiting for transaction with hash "${hash22}" to be confirmed.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "WaitForTransactionReceiptTimeoutError"
        });
      }
    }
    exports2.WaitForTransactionReceiptTimeoutError = WaitForTransactionReceiptTimeoutError;
  });
  var require_contract = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RawContractError = exports2.ContractFunctionZeroDataError = exports2.ContractFunctionRevertedError = exports2.ContractFunctionExecutionError = exports2.CallExecutionError = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var solidity_js_1 = require_solidity();
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    var formatAbiItemWithArgs_js_1 = require_formatAbiItemWithArgs();
    var getAbiItem_js_1 = require_getAbiItem();
    var formatEther_js_1 = require_formatEther();
    var formatGwei_js_1 = require_formatGwei();
    var abi_js_1 = require_abi();
    var base_js_1 = require_base();
    var stateOverride_js_1 = require_stateOverride();
    var transaction_js_1 = require_transaction2();
    var utils_js_1 = require_utils();
    class CallExecutionError22 extends base_js_1.BaseError {
      constructor(cause, { account: account_, docsPath: docsPath52, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride }) {
        const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
        let prettyArgs = (0, transaction_js_1.prettyPrint)({
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${(0, formatEther_js_1.formatEther)(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        if (stateOverride) {
          prettyArgs += `
${(0, stateOverride_js_1.prettyStateOverride)(stateOverride)}`;
        }
        super(cause.shortMessage, {
          cause,
          docsPath: docsPath52,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Raw Call Arguments:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "CallExecutionError"
        });
        this.cause = cause;
      }
    }
    exports2.CallExecutionError = CallExecutionError22;
    class ContractFunctionExecutionError22 extends base_js_1.BaseError {
      constructor(cause, { abi, args, contractAddress, docsPath: docsPath52, functionName, sender }) {
        const abiItem = (0, getAbiItem_js_1.getAbiItem)({ abi, args, name: functionName });
        const formattedArgs = abiItem ? (0, formatAbiItemWithArgs_js_1.formatAbiItemWithArgs)({
          abiItem,
          args,
          includeFunctionName: false,
          includeName: false
        }) : void 0;
        const functionWithParams = abiItem ? (0, formatAbiItem_js_1.formatAbiItem)(abiItem, { includeName: true }) : void 0;
        const prettyArgs = (0, transaction_js_1.prettyPrint)({
          address: contractAddress && (0, utils_js_1.getContractAddress)(contractAddress),
          function: functionWithParams,
          args: formattedArgs && formattedArgs !== "()" && `${[...Array(functionName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}`,
          sender
        });
        super(cause.shortMessage || `An unknown error occurred while executing the contract function "${functionName}".`, {
          cause,
          docsPath: docsPath52,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Contract Call:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "abi", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "args", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "contractAddress", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "formattedArgs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "functionName", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "sender", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ContractFunctionExecutionError"
        });
        this.abi = abi;
        this.args = args;
        this.cause = cause;
        this.contractAddress = contractAddress;
        this.functionName = functionName;
        this.sender = sender;
      }
    }
    exports2.ContractFunctionExecutionError = ContractFunctionExecutionError22;
    class ContractFunctionRevertedError22 extends base_js_1.BaseError {
      constructor({ abi, data, functionName, message }) {
        let cause;
        let decodedData = void 0;
        let metaMessages;
        let reason;
        if (data && data !== "0x") {
          try {
            decodedData = (0, decodeErrorResult_js_1.decodeErrorResult)({ abi, data });
            const { abiItem, errorName, args: errorArgs } = decodedData;
            if (errorName === "Error") {
              reason = errorArgs[0];
            } else if (errorName === "Panic") {
              const [firstArg] = errorArgs;
              reason = solidity_js_1.panicReasons[firstArg];
            } else {
              const errorWithParams = abiItem ? (0, formatAbiItem_js_1.formatAbiItem)(abiItem, { includeName: true }) : void 0;
              const formattedArgs = abiItem && errorArgs ? (0, formatAbiItemWithArgs_js_1.formatAbiItemWithArgs)({
                abiItem,
                args: errorArgs,
                includeFunctionName: false,
                includeName: false
              }) : void 0;
              metaMessages = [
                errorWithParams ? `Error: ${errorWithParams}` : "",
                formattedArgs && formattedArgs !== "()" ? `       ${[...Array(errorName?.length ?? 0).keys()].map(() => " ").join("")}${formattedArgs}` : ""
              ];
            }
          } catch (err) {
            cause = err;
          }
        } else if (message)
          reason = message;
        let signature;
        if (cause instanceof abi_js_1.AbiErrorSignatureNotFoundError) {
          signature = cause.signature;
          metaMessages = [
            `Unable to decode signature "${signature}" as it was not found on the provided ABI.`,
            "Make sure you are using the correct ABI and that the error exists on it.",
            `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`
          ];
        }
        super(reason && reason !== "execution reverted" || signature ? [
          `The contract function "${functionName}" reverted with the following ${signature ? "signature" : "reason"}:`,
          reason || signature
        ].join("\n") : `The contract function "${functionName}" reverted.`, {
          cause,
          metaMessages
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ContractFunctionRevertedError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "reason", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = decodedData;
        this.reason = reason;
        this.signature = signature;
      }
    }
    exports2.ContractFunctionRevertedError = ContractFunctionRevertedError22;
    class ContractFunctionZeroDataError22 extends base_js_1.BaseError {
      constructor({ functionName }) {
        super(`The contract function "${functionName}" returned no data ("0x").`, {
          metaMessages: [
            "This could be due to any of the following:",
            `  - The contract does not have the function "${functionName}",`,
            "  - The parameters passed to the contract function may be invalid, or",
            "  - The address is not a contract."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ContractFunctionZeroDataError"
        });
      }
    }
    exports2.ContractFunctionZeroDataError = ContractFunctionZeroDataError22;
    class RawContractError22 extends base_js_1.BaseError {
      constructor({ data, message }) {
        super(message || "");
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: 3
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RawContractError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = data;
      }
    }
    exports2.RawContractError = RawContractError22;
  });
  var require_request = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimeoutError = exports2.RpcRequestError = exports2.WebSocketRequestError = exports2.HttpRequestError = void 0;
    var stringify_js_1 = require_stringify();
    var base_js_1 = require_base();
    var utils_js_1 = require_utils();
    class HttpRequestError22 extends base_js_1.BaseError {
      constructor({ body, details, headers, status, url }) {
        super("HTTP request failed.", {
          details,
          metaMessages: [
            status && `Status: ${status}`,
            `URL: ${(0, utils_js_1.getUrl)(url)}`,
            body && `Request body: ${(0, stringify_js_1.stringify)(body)}`
          ].filter(Boolean)
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "HttpRequestError"
        });
        Object.defineProperty(this, "body", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "status", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "url", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.body = body;
        this.headers = headers;
        this.status = status;
        this.url = url;
      }
    }
    exports2.HttpRequestError = HttpRequestError22;
    class WebSocketRequestError extends base_js_1.BaseError {
      constructor({ body, details, url }) {
        super("WebSocket request failed.", {
          details,
          metaMessages: [`URL: ${(0, utils_js_1.getUrl)(url)}`, `Request body: ${(0, stringify_js_1.stringify)(body)}`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "WebSocketRequestError"
        });
      }
    }
    exports2.WebSocketRequestError = WebSocketRequestError;
    class RpcRequestError22 extends base_js_1.BaseError {
      constructor({ body, error, url }) {
        super("RPC Request failed.", {
          cause: error,
          details: error.message,
          metaMessages: [`URL: ${(0, utils_js_1.getUrl)(url)}`, `Request body: ${(0, stringify_js_1.stringify)(body)}`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RpcRequestError"
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.code = error.code;
      }
    }
    exports2.RpcRequestError = RpcRequestError22;
    class TimeoutError2 extends base_js_1.BaseError {
      constructor({ body, url }) {
        super("The request took too long to respond.", {
          details: "The request timed out.",
          metaMessages: [`URL: ${(0, utils_js_1.getUrl)(url)}`, `Request body: ${(0, stringify_js_1.stringify)(body)}`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TimeoutError"
        });
      }
    }
    exports2.TimeoutError = TimeoutError2;
  });
  var require_rpc = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownRpcError = exports2.SwitchChainError = exports2.ChainDisconnectedError = exports2.ProviderDisconnectedError = exports2.UnsupportedProviderMethodError = exports2.UnauthorizedProviderError = exports2.UserRejectedRequestError = exports2.JsonRpcVersionUnsupportedError = exports2.LimitExceededRpcError = exports2.MethodNotSupportedRpcError = exports2.TransactionRejectedRpcError = exports2.ResourceUnavailableRpcError = exports2.ResourceNotFoundRpcError = exports2.InvalidInputRpcError = exports2.InternalRpcError = exports2.InvalidParamsRpcError = exports2.MethodNotFoundRpcError = exports2.InvalidRequestRpcError = exports2.ParseRpcError = exports2.ProviderRpcError = exports2.RpcError = void 0;
    var base_js_1 = require_base();
    var request_js_1 = require_request();
    var unknownErrorCode22 = -1;
    class RpcError22 extends base_js_1.BaseError {
      constructor(cause, { code, docsPath: docsPath52, metaMessages, shortMessage }) {
        super(shortMessage, {
          cause,
          docsPath: docsPath52,
          metaMessages: metaMessages || cause?.metaMessages
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "RpcError"
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.name = cause.name;
        this.code = cause instanceof request_js_1.RpcRequestError ? cause.code : code ?? unknownErrorCode22;
      }
    }
    exports2.RpcError = RpcError22;
    class ProviderRpcError22 extends RpcError22 {
      constructor(cause, options2) {
        super(cause, options2);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ProviderRpcError"
        });
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.data = options2.data;
      }
    }
    exports2.ProviderRpcError = ProviderRpcError22;
    class ParseRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: ParseRpcError22.code,
          shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ParseRpcError"
        });
      }
    }
    exports2.ParseRpcError = ParseRpcError22;
    Object.defineProperty(ParseRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32700
    });
    class InvalidRequestRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: InvalidRequestRpcError22.code,
          shortMessage: "JSON is not a valid request object."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidRequestRpcError"
        });
      }
    }
    exports2.InvalidRequestRpcError = InvalidRequestRpcError22;
    Object.defineProperty(InvalidRequestRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32600
    });
    class MethodNotFoundRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: MethodNotFoundRpcError22.code,
          shortMessage: "The method does not exist / is not available."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "MethodNotFoundRpcError"
        });
      }
    }
    exports2.MethodNotFoundRpcError = MethodNotFoundRpcError22;
    Object.defineProperty(MethodNotFoundRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32601
    });
    class InvalidParamsRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: InvalidParamsRpcError22.code,
          shortMessage: [
            "Invalid parameters were provided to the RPC method.",
            "Double check you have provided the correct parameters."
          ].join("\n")
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidParamsRpcError"
        });
      }
    }
    exports2.InvalidParamsRpcError = InvalidParamsRpcError22;
    Object.defineProperty(InvalidParamsRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32602
    });
    class InternalRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: InternalRpcError22.code,
          shortMessage: "An internal error was received."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InternalRpcError"
        });
      }
    }
    exports2.InternalRpcError = InternalRpcError22;
    Object.defineProperty(InternalRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32603
    });
    class InvalidInputRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: InvalidInputRpcError22.code,
          shortMessage: [
            "Missing or invalid parameters.",
            "Double check you have provided the correct parameters."
          ].join("\n")
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidInputRpcError"
        });
      }
    }
    exports2.InvalidInputRpcError = InvalidInputRpcError22;
    Object.defineProperty(InvalidInputRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32e3
    });
    class ResourceNotFoundRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: ResourceNotFoundRpcError22.code,
          shortMessage: "Requested resource not found."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ResourceNotFoundRpcError"
        });
      }
    }
    exports2.ResourceNotFoundRpcError = ResourceNotFoundRpcError22;
    Object.defineProperty(ResourceNotFoundRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32001
    });
    class ResourceUnavailableRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: ResourceUnavailableRpcError22.code,
          shortMessage: "Requested resource not available."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ResourceUnavailableRpcError"
        });
      }
    }
    exports2.ResourceUnavailableRpcError = ResourceUnavailableRpcError22;
    Object.defineProperty(ResourceUnavailableRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32002
    });
    class TransactionRejectedRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: TransactionRejectedRpcError22.code,
          shortMessage: "Transaction creation failed."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionRejectedRpcError"
        });
      }
    }
    exports2.TransactionRejectedRpcError = TransactionRejectedRpcError22;
    Object.defineProperty(TransactionRejectedRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32003
    });
    class MethodNotSupportedRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: MethodNotSupportedRpcError22.code,
          shortMessage: "Method is not implemented."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "MethodNotSupportedRpcError"
        });
      }
    }
    exports2.MethodNotSupportedRpcError = MethodNotSupportedRpcError22;
    Object.defineProperty(MethodNotSupportedRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32004
    });
    class LimitExceededRpcError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: LimitExceededRpcError22.code,
          shortMessage: "Request exceeds defined limit."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "LimitExceededRpcError"
        });
      }
    }
    exports2.LimitExceededRpcError = LimitExceededRpcError22;
    Object.defineProperty(LimitExceededRpcError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32005
    });
    class JsonRpcVersionUnsupportedError22 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          code: JsonRpcVersionUnsupportedError22.code,
          shortMessage: "Version of JSON-RPC protocol is not supported."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "JsonRpcVersionUnsupportedError"
        });
      }
    }
    exports2.JsonRpcVersionUnsupportedError = JsonRpcVersionUnsupportedError22;
    Object.defineProperty(JsonRpcVersionUnsupportedError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: -32006
    });
    class UserRejectedRequestError22 extends ProviderRpcError22 {
      constructor(cause) {
        super(cause, {
          code: UserRejectedRequestError22.code,
          shortMessage: "User rejected the request."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UserRejectedRequestError"
        });
      }
    }
    exports2.UserRejectedRequestError = UserRejectedRequestError22;
    Object.defineProperty(UserRejectedRequestError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4001
    });
    class UnauthorizedProviderError22 extends ProviderRpcError22 {
      constructor(cause) {
        super(cause, {
          code: UnauthorizedProviderError22.code,
          shortMessage: "The requested method and/or account has not been authorized by the user."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnauthorizedProviderError"
        });
      }
    }
    exports2.UnauthorizedProviderError = UnauthorizedProviderError22;
    Object.defineProperty(UnauthorizedProviderError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4100
    });
    class UnsupportedProviderMethodError22 extends ProviderRpcError22 {
      constructor(cause) {
        super(cause, {
          code: UnsupportedProviderMethodError22.code,
          shortMessage: "The Provider does not support the requested method."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnsupportedProviderMethodError"
        });
      }
    }
    exports2.UnsupportedProviderMethodError = UnsupportedProviderMethodError22;
    Object.defineProperty(UnsupportedProviderMethodError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4200
    });
    class ProviderDisconnectedError22 extends ProviderRpcError22 {
      constructor(cause) {
        super(cause, {
          code: ProviderDisconnectedError22.code,
          shortMessage: "The Provider is disconnected from all chains."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ProviderDisconnectedError"
        });
      }
    }
    exports2.ProviderDisconnectedError = ProviderDisconnectedError22;
    Object.defineProperty(ProviderDisconnectedError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4900
    });
    class ChainDisconnectedError22 extends ProviderRpcError22 {
      constructor(cause) {
        super(cause, {
          code: ChainDisconnectedError22.code,
          shortMessage: "The Provider is not connected to the requested chain."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainDisconnectedError"
        });
      }
    }
    exports2.ChainDisconnectedError = ChainDisconnectedError22;
    Object.defineProperty(ChainDisconnectedError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4901
    });
    class SwitchChainError22 extends ProviderRpcError22 {
      constructor(cause) {
        super(cause, {
          code: SwitchChainError22.code,
          shortMessage: "An error occurred when attempting to switch chain."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "SwitchChainError"
        });
      }
    }
    exports2.SwitchChainError = SwitchChainError22;
    Object.defineProperty(SwitchChainError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 4902
    });
    class UnknownRpcError2 extends RpcError22 {
      constructor(cause) {
        super(cause, {
          shortMessage: "An unknown RPC error occurred."
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownRpcError"
        });
      }
    }
    exports2.UnknownRpcError = UnknownRpcError2;
  });
  var require_getContractError = __commonJS2((exports2) => {
    function getContractError22(err, { abi, address, args, docsPath: docsPath52, functionName, sender }) {
      const { code, data, message, shortMessage } = err instanceof contract_js_1.RawContractError ? err : err instanceof base_js_1.BaseError ? err.walk((err2) => "data" in err2) || err.walk() : {};
      const cause = (() => {
        if (err instanceof abi_js_1.AbiDecodingZeroDataError)
          return new contract_js_1.ContractFunctionZeroDataError({ functionName });
        if ([EXECUTION_REVERTED_ERROR_CODE22, rpc_js_1.InternalRpcError.code].includes(code) && (data || message || shortMessage)) {
          return new contract_js_1.ContractFunctionRevertedError({
            abi,
            data: typeof data === "object" ? data.data : data,
            functionName,
            message: shortMessage ?? message
          });
        }
        return err;
      })();
      return new contract_js_1.ContractFunctionExecutionError(cause, {
        abi,
        args,
        contractAddress: address,
        docsPath: docsPath52,
        functionName,
        sender
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContractError = void 0;
    var abi_js_1 = require_abi();
    var base_js_1 = require_base();
    var contract_js_1 = require_contract();
    var rpc_js_1 = require_rpc();
    var EXECUTION_REVERTED_ERROR_CODE22 = 3;
    exports2.getContractError = getContractError22;
  });
  var require_estimateGas = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EstimateGasExecutionError = void 0;
    var formatEther_js_1 = require_formatEther();
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    var transaction_js_1 = require_transaction2();
    class EstimateGasExecutionError22 extends base_js_1.BaseError {
      constructor(cause, { account, docsPath: docsPath52, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
        const prettyArgs = (0, transaction_js_1.prettyPrint)({
          from: account?.address,
          to,
          value: typeof value !== "undefined" && `${(0, formatEther_js_1.formatEther)(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
          data,
          gas,
          gasPrice: typeof gasPrice !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(gasPrice)} gwei`,
          maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei`,
          maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei`,
          nonce
        });
        super(cause.shortMessage, {
          cause,
          docsPath: docsPath52,
          metaMessages: [
            ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
            "Estimate Gas Arguments:",
            prettyArgs
          ].filter(Boolean)
        });
        Object.defineProperty(this, "cause", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "EstimateGasExecutionError"
        });
        this.cause = cause;
      }
    }
    exports2.EstimateGasExecutionError = EstimateGasExecutionError22;
  });
  var require_node = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnknownNodeError = exports2.TipAboveFeeCapError = exports2.TransactionTypeNotSupportedError = exports2.IntrinsicGasTooLowError = exports2.IntrinsicGasTooHighError = exports2.InsufficientFundsError = exports2.NonceMaxValueError = exports2.NonceTooLowError = exports2.NonceTooHighError = exports2.FeeCapTooLowError = exports2.FeeCapTooHighError = exports2.ExecutionRevertedError = void 0;
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    class ExecutionRevertedError22 extends base_js_1.BaseError {
      constructor({ cause, message } = {}) {
        const reason = message?.replace("execution reverted: ", "")?.replace("execution reverted", "");
        super(`Execution reverted ${reason ? `with reason: ${reason}` : "for an unknown reason"}.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ExecutionRevertedError"
        });
      }
    }
    exports2.ExecutionRevertedError = ExecutionRevertedError22;
    Object.defineProperty(ExecutionRevertedError22, "code", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 3
    });
    Object.defineProperty(ExecutionRevertedError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /execution reverted/
    });
    class FeeCapTooHighError22 extends base_js_1.BaseError {
      constructor({ cause, maxFeePerGas } = {}) {
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FeeCapTooHigh"
        });
      }
    }
    exports2.FeeCapTooHighError = FeeCapTooHighError22;
    Object.defineProperty(FeeCapTooHighError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/
    });
    class FeeCapTooLowError22 extends base_js_1.BaseError {
      constructor({ cause, maxFeePerGas } = {}) {
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)}` : ""} gwei) cannot be lower than the block base fee.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "FeeCapTooLow"
        });
      }
    }
    exports2.FeeCapTooLowError = FeeCapTooLowError22;
    Object.defineProperty(FeeCapTooLowError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/
    });
    class NonceTooHighError22 extends base_js_1.BaseError {
      constructor({ cause, nonce } = {}) {
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is higher than the next one expected.`, { cause });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NonceTooHighError"
        });
      }
    }
    exports2.NonceTooHighError = NonceTooHighError22;
    Object.defineProperty(NonceTooHighError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce too high/
    });
    class NonceTooLowError22 extends base_js_1.BaseError {
      constructor({ cause, nonce } = {}) {
        super([
          `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is lower than the current nonce of the account.`,
          "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
        ].join("\n"), { cause });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NonceTooLowError"
        });
      }
    }
    exports2.NonceTooLowError = NonceTooLowError22;
    Object.defineProperty(NonceTooLowError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce too low|transaction already imported|already known/
    });
    class NonceMaxValueError22 extends base_js_1.BaseError {
      constructor({ cause, nonce } = {}) {
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}exceeds the maximum allowed nonce.`, { cause });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "NonceMaxValueError"
        });
      }
    }
    exports2.NonceMaxValueError = NonceMaxValueError22;
    Object.defineProperty(NonceMaxValueError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /nonce has max value/
    });
    class InsufficientFundsError22 extends base_js_1.BaseError {
      constructor({ cause } = {}) {
        super([
          "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
        ].join("\n"), {
          cause,
          metaMessages: [
            "This error could arise when the account does not have enough funds to:",
            " - pay for the total gas fee,",
            " - pay for the value to send.",
            " ",
            "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
            " - `gas` is the amount of gas needed for transaction to execute,",
            " - `gas fee` is the gas fee,",
            " - `value` is the amount of ether to send to the recipient."
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InsufficientFundsError"
        });
      }
    }
    exports2.InsufficientFundsError = InsufficientFundsError22;
    Object.defineProperty(InsufficientFundsError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /insufficient funds/
    });
    class IntrinsicGasTooHighError22 extends base_js_1.BaseError {
      constructor({ cause, gas } = {}) {
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "IntrinsicGasTooHighError"
        });
      }
    }
    exports2.IntrinsicGasTooHighError = IntrinsicGasTooHighError22;
    Object.defineProperty(IntrinsicGasTooHighError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /intrinsic gas too high|gas limit reached/
    });
    class IntrinsicGasTooLowError22 extends base_js_1.BaseError {
      constructor({ cause, gas } = {}) {
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction is too low.`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "IntrinsicGasTooLowError"
        });
      }
    }
    exports2.IntrinsicGasTooLowError = IntrinsicGasTooLowError22;
    Object.defineProperty(IntrinsicGasTooLowError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /intrinsic gas too low/
    });
    class TransactionTypeNotSupportedError22 extends base_js_1.BaseError {
      constructor({ cause }) {
        super("The transaction type is not supported for this chain.", {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TransactionTypeNotSupportedError"
        });
      }
    }
    exports2.TransactionTypeNotSupportedError = TransactionTypeNotSupportedError22;
    Object.defineProperty(TransactionTypeNotSupportedError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /transaction type not valid/
    });
    class TipAboveFeeCapError22 extends base_js_1.BaseError {
      constructor({ cause, maxPriorityFeePerGas, maxFeePerGas } = {}) {
        super([
          `The provided tip (\`maxPriorityFeePerGas\`${maxPriorityFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${(0, formatGwei_js_1.formatGwei)(maxFeePerGas)} gwei` : ""}).`
        ].join("\n"), {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "TipAboveFeeCapError"
        });
      }
    }
    exports2.TipAboveFeeCapError = TipAboveFeeCapError22;
    Object.defineProperty(TipAboveFeeCapError22, "nodeMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /max priority fee per gas higher than max fee per gas|tip higher than fee cap/
    });
    class UnknownNodeError22 extends base_js_1.BaseError {
      constructor({ cause }) {
        super(`An error occurred while executing: ${cause?.shortMessage}`, {
          cause
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "UnknownNodeError"
        });
      }
    }
    exports2.UnknownNodeError = UnknownNodeError22;
  });
  var require_getNodeError = __commonJS2((exports2) => {
    function containsNodeError(err) {
      return err instanceof rpc_js_1.TransactionRejectedRpcError || err instanceof rpc_js_1.InvalidInputRpcError || err instanceof request_js_1.RpcRequestError && err.code === node_js_1.ExecutionRevertedError.code;
    }
    function getNodeError22(err, args) {
      const message = (err.details || "").toLowerCase();
      const executionRevertedError = err instanceof base_js_1.BaseError ? err.walk((e) => e.code === node_js_1.ExecutionRevertedError.code) : err;
      if (executionRevertedError instanceof base_js_1.BaseError) {
        return new node_js_1.ExecutionRevertedError({
          cause: err,
          message: executionRevertedError.details
        });
      }
      if (node_js_1.ExecutionRevertedError.nodeMessage.test(message))
        return new node_js_1.ExecutionRevertedError({
          cause: err,
          message: err.details
        });
      if (node_js_1.FeeCapTooHighError.nodeMessage.test(message))
        return new node_js_1.FeeCapTooHighError({
          cause: err,
          maxFeePerGas: args?.maxFeePerGas
        });
      if (node_js_1.FeeCapTooLowError.nodeMessage.test(message))
        return new node_js_1.FeeCapTooLowError({
          cause: err,
          maxFeePerGas: args?.maxFeePerGas
        });
      if (node_js_1.NonceTooHighError.nodeMessage.test(message))
        return new node_js_1.NonceTooHighError({ cause: err, nonce: args?.nonce });
      if (node_js_1.NonceTooLowError.nodeMessage.test(message))
        return new node_js_1.NonceTooLowError({ cause: err, nonce: args?.nonce });
      if (node_js_1.NonceMaxValueError.nodeMessage.test(message))
        return new node_js_1.NonceMaxValueError({ cause: err, nonce: args?.nonce });
      if (node_js_1.InsufficientFundsError.nodeMessage.test(message))
        return new node_js_1.InsufficientFundsError({ cause: err });
      if (node_js_1.IntrinsicGasTooHighError.nodeMessage.test(message))
        return new node_js_1.IntrinsicGasTooHighError({ cause: err, gas: args?.gas });
      if (node_js_1.IntrinsicGasTooLowError.nodeMessage.test(message))
        return new node_js_1.IntrinsicGasTooLowError({ cause: err, gas: args?.gas });
      if (node_js_1.TransactionTypeNotSupportedError.nodeMessage.test(message))
        return new node_js_1.TransactionTypeNotSupportedError({ cause: err });
      if (node_js_1.TipAboveFeeCapError.nodeMessage.test(message))
        return new node_js_1.TipAboveFeeCapError({
          cause: err,
          maxFeePerGas: args?.maxFeePerGas,
          maxPriorityFeePerGas: args?.maxPriorityFeePerGas
        });
      return new node_js_1.UnknownNodeError({
        cause: err
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNodeError = exports2.containsNodeError = void 0;
    var base_js_1 = require_base();
    var node_js_1 = require_node();
    var request_js_1 = require_request();
    var rpc_js_1 = require_rpc();
    exports2.containsNodeError = containsNodeError;
    exports2.getNodeError = getNodeError22;
  });
  var require_getEstimateGasError = __commonJS2((exports2) => {
    function getEstimateGasError22(err, { docsPath: docsPath52, ...args }) {
      const cause = (() => {
        const cause2 = (0, getNodeError_js_1.getNodeError)(err, args);
        if (cause2 instanceof node_js_1.UnknownNodeError)
          return err;
        return cause2;
      })();
      return new estimateGas_js_1.EstimateGasExecutionError(cause, {
        docsPath: docsPath52,
        ...args
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEstimateGasError = void 0;
    var estimateGas_js_1 = require_estimateGas();
    var node_js_1 = require_node();
    var getNodeError_js_1 = require_getNodeError();
    exports2.getEstimateGasError = getEstimateGasError22;
  });
  var require_extract = __commonJS2((exports2) => {
    function extract22(value_, { format }) {
      if (!format)
        return {};
      const value = {};
      function extract_(formatted2) {
        const keys = Object.keys(formatted2);
        for (const key of keys) {
          if (key in value_)
            value[key] = value_[key];
          if (formatted2[key] && typeof formatted2[key] === "object" && !Array.isArray(formatted2[key]))
            extract_(formatted2[key]);
        }
      }
      const formatted = format(value_ || {});
      extract_(formatted);
      return value;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extract = void 0;
    exports2.extract = extract22;
  });
  var require_transactionRequest = __commonJS2((exports2) => {
    function formatTransactionRequest22(request) {
      const rpcRequest = {};
      if (typeof request.accessList !== "undefined")
        rpcRequest.accessList = request.accessList;
      if (typeof request.blobVersionedHashes !== "undefined")
        rpcRequest.blobVersionedHashes = request.blobVersionedHashes;
      if (typeof request.blobs !== "undefined") {
        if (typeof request.blobs[0] !== "string")
          rpcRequest.blobs = request.blobs.map((x) => (0, toHex_js_1.bytesToHex)(x));
        else
          rpcRequest.blobs = request.blobs;
      }
      if (typeof request.data !== "undefined")
        rpcRequest.data = request.data;
      if (typeof request.from !== "undefined")
        rpcRequest.from = request.from;
      if (typeof request.gas !== "undefined")
        rpcRequest.gas = (0, toHex_js_1.numberToHex)(request.gas);
      if (typeof request.gasPrice !== "undefined")
        rpcRequest.gasPrice = (0, toHex_js_1.numberToHex)(request.gasPrice);
      if (typeof request.maxFeePerBlobGas !== "undefined")
        rpcRequest.maxFeePerBlobGas = (0, toHex_js_1.numberToHex)(request.maxFeePerBlobGas);
      if (typeof request.maxFeePerGas !== "undefined")
        rpcRequest.maxFeePerGas = (0, toHex_js_1.numberToHex)(request.maxFeePerGas);
      if (typeof request.maxPriorityFeePerGas !== "undefined")
        rpcRequest.maxPriorityFeePerGas = (0, toHex_js_1.numberToHex)(request.maxPriorityFeePerGas);
      if (typeof request.nonce !== "undefined")
        rpcRequest.nonce = (0, toHex_js_1.numberToHex)(request.nonce);
      if (typeof request.to !== "undefined")
        rpcRequest.to = request.to;
      if (typeof request.type !== "undefined")
        rpcRequest.type = exports2.rpcTransactionType[request.type];
      if (typeof request.value !== "undefined")
        rpcRequest.value = (0, toHex_js_1.numberToHex)(request.value);
      return rpcRequest;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineTransactionRequest = exports2.formatTransactionRequest = exports2.rpcTransactionType = void 0;
    var toHex_js_1 = require_toHex();
    var formatter_js_1 = require_formatter();
    exports2.rpcTransactionType = {
      legacy: "0x0",
      eip2930: "0x1",
      eip1559: "0x2",
      eip4844: "0x3"
    };
    exports2.formatTransactionRequest = formatTransactionRequest22;
    exports2.defineTransactionRequest = (0, formatter_js_1.defineFormatter)("transactionRequest", formatTransactionRequest22);
  });
  var require_assertRequest = __commonJS2((exports2) => {
    function assertRequest22(args) {
      const { account: account_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to } = args;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      if (account && !(0, isAddress_js_1.isAddress)(account.address))
        throw new address_js_1.InvalidAddressError({ address: account.address });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (typeof gasPrice !== "undefined" && (typeof maxFeePerGas !== "undefined" || typeof maxPriorityFeePerGas !== "undefined"))
        throw new transaction_js_1.FeeConflictError();
      if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertRequest = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var address_js_1 = require_address();
    var node_js_1 = require_node();
    var transaction_js_1 = require_transaction2();
    var isAddress_js_1 = require_isAddress();
    exports2.assertRequest = assertRequest22;
  });
  var require_fee = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxFeePerGasTooLowError = exports2.Eip1559FeesNotSupportedError = exports2.BaseFeeScalarError = void 0;
    var formatGwei_js_1 = require_formatGwei();
    var base_js_1 = require_base();
    class BaseFeeScalarError22 extends base_js_1.BaseError {
      constructor() {
        super("`baseFeeMultiplier` must be greater than 1.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BaseFeeScalarError"
        });
      }
    }
    exports2.BaseFeeScalarError = BaseFeeScalarError22;
    class Eip1559FeesNotSupportedError22 extends base_js_1.BaseError {
      constructor() {
        super("Chain does not support EIP-1559 fees.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "Eip1559FeesNotSupportedError"
        });
      }
    }
    exports2.Eip1559FeesNotSupportedError = Eip1559FeesNotSupportedError22;
    class MaxFeePerGasTooLowError22 extends base_js_1.BaseError {
      constructor({ maxPriorityFeePerGas }) {
        super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${(0, formatGwei_js_1.formatGwei)(maxPriorityFeePerGas)} gwei).`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "MaxFeePerGasTooLowError"
        });
      }
    }
    exports2.MaxFeePerGasTooLowError = MaxFeePerGasTooLowError22;
  });
  var require_block2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BlockNotFoundError = void 0;
    var base_js_1 = require_base();
    class BlockNotFoundError22 extends base_js_1.BaseError {
      constructor({ blockHash, blockNumber }) {
        let identifier = "Block";
        if (blockHash)
          identifier = `Block at hash "${blockHash}"`;
        if (blockNumber)
          identifier = `Block at number "${blockNumber}"`;
        super(`${identifier} could not be found.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BlockNotFoundError"
        });
      }
    }
    exports2.BlockNotFoundError = BlockNotFoundError22;
  });
  var require_getBlock = __commonJS2((exports2) => {
    async function getBlock22(client, { blockHash, blockNumber, blockTag: blockTag_, includeTransactions: includeTransactions_ } = {}) {
      const blockTag = blockTag_ ?? "latest";
      const includeTransactions = includeTransactions_ ?? false;
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      let block = null;
      if (blockHash) {
        block = await client.request({
          method: "eth_getBlockByHash",
          params: [blockHash, includeTransactions]
        });
      } else {
        block = await client.request({
          method: "eth_getBlockByNumber",
          params: [blockNumberHex || blockTag, includeTransactions]
        });
      }
      if (!block)
        throw new block_js_1.BlockNotFoundError({ blockHash, blockNumber });
      const format = client.chain?.formatters?.block?.format || block_js_2.formatBlock;
      return format(block);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlock = void 0;
    var block_js_1 = require_block2();
    var toHex_js_1 = require_toHex();
    var block_js_2 = require_block();
    exports2.getBlock = getBlock22;
  });
  var require_getGasPrice = __commonJS2((exports2) => {
    async function getGasPrice22(client) {
      const gasPrice = await client.request({
        method: "eth_gasPrice"
      });
      return BigInt(gasPrice);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getGasPrice = void 0;
    exports2.getGasPrice = getGasPrice22;
  });
  var require_estimateMaxPriorityFeePerGas = __commonJS2((exports2) => {
    async function estimateMaxPriorityFeePerGas(client, args) {
      return internal_estimateMaxPriorityFeePerGas22(client, args);
    }
    async function internal_estimateMaxPriorityFeePerGas22(client, args) {
      const { block: block_, chain = client.chain, request } = args || {};
      if (typeof chain?.fees?.defaultPriorityFee === "function") {
        const block = block_ || await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({});
        return chain.fees.defaultPriorityFee({
          block,
          client,
          request
        });
      }
      if (typeof chain?.fees?.defaultPriorityFee !== "undefined")
        return chain?.fees?.defaultPriorityFee;
      try {
        const maxPriorityFeePerGasHex = await client.request({
          method: "eth_maxPriorityFeePerGas"
        });
        return (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGasHex);
      } catch {
        const [block, gasPrice] = await Promise.all([
          block_ ? Promise.resolve(block_) : (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({}),
          (0, getAction_js_1.getAction)(client, getGasPrice_js_1.getGasPrice, "getGasPrice")({})
        ]);
        if (typeof block.baseFeePerGas !== "bigint")
          throw new fee_js_1.Eip1559FeesNotSupportedError();
        const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;
        if (maxPriorityFeePerGas < 0n)
          return 0n;
        return maxPriorityFeePerGas;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.internal_estimateMaxPriorityFeePerGas = exports2.estimateMaxPriorityFeePerGas = void 0;
    var fee_js_1 = require_fee();
    var fromHex_js_1 = require_fromHex();
    var getAction_js_1 = require_getAction();
    var getBlock_js_1 = require_getBlock();
    var getGasPrice_js_1 = require_getGasPrice();
    exports2.estimateMaxPriorityFeePerGas = estimateMaxPriorityFeePerGas;
    exports2.internal_estimateMaxPriorityFeePerGas = internal_estimateMaxPriorityFeePerGas22;
  });
  var require_estimateFeesPerGas = __commonJS2((exports2) => {
    async function estimateFeesPerGas(client, args) {
      return internal_estimateFeesPerGas22(client, args);
    }
    async function internal_estimateFeesPerGas22(client, args) {
      const { block: block_, chain = client.chain, request, type = "eip1559" } = args || {};
      const baseFeeMultiplier = await (async () => {
        if (typeof chain?.fees?.baseFeeMultiplier === "function")
          return chain.fees.baseFeeMultiplier({
            block: block_,
            client,
            request
          });
        return chain?.fees?.baseFeeMultiplier ?? 1.2;
      })();
      if (baseFeeMultiplier < 1)
        throw new fee_js_1.BaseFeeScalarError();
      const decimals = baseFeeMultiplier.toString().split(".")[1]?.length ?? 0;
      const denominator = 10 ** decimals;
      const multiply = (base2) => base2 * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);
      const block = block_ ? block_ : await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({});
      if (typeof chain?.fees?.estimateFeesPerGas === "function") {
        const fees2 = await chain.fees.estimateFeesPerGas({
          block: block_,
          client,
          multiply,
          request,
          type
        });
        if (fees2 !== null)
          return fees2;
      }
      if (type === "eip1559") {
        if (typeof block.baseFeePerGas !== "bigint")
          throw new fee_js_1.Eip1559FeesNotSupportedError();
        const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === "bigint" ? request.maxPriorityFeePerGas : await (0, estimateMaxPriorityFeePerGas_js_1.internal_estimateMaxPriorityFeePerGas)(client, {
          block,
          chain,
          request
        });
        const baseFeePerGas = multiply(block.baseFeePerGas);
        const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;
        return {
          maxFeePerGas,
          maxPriorityFeePerGas
        };
      }
      const gasPrice = request?.gasPrice ?? multiply(await (0, getAction_js_1.getAction)(client, getGasPrice_js_1.getGasPrice, "getGasPrice")({}));
      return {
        gasPrice
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.internal_estimateFeesPerGas = exports2.estimateFeesPerGas = void 0;
    var fee_js_1 = require_fee();
    var getAction_js_1 = require_getAction();
    var estimateMaxPriorityFeePerGas_js_1 = require_estimateMaxPriorityFeePerGas();
    var getBlock_js_1 = require_getBlock();
    var getGasPrice_js_1 = require_getGasPrice();
    exports2.estimateFeesPerGas = estimateFeesPerGas;
    exports2.internal_estimateFeesPerGas = internal_estimateFeesPerGas22;
  });
  var require_getTransactionCount = __commonJS2((exports2) => {
    async function getTransactionCount22(client, { address, blockTag = "latest", blockNumber }) {
      const count = await client.request({
        method: "eth_getTransactionCount",
        params: [address, blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : blockTag]
      });
      return (0, fromHex_js_1.hexToNumber)(count);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionCount = void 0;
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    exports2.getTransactionCount = getTransactionCount22;
  });
  var require_blobsToCommitments = __commonJS2((exports2) => {
    function blobsToCommitments22(parameters) {
      const { kzg } = parameters;
      const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
      const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;
      const commitments = [];
      for (const blob of blobs)
        commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
      return to === "bytes" ? commitments : commitments.map((x) => (0, toHex_js_1.bytesToHex)(x));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blobsToCommitments = void 0;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.blobsToCommitments = blobsToCommitments22;
  });
  var require_blobsToProofs = __commonJS2((exports2) => {
    function blobsToProofs22(parameters) {
      const { kzg } = parameters;
      const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
      const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;
      const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.commitments;
      const proofs = [];
      for (let i = 0; i < blobs.length; i++) {
        const blob = blobs[i];
        const commitment = commitments[i];
        proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
      }
      return to === "bytes" ? proofs : proofs.map((x) => (0, toHex_js_1.bytesToHex)(x));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blobsToProofs = void 0;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.blobsToProofs = blobsToProofs22;
  });
  var require__sha2 = __commonJS2((exports2) => {
    function setBigUint6422(view, byteOffset, value, isLE22) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE22);
      const _32n22 = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n22 & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE22 ? 4 : 0;
      const l = isLE22 ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE22);
      view.setUint32(byteOffset + l, wl, isLE22);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SHA2 = void 0;
    var _assert_js_1 = require__assert();
    var utils_js_1 = require_utils2();
    class SHA22 extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE22) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE22;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer: buffer2, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer2.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer: buffer2, view, blockLen, isLE: isLE22 } = this;
        let { pos } = this;
        buffer2[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer2[i] = 0;
        setBigUint6422(view, blockLen - 8, BigInt(this.length * 8), isLE22);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE22);
      }
      digest() {
        const { buffer: buffer2, outputLen } = this;
        this.digestInto(buffer2);
        const res = buffer2.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer2);
        return to;
      }
    }
    exports2.SHA2 = SHA22;
  });
  var require_sha256 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha224 = exports2.sha256 = void 0;
    var _sha2_js_1 = require__sha2();
    var utils_js_1 = require_utils2();
    var Chi22 = (a, b, c) => a & b ^ ~a & c;
    var Maj22 = (a, b, c) => a & b ^ a & c ^ b & c;
    var SHA256_K22 = /* @__PURE__ */ new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var IV2 = /* @__PURE__ */ new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W22 = /* @__PURE__ */ new Uint32Array(64);
    class SHA25622 extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 32, 8, false);
        this.A = IV2[0] | 0;
        this.B = IV2[1] | 0;
        this.C = IV2[2] | 0;
        this.D = IV2[3] | 0;
        this.E = IV2[4] | 0;
        this.F = IV2[5] | 0;
        this.G = IV2[6] | 0;
        this.H = IV2[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W22[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W22[i - 15];
          const W2 = SHA256_W22[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W22[i] = s1 + SHA256_W22[i - 7] + s0 + SHA256_W22[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + Chi22(E, F, G) + SHA256_K22[i] + SHA256_W22[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + Maj22(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W22.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    }
    class SHA224 extends SHA25622 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    }
    exports2.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA25622());
    exports2.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  });
  var require_sha2562 = __commonJS2((exports2) => {
    function sha25632(value, to_) {
      const to = to_ || "hex";
      const bytes22 = (0, sha256_1.sha256)((0, isHex_js_1.isHex)(value, { strict: false }) ? (0, toBytes_js_1.toBytes)(value) : value);
      if (to === "bytes")
        return bytes22;
      return (0, toHex_js_1.toHex)(bytes22);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sha256 = void 0;
    var sha256_1 = require_sha256();
    var isHex_js_1 = require_isHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.sha256 = sha25632;
  });
  var require_commitmentToVersionedHash = __commonJS2((exports2) => {
    function commitmentToVersionedHash22(parameters) {
      const { commitment, version: version22 = 1 } = parameters;
      const to = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
      const versionedHash = (0, sha256_js_1.sha256)(commitment, "bytes");
      versionedHash.set([version22], 0);
      return to === "bytes" ? versionedHash : (0, toHex_js_1.bytesToHex)(versionedHash);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.commitmentToVersionedHash = void 0;
    var toHex_js_1 = require_toHex();
    var sha256_js_1 = require_sha2562();
    exports2.commitmentToVersionedHash = commitmentToVersionedHash22;
  });
  var require_commitmentsToVersionedHashes = __commonJS2((exports2) => {
    function commitmentsToVersionedHashes22(parameters) {
      const { commitments, version: version22 } = parameters;
      const to = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
      const hashes = [];
      for (const commitment of commitments) {
        hashes.push((0, commitmentToVersionedHash_js_1.commitmentToVersionedHash)({
          commitment,
          to,
          version: version22
        }));
      }
      return hashes;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.commitmentsToVersionedHashes = void 0;
    var commitmentToVersionedHash_js_1 = require_commitmentToVersionedHash();
    exports2.commitmentsToVersionedHashes = commitmentsToVersionedHashes22;
  });
  var require_blob = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maxBytesPerTransaction = exports2.bytesPerBlob = exports2.fieldElementsPerBlob = exports2.bytesPerFieldElement = exports2.blobsPerTransaction = void 0;
    exports2.blobsPerTransaction = 6;
    exports2.bytesPerFieldElement = 32;
    exports2.fieldElementsPerBlob = 4096;
    exports2.bytesPerBlob = exports2.bytesPerFieldElement * exports2.fieldElementsPerBlob;
    exports2.maxBytesPerTransaction = exports2.bytesPerBlob * exports2.blobsPerTransaction - 1 - 1 * exports2.fieldElementsPerBlob * exports2.blobsPerTransaction;
  });
  var require_kzg = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.versionedHashVersionKzg = exports2.bytesPerProof = exports2.bytesPerCommitment = void 0;
    exports2.bytesPerCommitment = 48;
    exports2.bytesPerProof = 48;
    exports2.versionedHashVersionKzg = 1;
  });
  var require_blob2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidVersionedHashVersionError = exports2.InvalidVersionedHashSizeError = exports2.EmptyBlobError = exports2.BlobSizeTooLargeError = void 0;
    var kzg_js_1 = require_kzg();
    var base_js_1 = require_base();
    class BlobSizeTooLargeError22 extends base_js_1.BaseError {
      constructor({ maxSize, size: size22 }) {
        super("Blob size is too large.", {
          metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size22} bytes`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BlobSizeTooLargeError"
        });
      }
    }
    exports2.BlobSizeTooLargeError = BlobSizeTooLargeError22;
    class EmptyBlobError22 extends base_js_1.BaseError {
      constructor() {
        super("Blob data must not be empty.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "EmptyBlobError"
        });
      }
    }
    exports2.EmptyBlobError = EmptyBlobError22;
    class InvalidVersionedHashSizeError2 extends base_js_1.BaseError {
      constructor({ hash: hash22, size: size22 }) {
        super(`Versioned hash "${hash22}" size is invalid.`, {
          metaMessages: ["Expected: 32", `Received: ${size22}`]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidVersionedHashSizeError"
        });
      }
    }
    exports2.InvalidVersionedHashSizeError = InvalidVersionedHashSizeError2;
    class InvalidVersionedHashVersionError2 extends base_js_1.BaseError {
      constructor({ hash: hash22, version: version22 }) {
        super(`Versioned hash "${hash22}" version is invalid.`, {
          metaMessages: [
            `Expected: ${kzg_js_1.versionedHashVersionKzg}`,
            `Received: ${version22}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidVersionedHashVersionError"
        });
      }
    }
    exports2.InvalidVersionedHashVersionError = InvalidVersionedHashVersionError2;
  });
  var require_toBlobs = __commonJS2((exports2) => {
    function toBlobs22(parameters) {
      const to = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
      const data = typeof parameters.data === "string" ? (0, toBytes_js_1.hexToBytes)(parameters.data) : parameters.data;
      const size_ = (0, size_js_1.size)(data);
      if (!size_)
        throw new blob_js_2.EmptyBlobError();
      if (size_ > blob_js_1.maxBytesPerTransaction)
        throw new blob_js_2.BlobSizeTooLargeError({
          maxSize: blob_js_1.maxBytesPerTransaction,
          size: size_
        });
      const blobs = [];
      let active = true;
      let position = 0;
      while (active) {
        const blob = (0, cursor_js_1.createCursor)(new Uint8Array(blob_js_1.bytesPerBlob));
        let size22 = 0;
        while (size22 < blob_js_1.fieldElementsPerBlob) {
          const bytes22 = data.slice(position, position + (blob_js_1.bytesPerFieldElement - 1));
          blob.pushByte(0);
          blob.pushBytes(bytes22);
          if (bytes22.length < 31) {
            blob.pushByte(128);
            active = false;
            break;
          }
          size22++;
          position += 31;
        }
        blobs.push(blob);
      }
      return to === "bytes" ? blobs.map((x) => x.bytes) : blobs.map((x) => (0, toHex_js_1.bytesToHex)(x.bytes));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBlobs = void 0;
    var blob_js_1 = require_blob();
    var blob_js_2 = require_blob2();
    var cursor_js_1 = require_cursor2();
    var size_js_1 = require_size();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.toBlobs = toBlobs22;
  });
  var require_toBlobSidecars = __commonJS2((exports2) => {
    function toBlobSidecars22(parameters) {
      const { data, kzg, to } = parameters;
      const blobs = parameters.blobs ?? (0, toBlobs_js_1.toBlobs)({ data, to });
      const commitments = parameters.commitments ?? (0, blobsToCommitments_js_1.blobsToCommitments)({ blobs, kzg, to });
      const proofs = parameters.proofs ?? (0, blobsToProofs_js_1.blobsToProofs)({ blobs, commitments, kzg, to });
      const sidecars = [];
      for (let i = 0; i < blobs.length; i++)
        sidecars.push({
          blob: blobs[i],
          commitment: commitments[i],
          proof: proofs[i]
        });
      return sidecars;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBlobSidecars = void 0;
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    var blobsToProofs_js_1 = require_blobsToProofs();
    var toBlobs_js_1 = require_toBlobs();
    exports2.toBlobSidecars = toBlobSidecars22;
  });
  var require_getTransactionType = __commonJS2((exports2) => {
    function getTransactionType22(transaction) {
      if (transaction.type)
        return transaction.type;
      if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
        return "eip4844";
      if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
        return "eip1559";
      }
      if (typeof transaction.gasPrice !== "undefined") {
        if (typeof transaction.accessList !== "undefined")
          return "eip2930";
        return "legacy";
      }
      throw new transaction_js_1.InvalidSerializableTransactionError({ transaction });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionType = void 0;
    var transaction_js_1 = require_transaction2();
    exports2.getTransactionType = getTransactionType22;
  });
  var require_getChainId = __commonJS2((exports2) => {
    async function getChainId22(client) {
      const chainIdHex = await client.request({
        method: "eth_chainId"
      });
      return (0, fromHex_js_1.hexToNumber)(chainIdHex);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChainId = void 0;
    var fromHex_js_1 = require_fromHex();
    exports2.getChainId = getChainId22;
  });
  var require_prepareTransactionRequest = __commonJS2((exports2) => {
    async function prepareTransactionRequest22(client, args) {
      const { account: account_ = client.account, blobs, chain, chainId, gas, kzg, nonce, parameters = exports2.defaultParameters, type } = args;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      const request = { ...args, ...account ? { from: account?.address } : {} };
      let block;
      async function getBlock22() {
        if (block)
          return block;
        block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({ blockTag: "latest" });
        return block;
      }
      if ((parameters.includes("blobVersionedHashes") || parameters.includes("sidecars")) && blobs && kzg) {
        const commitments = (0, blobsToCommitments_js_1.blobsToCommitments)({ blobs, kzg });
        if (parameters.includes("blobVersionedHashes")) {
          const versionedHashes = (0, commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes)({
            commitments,
            to: "hex"
          });
          request.blobVersionedHashes = versionedHashes;
        }
        if (parameters.includes("sidecars")) {
          const proofs = (0, blobsToProofs_js_1.blobsToProofs)({ blobs, commitments, kzg });
          const sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({
            blobs,
            commitments,
            proofs,
            to: "hex"
          });
          request.sidecars = sidecars;
        }
      }
      if (parameters.includes("chainId")) {
        if (chain)
          request.chainId = chain.id;
        else if (typeof chainId !== "undefined")
          request.chainId = chainId;
        else
          request.chainId = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, "getChainId")({});
      }
      if (parameters.includes("nonce") && typeof nonce === "undefined" && account)
        request.nonce = await (0, getAction_js_1.getAction)(client, getTransactionCount_js_1.getTransactionCount, "getTransactionCount")({
          address: account.address,
          blockTag: "pending"
        });
      if ((parameters.includes("fees") || parameters.includes("type")) && typeof type === "undefined") {
        try {
          request.type = (0, getTransactionType_js_1.getTransactionType)(request);
        } catch {
          const block2 = await getBlock22();
          request.type = typeof block2?.baseFeePerGas === "bigint" ? "eip1559" : "legacy";
        }
      }
      if (parameters.includes("fees")) {
        if (request.type === "eip1559" || request.type === "eip4844") {
          if (typeof request.maxFeePerGas === "undefined" || typeof request.maxPriorityFeePerGas === "undefined") {
            const block2 = await getBlock22();
            const { maxFeePerGas, maxPriorityFeePerGas } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {
              block: block2,
              chain,
              request
            });
            if (typeof args.maxPriorityFeePerGas === "undefined" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)
              throw new fee_js_1.MaxFeePerGasTooLowError({
                maxPriorityFeePerGas
              });
            request.maxPriorityFeePerGas = maxPriorityFeePerGas;
            request.maxFeePerGas = maxFeePerGas;
          }
        } else {
          if (typeof args.maxFeePerGas !== "undefined" || typeof args.maxPriorityFeePerGas !== "undefined")
            throw new fee_js_1.Eip1559FeesNotSupportedError();
          const block2 = await getBlock22();
          const { gasPrice: gasPrice_ } = await (0, estimateFeesPerGas_js_1.internal_estimateFeesPerGas)(client, {
            block: block2,
            chain,
            request,
            type: "legacy"
          });
          request.gasPrice = gasPrice_;
        }
      }
      if (parameters.includes("gas") && typeof gas === "undefined")
        request.gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, "estimateGas")({
          ...request,
          account: account ? { address: account.address, type: "json-rpc" } : void 0
        });
      (0, assertRequest_js_1.assertRequest)(request);
      delete request.parameters;
      return request;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareTransactionRequest = exports2.defaultParameters = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var estimateFeesPerGas_js_1 = require_estimateFeesPerGas();
    var estimateGas_js_1 = require_estimateGas2();
    var getBlock_js_1 = require_getBlock();
    var getTransactionCount_js_1 = require_getTransactionCount();
    var fee_js_1 = require_fee();
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    var blobsToProofs_js_1 = require_blobsToProofs();
    var commitmentsToVersionedHashes_js_1 = require_commitmentsToVersionedHashes();
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    var getAction_js_1 = require_getAction();
    var assertRequest_js_1 = require_assertRequest();
    var getTransactionType_js_1 = require_getTransactionType();
    var getChainId_js_1 = require_getChainId();
    exports2.defaultParameters = [
      "blobVersionedHashes",
      "chainId",
      "fees",
      "gas",
      "nonce",
      "type"
    ];
    exports2.prepareTransactionRequest = prepareTransactionRequest22;
  });
  var require_estimateGas2 = __commonJS2((exports2) => {
    async function estimateGas22(client, args) {
      const account_ = args.account ?? client.account;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      try {
        const { accessList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = await (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, {
          ...args,
          parameters: account?.type === "local" ? void 0 : ["blobVersionedHashes"]
        });
        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
        const block = blockNumberHex || blockTag;
        (0, assertRequest_js_1.assertRequest)(args);
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
          ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
          from: account?.address,
          accessList,
          blobs,
          blobVersionedHashes,
          data,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to,
          value
        });
        const balance = await client.request({
          method: "eth_estimateGas",
          params: block ? [request, block] : [request]
        });
        return BigInt(balance);
      } catch (err) {
        throw (0, getEstimateGasError_js_1.getEstimateGasError)(err, {
          ...args,
          account,
          chain: client.chain
        });
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateGas = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var toHex_js_1 = require_toHex();
    var getEstimateGasError_js_1 = require_getEstimateGasError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var assertRequest_js_1 = require_assertRequest();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    exports2.estimateGas = estimateGas22;
  });
  var require_estimateContractGas = __commonJS2((exports2) => {
    async function estimateContractGas22(client, parameters) {
      const { abi, address, args, functionName, ...request } = parameters;
      const data = (0, encodeFunctionData_js_1.encodeFunctionData)({
        abi,
        args,
        functionName
      });
      try {
        const gas = await (0, getAction_js_1.getAction)(client, estimateGas_js_1.estimateGas, "estimateGas")({
          data,
          to: address,
          ...request
        });
        return gas;
      } catch (error) {
        const account = request.account ? (0, parseAccount_js_1.parseAccount)(request.account) : void 0;
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/estimateContractGas",
          functionName,
          sender: account?.address
        });
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.estimateContractGas = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var estimateGas_js_1 = require_estimateGas2();
    exports2.estimateContractGas = estimateContractGas22;
  });
  var require_decodeEventLog = __commonJS2((exports2) => {
    function decodeEventLog22(parameters) {
      const { abi, data, strict: strict_, topics } = parameters;
      const strict = strict_ ?? true;
      const [signature, ...argTopics] = topics;
      if (!signature)
        throw new abi_js_1.AbiEventSignatureEmptyTopicsError({ docsPath: docsPath52 });
      const abiItem = abi.find((x) => x.type === "event" && signature === (0, toEventSelector_js_1.toEventSelector)((0, formatAbiItem_js_1.formatAbiItem)(x)));
      if (!(abiItem && "name" in abiItem) || abiItem.type !== "event")
        throw new abi_js_1.AbiEventSignatureNotFoundError(signature, { docsPath: docsPath52 });
      const { name, inputs } = abiItem;
      const isUnnamed = inputs?.some((x) => !("name" in x && x.name));
      let args = isUnnamed ? [] : {};
      const indexedInputs = inputs.filter((x) => "indexed" in x && x.indexed);
      for (let i = 0; i < indexedInputs.length; i++) {
        const param = indexedInputs[i];
        const topic = argTopics[i];
        if (!topic)
          throw new abi_js_1.DecodeLogTopicsMismatch({
            abiItem,
            param
          });
        args[isUnnamed ? i : param.name || i] = decodeTopic22({ param, value: topic });
      }
      const nonIndexedInputs = inputs.filter((x) => !("indexed" in x && x.indexed));
      if (nonIndexedInputs.length > 0) {
        if (data && data !== "0x") {
          try {
            const decodedData = (0, decodeAbiParameters_js_1.decodeAbiParameters)(nonIndexedInputs, data);
            if (decodedData) {
              if (isUnnamed)
                args = [...args, ...decodedData];
              else {
                for (let i = 0; i < nonIndexedInputs.length; i++) {
                  args[nonIndexedInputs[i].name] = decodedData[i];
                }
              }
            }
          } catch (err) {
            if (strict) {
              if (err instanceof abi_js_1.AbiDecodingDataSizeTooSmallError || err instanceof cursor_js_1.PositionOutOfBoundsError)
                throw new abi_js_1.DecodeLogDataMismatch({
                  abiItem,
                  data,
                  params: nonIndexedInputs,
                  size: (0, size_js_1.size)(data)
                });
              throw err;
            }
          }
        } else if (strict) {
          throw new abi_js_1.DecodeLogDataMismatch({
            abiItem,
            data: "0x",
            params: nonIndexedInputs,
            size: 0
          });
        }
      }
      return {
        eventName: name,
        args: Object.values(args).length > 0 ? args : void 0
      };
    }
    function decodeTopic22({ param, value }) {
      if (param.type === "string" || param.type === "bytes" || param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
        return value;
      const decodedArg = (0, decodeAbiParameters_js_1.decodeAbiParameters)([param], value) || [];
      return decodedArg[0];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeEventLog = void 0;
    var abi_js_1 = require_abi();
    var size_js_1 = require_size();
    var toEventSelector_js_1 = require_toEventSelector();
    var cursor_js_1 = require_cursor();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    var docsPath52 = "/docs/contract/decodeEventLog";
    exports2.decodeEventLog = decodeEventLog22;
  });
  var require_parseEventLogs = __commonJS2((exports2) => {
    function parseEventLogs22({ abi, eventName, logs, strict = true }) {
      return logs.map((log) => {
        try {
          const event = (0, decodeEventLog_js_1.decodeEventLog)({
            ...log,
            abi,
            strict
          });
          if (eventName && !eventName.includes(event.eventName))
            return null;
          return { ...event, ...log };
        } catch (err) {
          let eventName2;
          let isUnnamed;
          if (err instanceof index_js_1.AbiEventSignatureNotFoundError)
            return null;
          if (err instanceof index_js_1.DecodeLogDataMismatch || err instanceof index_js_1.DecodeLogTopicsMismatch) {
            if (strict)
              return null;
            eventName2 = err.abiItem.name;
            isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
          }
          return { ...log, args: isUnnamed ? [] : {}, eventName: eventName2 };
        }
      }).filter(Boolean);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEventLogs = void 0;
    var index_js_1 = require__cjs2();
    var decodeEventLog_js_1 = require_decodeEventLog();
    exports2.parseEventLogs = parseEventLogs22;
  });
  var require_getLogs = __commonJS2((exports2) => {
    async function getLogs22(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_ } = {}) {
      const strict = strict_ ?? false;
      const events = events_ ?? (event ? [event] : void 0);
      let topics = [];
      if (events) {
        topics = [
          events.flatMap((event2) => (0, encodeEventTopics_js_1.encodeEventTopics)({
            abi: [event2],
            eventName: event2.name,
            args
          }))
        ];
        if (event)
          topics = topics[0];
      }
      let logs;
      if (blockHash) {
        logs = await client.request({
          method: "eth_getLogs",
          params: [{ address, topics, blockHash }]
        });
      } else {
        logs = await client.request({
          method: "eth_getLogs",
          params: [
            {
              address,
              topics,
              fromBlock: typeof fromBlock === "bigint" ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,
              toBlock: typeof toBlock === "bigint" ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock
            }
          ]
        });
      }
      const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
      if (!events)
        return formattedLogs;
      return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: events,
        logs: formattedLogs,
        strict
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLogs = void 0;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var parseEventLogs_js_1 = require_parseEventLogs();
    var toHex_js_1 = require_toHex();
    var log_js_1 = require_log();
    exports2.getLogs = getLogs22;
  });
  var require_getContractEvents = __commonJS2((exports2) => {
    async function getContractEvents22(client, parameters) {
      const { abi, address, args, blockHash, eventName, fromBlock, toBlock, strict } = parameters;
      const event = eventName ? (0, getAbiItem_js_1.getAbiItem)({ abi, name: eventName }) : void 0;
      const events = !event ? abi.filter((x) => x.type === "event") : void 0;
      return (0, getAction_js_1.getAction)(client, getLogs_js_1.getLogs, "getLogs")({
        address,
        args,
        blockHash,
        event,
        events,
        fromBlock,
        toBlock,
        strict
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContractEvents = void 0;
    var getAbiItem_js_1 = require_getAbiItem();
    var getAction_js_1 = require_getAction();
    var getLogs_js_1 = require_getLogs();
    exports2.getContractEvents = getContractEvents22;
  });
  var require_decodeFunctionResult = __commonJS2((exports2) => {
    function decodeFunctionResult22(parameters) {
      const { abi, args, functionName, data } = parameters;
      let abiItem = abi[0];
      if (functionName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, args, name: functionName });
        if (!item)
          throw new abi_js_1.AbiFunctionNotFoundError(functionName, { docsPath: docsPath52 });
        abiItem = item;
      }
      if (abiItem.type !== "function")
        throw new abi_js_1.AbiFunctionNotFoundError(void 0, { docsPath: docsPath52 });
      if (!abiItem.outputs)
        throw new abi_js_1.AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath: docsPath52 });
      const values = (0, decodeAbiParameters_js_1.decodeAbiParameters)(abiItem.outputs, data);
      if (values && values.length > 1)
        return values;
      if (values && values.length === 1)
        return values[0];
      return;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeFunctionResult = void 0;
    var abi_js_1 = require_abi();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath52 = "/docs/contract/decodeFunctionResult";
    exports2.decodeFunctionResult = decodeFunctionResult22;
  });
  var require_ccip = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OffchainLookupSenderMismatchError = exports2.OffchainLookupResponseMalformedError = exports2.OffchainLookupError = void 0;
    var stringify_js_1 = require_stringify();
    var base_js_1 = require_base();
    var utils_js_1 = require_utils();
    class OffchainLookupError22 extends base_js_1.BaseError {
      constructor({ callbackSelector, cause, data, extraData, sender, urls }) {
        super(cause.shortMessage || "An error occurred while fetching for an offchain result.", {
          cause,
          metaMessages: [
            ...cause.metaMessages || [],
            cause.metaMessages?.length ? "" : [],
            "Offchain Gateway Call:",
            urls && [
              "  Gateway URL(s):",
              ...urls.map((url) => `    ${(0, utils_js_1.getUrl)(url)}`)
            ],
            `  Sender: ${sender}`,
            `  Data: ${data}`,
            `  Callback selector: ${callbackSelector}`,
            `  Extra data: ${extraData}`
          ].flat()
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "OffchainLookupError"
        });
      }
    }
    exports2.OffchainLookupError = OffchainLookupError22;
    class OffchainLookupResponseMalformedError22 extends base_js_1.BaseError {
      constructor({ result, url }) {
        super("Offchain gateway response is malformed. Response data must be a hex value.", {
          metaMessages: [
            `Gateway URL: ${(0, utils_js_1.getUrl)(url)}`,
            `Response: ${(0, stringify_js_1.stringify)(result)}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "OffchainLookupResponseMalformedError"
        });
      }
    }
    exports2.OffchainLookupResponseMalformedError = OffchainLookupResponseMalformedError22;
    class OffchainLookupSenderMismatchError22 extends base_js_1.BaseError {
      constructor({ sender, to }) {
        super("Reverted sender address does not match target contract address (`to`).", {
          metaMessages: [
            `Contract address: ${to}`,
            `OffchainLookup sender address: ${sender}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "OffchainLookupSenderMismatchError"
        });
      }
    }
    exports2.OffchainLookupSenderMismatchError = OffchainLookupSenderMismatchError22;
  });
  var require_isAddressEqual = __commonJS2((exports2) => {
    function isAddressEqual22(a, b) {
      if (!(0, isAddress_js_1.isAddress)(a, { strict: false }))
        throw new address_js_1.InvalidAddressError({ address: a });
      if (!(0, isAddress_js_1.isAddress)(b, { strict: false }))
        throw new address_js_1.InvalidAddressError({ address: b });
      return a.toLowerCase() === b.toLowerCase();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAddressEqual = void 0;
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    exports2.isAddressEqual = isAddressEqual22;
  });
  var require_ccip2 = __commonJS2((exports2) => {
    async function offchainLookup22(client, { blockNumber, blockTag, data, to }) {
      const { args } = (0, decodeErrorResult_js_1.decodeErrorResult)({
        data,
        abi: [exports2.offchainLookupAbiItem]
      });
      const [sender, urls, callData, callbackSelector, extraData] = args;
      const { ccipRead } = client;
      const ccipRequest_ = ccipRead && typeof ccipRead?.request === "function" ? ccipRead.request : ccipRequest22;
      try {
        if (!(0, isAddressEqual_js_1.isAddressEqual)(to, sender))
          throw new ccip_js_1.OffchainLookupSenderMismatchError({ sender, to });
        const result = await ccipRequest_({ data: callData, sender, urls });
        const { data: data_ } = await (0, call_js_1.call)(client, {
          blockNumber,
          blockTag,
          data: (0, concat_js_1.concat)([
            callbackSelector,
            (0, encodeAbiParameters_js_1.encodeAbiParameters)([{ type: "bytes" }, { type: "bytes" }], [result, extraData])
          ]),
          to
        });
        return data_;
      } catch (err) {
        throw new ccip_js_1.OffchainLookupError({
          callbackSelector,
          cause: err,
          data,
          extraData,
          sender,
          urls
        });
      }
    }
    async function ccipRequest22({ data, sender, urls }) {
      let error = new Error("An unknown error occurred.");
      for (let i = 0; i < urls.length; i++) {
        const url = urls[i];
        const method = url.includes("{data}") ? "GET" : "POST";
        const body = method === "POST" ? { data, sender } : void 0;
        try {
          const response = await fetch(url.replace("{sender}", sender).replace("{data}", data), {
            body: JSON.stringify(body),
            method
          });
          let result;
          if (response.headers.get("Content-Type")?.startsWith("application/json")) {
            result = (await response.json()).data;
          } else {
            result = await response.text();
          }
          if (!response.ok) {
            error = new request_js_1.HttpRequestError({
              body,
              details: result?.error ? (0, stringify_js_1.stringify)(result.error) : response.statusText,
              headers: response.headers,
              status: response.status,
              url
            });
            continue;
          }
          if (!(0, isHex_js_1.isHex)(result)) {
            error = new ccip_js_1.OffchainLookupResponseMalformedError({
              result,
              url
            });
            continue;
          }
          return result;
        } catch (err) {
          error = new request_js_1.HttpRequestError({
            body,
            details: err.message,
            url
          });
        }
      }
      throw error;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ccipRequest = exports2.offchainLookup = exports2.offchainLookupAbiItem = exports2.offchainLookupSignature = void 0;
    var call_js_1 = require_call();
    var ccip_js_1 = require_ccip();
    var request_js_1 = require_request();
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var concat_js_1 = require_concat();
    var isHex_js_1 = require_isHex();
    var stringify_js_1 = require_stringify();
    exports2.offchainLookupSignature = "0x556f1830";
    exports2.offchainLookupAbiItem = {
      name: "OffchainLookup",
      type: "error",
      inputs: [
        {
          name: "sender",
          type: "address"
        },
        {
          name: "urls",
          type: "string[]"
        },
        {
          name: "callData",
          type: "bytes"
        },
        {
          name: "callbackFunction",
          type: "bytes4"
        },
        {
          name: "extraData",
          type: "bytes"
        }
      ]
    };
    exports2.offchainLookup = offchainLookup22;
    exports2.ccipRequest = ccipRequest22;
  });
  var require_abis = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.erc4626Abi = exports2.erc721Abi = exports2.erc20Abi_bytes32 = exports2.erc20Abi = exports2.universalSignatureValidatorAbi = exports2.smartAccountAbi = exports2.addressResolverAbi = exports2.textResolverAbi = exports2.universalResolverReverseAbi = exports2.universalResolverResolveAbi = exports2.multicall3Abi = void 0;
    exports2.multicall3Abi = [
      {
        inputs: [
          {
            components: [
              {
                name: "target",
                type: "address"
              },
              {
                name: "allowFailure",
                type: "bool"
              },
              {
                name: "callData",
                type: "bytes"
              }
            ],
            name: "calls",
            type: "tuple[]"
          }
        ],
        name: "aggregate3",
        outputs: [
          {
            components: [
              {
                name: "success",
                type: "bool"
              },
              {
                name: "returnData",
                type: "bytes"
              }
            ],
            name: "returnData",
            type: "tuple[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
    var universalResolverErrors22 = [
      {
        inputs: [],
        name: "ResolverNotFound",
        type: "error"
      },
      {
        inputs: [],
        name: "ResolverWildcardNotSupported",
        type: "error"
      },
      {
        inputs: [],
        name: "ResolverNotContract",
        type: "error"
      },
      {
        inputs: [
          {
            name: "returnData",
            type: "bytes"
          }
        ],
        name: "ResolverError",
        type: "error"
      },
      {
        inputs: [
          {
            components: [
              {
                name: "status",
                type: "uint16"
              },
              {
                name: "message",
                type: "string"
              }
            ],
            name: "errors",
            type: "tuple[]"
          }
        ],
        name: "HttpError",
        type: "error"
      }
    ];
    exports2.universalResolverResolveAbi = [
      ...universalResolverErrors22,
      {
        name: "resolve",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes" },
          { name: "data", type: "bytes" }
        ],
        outputs: [
          { name: "", type: "bytes" },
          { name: "address", type: "address" }
        ]
      },
      {
        name: "resolve",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes" },
          { name: "data", type: "bytes" },
          { name: "gateways", type: "string[]" }
        ],
        outputs: [
          { name: "", type: "bytes" },
          { name: "address", type: "address" }
        ]
      }
    ];
    exports2.universalResolverReverseAbi = [
      ...universalResolverErrors22,
      {
        name: "reverse",
        type: "function",
        stateMutability: "view",
        inputs: [{ type: "bytes", name: "reverseName" }],
        outputs: [
          { type: "string", name: "resolvedName" },
          { type: "address", name: "resolvedAddress" },
          { type: "address", name: "reverseResolver" },
          { type: "address", name: "resolver" }
        ]
      },
      {
        name: "reverse",
        type: "function",
        stateMutability: "view",
        inputs: [
          { type: "bytes", name: "reverseName" },
          { type: "string[]", name: "gateways" }
        ],
        outputs: [
          { type: "string", name: "resolvedName" },
          { type: "address", name: "resolvedAddress" },
          { type: "address", name: "reverseResolver" },
          { type: "address", name: "resolver" }
        ]
      }
    ];
    exports2.textResolverAbi = [
      {
        name: "text",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes32" },
          { name: "key", type: "string" }
        ],
        outputs: [{ name: "", type: "string" }]
      }
    ];
    exports2.addressResolverAbi = [
      {
        name: "addr",
        type: "function",
        stateMutability: "view",
        inputs: [{ name: "name", type: "bytes32" }],
        outputs: [{ name: "", type: "address" }]
      },
      {
        name: "addr",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "name", type: "bytes32" },
          { name: "coinType", type: "uint256" }
        ],
        outputs: [{ name: "", type: "bytes" }]
      }
    ];
    exports2.smartAccountAbi = [
      {
        name: "isValidSignature",
        type: "function",
        stateMutability: "view",
        inputs: [
          { name: "hash", type: "bytes32" },
          { name: "signature", type: "bytes" }
        ],
        outputs: [{ name: "", type: "bytes4" }]
      }
    ];
    exports2.universalSignatureValidatorAbi = [
      {
        inputs: [
          {
            internalType: "address",
            name: "_signer",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "_hash",
            type: "bytes32"
          },
          {
            internalType: "bytes",
            name: "_signature",
            type: "bytes"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      }
    ];
    exports2.erc20Abi = [
      {
        type: "event",
        name: "Approval",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "event",
        name: "Transfer",
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "allowance",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "spender",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "approve",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "balanceOf",
        stateMutability: "view",
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "decimals",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint8"
          }
        ]
      },
      {
        type: "function",
        name: "name",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "symbol",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "totalSupply",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "transfer",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "transferFrom",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      }
    ];
    exports2.erc20Abi_bytes32 = [
      {
        type: "event",
        name: "Approval",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "event",
        name: "Transfer",
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "allowance",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "spender",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "approve",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "balanceOf",
        stateMutability: "view",
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "decimals",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint8"
          }
        ]
      },
      {
        type: "function",
        name: "name",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "bytes32"
          }
        ]
      },
      {
        type: "function",
        name: "symbol",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "bytes32"
          }
        ]
      },
      {
        type: "function",
        name: "totalSupply",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "transfer",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "transferFrom",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      }
    ];
    exports2.erc721Abi = [
      {
        type: "event",
        name: "Approval",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: true,
            name: "tokenId",
            type: "uint256"
          }
        ]
      },
      {
        type: "event",
        name: "ApprovalForAll",
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "operator",
            type: "address"
          },
          {
            indexed: false,
            name: "approved",
            type: "bool"
          }
        ]
      },
      {
        type: "event",
        name: "Transfer",
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: true,
            name: "tokenId",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "approve",
        stateMutability: "payable",
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "balanceOf",
        stateMutability: "view",
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "getApproved",
        stateMutability: "view",
        inputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "address"
          }
        ]
      },
      {
        type: "function",
        name: "isApprovedForAll",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "operator",
            type: "address"
          }
        ],
        outputs: [
          {
            type: "bool"
          }
        ]
      },
      {
        type: "function",
        name: "name",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "ownerOf",
        stateMutability: "view",
        inputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: [
          {
            name: "owner",
            type: "address"
          }
        ]
      },
      {
        type: "function",
        name: "safeTransferFrom",
        stateMutability: "payable",
        inputs: [
          {
            name: "from",
            type: "address"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "safeTransferFrom",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "from",
            type: "address"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "id",
            type: "uint256"
          },
          {
            name: "data",
            type: "bytes"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "setApprovalForAll",
        stateMutability: "nonpayable",
        inputs: [
          {
            name: "operator",
            type: "address"
          },
          {
            name: "approved",
            type: "bool"
          }
        ],
        outputs: []
      },
      {
        type: "function",
        name: "symbol",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "tokenByIndex",
        stateMutability: "view",
        inputs: [
          {
            name: "index",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "tokenByIndex",
        stateMutability: "view",
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "index",
            type: "uint256"
          }
        ],
        outputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "tokenURI",
        stateMutability: "view",
        inputs: [
          {
            name: "tokenId",
            type: "uint256"
          }
        ],
        outputs: [
          {
            type: "string"
          }
        ]
      },
      {
        type: "function",
        name: "totalSupply",
        stateMutability: "view",
        inputs: [],
        outputs: [
          {
            type: "uint256"
          }
        ]
      },
      {
        type: "function",
        name: "transferFrom",
        stateMutability: "payable",
        inputs: [
          {
            name: "sender",
            type: "address"
          },
          {
            name: "recipient",
            type: "address"
          },
          {
            name: "tokeId",
            type: "uint256"
          }
        ],
        outputs: []
      }
    ];
    exports2.erc4626Abi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            name: "spender",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ],
        name: "Approval",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "sender",
            type: "address"
          },
          {
            indexed: true,
            name: "receiver",
            type: "address"
          },
          {
            indexed: false,
            name: "assets",
            type: "uint256"
          },
          {
            indexed: false,
            name: "shares",
            type: "uint256"
          }
        ],
        name: "Deposit",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "from",
            type: "address"
          },
          {
            indexed: true,
            name: "to",
            type: "address"
          },
          {
            indexed: false,
            name: "value",
            type: "uint256"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            name: "sender",
            type: "address"
          },
          {
            indexed: true,
            name: "receiver",
            type: "address"
          },
          {
            indexed: true,
            name: "owner",
            type: "address"
          },
          {
            indexed: false,
            name: "assets",
            type: "uint256"
          },
          {
            indexed: false,
            name: "shares",
            type: "uint256"
          }
        ],
        name: "Withdraw",
        type: "event"
      },
      {
        inputs: [
          {
            name: "owner",
            type: "address"
          },
          {
            name: "spender",
            type: "address"
          }
        ],
        name: "allowance",
        outputs: [
          {
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "spender",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        name: "approve",
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "asset",
        outputs: [
          {
            name: "assetTokenAddress",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "account",
            type: "address"
          }
        ],
        name: "balanceOf",
        outputs: [
          {
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        name: "convertToAssets",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        name: "convertToShares",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          }
        ],
        name: "deposit",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "caller",
            type: "address"
          }
        ],
        name: "maxDeposit",
        outputs: [
          {
            name: "maxAssets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "caller",
            type: "address"
          }
        ],
        name: "maxMint",
        outputs: [
          {
            name: "maxShares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "maxRedeem",
        outputs: [
          {
            name: "maxShares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "maxWithdraw",
        outputs: [
          {
            name: "maxAssets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          }
        ],
        name: "mint",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        name: "previewDeposit",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        name: "previewMint",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        name: "previewRedeem",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        name: "previewWithdraw",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "shares",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "redeem",
        outputs: [
          {
            name: "assets",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        name: "totalAssets",
        outputs: [
          {
            name: "totalManagedAssets",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "totalSupply",
        outputs: [
          {
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            name: "to",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transfer",
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "from",
            type: "address"
          },
          {
            name: "to",
            type: "address"
          },
          {
            name: "amount",
            type: "uint256"
          }
        ],
        name: "transferFrom",
        outputs: [
          {
            type: "bool"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            name: "assets",
            type: "uint256"
          },
          {
            name: "receiver",
            type: "address"
          },
          {
            name: "owner",
            type: "address"
          }
        ],
        name: "withdraw",
        outputs: [
          {
            name: "shares",
            type: "uint256"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
  });
  var require_contract2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aggregate3Signature = void 0;
    exports2.aggregate3Signature = "0x82ad56cb";
  });
  var require_chain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidChainIdError = exports2.ClientChainNotConfiguredError = exports2.ChainNotFoundError = exports2.ChainMismatchError = exports2.ChainDoesNotSupportContract = void 0;
    var base_js_1 = require_base();
    class ChainDoesNotSupportContract22 extends base_js_1.BaseError {
      constructor({ blockNumber, chain, contract }) {
        super(`Chain "${chain.name}" does not support contract "${contract.name}".`, {
          metaMessages: [
            "This could be due to any of the following:",
            ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [
              `- The contract "${contract.name}" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`
            ] : [
              `- The chain does not have the contract "${contract.name}" configured.`
            ]
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainDoesNotSupportContract"
        });
      }
    }
    exports2.ChainDoesNotSupportContract = ChainDoesNotSupportContract22;
    class ChainMismatchError22 extends base_js_1.BaseError {
      constructor({ chain, currentChainId }) {
        super(`The current chain of the wallet (id: ${currentChainId}) does not match the target chain for the transaction (id: ${chain.id} \u2013 ${chain.name}).`, {
          metaMessages: [
            `Current Chain ID:  ${currentChainId}`,
            `Expected Chain ID: ${chain.id} \u2013 ${chain.name}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainMismatchError"
        });
      }
    }
    exports2.ChainMismatchError = ChainMismatchError22;
    class ChainNotFoundError22 extends base_js_1.BaseError {
      constructor() {
        super([
          "No chain was provided to the request.",
          "Please provide a chain with the `chain` argument on the Action, or by supplying a `chain` to WalletClient."
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ChainNotFoundError"
        });
      }
    }
    exports2.ChainNotFoundError = ChainNotFoundError22;
    class ClientChainNotConfiguredError22 extends base_js_1.BaseError {
      constructor() {
        super("No chain was provided to the Client.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "ClientChainNotConfiguredError"
        });
      }
    }
    exports2.ClientChainNotConfiguredError = ClientChainNotConfiguredError22;
    class InvalidChainIdError2 extends base_js_1.BaseError {
      constructor({ chainId }) {
        super(typeof chainId === "number" ? `Chain ID "${chainId}" is invalid.` : "Chain ID is invalid.");
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidChainIdError"
        });
      }
    }
    exports2.InvalidChainIdError = InvalidChainIdError2;
  });
  var require_getChainContractAddress = __commonJS2((exports2) => {
    function getChainContractAddress22({ blockNumber, chain, contract: name }) {
      const contract = chain?.contracts?.[name];
      if (!contract)
        throw new chain_js_1.ChainDoesNotSupportContract({
          chain,
          contract: { name }
        });
      if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber)
        throw new chain_js_1.ChainDoesNotSupportContract({
          blockNumber,
          chain,
          contract: {
            name,
            blockCreated: contract.blockCreated
          }
        });
      return contract.address;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChainContractAddress = void 0;
    var chain_js_1 = require_chain();
    exports2.getChainContractAddress = getChainContractAddress22;
  });
  var require_getCallError = __commonJS2((exports2) => {
    function getCallError22(err, { docsPath: docsPath52, ...args }) {
      const cause = (() => {
        const cause2 = (0, getNodeError_js_1.getNodeError)(err, args);
        if (cause2 instanceof node_js_1.UnknownNodeError)
          return err;
        return cause2;
      })();
      return new contract_js_1.CallExecutionError(cause, {
        docsPath: docsPath52,
        ...args
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCallError = void 0;
    var contract_js_1 = require_contract();
    var node_js_1 = require_node();
    var getNodeError_js_1 = require_getNodeError();
    exports2.getCallError = getCallError22;
  });
  var require_createBatchScheduler = __commonJS2((exports2) => {
    function createBatchScheduler22({ fn, id, shouldSplitBatch, wait: wait22 = 0, sort }) {
      const exec = async () => {
        const scheduler = getScheduler();
        flush();
        const args = scheduler.map(({ args: args2 }) => args2);
        if (args.length === 0)
          return;
        fn(args).then((data) => {
          if (sort && Array.isArray(data))
            data.sort(sort);
          for (let i = 0; i < scheduler.length; i++) {
            const { pendingPromise } = scheduler[i];
            pendingPromise.resolve?.([data[i], data]);
          }
        }).catch((err) => {
          for (let i = 0; i < scheduler.length; i++) {
            const { pendingPromise } = scheduler[i];
            pendingPromise.reject?.(err);
          }
        });
      };
      const flush = () => schedulerCache22.delete(id);
      const getBatchedArgs = () => getScheduler().map(({ args }) => args);
      const getScheduler = () => schedulerCache22.get(id) || [];
      const setScheduler = (item) => schedulerCache22.set(id, [...getScheduler(), item]);
      return {
        flush,
        async schedule(args) {
          const pendingPromise = {};
          const promise = new Promise((resolve, reject) => {
            pendingPromise.resolve = resolve;
            pendingPromise.reject = reject;
          });
          const split22 = shouldSplitBatch?.([...getBatchedArgs(), args]);
          if (split22)
            exec();
          const hasActiveScheduler = getScheduler().length > 0;
          if (hasActiveScheduler) {
            setScheduler({ args, pendingPromise });
            return promise;
          }
          setScheduler({ args, pendingPromise });
          setTimeout(exec, wait22);
          return promise;
        }
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createBatchScheduler = void 0;
    var schedulerCache22 = /* @__PURE__ */ new Map();
    exports2.createBatchScheduler = createBatchScheduler22;
  });
  var require_call = __commonJS2((exports2) => {
    async function call22(client, args) {
      const { account: account_ = client.account, batch = Boolean(client.batch?.multicall), blockNumber, blockTag = "latest", accessList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, stateOverride, ...rest } = args;
      const account = account_ ? (0, parseAccount_js_1.parseAccount)(account_) : void 0;
      try {
        (0, assertRequest_js_1.assertRequest)(args);
        const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
        const block = blockNumberHex || blockTag;
        const rpcStateOverride = parseStateOverride2(stateOverride);
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
          ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
          from: account?.address,
          accessList,
          blobs,
          data,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to,
          value
        });
        if (batch && shouldPerformMulticall22({ request }) && !rpcStateOverride) {
          try {
            return await scheduleMulticall22(client, {
              ...request,
              blockNumber,
              blockTag
            });
          } catch (err) {
            if (!(err instanceof chain_js_1.ClientChainNotConfiguredError) && !(err instanceof chain_js_1.ChainDoesNotSupportContract))
              throw err;
          }
        }
        const response = await client.request({
          method: "eth_call",
          params: rpcStateOverride ? [
            request,
            block,
            rpcStateOverride
          ] : [request, block]
        });
        if (response === "0x")
          return { data: void 0 };
        return { data: response };
      } catch (err) {
        const data2 = getRevertErrorData22(err);
        const { offchainLookup: offchainLookup22, offchainLookupSignature: offchainLookupSignature22 } = await Promise.resolve().then(() => require_ccip2());
        if (client.ccipRead !== false && data2?.slice(0, 10) === offchainLookupSignature22 && to)
          return { data: await offchainLookup22(client, { data: data2, to }) };
        throw (0, getCallError_js_1.getCallError)(err, {
          ...args,
          account,
          chain: client.chain
        });
      }
    }
    function shouldPerformMulticall22({ request }) {
      const { data, to, ...request_ } = request;
      if (!data)
        return false;
      if (data.startsWith(contract_js_1.aggregate3Signature))
        return false;
      if (!to)
        return false;
      if (Object.values(request_).filter((x) => typeof x !== "undefined").length > 0)
        return false;
      return true;
    }
    async function scheduleMulticall22(client, args) {
      const { batchSize = 1024, wait: wait22 = 0 } = typeof client.batch?.multicall === "object" ? client.batch.multicall : {};
      const { blockNumber, blockTag = "latest", data, multicallAddress: multicallAddress_, to } = args;
      let multicallAddress = multicallAddress_;
      if (!multicallAddress) {
        if (!client.chain)
          throw new chain_js_1.ClientChainNotConfiguredError();
        multicallAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "multicall3"
        });
      }
      const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
        id: `${client.uid}.${block}`,
        wait: wait22,
        shouldSplitBatch(args2) {
          const size22 = args2.reduce((size32, { data: data2 }) => size32 + (data2.length - 2), 0);
          return size22 > batchSize * 2;
        },
        fn: async (requests) => {
          const calls = requests.map((request) => ({
            allowFailure: true,
            callData: request.data,
            target: request.to
          }));
          const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({
            abi: abis_js_1.multicall3Abi,
            args: [calls],
            functionName: "aggregate3"
          });
          const data2 = await client.request({
            method: "eth_call",
            params: [
              {
                data: calldata,
                to: multicallAddress
              },
              block
            ]
          });
          return (0, decodeFunctionResult_js_1.decodeFunctionResult)({
            abi: abis_js_1.multicall3Abi,
            args: [calls],
            functionName: "aggregate3",
            data: data2 || "0x"
          });
        }
      });
      const [{ returnData, success }] = await schedule({ data, to });
      if (!success)
        throw new contract_js_2.RawContractError({ data: returnData });
      if (returnData === "0x")
        return { data: void 0 };
      return { data: returnData };
    }
    function getRevertErrorData22(err) {
      if (!(err instanceof base_js_1.BaseError))
        return;
      const error = err.walk();
      return typeof error?.data === "object" ? error.data?.data : error.data;
    }
    function parseStateMapping2(stateMapping) {
      if (!stateMapping || stateMapping.length === 0)
        return;
      return stateMapping.reduce((acc, { slot, value }) => {
        if (slot.length !== 66)
          throw new data_js_1.InvalidBytesLengthError({
            size: slot.length,
            targetSize: 66,
            type: "hex"
          });
        if (value.length !== 66)
          throw new data_js_1.InvalidBytesLengthError({
            size: value.length,
            targetSize: 66,
            type: "hex"
          });
        acc[slot] = value;
        return acc;
      }, {});
    }
    function parseAccountStateOverride2(args) {
      const { balance, nonce, state, stateDiff, code } = args;
      const rpcAccountStateOverride = {};
      if (code !== void 0)
        rpcAccountStateOverride.code = code;
      if (balance !== void 0)
        rpcAccountStateOverride.balance = (0, toHex_js_1.numberToHex)(balance);
      if (nonce !== void 0)
        rpcAccountStateOverride.nonce = (0, toHex_js_1.numberToHex)(nonce);
      if (state !== void 0)
        rpcAccountStateOverride.state = parseStateMapping2(state);
      if (stateDiff !== void 0) {
        if (rpcAccountStateOverride.state)
          throw new stateOverride_js_1.StateAssignmentConflictError();
        rpcAccountStateOverride.stateDiff = parseStateMapping2(stateDiff);
      }
      return rpcAccountStateOverride;
    }
    function parseStateOverride2(args) {
      if (!args)
        return;
      const rpcStateOverride = {};
      for (const { address, ...accountState } of args) {
        if (!(0, isAddress_js_1.isAddress)(address, { strict: false }))
          throw new address_js_1.InvalidAddressError({ address });
        if (rpcStateOverride[address])
          throw new stateOverride_js_1.AccountStateConflictError({ address });
        rpcStateOverride[address] = parseAccountStateOverride2(accountState);
      }
      return rpcStateOverride;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseStateOverride = exports2.parseAccountStateOverride = exports2.parseStateMapping = exports2.getRevertErrorData = exports2.call = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var abis_js_1 = require_abis();
    var contract_js_1 = require_contract2();
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var chain_js_1 = require_chain();
    var contract_js_2 = require_contract();
    var data_js_1 = require_data();
    var stateOverride_js_1 = require_stateOverride();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var isAddress_js_1 = require_isAddress();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var getCallError_js_1 = require_getCallError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var createBatchScheduler_js_1 = require_createBatchScheduler();
    var assertRequest_js_1 = require_assertRequest();
    exports2.call = call22;
    exports2.getRevertErrorData = getRevertErrorData22;
    exports2.parseStateMapping = parseStateMapping2;
    exports2.parseAccountStateOverride = parseAccountStateOverride2;
    exports2.parseStateOverride = parseStateOverride2;
  });
  var require_readContract = __commonJS2((exports2) => {
    async function readContract22(client, parameters) {
      const { abi, address, args, functionName, ...rest } = parameters;
      const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({
        abi,
        args,
        functionName
      });
      try {
        const { data } = await (0, getAction_js_1.getAction)(client, call_js_1.call, "call")({
          ...rest,
          data: calldata,
          to: address
        });
        return (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi,
          args,
          functionName,
          data: data || "0x"
        });
      } catch (error) {
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/readContract",
          functionName
        });
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readContract = void 0;
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var call_js_1 = require_call();
    exports2.readContract = readContract22;
  });
  var require_simulateContract = __commonJS2((exports2) => {
    async function simulateContract22(client, parameters) {
      const { abi, address, args, dataSuffix, functionName, ...callRequest } = parameters;
      const account = callRequest.account ? (0, parseAccount_js_1.parseAccount)(callRequest.account) : client.account;
      const calldata = (0, encodeFunctionData_js_1.encodeFunctionData)({ abi, args, functionName });
      try {
        const { data } = await (0, getAction_js_1.getAction)(client, call_js_1.call, "call")({
          batch: false,
          data: `${calldata}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
          to: address,
          ...callRequest,
          account
        });
        const result = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi,
          args,
          functionName,
          data: data || "0x"
        });
        const minimizedAbi = abi.filter((abiItem) => "name" in abiItem && abiItem.name === parameters.functionName);
        return {
          result,
          request: {
            abi: minimizedAbi,
            address,
            args,
            dataSuffix,
            functionName,
            ...callRequest,
            account
          }
        };
      } catch (error) {
        throw (0, getContractError_js_1.getContractError)(error, {
          abi,
          address,
          args,
          docsPath: "/docs/contract/simulateContract",
          functionName,
          sender: account?.address
        });
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.simulateContract = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var call_js_1 = require_call();
    exports2.simulateContract = simulateContract22;
  });
  var require_observe = __commonJS2((exports2) => {
    function observe22(observerId, callbacks, fn) {
      const callbackId = ++callbackCount22;
      const getListeners = () => exports2.listenersCache.get(observerId) || [];
      const unsubscribe = () => {
        const listeners2 = getListeners();
        exports2.listenersCache.set(observerId, listeners2.filter((cb) => cb.id !== callbackId));
      };
      const unwatch = () => {
        const cleanup2 = exports2.cleanupCache.get(observerId);
        if (getListeners().length === 1 && cleanup2)
          cleanup2();
        unsubscribe();
      };
      const listeners = getListeners();
      exports2.listenersCache.set(observerId, [
        ...listeners,
        { id: callbackId, fns: callbacks }
      ]);
      if (listeners && listeners.length > 0)
        return unwatch;
      const emit = {};
      for (const key in callbacks) {
        emit[key] = (...args) => {
          const listeners2 = getListeners();
          if (listeners2.length === 0)
            return;
          for (const listener of listeners2)
            listener.fns[key]?.(...args);
        };
      }
      const cleanup = fn(emit);
      if (typeof cleanup === "function")
        exports2.cleanupCache.set(observerId, cleanup);
      return unwatch;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.observe = exports2.cleanupCache = exports2.listenersCache = void 0;
    exports2.listenersCache = /* @__PURE__ */ new Map();
    exports2.cleanupCache = /* @__PURE__ */ new Map();
    var callbackCount22 = 0;
    exports2.observe = observe22;
  });
  var require_wait = __commonJS2((exports2) => {
    async function wait22(time) {
      return new Promise((res) => setTimeout(res, time));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wait = void 0;
    exports2.wait = wait22;
  });
  var require_poll = __commonJS2((exports2) => {
    function poll22(fn, { emitOnBegin, initialWaitTime, interval }) {
      let active = true;
      const unwatch = () => active = false;
      const watch = async () => {
        let data = void 0;
        if (emitOnBegin)
          data = await fn({ unpoll: unwatch });
        const initialWait = await initialWaitTime?.(data) ?? interval;
        await (0, wait_js_1.wait)(initialWait);
        const poll3 = async () => {
          if (!active)
            return;
          await fn({ unpoll: unwatch });
          await (0, wait_js_1.wait)(interval);
          poll3();
        };
        poll3();
      };
      watch();
      return unwatch;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.poll = void 0;
    var wait_js_1 = require_wait();
    exports2.poll = poll22;
  });
  var require_withCache = __commonJS2((exports2) => {
    function getCache22(cacheKey22) {
      const buildCache = (cacheKey3, cache) => ({
        clear: () => cache.delete(cacheKey3),
        get: () => cache.get(cacheKey3),
        set: (data) => cache.set(cacheKey3, data)
      });
      const promise = buildCache(cacheKey22, exports2.promiseCache);
      const response = buildCache(cacheKey22, exports2.responseCache);
      return {
        clear: () => {
          promise.clear();
          response.clear();
        },
        promise,
        response
      };
    }
    async function withCache22(fn, { cacheKey: cacheKey22, cacheTime = Infinity }) {
      const cache = getCache22(cacheKey22);
      const response = cache.response.get();
      if (response && cacheTime > 0) {
        const age = (/* @__PURE__ */ new Date()).getTime() - response.created.getTime();
        if (age < cacheTime)
          return response.data;
      }
      let promise = cache.promise.get();
      if (!promise) {
        promise = fn();
        cache.promise.set(promise);
      }
      try {
        const data = await promise;
        cache.response.set({ created: /* @__PURE__ */ new Date(), data });
        return data;
      } finally {
        cache.promise.clear();
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withCache = exports2.getCache = exports2.responseCache = exports2.promiseCache = void 0;
    exports2.promiseCache = /* @__PURE__ */ new Map();
    exports2.responseCache = /* @__PURE__ */ new Map();
    exports2.getCache = getCache22;
    exports2.withCache = withCache22;
  });
  var require_getBlockNumber = __commonJS2((exports2) => {
    function getBlockNumberCache(id) {
      return (0, withCache_js_1.getCache)(cacheKey22(id));
    }
    async function getBlockNumber22(client, { cacheTime = client.cacheTime } = {}) {
      const blockNumberHex = await (0, withCache_js_1.withCache)(() => client.request({
        method: "eth_blockNumber"
      }), { cacheKey: cacheKey22(client.uid), cacheTime });
      return BigInt(blockNumberHex);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlockNumber = exports2.getBlockNumberCache = void 0;
    var withCache_js_1 = require_withCache();
    var cacheKey22 = (id) => `blockNumber.${id}`;
    exports2.getBlockNumberCache = getBlockNumberCache;
    exports2.getBlockNumber = getBlockNumber22;
  });
  var require_getFilterChanges = __commonJS2((exports2) => {
    async function getFilterChanges22(_client, { filter }) {
      const strict = "strict" in filter && filter.strict;
      const logs = await filter.request({
        method: "eth_getFilterChanges",
        params: [filter.id]
      });
      if (typeof logs[0] === "string")
        return logs;
      const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
      if (!("abi" in filter) || !filter.abi)
        return formattedLogs;
      return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: filter.abi,
        logs: formattedLogs,
        strict
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFilterChanges = void 0;
    var parseEventLogs_js_1 = require_parseEventLogs();
    var log_js_1 = require_log();
    exports2.getFilterChanges = getFilterChanges22;
  });
  var require_uninstallFilter = __commonJS2((exports2) => {
    async function uninstallFilter22(_client, { filter }) {
      return filter.request({
        method: "eth_uninstallFilter",
        params: [filter.id]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uninstallFilter = void 0;
    exports2.uninstallFilter = uninstallFilter22;
  });
  var require_watchContractEvent = __commonJS2((exports2) => {
    function watchContractEvent22(client, parameters) {
      const { abi, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ } = parameters;
      const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket" || typeof fromBlock === "number";
      const pollContractEvent = () => {
        const strict = strict_ ?? false;
        const observerId = (0, stringify_js_1.stringify)([
          "watchContractEvent",
          address,
          args,
          batch,
          client.uid,
          eventName,
          pollingInterval,
          strict,
          fromBlock
        ]);
        return (0, observe_js_1.observe)(observerId, { onLogs, onError }, (emit) => {
          let previousBlockNumber;
          if (fromBlock !== void 0)
            previousBlockNumber = fromBlock - 1n;
          let filter;
          let initialized = false;
          const unwatch = (0, poll_js_1.poll)(async () => {
            if (!initialized) {
              try {
                filter = await (0, getAction_js_1.getAction)(client, createContractEventFilter_js_1.createContractEventFilter, "createContractEventFilter")({
                  abi,
                  address,
                  args,
                  eventName,
                  strict,
                  fromBlock
                });
              } catch {
              }
              initialized = true;
              return;
            }
            try {
              let logs;
              if (filter) {
                logs = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, "getFilterChanges")({ filter });
              } else {
                const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({});
                if (previousBlockNumber && previousBlockNumber !== blockNumber) {
                  logs = await (0, getAction_js_1.getAction)(client, getContractEvents_js_1.getContractEvents, "getContractEvents")({
                    abi,
                    address,
                    args,
                    eventName,
                    fromBlock: previousBlockNumber + 1n,
                    toBlock: blockNumber,
                    strict
                  });
                } else {
                  logs = [];
                }
                previousBlockNumber = blockNumber;
              }
              if (logs.length === 0)
                return;
              if (batch)
                emit.onLogs(logs);
              else
                for (const log of logs)
                  emit.onLogs([log]);
            } catch (err) {
              if (filter && err instanceof rpc_js_1.InvalidInputRpcError)
                initialized = false;
              emit.onError?.(err);
            }
          }, {
            emitOnBegin: true,
            interval: pollingInterval
          });
          return async () => {
            if (filter)
              await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, "uninstallFilter")({ filter });
            unwatch();
          };
        });
      };
      const subscribeContractEvent = () => {
        const strict = strict_ ?? false;
        const observerId = (0, stringify_js_1.stringify)([
          "watchContractEvent",
          address,
          args,
          batch,
          client.uid,
          eventName,
          pollingInterval,
          strict
        ]);
        let active = true;
        let unsubscribe = () => active = false;
        return (0, observe_js_1.observe)(observerId, { onLogs, onError }, (emit) => {
          (async () => {
            try {
              const topics = eventName ? (0, encodeEventTopics_js_1.encodeEventTopics)({
                abi,
                eventName,
                args
              }) : [];
              const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
                params: ["logs", { address, topics }],
                onData(data) {
                  if (!active)
                    return;
                  const log = data.result;
                  try {
                    const { eventName: eventName2, args: args2 } = (0, decodeEventLog_js_1.decodeEventLog)({
                      abi,
                      data: log.data,
                      topics: log.topics,
                      strict: strict_
                    });
                    const formatted = (0, log_js_1.formatLog)(log, {
                      args: args2,
                      eventName: eventName2
                    });
                    emit.onLogs([formatted]);
                  } catch (err) {
                    let eventName2;
                    let isUnnamed;
                    if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {
                      if (strict_)
                        return;
                      eventName2 = err.abiItem.name;
                      isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                    }
                    const formatted = (0, log_js_1.formatLog)(log, {
                      args: isUnnamed ? [] : {},
                      eventName: eventName2
                    });
                    emit.onLogs([formatted]);
                  }
                },
                onError(error) {
                  emit.onError?.(error);
                }
              });
              unsubscribe = unsubscribe_;
              if (!active)
                unsubscribe();
            } catch (err) {
              onError?.(err);
            }
          })();
          return () => unsubscribe();
        });
      };
      return enablePolling ? pollContractEvent() : subscribeContractEvent();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchContractEvent = void 0;
    var abi_js_1 = require_abi();
    var rpc_js_1 = require_rpc();
    var decodeEventLog_js_1 = require_decodeEventLog();
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var log_js_1 = require_log();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getContractEvents_js_1 = require_getContractEvents();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var uninstallFilter_js_1 = require_uninstallFilter();
    exports2.watchContractEvent = watchContractEvent22;
  });
  var require_account = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AccountNotFoundError = void 0;
    var base_js_1 = require_base();
    class AccountNotFoundError22 extends base_js_1.BaseError {
      constructor({ docsPath: docsPath52 } = {}) {
        super([
          "Could not find an Account to execute with this Action.",
          "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the WalletClient."
        ].join("\n"), {
          docsPath: docsPath52,
          docsSlug: "account"
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "AccountNotFoundError"
        });
      }
    }
    exports2.AccountNotFoundError = AccountNotFoundError22;
  });
  var require_assertCurrentChain = __commonJS2((exports2) => {
    function assertCurrentChain22({ chain, currentChainId }) {
      if (!chain)
        throw new chain_js_1.ChainNotFoundError();
      if (currentChainId !== chain.id)
        throw new chain_js_1.ChainMismatchError({ chain, currentChainId });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertCurrentChain = void 0;
    var chain_js_1 = require_chain();
    exports2.assertCurrentChain = assertCurrentChain22;
  });
  var require_getTransactionError = __commonJS2((exports2) => {
    function getTransactionError22(err, { docsPath: docsPath52, ...args }) {
      const cause = (() => {
        const cause2 = (0, getNodeError_js_1.getNodeError)(err, args);
        if (cause2 instanceof node_js_1.UnknownNodeError)
          return err;
        return cause2;
      })();
      return new transaction_js_1.TransactionExecutionError(cause, {
        docsPath: docsPath52,
        ...args
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionError = void 0;
    var node_js_1 = require_node();
    var transaction_js_1 = require_transaction2();
    var getNodeError_js_1 = require_getNodeError();
    exports2.getTransactionError = getTransactionError22;
  });
  var require_sendRawTransaction = __commonJS2((exports2) => {
    async function sendRawTransaction22(client, { serializedTransaction }) {
      return client.request({
        method: "eth_sendRawTransaction",
        params: [serializedTransaction]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sendRawTransaction = void 0;
    exports2.sendRawTransaction = sendRawTransaction22;
  });
  var require_sendTransaction = __commonJS2((exports2) => {
    async function sendTransaction22(client, parameters) {
      const { account: account_ = client.account, chain = client.chain, accessList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/sendTransaction"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      try {
        (0, assertRequest_js_1.assertRequest)(parameters);
        let chainId;
        if (chain !== null) {
          chainId = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, "getChainId")({});
          (0, assertCurrentChain_js_1.assertCurrentChain)({
            currentChainId: chainId,
            chain
          });
        }
        if (account.type === "local") {
          const request2 = await (0, getAction_js_1.getAction)(client, prepareTransactionRequest_js_1.prepareTransactionRequest, "prepareTransactionRequest")({
            account,
            accessList,
            blobs,
            chain,
            chainId,
            data,
            gas,
            gasPrice,
            maxFeePerBlobGas,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            parameters: [...prepareTransactionRequest_js_1.defaultParameters, "sidecars"],
            to,
            value,
            ...rest
          });
          const serializer = chain?.serializers?.transaction;
          const serializedTransaction = await account.signTransaction(request2, {
            serializer
          });
          return await (0, getAction_js_1.getAction)(client, sendRawTransaction_js_1.sendRawTransaction, "sendRawTransaction")({
            serializedTransaction
          });
        }
        const chainFormat = client.chain?.formatters?.transactionRequest?.format;
        const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
        const request = format({
          ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
          accessList,
          blobs,
          data,
          from: account.address,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          to,
          value
        });
        return await client.request({
          method: "eth_sendTransaction",
          params: [request]
        }, { retryCount: 0 });
      } catch (err) {
        throw (0, getTransactionError_js_1.getTransactionError)(err, {
          ...parameters,
          account,
          chain: parameters.chain || void 0
        });
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sendTransaction = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    var getTransactionError_js_1 = require_getTransactionError();
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    var getAction_js_1 = require_getAction();
    var assertRequest_js_1 = require_assertRequest();
    var getChainId_js_1 = require_getChainId();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    exports2.sendTransaction = sendTransaction22;
  });
  var require_writeContract = __commonJS2((exports2) => {
    async function writeContract22(client, parameters) {
      const { abi, address, args, dataSuffix, functionName, ...request } = parameters;
      const data = (0, encodeFunctionData_js_1.encodeFunctionData)({
        abi,
        args,
        functionName
      });
      return (0, getAction_js_1.getAction)(client, sendTransaction_js_1.sendTransaction, "sendTransaction")({
        data: `${data}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        ...request
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeContract = void 0;
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getAction_js_1 = require_getAction();
    var sendTransaction_js_1 = require_sendTransaction();
    exports2.writeContract = writeContract22;
  });
  var require_getContract = __commonJS2((exports2) => {
    function getContract22({ abi, address, client: client_ }) {
      const client = client_;
      const [publicClient, walletClient] = (() => {
        if (!client)
          return [void 0, void 0];
        if ("public" in client && "wallet" in client)
          return [client.public, client.wallet];
        if ("public" in client)
          return [client.public, void 0];
        if ("wallet" in client)
          return [void 0, client.wallet];
        return [client, client];
      })();
      const hasPublicClient = publicClient !== void 0 && publicClient !== null;
      const hasWalletClient = walletClient !== void 0 && walletClient !== null;
      const contract = {};
      let hasReadFunction = false;
      let hasWriteFunction = false;
      let hasEvent = false;
      for (const item of abi) {
        if (item.type === "function")
          if (item.stateMutability === "view" || item.stateMutability === "pure")
            hasReadFunction = true;
          else
            hasWriteFunction = true;
        else if (item.type === "event")
          hasEvent = true;
        if (hasReadFunction && hasWriteFunction && hasEvent)
          break;
      }
      if (hasPublicClient) {
        if (hasReadFunction)
          contract.read = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters22(parameters);
                return (0, getAction_js_1.getAction)(publicClient, readContract_js_1.readContract, "readContract")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2
                });
              };
            }
          });
        if (hasWriteFunction)
          contract.simulate = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters22(parameters);
                return (0, getAction_js_1.getAction)(publicClient, simulateContract_js_1.simulateContract, "simulateContract")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2
                });
              };
            }
          });
        if (hasEvent) {
          contract.createEventFilter = new Proxy({}, {
            get(_, eventName) {
              return (...parameters) => {
                const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
                const { args, options: options2 } = getEventParameters22(parameters, abiEvent);
                return (0, getAction_js_1.getAction)(publicClient, createContractEventFilter_js_1.createContractEventFilter, "createContractEventFilter")({
                  abi,
                  address,
                  eventName,
                  args,
                  ...options2
                });
              };
            }
          });
          contract.getEvents = new Proxy({}, {
            get(_, eventName) {
              return (...parameters) => {
                const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
                const { args, options: options2 } = getEventParameters22(parameters, abiEvent);
                return (0, getAction_js_1.getAction)(publicClient, getContractEvents_js_1.getContractEvents, "getContractEvents")({
                  abi,
                  address,
                  eventName,
                  args,
                  ...options2
                });
              };
            }
          });
          contract.watchEvent = new Proxy({}, {
            get(_, eventName) {
              return (...parameters) => {
                const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
                const { args, options: options2 } = getEventParameters22(parameters, abiEvent);
                return (0, getAction_js_1.getAction)(publicClient, watchContractEvent_js_1.watchContractEvent, "watchContractEvent")({
                  abi,
                  address,
                  eventName,
                  args,
                  ...options2
                });
              };
            }
          });
        }
      }
      if (hasWalletClient) {
        if (hasWriteFunction)
          contract.write = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters22(parameters);
                return (0, getAction_js_1.getAction)(walletClient, writeContract_js_1.writeContract, "writeContract")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2
                });
              };
            }
          });
      }
      if (hasPublicClient || hasWalletClient) {
        if (hasWriteFunction)
          contract.estimateGas = new Proxy({}, {
            get(_, functionName) {
              return (...parameters) => {
                const { args, options: options2 } = getFunctionParameters22(parameters);
                const client2 = publicClient ?? walletClient;
                return (0, getAction_js_1.getAction)(client2, estimateContractGas_js_1.estimateContractGas, "estimateContractGas")({
                  abi,
                  address,
                  functionName,
                  args,
                  ...options2,
                  account: options2.account ?? walletClient.account
                });
              };
            }
          });
      }
      contract.address = address;
      contract.abi = abi;
      return contract;
    }
    function getFunctionParameters22(values) {
      const hasArgs = values.length && Array.isArray(values[0]);
      const args = hasArgs ? values[0] : [];
      const options2 = (hasArgs ? values[1] : values[0]) ?? {};
      return { args, options: options2 };
    }
    function getEventParameters22(values, abiEvent) {
      let hasArgs = false;
      if (Array.isArray(values[0]))
        hasArgs = true;
      else if (values.length === 1) {
        hasArgs = abiEvent.inputs.some((x) => x.indexed);
      } else if (values.length === 2) {
        hasArgs = true;
      }
      const args = hasArgs ? values[0] : void 0;
      const options2 = (hasArgs ? values[1] : values[0]) ?? {};
      return { args, options: options2 };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEventParameters = exports2.getFunctionParameters = exports2.getContract = void 0;
    var getAction_js_1 = require_getAction();
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    var estimateContractGas_js_1 = require_estimateContractGas();
    var getContractEvents_js_1 = require_getContractEvents();
    var readContract_js_1 = require_readContract();
    var simulateContract_js_1 = require_simulateContract();
    var watchContractEvent_js_1 = require_watchContractEvent();
    var writeContract_js_1 = require_writeContract();
    exports2.getContract = getContract22;
    exports2.getFunctionParameters = getFunctionParameters22;
    exports2.getEventParameters = getEventParameters22;
  });
  var require_publicKeyToAddress = __commonJS2((exports2) => {
    function publicKeyToAddress2(publicKey) {
      const address = (0, keccak256_js_1.keccak256)(`0x${publicKey.substring(4)}`).substring(26);
      return (0, getAddress_js_1.checksumAddress)(`0x${address}`);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.publicKeyToAddress = void 0;
    var getAddress_js_1 = require_getAddress();
    var keccak256_js_1 = require_keccak256();
    exports2.publicKeyToAddress = publicKeyToAddress2;
  });
  var require_accounts = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.publicKeyToAddress = exports2.parseAccount = void 0;
    var parseAccount_js_1 = require_parseAccount();
    Object.defineProperty(exports2, "parseAccount", { enumerable: true, get: function() {
      return parseAccount_js_1.parseAccount;
    } });
    var publicKeyToAddress_js_1 = require_publicKeyToAddress();
    Object.defineProperty(exports2, "publicKeyToAddress", { enumerable: true, get: function() {
      return publicKeyToAddress_js_1.publicKeyToAddress;
    } });
  });
  var require_uid = __commonJS2((exports2) => {
    function uid2(length = 11) {
      if (!buffer2 || index2 + length > size22 * 2) {
        buffer2 = "";
        index2 = 0;
        for (let i = 0; i < size22; i++) {
          buffer2 += (256 + Math.random() * 256 | 0).toString(16).substring(1);
        }
      }
      return buffer2.substring(index2, index2++ + length);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uid = void 0;
    var size22 = 256;
    var index2 = size22;
    var buffer2;
    exports2.uid = uid2;
  });
  var require_createClient = __commonJS2((exports2) => {
    function createClient2(parameters) {
      const { batch, cacheTime = parameters.pollingInterval ?? 4e3, ccipRead, key = "base", name = "Base Client", pollingInterval = 4e3, type = "base" } = parameters;
      const chain = parameters.chain;
      const account = parameters.account ? (0, accounts_js_1.parseAccount)(parameters.account) : void 0;
      const { config, request, value } = parameters.transport({
        chain,
        pollingInterval
      });
      const transport = { ...config, ...value };
      const client = {
        account,
        batch,
        cacheTime,
        ccipRead,
        chain,
        key,
        name,
        pollingInterval,
        request,
        transport,
        type,
        uid: (0, uid_js_1.uid)()
      };
      function extend(base2) {
        return (extendFn) => {
          const extended = extendFn(base2);
          for (const key2 in client)
            delete extended[key2];
          const combined = { ...base2, ...extended };
          return Object.assign(combined, { extend: extend(combined) });
        };
      }
      return Object.assign(client, { extend: extend(client) });
    }
    function rpcSchema2() {
      return null;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rpcSchema = exports2.createClient = void 0;
    var accounts_js_1 = require_accounts();
    var uid_js_1 = require_uid();
    exports2.createClient = createClient2;
    exports2.rpcSchema = rpcSchema2;
  });
  var require_withRetry = __commonJS2((exports2) => {
    function withRetry2(fn, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {
      return new Promise((resolve, reject) => {
        const attemptRetry = async ({ count = 0 } = {}) => {
          const retry = async ({ error }) => {
            const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
            if (delay)
              await (0, wait_js_1.wait)(delay);
            attemptRetry({ count: count + 1 });
          };
          try {
            const data = await fn();
            resolve(data);
          } catch (err) {
            if (count < retryCount && await shouldRetry2({ count, error: err }))
              return retry({ error: err });
            reject(err);
          }
        };
        attemptRetry();
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withRetry = void 0;
    var wait_js_1 = require_wait();
    exports2.withRetry = withRetry2;
  });
  var require_buildRequest = __commonJS2((exports2) => {
    function buildRequest2(request, options2 = {}) {
      return async (args, overrideOptions = {}) => {
        const { retryDelay = 150, retryCount = 3 } = {
          ...options2,
          ...overrideOptions
        };
        return (0, withRetry_js_1.withRetry)(async () => {
          try {
            return await request(args);
          } catch (err_) {
            const err = err_;
            switch (err.code) {
              case rpc_js_1.ParseRpcError.code:
                throw new rpc_js_1.ParseRpcError(err);
              case rpc_js_1.InvalidRequestRpcError.code:
                throw new rpc_js_1.InvalidRequestRpcError(err);
              case rpc_js_1.MethodNotFoundRpcError.code:
                throw new rpc_js_1.MethodNotFoundRpcError(err);
              case rpc_js_1.InvalidParamsRpcError.code:
                throw new rpc_js_1.InvalidParamsRpcError(err);
              case rpc_js_1.InternalRpcError.code:
                throw new rpc_js_1.InternalRpcError(err);
              case rpc_js_1.InvalidInputRpcError.code:
                throw new rpc_js_1.InvalidInputRpcError(err);
              case rpc_js_1.ResourceNotFoundRpcError.code:
                throw new rpc_js_1.ResourceNotFoundRpcError(err);
              case rpc_js_1.ResourceUnavailableRpcError.code:
                throw new rpc_js_1.ResourceUnavailableRpcError(err);
              case rpc_js_1.TransactionRejectedRpcError.code:
                throw new rpc_js_1.TransactionRejectedRpcError(err);
              case rpc_js_1.MethodNotSupportedRpcError.code:
                throw new rpc_js_1.MethodNotSupportedRpcError(err);
              case rpc_js_1.LimitExceededRpcError.code:
                throw new rpc_js_1.LimitExceededRpcError(err);
              case rpc_js_1.JsonRpcVersionUnsupportedError.code:
                throw new rpc_js_1.JsonRpcVersionUnsupportedError(err);
              case rpc_js_1.UserRejectedRequestError.code:
                throw new rpc_js_1.UserRejectedRequestError(err);
              case rpc_js_1.UnauthorizedProviderError.code:
                throw new rpc_js_1.UnauthorizedProviderError(err);
              case rpc_js_1.UnsupportedProviderMethodError.code:
                throw new rpc_js_1.UnsupportedProviderMethodError(err);
              case rpc_js_1.ProviderDisconnectedError.code:
                throw new rpc_js_1.ProviderDisconnectedError(err);
              case rpc_js_1.ChainDisconnectedError.code:
                throw new rpc_js_1.ChainDisconnectedError(err);
              case rpc_js_1.SwitchChainError.code:
                throw new rpc_js_1.SwitchChainError(err);
              case 5e3:
                throw new rpc_js_1.UserRejectedRequestError(err);
              default:
                if (err_ instanceof base_js_1.BaseError)
                  throw err_;
                throw new rpc_js_1.UnknownRpcError(err);
            }
          }
        }, {
          delay: ({ count, error }) => {
            if (error && error instanceof request_js_1.HttpRequestError) {
              const retryAfter = error?.headers?.get("Retry-After");
              if (retryAfter?.match(/\d/))
                return parseInt(retryAfter) * 1e3;
            }
            return ~~(1 << count) * retryDelay;
          },
          retryCount,
          shouldRetry: ({ error }) => shouldRetry2(error)
        });
      };
    }
    function shouldRetry2(error) {
      if ("code" in error && typeof error.code === "number") {
        if (error.code === -1)
          return true;
        if (error.code === rpc_js_1.LimitExceededRpcError.code)
          return true;
        if (error.code === rpc_js_1.InternalRpcError.code)
          return true;
        return false;
      }
      if (error instanceof request_js_1.HttpRequestError && error.status) {
        if (error.status === 403)
          return true;
        if (error.status === 408)
          return true;
        if (error.status === 413)
          return true;
        if (error.status === 429)
          return true;
        if (error.status === 500)
          return true;
        if (error.status === 502)
          return true;
        if (error.status === 503)
          return true;
        if (error.status === 504)
          return true;
        return false;
      }
      return true;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shouldRetry = exports2.buildRequest = void 0;
    var base_js_1 = require_base();
    var request_js_1 = require_request();
    var rpc_js_1 = require_rpc();
    var withRetry_js_1 = require_withRetry();
    exports2.buildRequest = buildRequest2;
    exports2.shouldRetry = shouldRetry2;
  });
  var require_createTransport = __commonJS2((exports2) => {
    function createTransport2({ key, name, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
      return {
        config: { key, name, request, retryCount, retryDelay, timeout, type },
        request: (0, buildRequest_js_1.buildRequest)(request, { retryCount, retryDelay }),
        value
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createTransport = void 0;
    var buildRequest_js_1 = require_buildRequest();
    exports2.createTransport = createTransport2;
  });
  var require_custom = __commonJS2((exports2) => {
    function custom(provider, config = {}) {
      const { key = "custom", name = "Custom Provider", retryDelay } = config;
      return ({ retryCount: defaultRetryCount }) => (0, createTransport_js_1.createTransport)({
        key,
        name,
        request: provider.request.bind(provider),
        retryCount: config.retryCount ?? defaultRetryCount,
        retryDelay,
        type: "custom"
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.custom = void 0;
    var createTransport_js_1 = require_createTransport();
    exports2.custom = custom;
  });
  var require_fallback = __commonJS2((exports2) => {
    function fallback(transports_, config = {}) {
      const { key = "fallback", name = "Fallback", rank = false, retryCount, retryDelay } = config;
      return ({ chain, pollingInterval = 4e3, timeout, ...rest }) => {
        let transports = transports_;
        let onResponse = () => {
        };
        const transport = (0, createTransport_js_1.createTransport)({
          key,
          name,
          async request({ method, params }) {
            const fetch2 = async (i = 0) => {
              const transport2 = transports[i]({
                ...rest,
                chain,
                retryCount: 0,
                timeout
              });
              try {
                const response = await transport2.request({
                  method,
                  params
                });
                onResponse({
                  method,
                  params,
                  response,
                  transport: transport2,
                  status: "success"
                });
                return response;
              } catch (err) {
                onResponse({
                  error: err,
                  method,
                  params,
                  transport: transport2,
                  status: "error"
                });
                if (shouldThrow(err))
                  throw err;
                if (i === transports.length - 1)
                  throw err;
                return fetch2(i + 1);
              }
            };
            return fetch2();
          },
          retryCount,
          retryDelay,
          type: "fallback"
        }, {
          onResponse: (fn) => onResponse = fn,
          transports: transports.map((fn) => fn({ chain, retryCount: 0 }))
        });
        if (rank) {
          const rankOptions = typeof rank === "object" ? rank : {};
          rankTransports({
            chain,
            interval: rankOptions.interval ?? pollingInterval,
            onTransports: (transports_2) => transports = transports_2,
            sampleCount: rankOptions.sampleCount,
            timeout: rankOptions.timeout,
            transports,
            weights: rankOptions.weights
          });
        }
        return transport;
      };
    }
    function shouldThrow(error) {
      if ("code" in error && typeof error.code === "number") {
        if (error.code === rpc_js_1.TransactionRejectedRpcError.code || error.code === rpc_js_1.UserRejectedRequestError.code || error.code === 5e3)
          return true;
      }
      return false;
    }
    function rankTransports({ chain, interval = 4e3, onTransports, sampleCount = 10, timeout = 1e3, transports, weights = {} }) {
      const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } = weights;
      const samples = [];
      const rankTransports_ = async () => {
        const sample = await Promise.all(transports.map(async (transport) => {
          const transport_ = transport({ chain, retryCount: 0, timeout });
          const start = Date.now();
          let end;
          let success;
          try {
            await transport_.request({ method: "net_listening" });
            success = 1;
          } catch {
            success = 0;
          } finally {
            end = Date.now();
          }
          const latency = end - start;
          return { latency, success };
        }));
        samples.push(sample);
        if (samples.length > sampleCount)
          samples.shift();
        const maxLatency = Math.max(...samples.map((sample2) => Math.max(...sample2.map(({ latency }) => latency))));
        const scores = transports.map((_, i) => {
          const latencies = samples.map((sample2) => sample2[i].latency);
          const meanLatency = latencies.reduce((acc, latency) => acc + latency, 0) / latencies.length;
          const latencyScore = 1 - meanLatency / maxLatency;
          const successes = samples.map((sample2) => sample2[i].success);
          const stabilityScore = successes.reduce((acc, success) => acc + success, 0) / successes.length;
          if (stabilityScore === 0)
            return [0, i];
          return [
            latencyWeight * latencyScore + stabilityWeight * stabilityScore,
            i
          ];
        }).sort((a, b) => b[0] - a[0]);
        onTransports(scores.map(([, i]) => transports[i]));
        await (0, wait_js_1.wait)(interval);
        rankTransports_();
      };
      rankTransports_();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rankTransports = exports2.fallback = void 0;
    var rpc_js_1 = require_rpc();
    var wait_js_1 = require_wait();
    var createTransport_js_1 = require_createTransport();
    exports2.fallback = fallback;
    exports2.rankTransports = rankTransports;
  });
  var require_transport = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UrlRequiredError = void 0;
    var base_js_1 = require_base();
    class UrlRequiredError2 extends base_js_1.BaseError {
      constructor() {
        super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
          docsPath: "/docs/clients/intro"
        });
      }
    }
    exports2.UrlRequiredError = UrlRequiredError2;
  });
  var require_withTimeout = __commonJS2((exports2) => {
    function withTimeout2(fn, { errorInstance = new Error("timed out"), timeout, signal }) {
      return new Promise((resolve, reject) => {
        (async () => {
          let timeoutId;
          try {
            const controller = new AbortController();
            if (timeout > 0) {
              timeoutId = setTimeout(() => {
                if (signal) {
                  controller.abort();
                } else {
                  reject(errorInstance);
                }
              }, timeout);
            }
            resolve(await fn({ signal: controller?.signal || null }));
          } catch (err) {
            if (err.name === "AbortError")
              reject(errorInstance);
            reject(err);
          } finally {
            clearTimeout(timeoutId);
          }
        })();
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withTimeout = void 0;
    exports2.withTimeout = withTimeout2;
  });
  var require_id = __commonJS2((exports2) => {
    function createIdStore2() {
      return {
        current: 0,
        take() {
          return this.current++;
        },
        reset() {
          this.current = 0;
        }
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.idCache = exports2.createIdStore = void 0;
    exports2.createIdStore = createIdStore2;
    exports2.idCache = createIdStore2();
  });
  var require_http = __commonJS2((exports2) => {
    function getHttpRpcClient2(url, options2 = {}) {
      return {
        async request(params) {
          const { body, fetchOptions = {}, onRequest = options2.onRequest, onResponse = options2.onResponse, timeout = options2.timeout ?? 1e4 } = params;
          const { headers, method, signal: signal_ } = { ...options2.fetchOptions, ...fetchOptions };
          try {
            const response = await (0, withTimeout_js_1.withTimeout)(async ({ signal }) => {
              const init = {
                ...fetchOptions,
                body: Array.isArray(body) ? (0, stringify_js_1.stringify)(body.map((body2) => ({
                  jsonrpc: "2.0",
                  id: body2.id ?? id_js_1.idCache.take(),
                  ...body2
                }))) : (0, stringify_js_1.stringify)({
                  jsonrpc: "2.0",
                  id: body.id ?? id_js_1.idCache.take(),
                  ...body
                }),
                headers: {
                  ...headers,
                  "Content-Type": "application/json"
                },
                method: method || "POST",
                signal: signal_ || (timeout > 0 ? signal : null)
              };
              const request = new Request(url, init);
              if (onRequest)
                await onRequest(request);
              const response2 = await fetch(url, init);
              return response2;
            }, {
              errorInstance: new request_js_1.TimeoutError({ body, url }),
              timeout,
              signal: true
            });
            if (onResponse)
              await onResponse(response);
            let data;
            if (response.headers.get("Content-Type")?.startsWith("application/json"))
              data = await response.json();
            else
              data = await response.text();
            if (!response.ok) {
              throw new request_js_1.HttpRequestError({
                body,
                details: (0, stringify_js_1.stringify)(data.error) || response.statusText,
                headers: response.headers,
                status: response.status,
                url
              });
            }
            return data;
          } catch (err) {
            if (err instanceof request_js_1.HttpRequestError)
              throw err;
            if (err instanceof request_js_1.TimeoutError)
              throw err;
            throw new request_js_1.HttpRequestError({
              body,
              details: err.message,
              url
            });
          }
        }
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHttpRpcClient = void 0;
    var request_js_1 = require_request();
    var withTimeout_js_1 = require_withTimeout();
    var stringify_js_1 = require_stringify();
    var id_js_1 = require_id();
    exports2.getHttpRpcClient = getHttpRpcClient2;
  });
  var require_http2 = __commonJS2((exports2) => {
    function http2(url, config = {}) {
      const { batch, fetchOptions, key = "http", name = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay } = config;
      return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
        const { batchSize = 1e3, wait: wait22 = 0 } = typeof batch === "object" ? batch : {};
        const retryCount = config.retryCount ?? retryCount_;
        const timeout = timeout_ ?? config.timeout ?? 1e4;
        const url_ = url || chain?.rpcUrls.default.http[0];
        if (!url_)
          throw new transport_js_1.UrlRequiredError();
        const rpcClient = (0, http_js_1.getHttpRpcClient)(url_, {
          fetchOptions,
          onRequest: onFetchRequest,
          onResponse: onFetchResponse,
          timeout
        });
        return (0, createTransport_js_1.createTransport)({
          key,
          name,
          async request({ method, params }) {
            const body = { method, params };
            const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
              id: `${url}`,
              wait: wait22,
              shouldSplitBatch(requests) {
                return requests.length > batchSize;
              },
              fn: (body2) => rpcClient.request({
                body: body2
              }),
              sort: (a, b) => a.id - b.id
            });
            const fn = async (body2) => batch ? schedule(body2) : [
              await rpcClient.request({
                body: body2
              })
            ];
            const [{ error, result }] = await fn(body);
            if (error)
              throw new request_js_1.RpcRequestError({
                body,
                error,
                url: url_
              });
            return result;
          },
          retryCount,
          retryDelay,
          timeout,
          type: "http"
        }, {
          fetchOptions,
          url: url_
        });
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.http = void 0;
    var request_js_1 = require_request();
    var transport_js_1 = require_transport();
    var createBatchScheduler_js_1 = require_createBatchScheduler();
    var http_js_1 = require_http();
    var createTransport_js_1 = require_createTransport();
    exports2.http = http2;
  });
  var require_errors2 = __commonJS2((exports2) => {
    function isNullUniversalResolverError(err, callType) {
      if (!(err instanceof base_js_1.BaseError))
        return false;
      const cause = err.walk((e) => e instanceof contract_js_1.ContractFunctionRevertedError);
      if (!(cause instanceof contract_js_1.ContractFunctionRevertedError))
        return false;
      if (cause.data?.errorName === "ResolverNotFound")
        return true;
      if (cause.data?.errorName === "ResolverWildcardNotSupported")
        return true;
      if (cause.data?.errorName === "ResolverNotContract")
        return true;
      if (cause.data?.errorName === "ResolverError")
        return true;
      if (cause.data?.errorName === "HttpError")
        return true;
      if (cause.reason?.includes("Wildcard on non-extended resolvers is not supported"))
        return true;
      if (callType === "reverse" && cause.reason === solidity_js_1.panicReasons[50])
        return true;
      return false;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isNullUniversalResolverError = void 0;
    var solidity_js_1 = require_solidity();
    var base_js_1 = require_base();
    var contract_js_1 = require_contract();
    exports2.isNullUniversalResolverError = isNullUniversalResolverError;
  });
  var require_encodedLabelToLabelhash = __commonJS2((exports2) => {
    function encodedLabelToLabelhash(label) {
      if (label.length !== 66)
        return null;
      if (label.indexOf("[") !== 0)
        return null;
      if (label.indexOf("]") !== 65)
        return null;
      const hash22 = `0x${label.slice(1, 65)}`;
      if (!(0, isHex_js_1.isHex)(hash22))
        return null;
      return hash22;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodedLabelToLabelhash = void 0;
    var isHex_js_1 = require_isHex();
    exports2.encodedLabelToLabelhash = encodedLabelToLabelhash;
  });
  var require_namehash = __commonJS2((exports2) => {
    function namehash(name) {
      let result = new Uint8Array(32).fill(0);
      if (!name)
        return (0, toHex_js_1.bytesToHex)(result);
      const labels = name.split(".");
      for (let i = labels.length - 1; i >= 0; i -= 1) {
        const hashFromEncodedLabel = (0, encodedLabelToLabelhash_js_1.encodedLabelToLabelhash)(labels[i]);
        const hashed = hashFromEncodedLabel ? (0, toBytes_js_1.toBytes)(hashFromEncodedLabel) : (0, keccak256_js_1.keccak256)((0, toBytes_js_1.stringToBytes)(labels[i]), "bytes");
        result = (0, keccak256_js_1.keccak256)((0, concat_js_1.concat)([result, hashed]), "bytes");
      }
      return (0, toHex_js_1.bytesToHex)(result);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.namehash = void 0;
    var concat_js_1 = require_concat();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var encodedLabelToLabelhash_js_1 = require_encodedLabelToLabelhash();
    exports2.namehash = namehash;
  });
  var require_encodeLabelhash = __commonJS2((exports2) => {
    function encodeLabelhash(hash22) {
      return `[${hash22.slice(2)}]`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeLabelhash = void 0;
    exports2.encodeLabelhash = encodeLabelhash;
  });
  var require_labelhash = __commonJS2((exports2) => {
    function labelhash(label) {
      const result = new Uint8Array(32).fill(0);
      if (!label)
        return (0, toHex_js_1.bytesToHex)(result);
      return (0, encodedLabelToLabelhash_js_1.encodedLabelToLabelhash)(label) || (0, keccak256_js_1.keccak256)((0, toBytes_js_1.stringToBytes)(label));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.labelhash = void 0;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var encodedLabelToLabelhash_js_1 = require_encodedLabelToLabelhash();
    exports2.labelhash = labelhash;
  });
  var require_packetToBytes = __commonJS2((exports2) => {
    function packetToBytes(packet) {
      const value = packet.replace(/^\.|\.$/gm, "");
      if (value.length === 0)
        return new Uint8Array(1);
      const bytes22 = new Uint8Array((0, toBytes_js_1.stringToBytes)(value).byteLength + 2);
      let offset = 0;
      const list = value.split(".");
      for (let i = 0; i < list.length; i++) {
        let encoded = (0, toBytes_js_1.stringToBytes)(list[i]);
        if (encoded.byteLength > 255)
          encoded = (0, toBytes_js_1.stringToBytes)((0, encodeLabelhash_js_1.encodeLabelhash)((0, labelhash_js_1.labelhash)(list[i])));
        bytes22[offset] = encoded.length;
        bytes22.set(encoded, offset + 1);
        offset += encoded.length + 1;
      }
      if (bytes22.byteLength !== offset + 1)
        return bytes22.slice(0, offset + 1);
      return bytes22;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.packetToBytes = void 0;
    var toBytes_js_1 = require_toBytes();
    var encodeLabelhash_js_1 = require_encodeLabelhash();
    var labelhash_js_1 = require_labelhash();
    exports2.packetToBytes = packetToBytes;
  });
  var require_getEnsAddress = __commonJS2((exports2) => {
    async function getEnsAddress(client, { blockNumber, blockTag, coinType, name, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      try {
        const functionData = (0, encodeFunctionData_js_1.encodeFunctionData)({
          abi: abis_js_1.addressResolverAbi,
          functionName: "addr",
          ...coinType != null ? { args: [(0, namehash_js_1.namehash)(name), BigInt(coinType)] } : { args: [(0, namehash_js_1.namehash)(name)] }
        });
        const readContractParameters = {
          address: universalResolverAddress,
          abi: abis_js_1.universalResolverResolveAbi,
          functionName: "resolve",
          args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)), functionData],
          blockNumber,
          blockTag
        };
        const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract");
        const res = gatewayUrls ? await readContractAction({
          ...readContractParameters,
          args: [...readContractParameters.args, gatewayUrls]
        }) : await readContractAction(readContractParameters);
        if (res[0] === "0x")
          return null;
        const address = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi: abis_js_1.addressResolverAbi,
          args: coinType != null ? [(0, namehash_js_1.namehash)(name), BigInt(coinType)] : void 0,
          functionName: "addr",
          data: res[0]
        });
        if (address === "0x")
          return null;
        if ((0, trim_js_1.trim)(address) === "0x00")
          return null;
        return address;
      } catch (err) {
        if (strict)
          throw err;
        if ((0, errors_js_1.isNullUniversalResolverError)(err, "resolve"))
          return null;
        throw err;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsAddress = void 0;
    var abis_js_1 = require_abis();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var trim_js_1 = require_trim();
    var toHex_js_1 = require_toHex();
    var errors_js_1 = require_errors2();
    var namehash_js_1 = require_namehash();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    exports2.getEnsAddress = getEnsAddress;
  });
  var require_ens = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EnsAvatarUnsupportedNamespaceError = exports2.EnsAvatarUriResolutionError = exports2.EnsAvatarInvalidNftUriError = exports2.EnsAvatarInvalidMetadataError = void 0;
    var base_js_1 = require_base();
    class EnsAvatarInvalidMetadataError extends base_js_1.BaseError {
      constructor({ data }) {
        super("Unable to extract image from metadata. The metadata may be malformed or invalid.", {
          metaMessages: [
            "- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.",
            "",
            `Provided data: ${JSON.stringify(data)}`
          ]
        });
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "EnsAvatarInvalidMetadataError"
        });
      }
    }
    exports2.EnsAvatarInvalidMetadataError = EnsAvatarInvalidMetadataError;
    class EnsAvatarInvalidNftUriError extends base_js_1.BaseError {
      constructor({ reason }) {
        super(`ENS NFT avatar URI is invalid. ${reason}`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "EnsAvatarInvalidNftUriError"
        });
      }
    }
    exports2.EnsAvatarInvalidNftUriError = EnsAvatarInvalidNftUriError;
    class EnsAvatarUriResolutionError extends base_js_1.BaseError {
      constructor({ uri }) {
        super(`Unable to resolve ENS avatar URI "${uri}". The URI may be malformed, invalid, or does not respond with a valid image.`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "EnsAvatarUriResolutionError"
        });
      }
    }
    exports2.EnsAvatarUriResolutionError = EnsAvatarUriResolutionError;
    class EnsAvatarUnsupportedNamespaceError extends base_js_1.BaseError {
      constructor({ namespace }) {
        super(`ENS NFT avatar namespace "${namespace}" is not supported. Must be "erc721" or "erc1155".`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "EnsAvatarUnsupportedNamespaceError"
        });
      }
    }
    exports2.EnsAvatarUnsupportedNamespaceError = EnsAvatarUnsupportedNamespaceError;
  });
  var require_utils4 = __commonJS2((exports2) => {
    async function isImageUri(uri) {
      try {
        const res = await fetch(uri, { method: "HEAD" });
        if (res.status === 200) {
          const contentType = res.headers.get("content-type");
          return contentType?.startsWith("image/");
        }
        return false;
      } catch (error) {
        if (typeof error === "object" && typeof error.response !== "undefined") {
          return false;
        }
        if (!globalThis.hasOwnProperty("Image"))
          return false;
        return new Promise((resolve) => {
          const img = new Image();
          img.onload = () => {
            resolve(true);
          };
          img.onerror = () => {
            resolve(false);
          };
          img.src = uri;
        });
      }
    }
    function getGateway(custom, defaultGateway) {
      if (!custom)
        return defaultGateway;
      if (custom.endsWith("/"))
        return custom.slice(0, -1);
      return custom;
    }
    function resolveAvatarUri({ uri, gatewayUrls }) {
      const isEncoded = base64Regex.test(uri);
      if (isEncoded)
        return { uri, isOnChain: true, isEncoded };
      const ipfsGateway = getGateway(gatewayUrls?.ipfs, "https://ipfs.io");
      const arweaveGateway = getGateway(gatewayUrls?.arweave, "https://arweave.net");
      const networkRegexMatch = uri.match(networkRegex);
      const { protocol, subpath, target, subtarget = "" } = networkRegexMatch?.groups || {};
      const isIPNS = protocol === "ipns:/" || subpath === "ipns/";
      const isIPFS = protocol === "ipfs:/" || subpath === "ipfs/" || ipfsHashRegex.test(uri);
      if (uri.startsWith("http") && !isIPNS && !isIPFS) {
        let replacedUri = uri;
        if (gatewayUrls?.arweave)
          replacedUri = uri.replace(/https:\/\/arweave.net/g, gatewayUrls?.arweave);
        return { uri: replacedUri, isOnChain: false, isEncoded: false };
      }
      if ((isIPNS || isIPFS) && target) {
        return {
          uri: `${ipfsGateway}/${isIPNS ? "ipns" : "ipfs"}/${target}${subtarget}`,
          isOnChain: false,
          isEncoded: false
        };
      }
      if (protocol === "ar:/" && target) {
        return {
          uri: `${arweaveGateway}/${target}${subtarget || ""}`,
          isOnChain: false,
          isEncoded: false
        };
      }
      let parsedUri = uri.replace(dataURIRegex, "");
      if (parsedUri.startsWith("<svg")) {
        parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;
      }
      if (parsedUri.startsWith("data:") || parsedUri.startsWith("{")) {
        return {
          uri: parsedUri,
          isOnChain: true,
          isEncoded: false
        };
      }
      throw new ens_js_1.EnsAvatarUriResolutionError({ uri });
    }
    function getJsonImage(data) {
      if (typeof data !== "object" || !("image" in data) && !("image_url" in data) && !("image_data" in data)) {
        throw new ens_js_1.EnsAvatarInvalidMetadataError({ data });
      }
      return data.image || data.image_url || data.image_data;
    }
    async function getMetadataAvatarUri({ gatewayUrls, uri }) {
      try {
        const res = await fetch(uri).then((res2) => res2.json());
        const image = await parseAvatarUri({
          gatewayUrls,
          uri: getJsonImage(res)
        });
        return image;
      } catch {
        throw new ens_js_1.EnsAvatarUriResolutionError({ uri });
      }
    }
    async function parseAvatarUri({ gatewayUrls, uri }) {
      const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls });
      if (isOnChain)
        return resolvedURI;
      const isImage = await isImageUri(resolvedURI);
      if (isImage)
        return resolvedURI;
      throw new ens_js_1.EnsAvatarUriResolutionError({ uri });
    }
    function parseNftUri(uri_) {
      let uri = uri_;
      if (uri.startsWith("did:nft:")) {
        uri = uri.replace("did:nft:", "").replace(/_/g, "/");
      }
      const [reference, asset_namespace, tokenID] = uri.split("/");
      const [eip_namespace, chainID] = reference.split(":");
      const [erc_namespace, contractAddress] = asset_namespace.split(":");
      if (!eip_namespace || eip_namespace.toLowerCase() !== "eip155")
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "Only EIP-155 supported" });
      if (!chainID)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "Chain ID not found" });
      if (!contractAddress)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({
          reason: "Contract address not found"
        });
      if (!tokenID)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "Token ID not found" });
      if (!erc_namespace)
        throw new ens_js_1.EnsAvatarInvalidNftUriError({ reason: "ERC namespace not found" });
      return {
        chainID: parseInt(chainID),
        namespace: erc_namespace.toLowerCase(),
        contractAddress,
        tokenID
      };
    }
    async function getNftTokenUri(client, { nft }) {
      if (nft.namespace === "erc721") {
        return (0, readContract_js_1.readContract)(client, {
          address: nft.contractAddress,
          abi: [
            {
              name: "tokenURI",
              type: "function",
              stateMutability: "view",
              inputs: [{ name: "tokenId", type: "uint256" }],
              outputs: [{ name: "", type: "string" }]
            }
          ],
          functionName: "tokenURI",
          args: [BigInt(nft.tokenID)]
        });
      }
      if (nft.namespace === "erc1155") {
        return (0, readContract_js_1.readContract)(client, {
          address: nft.contractAddress,
          abi: [
            {
              name: "uri",
              type: "function",
              stateMutability: "view",
              inputs: [{ name: "_id", type: "uint256" }],
              outputs: [{ name: "", type: "string" }]
            }
          ],
          functionName: "uri",
          args: [BigInt(nft.tokenID)]
        });
      }
      throw new ens_js_1.EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNftTokenUri = exports2.parseNftUri = exports2.parseAvatarUri = exports2.getMetadataAvatarUri = exports2.getJsonImage = exports2.resolveAvatarUri = exports2.getGateway = exports2.isImageUri = void 0;
    var readContract_js_1 = require_readContract();
    var ens_js_1 = require_ens();
    var networkRegex = /(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/;
    var ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/;
    var base64Regex = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/;
    var dataURIRegex = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;
    exports2.isImageUri = isImageUri;
    exports2.getGateway = getGateway;
    exports2.resolveAvatarUri = resolveAvatarUri;
    exports2.getJsonImage = getJsonImage;
    exports2.getMetadataAvatarUri = getMetadataAvatarUri;
    exports2.parseAvatarUri = parseAvatarUri;
    exports2.parseNftUri = parseNftUri;
    exports2.getNftTokenUri = getNftTokenUri;
  });
  var require_parseAvatarRecord = __commonJS2((exports2) => {
    async function parseAvatarRecord(client, { gatewayUrls, record }) {
      if (/eip155:/i.test(record))
        return parseNftAvatarUri(client, { gatewayUrls, record });
      return (0, utils_js_1.parseAvatarUri)({ uri: record, gatewayUrls });
    }
    async function parseNftAvatarUri(client, { gatewayUrls, record }) {
      const nft = (0, utils_js_1.parseNftUri)(record);
      const nftUri = await (0, utils_js_1.getNftTokenUri)(client, { nft });
      const { uri: resolvedNftUri, isOnChain, isEncoded } = (0, utils_js_1.resolveAvatarUri)({ uri: nftUri, gatewayUrls });
      if (isOnChain && (resolvedNftUri.includes("data:application/json;base64,") || resolvedNftUri.startsWith("{"))) {
        const encodedJson = isEncoded ? atob(resolvedNftUri.replace("data:application/json;base64,", "")) : resolvedNftUri;
        const decoded = JSON.parse(encodedJson);
        return (0, utils_js_1.parseAvatarUri)({ uri: (0, utils_js_1.getJsonImage)(decoded), gatewayUrls });
      }
      let uriTokenId = nft.tokenID;
      if (nft.namespace === "erc1155")
        uriTokenId = uriTokenId.replace("0x", "").padStart(64, "0");
      return (0, utils_js_1.getMetadataAvatarUri)({
        gatewayUrls,
        uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId)
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAvatarRecord = void 0;
    var utils_js_1 = require_utils4();
    exports2.parseAvatarRecord = parseAvatarRecord;
  });
  var require_getEnsText = __commonJS2((exports2) => {
    async function getEnsText(client, { blockNumber, blockTag, name, key, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      try {
        const readContractParameters = {
          address: universalResolverAddress,
          abi: abis_js_1.universalResolverResolveAbi,
          functionName: "resolve",
          args: [
            (0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)),
            (0, encodeFunctionData_js_1.encodeFunctionData)({
              abi: abis_js_1.textResolverAbi,
              functionName: "text",
              args: [(0, namehash_js_1.namehash)(name), key]
            })
          ],
          blockNumber,
          blockTag
        };
        const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract");
        const res = gatewayUrls ? await readContractAction({
          ...readContractParameters,
          args: [...readContractParameters.args, gatewayUrls]
        }) : await readContractAction(readContractParameters);
        if (res[0] === "0x")
          return null;
        const record = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
          abi: abis_js_1.textResolverAbi,
          functionName: "text",
          data: res[0]
        });
        return record === "" ? null : record;
      } catch (err) {
        if (strict)
          throw err;
        if ((0, errors_js_1.isNullUniversalResolverError)(err, "resolve"))
          return null;
        throw err;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsText = void 0;
    var abis_js_1 = require_abis();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var errors_js_1 = require_errors2();
    var namehash_js_1 = require_namehash();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    exports2.getEnsText = getEnsText;
  });
  var require_getEnsAvatar = __commonJS2((exports2) => {
    async function getEnsAvatar(client, { blockNumber, blockTag, assetGatewayUrls, name, gatewayUrls, strict, universalResolverAddress }) {
      const record = await (0, getAction_js_1.getAction)(client, getEnsText_js_1.getEnsText, "getEnsText")({
        blockNumber,
        blockTag,
        key: "avatar",
        name,
        universalResolverAddress,
        gatewayUrls,
        strict
      });
      if (!record)
        return null;
      try {
        return await (0, parseAvatarRecord_js_1.parseAvatarRecord)(client, {
          record,
          gatewayUrls: assetGatewayUrls
        });
      } catch {
        return null;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsAvatar = void 0;
    var parseAvatarRecord_js_1 = require_parseAvatarRecord();
    var getAction_js_1 = require_getAction();
    var getEnsText_js_1 = require_getEnsText();
    exports2.getEnsAvatar = getEnsAvatar;
  });
  var require_getEnsName = __commonJS2((exports2) => {
    async function getEnsName(client, { address, blockNumber, blockTag, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;
      try {
        const readContractParameters = {
          address: universalResolverAddress,
          abi: abis_js_1.universalResolverReverseAbi,
          functionName: "reverse",
          args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(reverseNode))],
          blockNumber,
          blockTag
        };
        const readContractAction = (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract");
        const [name, resolvedAddress] = gatewayUrls ? await readContractAction({
          ...readContractParameters,
          args: [...readContractParameters.args, gatewayUrls]
        }) : await readContractAction(readContractParameters);
        if (address.toLowerCase() !== resolvedAddress.toLowerCase())
          return null;
        return name;
      } catch (err) {
        if (strict)
          throw err;
        if ((0, errors_js_1.isNullUniversalResolverError)(err, "reverse"))
          return null;
        throw err;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsName = void 0;
    var abis_js_1 = require_abis();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var errors_js_1 = require_errors2();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    exports2.getEnsName = getEnsName;
  });
  var require_getEnsResolver = __commonJS2((exports2) => {
    async function getEnsResolver(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_ }) {
      let universalResolverAddress = universalResolverAddress_;
      if (!universalResolverAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. universalResolverAddress is required.");
        universalResolverAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "ensUniversalResolver"
        });
      }
      const [resolverAddress] = await (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract")({
        address: universalResolverAddress,
        abi: [
          {
            inputs: [{ type: "bytes" }],
            name: "findResolver",
            outputs: [{ type: "address" }, { type: "bytes32" }],
            stateMutability: "view",
            type: "function"
          }
        ],
        functionName: "findResolver",
        args: [(0, toHex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name))],
        blockNumber,
        blockTag
      });
      return resolverAddress;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnsResolver = void 0;
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var toHex_js_1 = require_toHex();
    var packetToBytes_js_1 = require_packetToBytes();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    exports2.getEnsResolver = getEnsResolver;
  });
  var require_createBlockFilter = __commonJS2((exports2) => {
    async function createBlockFilter(client) {
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newBlockFilter"
      });
      const id = await client.request({
        method: "eth_newBlockFilter"
      });
      return { id, request: getRequest(id), type: "block" };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createBlockFilter = void 0;
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    exports2.createBlockFilter = createBlockFilter;
  });
  var require_createEventFilter = __commonJS2((exports2) => {
    async function createEventFilter(client, { address, args, event, events: events_, fromBlock, strict, toBlock } = {}) {
      const events = events_ ?? (event ? [event] : void 0);
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newFilter"
      });
      let topics = [];
      if (events) {
        topics = [
          events.flatMap((event2) => (0, encodeEventTopics_js_1.encodeEventTopics)({
            abi: [event2],
            eventName: event2.name,
            args
          }))
        ];
        if (event)
          topics = topics[0];
      }
      const id = await client.request({
        method: "eth_newFilter",
        params: [
          {
            address,
            fromBlock: typeof fromBlock === "bigint" ? (0, toHex_js_1.numberToHex)(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? (0, toHex_js_1.numberToHex)(toBlock) : toBlock,
            ...topics.length ? { topics } : {}
          }
        ]
      });
      return {
        abi: events,
        args,
        eventName: event ? event.name : void 0,
        fromBlock,
        id,
        request: getRequest(id),
        strict: Boolean(strict),
        toBlock,
        type: "event"
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createEventFilter = void 0;
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    var toHex_js_1 = require_toHex();
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    exports2.createEventFilter = createEventFilter;
  });
  var require_createPendingTransactionFilter = __commonJS2((exports2) => {
    async function createPendingTransactionFilter(client) {
      const getRequest = (0, createFilterRequestScope_js_1.createFilterRequestScope)(client, {
        method: "eth_newPendingTransactionFilter"
      });
      const id = await client.request({
        method: "eth_newPendingTransactionFilter"
      });
      return { id, request: getRequest(id), type: "transaction" };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPendingTransactionFilter = void 0;
    var createFilterRequestScope_js_1 = require_createFilterRequestScope();
    exports2.createPendingTransactionFilter = createPendingTransactionFilter;
  });
  var require_getBalance = __commonJS2((exports2) => {
    async function getBalance2(client, { address, blockNumber, blockTag = "latest" }) {
      const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const balance = await client.request({
        method: "eth_getBalance",
        params: [address, blockNumberHex || blockTag]
      });
      return BigInt(balance);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBalance = void 0;
    var toHex_js_1 = require_toHex();
    exports2.getBalance = getBalance2;
  });
  var require_getBlobBaseFee = __commonJS2((exports2) => {
    async function getBlobBaseFee(client) {
      const baseFee = await client.request({
        method: "eth_blobBaseFee"
      });
      return BigInt(baseFee);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlobBaseFee = void 0;
    exports2.getBlobBaseFee = getBlobBaseFee;
  });
  var require_getBlockTransactionCount = __commonJS2((exports2) => {
    async function getBlockTransactionCount(client, { blockHash, blockNumber, blockTag = "latest" } = {}) {
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      let count;
      if (blockHash) {
        count = await client.request({
          method: "eth_getBlockTransactionCountByHash",
          params: [blockHash]
        });
      } else {
        count = await client.request({
          method: "eth_getBlockTransactionCountByNumber",
          params: [blockNumberHex || blockTag]
        });
      }
      return (0, fromHex_js_1.hexToNumber)(count);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBlockTransactionCount = void 0;
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    exports2.getBlockTransactionCount = getBlockTransactionCount;
  });
  var require_getBytecode = __commonJS2((exports2) => {
    async function getBytecode(client, { address, blockNumber, blockTag = "latest" }) {
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const hex = await client.request({
        method: "eth_getCode",
        params: [address, blockNumberHex || blockTag]
      });
      if (hex === "0x")
        return;
      return hex;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBytecode = void 0;
    var toHex_js_1 = require_toHex();
    exports2.getBytecode = getBytecode;
  });
  var require_feeHistory = __commonJS2((exports2) => {
    function formatFeeHistory(feeHistory) {
      return {
        baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),
        gasUsedRatio: feeHistory.gasUsedRatio,
        oldestBlock: BigInt(feeHistory.oldestBlock),
        reward: feeHistory.reward?.map((reward) => reward.map((value) => BigInt(value)))
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatFeeHistory = void 0;
    exports2.formatFeeHistory = formatFeeHistory;
  });
  var require_getFeeHistory = __commonJS2((exports2) => {
    async function getFeeHistory(client, { blockCount, blockNumber, blockTag = "latest", rewardPercentiles }) {
      const blockNumberHex = blockNumber ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const feeHistory = await client.request({
        method: "eth_feeHistory",
        params: [
          (0, toHex_js_1.numberToHex)(blockCount),
          blockNumberHex || blockTag,
          rewardPercentiles
        ]
      });
      return (0, feeHistory_js_1.formatFeeHistory)(feeHistory);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFeeHistory = void 0;
    var toHex_js_1 = require_toHex();
    var feeHistory_js_1 = require_feeHistory();
    exports2.getFeeHistory = getFeeHistory;
  });
  var require_getFilterLogs = __commonJS2((exports2) => {
    async function getFilterLogs(_client, { filter }) {
      const strict = filter.strict ?? false;
      const logs = await filter.request({
        method: "eth_getFilterLogs",
        params: [filter.id]
      });
      const formattedLogs = logs.map((log) => (0, log_js_1.formatLog)(log));
      if (!filter.abi)
        return formattedLogs;
      return (0, parseEventLogs_js_1.parseEventLogs)({
        abi: filter.abi,
        logs: formattedLogs,
        strict
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFilterLogs = void 0;
    var parseEventLogs_js_1 = require_parseEventLogs();
    var log_js_1 = require_log();
    exports2.getFilterLogs = getFilterLogs;
  });
  var require_extractChain = __commonJS2((exports2) => {
    function extractChain({ chains, id }) {
      return chains.find((chain) => chain.id === id);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractChain = void 0;
    exports2.extractChain = extractChain;
  });
  var require_regex2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.integerRegex = exports2.bytesRegex = exports2.arrayRegex = void 0;
    exports2.arrayRegex = /^(.*)\[([0-9]*)\]$/;
    exports2.bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
    exports2.integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
  });
  var require_constants = __commonJS2((exports2, module2) => {
    module2.exports = {
      BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
      EMPTY_BUFFER: Buffer.alloc(0),
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      kForOnEventAttribute: Symbol("kIsForOnEventAttribute"),
      kListener: Symbol("kListener"),
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      NOOP: () => {
      }
    };
  });
  var require_buffer_util = __commonJS2((exports2, module2) => {
    function concat22(list, totalLength) {
      if (list.length === 0)
        return EMPTY_BUFFER;
      if (list.length === 1)
        return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i = 0; i < list.length; i++) {
        const buf = list[i];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength) {
        return new FastBuffer(target.buffer, target.byteOffset, offset);
      }
      return target;
    }
    function _mask(source, mask, output22, offset, length) {
      for (let i = 0; i < length; i++) {
        output22[offset + i] = source[i] ^ mask[i & 3];
      }
    }
    function _unmask(buffer2, mask) {
      for (let i = 0; i < buffer2.length; i++) {
        buffer2[i] ^= mask[i & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.length === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data))
        return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = new FastBuffer(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    var { EMPTY_BUFFER } = require_constants();
    var FastBuffer = Buffer[Symbol.species];
    module2.exports = {
      concat: concat22,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
    if (!process.env.WS_NO_BUFFER_UTIL) {
      try {
        const bufferUtil = (() => {
          throw new Error(`Cannot require module "bufferutil"`);
        })();
        module2.exports.mask = function(source, mask, output22, offset, length) {
          if (length < 48)
            _mask(source, mask, output22, offset, length);
          else
            bufferUtil.mask(source, mask, output22, offset, length);
        };
        module2.exports.unmask = function(buffer2, mask) {
          if (buffer2.length < 32)
            _unmask(buffer2, mask);
          else
            bufferUtil.unmask(buffer2, mask);
        };
      } catch (e) {
      }
    }
  });
  var require_limiter = __commonJS2((exports2, module2) => {
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    class Limiter {
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      [kRun]() {
        if (this.pending === this.concurrency)
          return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    }
    module2.exports = Limiter;
  });
  var require_permessage_deflate = __commonJS2((exports2, module2) => {
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err) {
      this[kPerMessageDeflate]._inflate = null;
      err[kStatusCode] = 1007;
      this[kCallback](err);
    }
    var zlib = __require5("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode } = require_constants();
    var FastBuffer = Buffer[Symbol.species];
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    class PerMessageDeflate {
      constructor(options2, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options2 || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(new Error("The deflate stream was closed while data was being processed"));
          }
        }
      }
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
        }
        return params;
      }
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key) => {
            let value = params[key];
            if (value.length > 1) {
              throw new Error(`Parameter "${key}" must have only a single value`);
            }
            value = value[0];
            if (key === "client_max_window_bits") {
              if (value !== true) {
                const num2 = +value;
                if (!Number.isInteger(num2) || num2 < 8 || num2 > 15) {
                  throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
                }
                value = num2;
              } else if (!this._isServer) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
            } else if (key === "server_max_window_bits") {
              const num2 = +value;
              if (!Number.isInteger(num2) || num2 < 8 || num2 > 15) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
              value = num2;
            } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
              if (value !== true) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
            } else {
              throw new Error(`Unknown parameter "${key}"`);
            }
            params[key] = value;
          });
        });
        return configurations;
      }
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err, result) => {
            done();
            callback(err, result);
          });
        });
      }
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin)
          this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err = this._inflate[kError];
          if (err) {
            this._inflate.close();
            this._inflate = null;
            callback(err);
            return;
          }
          const data2 = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);
          if (fin) {
            data2 = new FastBuffer(data2.buffer, data2.byteOffset, data2.length - 4);
          }
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    }
    module2.exports = PerMessageDeflate;
  });
  var require_validation = __commonJS2((exports2, module2) => {
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i = 0;
      while (i < len) {
        if ((buf[i] & 128) === 0) {
          i++;
        } else if ((buf[i] & 224) === 192) {
          if (i + 1 === len || (buf[i + 1] & 192) !== 128 || (buf[i] & 254) === 192) {
            return false;
          }
          i += 2;
        } else if ((buf[i] & 240) === 224) {
          if (i + 2 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || buf[i] === 224 && (buf[i + 1] & 224) === 128 || buf[i] === 237 && (buf[i + 1] & 224) === 160) {
            return false;
          }
          i += 3;
        } else if ((buf[i] & 248) === 240) {
          if (i + 3 >= len || (buf[i + 1] & 192) !== 128 || (buf[i + 2] & 192) !== 128 || (buf[i + 3] & 192) !== 128 || buf[i] === 240 && (buf[i + 1] & 240) === 128 || buf[i] === 244 && buf[i + 1] > 143 || buf[i] > 244) {
            return false;
          }
          i += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    var { isUtf8 } = __require5("buffer");
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
    ];
    module2.exports = {
      isValidStatusCode,
      isValidUTF8: _isValidUTF8,
      tokenChars
    };
    if (isUtf8) {
      module2.exports.isValidUTF8 = function(buf) {
        return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
      };
    } else if (!process.env.WS_NO_UTF_8_VALIDATE) {
      try {
        const isValidUTF8 = (() => {
          throw new Error(`Cannot require module "utf-8-validate"`);
        })();
        module2.exports.isValidUTF8 = function(buf) {
          return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
        };
      } catch (e) {
      }
    }
  });
  var require_receiver = __commonJS2((exports2, module2) => {
    function error(ErrorCtor, message, prefix, statusCode, errorCode) {
      const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);
      Error.captureStackTrace(err, error);
      err.code = errorCode;
      err[kStatusCode] = statusCode;
      return err;
    }
    var { Writable } = __require5("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants();
    var { concat: concat22, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var FastBuffer = Buffer[Symbol.species];
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    class Receiver extends Writable {
      constructor(options2 = {}) {
        super();
        this._binaryType = options2.binaryType || BINARY_TYPES[0];
        this._extensions = options2.extensions || {};
        this._isServer = !!options2.isServer;
        this._maxPayload = options2.maxPayload | 0;
        this._skipUTF8Validation = !!options2.skipUTF8Validation;
        this[kWebSocket] = void 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._state = GET_INFO;
        this._loop = false;
      }
      _write(chunk, encoding, cb) {
        if (this._opcode === 8 && this._state == GET_INFO)
          return cb();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb);
      }
      consume(n) {
        this._bufferedBytes -= n;
        if (n === this._buffers[0].length)
          return this._buffers.shift();
        if (n < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = new FastBuffer(buf.buffer, buf.byteOffset + n, buf.length - n);
          return new FastBuffer(buf.buffer, buf.byteOffset, n);
        }
        const dst = Buffer.allocUnsafe(n);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n;
          if (n >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
            this._buffers[0] = new FastBuffer(buf.buffer, buf.byteOffset + n, buf.length - n);
          }
          n -= buf.length;
        } while (n > 0);
        return dst;
      }
      startLoop(cb) {
        let err;
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              err = this.getInfo();
              break;
            case GET_PAYLOAD_LENGTH_16:
              err = this.getPayloadLength16();
              break;
            case GET_PAYLOAD_LENGTH_64:
              err = this.getPayloadLength64();
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              err = this.getData(cb);
              break;
            default:
              this._loop = false;
              return;
          }
        } while (this._loop);
        cb(err);
      }
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          this._loop = false;
          return error(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          this._loop = false;
          return error(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            this._loop = false;
            return error(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          }
          if (!this._fragmented) {
            this._loop = false;
            return error(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            this._loop = false;
            return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            this._loop = false;
            return error(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
          }
          if (compressed) {
            this._loop = false;
            return error(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            this._loop = false;
            return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
          }
        } else {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
        }
        if (!this._fin && !this._fragmented)
          this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            this._loop = false;
            return error(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
          }
        } else if (this._masked) {
          this._loop = false;
          return error(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
        }
        if (this._payloadLength === 126)
          this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127)
          this._state = GET_PAYLOAD_LENGTH_64;
        else
          return this.haveLength();
      }
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        return this.haveLength();
      }
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num2 = buf.readUInt32BE(0);
        if (num2 > Math.pow(2, 53 - 32) - 1) {
          this._loop = false;
          return error(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH");
        }
        this._payloadLength = num2 * Math.pow(2, 32) + buf.readUInt32BE(4);
        return this.haveLength();
      }
      haveLength() {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            this._loop = false;
            return error(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
          }
        }
        if (this._masked)
          this._state = GET_MASK;
        else
          this._state = GET_DATA;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      getData(cb) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {
            unmask(data, this._mask);
          }
        }
        if (this._opcode > 7)
          return this.controlMessage(data);
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        return this.dataMessage();
      }
      decompress(data, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err, buf) => {
          if (err)
            return cb(err);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              return cb(error(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"));
            }
            this._fragments.push(buf);
          }
          const er = this.dataMessage();
          if (er)
            return cb(er);
          this.startLoop(cb);
        });
      }
      dataMessage() {
        if (this._fin) {
          const messageLength = this._messageLength;
          const fragments = this._fragments;
          this._totalPayloadLength = 0;
          this._messageLength = 0;
          this._fragmented = 0;
          this._fragments = [];
          if (this._opcode === 2) {
            let data;
            if (this._binaryType === "nodebuffer") {
              data = concat22(fragments, messageLength);
            } else if (this._binaryType === "arraybuffer") {
              data = toArrayBuffer(concat22(fragments, messageLength));
            } else {
              data = fragments;
            }
            this.emit("message", data, true);
          } else {
            const buf = concat22(fragments, messageLength);
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              this._loop = false;
              return error(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            }
            this.emit("message", buf, false);
          }
        }
        this._state = GET_INFO;
      }
      controlMessage(data) {
        if (this._opcode === 8) {
          this._loop = false;
          if (data.length === 0) {
            this.emit("conclude", 1005, EMPTY_BUFFER);
            this.end();
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              return error(RangeError, `invalid status code ${code}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
            }
            const buf = new FastBuffer(data.buffer, data.byteOffset + 2, data.length - 2);
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              return error(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            }
            this.emit("conclude", code, buf);
            this.end();
          }
        } else if (this._opcode === 9) {
          this.emit("ping", data);
        } else {
          this.emit("pong", data);
        }
        this._state = GET_INFO;
      }
    }
    module2.exports = Receiver;
  });
  var require_sender = __commonJS2((exports2, module2) => {
    var net = __require5("net");
    var tls = __require5("tls");
    var { randomFillSync } = __require5("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER } = require_constants();
    var { isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var kByteLength = Symbol("kByteLength");
    var maskBuffer = Buffer.alloc(4);
    class Sender {
      constructor(socket, extensions, generateMask) {
        this._extensions = extensions || {};
        if (generateMask) {
          this._generateMask = generateMask;
          this._maskBuffer = Buffer.alloc(4);
        }
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._deflating = false;
        this._queue = [];
      }
      static frame(data, options2) {
        let mask;
        let merge2 = false;
        let offset = 2;
        let skipMasking = false;
        if (options2.mask) {
          mask = options2.maskBuffer || maskBuffer;
          if (options2.generateMask) {
            options2.generateMask(mask);
          } else {
            randomFillSync(mask, 0, 4);
          }
          skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
          offset = 6;
        }
        let dataLength;
        if (typeof data === "string") {
          if ((!options2.mask || skipMasking) && options2[kByteLength] !== void 0) {
            dataLength = options2[kByteLength];
          } else {
            data = Buffer.from(data);
            dataLength = data.length;
          }
        } else {
          dataLength = data.length;
          merge2 = options2.mask && options2.readOnly && !skipMasking;
        }
        let payloadLength = dataLength;
        if (dataLength >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (dataLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge2 ? dataLength + offset : offset);
        target[0] = options2.fin ? options2.opcode | 128 : options2.opcode;
        if (options2.rsv1)
          target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(dataLength, 2);
        } else if (payloadLength === 127) {
          target[2] = target[3] = 0;
          target.writeUIntBE(dataLength, 4, 6);
        }
        if (!options2.mask)
          return [target, data];
        target[1] |= 128;
        target[offset - 4] = mask[0];
        target[offset - 3] = mask[1];
        target[offset - 2] = mask[2];
        target[offset - 1] = mask[3];
        if (skipMasking)
          return [target, data];
        if (merge2) {
          applyMask(data, mask, target, offset, dataLength);
          return [target];
        }
        applyMask(data, mask, data, 0, dataLength);
        return [target, data];
      }
      close(code, data, mask, cb) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || !data.length) {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          if (typeof data === "string") {
            buf.write(data, 2);
          } else {
            buf.set(data, 2);
          }
        }
        const options2 = {
          [kByteLength]: buf.length,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 8,
          readOnly: false,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, buf, false, options2, cb]);
        } else {
          this.sendFrame(Sender.frame(buf, options2), cb);
        }
      }
      ping(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options2 = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 9,
          readOnly,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options2, cb]);
        } else {
          this.sendFrame(Sender.frame(data, options2), cb);
        }
      }
      pong(data, mask, cb) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options2 = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask,
          maskBuffer: this._maskBuffer,
          opcode: 10,
          readOnly,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options2, cb]);
        } else {
          this.sendFrame(Sender.frame(data, options2), cb);
        }
      }
      send(data, options2, cb) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options2.binary ? 2 : 1;
        let rsv1 = options2.compress;
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? "server_no_context_takeover" : "client_no_context_takeover"]) {
            rsv1 = byteLength >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options2.fin)
          this._firstFragment = true;
        if (perMessageDeflate) {
          const opts = {
            [kByteLength]: byteLength,
            fin: options2.fin,
            generateMask: this._generateMask,
            mask: options2.mask,
            maskBuffer: this._maskBuffer,
            opcode,
            readOnly,
            rsv1
          };
          if (this._deflating) {
            this.enqueue([this.dispatch, data, this._compress, opts, cb]);
          } else {
            this.dispatch(data, this._compress, opts, cb);
          }
        } else {
          this.sendFrame(Sender.frame(data, {
            [kByteLength]: byteLength,
            fin: options2.fin,
            generateMask: this._generateMask,
            mask: options2.mask,
            maskBuffer: this._maskBuffer,
            opcode,
            readOnly,
            rsv1: false
          }), cb);
        }
      }
      dispatch(data, compress, options2, cb) {
        if (!compress) {
          this.sendFrame(Sender.frame(data, options2), cb);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += options2[kByteLength];
        this._deflating = true;
        perMessageDeflate.compress(data, options2.fin, (_, buf) => {
          if (this._socket.destroyed) {
            const err = new Error("The socket was closed while data was being compressed");
            if (typeof cb === "function")
              cb(err);
            for (let i = 0; i < this._queue.length; i++) {
              const params = this._queue[i];
              const callback = params[params.length - 1];
              if (typeof callback === "function")
                callback(err);
            }
            return;
          }
          this._bufferedBytes -= options2[kByteLength];
          this._deflating = false;
          options2.readOnly = false;
          this.sendFrame(Sender.frame(buf, options2), cb);
          this.dequeue();
        });
      }
      dequeue() {
        while (!this._deflating && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[3][kByteLength];
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      enqueue(params) {
        this._bufferedBytes += params[3][kByteLength];
        this._queue.push(params);
      }
      sendFrame(list, cb) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb);
        }
      }
    }
    module2.exports = Sender;
  });
  var require_event_target = __commonJS2((exports2, module2) => {
    function callListener(listener, thisArg, event) {
      if (typeof listener === "object" && listener.handleEvent) {
        listener.handleEvent.call(listener, event);
      } else {
        listener.call(thisArg, event);
      }
    }
    var { kForOnEventAttribute, kListener } = require_constants();
    var kCode = Symbol("kCode");
    var kData = Symbol("kData");
    var kError = Symbol("kError");
    var kMessage = Symbol("kMessage");
    var kReason = Symbol("kReason");
    var kTarget = Symbol("kTarget");
    var kType = Symbol("kType");
    var kWasClean = Symbol("kWasClean");
    class Event {
      constructor(type) {
        this[kTarget] = null;
        this[kType] = type;
      }
      get target() {
        return this[kTarget];
      }
      get type() {
        return this[kType];
      }
    }
    Object.defineProperty(Event.prototype, "target", { enumerable: true });
    Object.defineProperty(Event.prototype, "type", { enumerable: true });
    class CloseEvent extends Event {
      constructor(type, options2 = {}) {
        super(type);
        this[kCode] = options2.code === void 0 ? 0 : options2.code;
        this[kReason] = options2.reason === void 0 ? "" : options2.reason;
        this[kWasClean] = options2.wasClean === void 0 ? false : options2.wasClean;
      }
      get code() {
        return this[kCode];
      }
      get reason() {
        return this[kReason];
      }
      get wasClean() {
        return this[kWasClean];
      }
    }
    Object.defineProperty(CloseEvent.prototype, "code", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "reason", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "wasClean", { enumerable: true });
    class ErrorEvent extends Event {
      constructor(type, options2 = {}) {
        super(type);
        this[kError] = options2.error === void 0 ? null : options2.error;
        this[kMessage] = options2.message === void 0 ? "" : options2.message;
      }
      get error() {
        return this[kError];
      }
      get message() {
        return this[kMessage];
      }
    }
    Object.defineProperty(ErrorEvent.prototype, "error", { enumerable: true });
    Object.defineProperty(ErrorEvent.prototype, "message", { enumerable: true });
    class MessageEvent extends Event {
      constructor(type, options2 = {}) {
        super(type);
        this[kData] = options2.data === void 0 ? null : options2.data;
      }
      get data() {
        return this[kData];
      }
    }
    Object.defineProperty(MessageEvent.prototype, "data", { enumerable: true });
    var EventTarget = {
      addEventListener(type, handler, options2 = {}) {
        for (const listener of this.listeners(type)) {
          if (!options2[kForOnEventAttribute] && listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            return;
          }
        }
        let wrapper;
        if (type === "message") {
          wrapper = function onMessage(data, isBinary) {
            const event = new MessageEvent("message", {
              data: isBinary ? data : data.toString()
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "close") {
          wrapper = function onClose(code, message) {
            const event = new CloseEvent("close", {
              code,
              reason: message.toString(),
              wasClean: this._closeFrameReceived && this._closeFrameSent
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "error") {
          wrapper = function onError(error) {
            const event = new ErrorEvent("error", {
              error,
              message: error.message
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type === "open") {
          wrapper = function onOpen() {
            const event = new Event("open");
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else {
          return;
        }
        wrapper[kForOnEventAttribute] = !!options2[kForOnEventAttribute];
        wrapper[kListener] = handler;
        if (options2.once) {
          this.once(type, wrapper);
        } else {
          this.on(type, wrapper);
        }
      },
      removeEventListener(type, handler) {
        for (const listener of this.listeners(type)) {
          if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            this.removeListener(type, listener);
            break;
          }
        }
      }
    };
    module2.exports = {
      CloseEvent,
      ErrorEvent,
      Event,
      EventTarget,
      MessageEvent
    };
  });
  var require_extension = __commonJS2((exports2, module2) => {
    function push(dest, name, elem) {
      if (dest[name] === void 0)
        dest[name] = [elem];
      else
        dest[name].push(elem);
    }
    function parse2(header) {
      const offers = /* @__PURE__ */ Object.create(null);
      let params = /* @__PURE__ */ Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let code = -1;
      let end = -1;
      let i = 0;
      for (; i < header.length; i++) {
        code = header.charCodeAt(i);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (i !== 0 && (code === 32 || code === 9)) {
            if (end === -1 && start !== -1)
              end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1)
              end = i;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = /* @__PURE__ */ Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1)
              end = i;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (start === -1)
              start = i;
            else if (!mustUnescape)
              mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1)
                start = i;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
          } else if (code === 34 && header.charCodeAt(i - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1)
              end = i;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i}`);
            }
            if (end === -1)
              end = i;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        }
      }
      if (start === -1 || inQuotes || code === 32 || code === 9) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1)
        end = i;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations))
          configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(Object.keys(params).map((k) => {
            let values = params[k];
            if (!Array.isArray(values))
              values = [values];
            return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
          })).join("; ");
        }).join(", ");
      }).join(", ");
    }
    var { tokenChars } = require_validation();
    module2.exports = { format, parse: parse2 };
  });
  var require_websocket = __commonJS2((exports2, module2) => {
    function initAsClient(websocket, address, protocols, options2) {
      const opts = {
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        skipUTF8Validation: false,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options2,
        createConnection: void 0,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: "GET",
        host: void 0,
        path: void 0,
        port: void 0
      };
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`);
      }
      let parsedUrl;
      if (address instanceof URL2) {
        parsedUrl = address;
        websocket._url = address.href;
      } else {
        try {
          parsedUrl = new URL2(address);
        } catch (e) {
          throw new SyntaxError(`Invalid URL: ${address}`);
        }
        websocket._url = address;
      }
      const isSecure = parsedUrl.protocol === "wss:";
      const isIpcUrl = parsedUrl.protocol === "ws+unix:";
      let invalidUrlMessage;
      if (parsedUrl.protocol !== "ws:" && !isSecure && !isIpcUrl) {
        invalidUrlMessage = `The URL's protocol must be one of "ws:", "wss:", or "ws+unix:"`;
      } else if (isIpcUrl && !parsedUrl.pathname) {
        invalidUrlMessage = "The URL's pathname is empty";
      } else if (parsedUrl.hash) {
        invalidUrlMessage = "The URL contains a fragment identifier";
      }
      if (invalidUrlMessage) {
        const err = new SyntaxError(invalidUrlMessage);
        if (websocket._redirects === 0) {
          throw err;
        } else {
          emitErrorAndClose(websocket, err);
          return;
        }
      }
      const defaultPort = isSecure ? 443 : 80;
      const key = randomBytes2(16).toString("base64");
      const request = isSecure ? https.request : http2.request;
      const protocolSet = /* @__PURE__ */ new Set();
      let perMessageDeflate;
      opts.createConnection = isSecure ? tlsConnect : netConnect;
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = {
        ...opts.headers,
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key,
        Connection: "Upgrade",
        Upgrade: "websocket"
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);
        opts.headers["Sec-WebSocket-Extensions"] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols.length) {
        for (const protocol of protocols) {
          if (typeof protocol !== "string" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {
            throw new SyntaxError("An invalid or duplicated subprotocol was specified");
          }
          protocolSet.add(protocol);
        }
        opts.headers["Sec-WebSocket-Protocol"] = protocols.join(",");
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isIpcUrl) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      let req;
      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalIpc = isIpcUrl;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;
          const headers = options2 && options2.headers;
          options2 = { ...options2, headers: {} };
          if (headers) {
            for (const [key2, value] of Object.entries(headers)) {
              options2.headers[key2.toLowerCase()] = value;
            }
          }
        } else if (websocket.listenerCount("redirect") === 0) {
          const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;
          if (!isSameHost || websocket._originalSecure && !isSecure) {
            delete opts.headers.authorization;
            delete opts.headers.cookie;
            if (!isSameHost)
              delete opts.headers.host;
            opts.auth = void 0;
          }
        }
        if (opts.auth && !options2.headers.authorization) {
          options2.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
        }
        req = websocket._req = request(opts);
        if (websocket._redirects) {
          websocket.emit("redirect", websocket.url, req);
        }
      } else {
        req = websocket._req = request(opts);
      }
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err) => {
        if (req === null || req[kAborted])
          return;
        req = websocket._req = null;
        emitErrorAndClose(websocket, err);
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          let addr;
          try {
            addr = new URL2(location, address);
          } catch (e) {
            const err = new SyntaxError(`Invalid URL: ${location}`);
            emitErrorAndClose(websocket, err);
            return;
          }
          initAsClient(websocket, addr, protocols, options2);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket2.CONNECTING)
          return;
        req = websocket._req = null;
        if (res.headers.upgrade.toLowerCase() !== "websocket") {
          abortHandshake(websocket, socket, "Invalid Upgrade header");
          return;
        }
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        let protError;
        if (serverProt !== void 0) {
          if (!protocolSet.size) {
            protError = "Server sent a subprotocol but none was requested";
          } else if (!protocolSet.has(serverProt)) {
            protError = "Server sent an invalid subprotocol";
          }
        } else if (protocolSet.size) {
          protError = "Server sent no subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt)
          websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse2(secWebSocketExtensions);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
            const message = "Server indicated an extension that was not requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
        websocket.setSocket(socket, head, {
          generateMask: opts.generateMask,
          maxPayload: opts.maxPayload,
          skipUTF8Validation: opts.skipUTF8Validation
        });
      });
      if (opts.finishRequest) {
        opts.finishRequest(req, websocket);
      } else {
        req.end();
      }
    }
    function emitErrorAndClose(websocket, err) {
      websocket._readyState = WebSocket2.CLOSING;
      websocket.emit("error", err);
      websocket.emitClose();
    }
    function netConnect(options2) {
      options2.path = options2.socketPath;
      return net.connect(options2);
    }
    function tlsConnect(options2) {
      options2.path = void 0;
      if (!options2.servername && options2.servername !== "") {
        options2.servername = net.isIP(options2.host) ? "" : options2.host;
      }
      return tls.connect(options2);
    }
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket2.CLOSING;
      const err = new Error(message);
      Error.captureStackTrace(err, abortHandshake);
      if (stream.setHeader) {
        stream[kAborted] = true;
        stream.abort();
        if (stream.socket && !stream.socket.destroyed) {
          stream.socket.destroy();
        }
        process.nextTick(emitErrorAndClose, websocket, err);
      } else {
        stream.destroy(err);
        stream.once("error", websocket.emit.bind(websocket, "error"));
        stream.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb) {
      if (data) {
        const length = toBuffer(data).length;
        if (websocket._socket)
          websocket._sender._bufferedBytes += length;
        else
          websocket._bufferedAmount += length;
      }
      if (cb) {
        const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`);
        process.nextTick(cb, err);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (websocket._socket[kWebSocket] === void 0)
        return;
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      if (code === 1005)
        websocket.close();
      else
        websocket.close(code, reason);
    }
    function receiverOnDrain() {
      const websocket = this[kWebSocket];
      if (!websocket.isPaused)
        websocket._socket.resume();
    }
    function receiverOnError(err) {
      const websocket = this[kWebSocket];
      if (websocket._socket[kWebSocket] !== void 0) {
        websocket._socket.removeListener("data", socketOnData);
        process.nextTick(resume, websocket._socket);
        websocket.close(err[kStatusCode]);
      }
      websocket.emit("error", err);
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data, isBinary) {
      this[kWebSocket].emit("message", data, isBinary);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      websocket.pong(data, !websocket._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream) {
      stream.resume();
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket2.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket2.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket2.CLOSING;
        this.destroy();
      }
    }
    var EventEmitter = __require5("events");
    var https = __require5("https");
    var http2 = __require5("http");
    var net = __require5("net");
    var tls = __require5("tls");
    var { randomBytes: randomBytes2, createHash } = __require5("crypto");
    var { Readable } = __require5("stream");
    var { URL: URL2 } = __require5("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver = require_receiver();
    var Sender = require_sender();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kForOnEventAttribute,
      kListener,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants();
    var {
      EventTarget: { addEventListener, removeEventListener }
    } = require_event_target();
    var { format, parse: parse2 } = require_extension();
    var { toBuffer } = require_buffer_util();
    var closeTimeout = 30 * 1e3;
    var kAborted = Symbol("kAborted");
    var protocolVersions = [8, 13];
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
    class WebSocket2 extends EventEmitter {
      constructor(address, protocols, options2) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = EMPTY_BUFFER;
        this._closeTimer = null;
        this._extensions = {};
        this._paused = false;
        this._protocol = "";
        this._readyState = WebSocket2.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (protocols === void 0) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            if (typeof protocols === "object" && protocols !== null) {
              options2 = protocols;
              protocols = [];
            } else {
              protocols = [protocols];
            }
          }
          initAsClient(this, address, protocols, options2);
        } else {
          this._isServer = true;
        }
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type) {
        if (!BINARY_TYPES.includes(type))
          return;
        this._binaryType = type;
        if (this._receiver)
          this._receiver._binaryType = type;
      }
      get bufferedAmount() {
        if (!this._socket)
          return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get isPaused() {
        return this._paused;
      }
      get onclose() {
        return null;
      }
      get onerror() {
        return null;
      }
      get onopen() {
        return null;
      }
      get onmessage() {
        return null;
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(socket, head, options2) {
        const receiver = new Receiver({
          binaryType: this.binaryType,
          extensions: this._extensions,
          isServer: this._isServer,
          maxPayload: options2.maxPayload,
          skipUTF8Validation: options2.skipUTF8Validation
        });
        this._sender = new Sender(socket, this._extensions, options2.generateMask);
        this._receiver = receiver;
        this._socket = socket;
        receiver[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        socket.setTimeout(0);
        socket.setNoDelay();
        if (head.length > 0)
          socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = WebSocket2.OPEN;
        this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = WebSocket2.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = WebSocket2.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      close(code, data) {
        if (this.readyState === WebSocket2.CLOSED)
          return;
        if (this.readyState === WebSocket2.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this.readyState === WebSocket2.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = WebSocket2.CLOSING;
        this._sender.close(code, data, !this._isServer, (err) => {
          if (err)
            return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
      }
      pause() {
        if (this.readyState === WebSocket2.CONNECTING || this.readyState === WebSocket2.CLOSED) {
          return;
        }
        this._paused = true;
        this._socket.pause();
      }
      ping(data, mask, cb) {
        if (this.readyState === WebSocket2.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket2.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0)
          mask = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask, cb);
      }
      pong(data, mask, cb) {
        if (this.readyState === WebSocket2.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb = data;
          data = mask = void 0;
        } else if (typeof mask === "function") {
          cb = mask;
          mask = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket2.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        if (mask === void 0)
          mask = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask, cb);
      }
      resume() {
        if (this.readyState === WebSocket2.CONNECTING || this.readyState === WebSocket2.CLOSED) {
          return;
        }
        this._paused = false;
        if (!this._receiver._writableState.needDrain)
          this._socket.resume();
      }
      send(data, options2, cb) {
        if (this.readyState === WebSocket2.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options2 === "function") {
          cb = options2;
          options2 = {};
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket2.OPEN) {
          sendAfterClose(this, data, cb);
          return;
        }
        const opts = {
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options2
        };
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb);
      }
      terminate() {
        if (this.readyState === WebSocket2.CLOSED)
          return;
        if (this.readyState === WebSocket2.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this._socket) {
          this._readyState = WebSocket2.CLOSING;
          this._socket.destroy();
        }
      }
    }
    Object.defineProperty(WebSocket2, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "isPaused",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket2.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket2.prototype, `on${method}`, {
        enumerable: true,
        get() {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute])
              return listener[kListener];
          }
          return null;
        },
        set(handler) {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) {
              this.removeListener(method, listener);
              break;
            }
          }
          if (typeof handler !== "function")
            return;
          this.addEventListener(method, handler, {
            [kForOnEventAttribute]: true
          });
        }
      });
    });
    WebSocket2.prototype.addEventListener = addEventListener;
    WebSocket2.prototype.removeEventListener = removeEventListener;
    module2.exports = WebSocket2;
  });
  var require_stream = __commonJS2((exports2, module2) => {
    function emitClose(stream) {
      stream.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err);
      }
    }
    function createWebSocketStream(ws, options2) {
      let terminateOnDestroy = true;
      const duplex = new Duplex({
        ...options2,
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      });
      ws.on("message", function message(msg, isBinary) {
        const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;
        if (!duplex.push(data))
          ws.pause();
      });
      ws.once("error", function error(err) {
        if (duplex.destroyed)
          return;
        terminateOnDestroy = false;
        duplex.destroy(err);
      });
      ws.once("close", function close() {
        if (duplex.destroyed)
          return;
        duplex.push(null);
      });
      duplex._destroy = function(err, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err);
          process.nextTick(emitClose, duplex);
          return;
        }
        let called = false;
        ws.once("error", function error(err2) {
          called = true;
          callback(err2);
        });
        ws.once("close", function close() {
          if (!called)
            callback(err);
          process.nextTick(emitClose, duplex);
        });
        if (terminateOnDestroy)
          ws.terminate();
      };
      duplex._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._final(callback);
          });
          return;
        }
        if (ws._socket === null)
          return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex._readableState.endEmitted)
            duplex.destroy();
        } else {
          ws._socket.once("finish", function finish() {
            callback();
          });
          ws.close();
        }
      };
      duplex._read = function() {
        if (ws.isPaused)
          ws.resume();
      };
      duplex._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex.on("end", duplexOnEnd);
      duplex.on("error", duplexOnError);
      return duplex;
    }
    var { Duplex } = __require5("stream");
    module2.exports = createWebSocketStream;
  });
  var require_subprotocol = __commonJS2((exports2, module2) => {
    function parse2(header) {
      const protocols = /* @__PURE__ */ new Set();
      let start = -1;
      let end = -1;
      let i = 0;
      for (i; i < header.length; i++) {
        const code = header.charCodeAt(i);
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (i !== 0 && (code === 32 || code === 9)) {
          if (end === -1 && start !== -1)
            end = i;
        } else if (code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          const protocol2 = header.slice(start, end);
          if (protocols.has(protocol2)) {
            throw new SyntaxError(`The "${protocol2}" subprotocol is duplicated`);
          }
          protocols.add(protocol2);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
      if (start === -1 || end !== -1) {
        throw new SyntaxError("Unexpected end of input");
      }
      const protocol = header.slice(start, i);
      if (protocols.has(protocol)) {
        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
      }
      protocols.add(protocol);
      return protocols;
    }
    var { tokenChars } = require_validation();
    module2.exports = { parse: parse2 };
  });
  var require_websocket_server = __commonJS2((exports2, module2) => {
    function addListeners(server, map) {
      for (const event of Object.keys(map))
        server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      message = message || http2.STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.once("finish", socket.destroy);
      socket.end(`HTTP/1.1 ${code} ${http2.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message);
    }
    function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
      if (server.listenerCount("wsClientError")) {
        const err = new Error(message);
        Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);
        server.emit("wsClientError", err, socket, req);
      } else {
        abortHandshake(socket, code, message);
      }
    }
    var EventEmitter = __require5("events");
    var http2 = __require5("http");
    var https = __require5("https");
    var net = __require5("net");
    var tls = __require5("tls");
    var { createHash } = __require5("crypto");
    var extension = require_extension();
    var PerMessageDeflate = require_permessage_deflate();
    var subprotocol = require_subprotocol();
    var WebSocket2 = require_websocket();
    var { GUID, kWebSocket } = require_constants();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    class WebSocketServer extends EventEmitter {
      constructor(options2, callback) {
        super();
        options2 = {
          maxPayload: 100 * 1024 * 1024,
          skipUTF8Validation: false,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          server: null,
          host: null,
          path: null,
          port: null,
          WebSocket: WebSocket2,
          ...options2
        };
        if (options2.port == null && !options2.server && !options2.noServer || options2.port != null && (options2.server || options2.noServer) || options2.server && options2.noServer) {
          throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
        }
        if (options2.port != null) {
          this._server = http2.createServer((req, res) => {
            const body = http2.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(options2.port, options2.host, options2.backlog, callback);
        } else if (options2.server) {
          this._server = options2.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options2.perMessageDeflate === true)
          options2.perMessageDeflate = {};
        if (options2.clientTracking) {
          this.clients = /* @__PURE__ */ new Set();
          this._shouldEmitClose = false;
        }
        this.options = options2;
        this._state = RUNNING;
      }
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server)
          return null;
        return this._server.address();
      }
      close(cb) {
        if (this._state === CLOSED) {
          if (cb) {
            this.once("close", () => {
              cb(new Error("The server is not running"));
            });
          }
          process.nextTick(emitClose, this);
          return;
        }
        if (cb)
          this.once("close", cb);
        if (this._state === CLOSING)
          return;
        this._state = CLOSING;
        if (this.options.noServer || this.options.server) {
          if (this._server) {
            this._removeListeners();
            this._removeListeners = this._server = null;
          }
          if (this.clients) {
            if (!this.clients.size) {
              process.nextTick(emitClose, this);
            } else {
              this._shouldEmitClose = true;
            }
          } else {
            process.nextTick(emitClose, this);
          }
        } else {
          const server = this._server;
          this._removeListeners();
          this._removeListeners = this._server = null;
          server.close(() => {
            emitClose(this);
          });
        }
      }
      shouldHandle(req) {
        if (this.options.path) {
          const index2 = req.url.indexOf("?");
          const pathname = index2 !== -1 ? req.url.slice(0, index2) : req.url;
          if (pathname !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(req, socket, head, cb) {
        socket.on("error", socketOnError);
        const key = req.headers["sec-websocket-key"];
        const version22 = +req.headers["sec-websocket-version"];
        if (req.method !== "GET") {
          const message = "Invalid HTTP method";
          abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
          return;
        }
        if (req.headers.upgrade.toLowerCase() !== "websocket") {
          const message = "Invalid Upgrade header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!key || !keyRegex.test(key)) {
          const message = "Missing or invalid Sec-WebSocket-Key header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (version22 !== 8 && version22 !== 13) {
          const message = "Missing or invalid Sec-WebSocket-Version header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!this.shouldHandle(req)) {
          abortHandshake(socket, 400);
          return;
        }
        const secWebSocketProtocol = req.headers["sec-websocket-protocol"];
        let protocols = /* @__PURE__ */ new Set();
        if (secWebSocketProtocol !== void 0) {
          try {
            protocols = subprotocol.parse(secWebSocketProtocol);
          } catch (err) {
            const message = "Invalid Sec-WebSocket-Protocol header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        const secWebSocketExtensions = req.headers["sec-websocket-extensions"];
        const extensions = {};
        if (this.options.perMessageDeflate && secWebSocketExtensions !== void 0) {
          const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);
          try {
            const offers = extension.parse(secWebSocketExtensions);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err) {
            const message = "Invalid or unacceptable Sec-WebSocket-Extensions header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version22 === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
            });
            return;
          }
          if (!this.options.verifyClient(info))
            return abortHandshake(socket, 401);
        }
        this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
      }
      completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
        if (!socket.readable || !socket.writable)
          return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
        }
        if (this._state > RUNNING)
          return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new this.options.WebSocket(null);
        if (protocols.size) {
          const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value = extension.format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, {
          maxPayload: this.options.maxPayload,
          skipUTF8Validation: this.options.skipUTF8Validation
        });
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => {
            this.clients.delete(ws);
            if (this._shouldEmitClose && !this.clients.size) {
              process.nextTick(emitClose, this);
            }
          });
        }
        cb(ws, req);
      }
    }
    module2.exports = WebSocketServer;
  });
  var require_ws = __commonJS2((exports2, module2) => {
    var WebSocket2 = require_websocket();
    WebSocket2.createWebSocketStream = require_stream();
    WebSocket2.Server = require_websocket_server();
    WebSocket2.Receiver = require_receiver();
    WebSocket2.Sender = require_sender();
    WebSocket2.WebSocket = WebSocket2;
    WebSocket2.WebSocketServer = WebSocket2.Server;
    module2.exports = WebSocket2;
  });
  var require_utils5 = __commonJS2((exports2) => {
    function getNativeWebSocket() {
      if (typeof WebSocket !== "undefined")
        return WebSocket;
      if (typeof global.WebSocket !== "undefined")
        return global.WebSocket;
      if (typeof window.WebSocket !== "undefined")
        return window.WebSocket;
      if (typeof self.WebSocket !== "undefined")
        return self.WebSocket;
      throw new Error("`WebSocket` is not supported in this environment");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNativeWebSocket = void 0;
    exports2.getNativeWebSocket = getNativeWebSocket;
  });
  var require__cjs = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WebSocket = void 0;
    var WebSocket_ = require_ws();
    var utils_js_1 = require_utils5();
    exports2.WebSocket = (() => {
      try {
        return (0, utils_js_1.getNativeWebSocket)();
      } catch {
        if (WebSocket_.WebSocket)
          return WebSocket_.WebSocket;
        return WebSocket_;
      }
    })();
  });
  var require_socket = __commonJS2((exports2) => {
    async function getSocketRpcClient(params) {
      const { getSocket, reconnect = true, url } = params;
      const { attempts = 5, delay = 2e3 } = typeof reconnect === "object" ? reconnect : {};
      let socketClient = exports2.socketClientCache.get(url);
      if (socketClient)
        return socketClient;
      let reconnectCount = 0;
      const { schedule } = (0, createBatchScheduler_js_1.createBatchScheduler)({
        id: url,
        fn: async () => {
          const requests = /* @__PURE__ */ new Map();
          const subscriptions = /* @__PURE__ */ new Map();
          let error;
          let socket;
          async function setup() {
            return getSocket({
              onError(error_) {
                error = error_;
                for (const request of requests.values())
                  request.onError?.(error);
                for (const subscription of subscriptions.values())
                  subscription.onError?.(error);
                requests.clear();
                subscriptions.clear();
                if (reconnect && reconnectCount < attempts)
                  setTimeout(async () => {
                    reconnectCount++;
                    socket = await setup().catch(console.error);
                  }, delay);
              },
              onOpen() {
                error = void 0;
                reconnectCount = 0;
              },
              onResponse(data) {
                const isSubscription = data.method === "eth_subscription";
                const id = isSubscription ? data.params.subscription : data.id;
                const cache = isSubscription ? subscriptions : requests;
                const callback = cache.get(id);
                if (callback)
                  callback.onResponse(data);
                if (!isSubscription)
                  cache.delete(id);
              }
            });
          }
          socket = await setup();
          error = void 0;
          socketClient = {
            close() {
              socket.close();
              exports2.socketClientCache.delete(url);
            },
            socket,
            request({ body, onError, onResponse }) {
              if (error && onError)
                onError(error);
              const id = body.id ?? id_js_1.idCache.take();
              const callback = (response) => {
                if (typeof response.id === "number" && id !== response.id)
                  return;
                if (body.method === "eth_subscribe" && typeof response.result === "string")
                  subscriptions.set(response.result, {
                    onResponse: callback,
                    onError
                  });
                if (body.method === "eth_unsubscribe")
                  subscriptions.delete(body.params?.[0]);
                onResponse(response);
              };
              requests.set(id, { onResponse: callback, onError });
              try {
                socket.request({
                  body: {
                    jsonrpc: "2.0",
                    id,
                    ...body
                  }
                });
              } catch (error2) {
                onError?.(error2);
              }
            },
            requestAsync({ body, timeout = 1e4 }) {
              return (0, withTimeout_js_1.withTimeout)(() => new Promise((onResponse, onError) => this.request({
                body,
                onError,
                onResponse
              })), {
                errorInstance: new request_js_1.TimeoutError({ body, url }),
                timeout
              });
            },
            requests,
            subscriptions,
            url
          };
          exports2.socketClientCache.set(url, socketClient);
          return [socketClient];
        }
      });
      const [_, [socketClient_]] = await schedule();
      return socketClient_;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSocketRpcClient = exports2.socketClientCache = void 0;
    var request_js_1 = require_request();
    var createBatchScheduler_js_1 = require_createBatchScheduler();
    var withTimeout_js_1 = require_withTimeout();
    var id_js_1 = require_id();
    exports2.socketClientCache = /* @__PURE__ */ new Map();
    exports2.getSocketRpcClient = getSocketRpcClient;
  });
  var require_webSocket = __commonJS2((exports2) => {
    async function getWebSocketRpcClient(url, options2 = {}) {
      const { reconnect } = options2;
      return (0, socket_js_1.getSocketRpcClient)({
        async getSocket({ onError, onOpen, onResponse }) {
          const WebSocket2 = await Promise.resolve().then(() => require__cjs()).then((module2) => module2.WebSocket);
          const socket = new WebSocket2(url);
          function onClose() {
            socket.removeEventListener("close", onClose);
            socket.removeEventListener("message", onMessage);
            socket.removeEventListener("error", onError);
            socket.removeEventListener("open", onOpen);
          }
          function onMessage({ data }) {
            onResponse(JSON.parse(data));
          }
          socket.addEventListener("close", onClose);
          socket.addEventListener("message", onMessage);
          socket.addEventListener("error", onError);
          socket.addEventListener("open", onOpen);
          if (socket.readyState === WebSocket2.CONNECTING) {
            await new Promise((resolve, reject) => {
              if (!socket)
                return;
              socket.onopen = resolve;
              socket.onerror = reject;
            });
          }
          const { close: close_ } = socket;
          return Object.assign(socket, {
            close() {
              close_.bind(socket)();
              onClose();
            },
            request({ body }) {
              if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING)
                throw new request_js_1.WebSocketRequestError({
                  body,
                  url: socket.url,
                  details: "Socket is closed."
                });
              return socket.send(JSON.stringify(body));
            }
          });
        },
        reconnect,
        url
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getWebSocketRpcClient = void 0;
    var request_js_1 = require_request();
    var socket_js_1 = require_socket();
    exports2.getWebSocketRpcClient = getWebSocketRpcClient;
  });
  var require_compat = __commonJS2((exports2) => {
    function webSocket(socketClient, { body, onError, onResponse }) {
      socketClient.request({
        body,
        onError,
        onResponse
      });
      return socketClient;
    }
    async function webSocketAsync(socketClient, { body, timeout = 1e4 }) {
      return socketClient.requestAsync({
        body,
        timeout
      });
    }
    async function getSocket(url) {
      const client = await (0, webSocket_js_1.getWebSocketRpcClient)(url);
      return Object.assign(client.socket, {
        requests: client.requests,
        subscriptions: client.subscriptions
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rpc = exports2.getSocket = void 0;
    var http_js_1 = require_http();
    var webSocket_js_1 = require_webSocket();
    exports2.getSocket = getSocket;
    exports2.rpc = {
      http(url, params) {
        return (0, http_js_1.getHttpRpcClient)(url).request(params);
      },
      webSocket,
      webSocketAsync
    };
  });
  var require_hashTypedData = __commonJS2((exports2) => {
    function hashTypedData(parameters) {
      const { domain = {}, message, primaryType } = parameters;
      const types = {
        EIP712Domain: (0, typedData_js_1.getTypesForEIP712Domain)({ domain }),
        ...parameters.types
      };
      (0, typedData_js_1.validateTypedData)({
        domain,
        message,
        primaryType,
        types
      });
      const parts = ["0x1901"];
      if (domain)
        parts.push(hashDomain({
          domain,
          types
        }));
      if (primaryType !== "EIP712Domain")
        parts.push(hashStruct({
          data: message,
          primaryType,
          types
        }));
      return (0, keccak256_js_1.keccak256)((0, concat_js_1.concat)(parts));
    }
    function hashDomain({ domain, types }) {
      return hashStruct({
        data: domain,
        primaryType: "EIP712Domain",
        types
      });
    }
    function hashStruct({ data, primaryType, types }) {
      const encoded = encodeData({
        data,
        primaryType,
        types
      });
      return (0, keccak256_js_1.keccak256)(encoded);
    }
    function encodeData({ data, primaryType, types }) {
      const encodedTypes = [{ type: "bytes32" }];
      const encodedValues = [hashType({ primaryType, types })];
      for (const field of types[primaryType]) {
        const [type, value] = encodeField({
          types,
          name: field.name,
          type: field.type,
          value: data[field.name]
        });
        encodedTypes.push(type);
        encodedValues.push(value);
      }
      return (0, encodeAbiParameters_js_1.encodeAbiParameters)(encodedTypes, encodedValues);
    }
    function hashType({ primaryType, types }) {
      const encodedHashType = (0, toHex_js_1.toHex)(encodeType({ primaryType, types }));
      return (0, keccak256_js_1.keccak256)(encodedHashType);
    }
    function encodeType({ primaryType, types }) {
      let result = "";
      const unsortedDeps = findTypeDependencies({ primaryType, types });
      unsortedDeps.delete(primaryType);
      const deps = [primaryType, ...Array.from(unsortedDeps).sort()];
      for (const type of deps) {
        result += `${type}(${types[type].map(({ name, type: t }) => `${t} ${name}`).join(",")})`;
      }
      return result;
    }
    function findTypeDependencies({ primaryType: primaryType_, types }, results = /* @__PURE__ */ new Set()) {
      const match = primaryType_.match(/^\w*/u);
      const primaryType = match?.[0];
      if (results.has(primaryType) || types[primaryType] === void 0) {
        return results;
      }
      results.add(primaryType);
      for (const field of types[primaryType]) {
        findTypeDependencies({ primaryType: field.type, types }, results);
      }
      return results;
    }
    function encodeField({ types, name, type, value }) {
      if (types[type] !== void 0) {
        return [
          { type: "bytes32" },
          (0, keccak256_js_1.keccak256)(encodeData({ data: value, primaryType: type, types }))
        ];
      }
      if (type === "bytes") {
        const prepend = value.length % 2 ? "0" : "";
        value = `0x${prepend + value.slice(2)}`;
        return [{ type: "bytes32" }, (0, keccak256_js_1.keccak256)(value)];
      }
      if (type === "string")
        return [{ type: "bytes32" }, (0, keccak256_js_1.keccak256)((0, toHex_js_1.toHex)(value))];
      if (type.lastIndexOf("]") === type.length - 1) {
        const parsedType = type.slice(0, type.lastIndexOf("["));
        const typeValuePairs = value.map((item) => encodeField({
          name,
          type: parsedType,
          types,
          value: item
        }));
        return [
          { type: "bytes32" },
          (0, keccak256_js_1.keccak256)((0, encodeAbiParameters_js_1.encodeAbiParameters)(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))
        ];
      }
      return [{ type }, value];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashDomain = exports2.hashTypedData = void 0;
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var keccak256_js_1 = require_keccak256();
    var typedData_js_1 = require_typedData();
    exports2.hashTypedData = hashTypedData;
    exports2.hashDomain = hashDomain;
  });
  var require_typedData = __commonJS2((exports2) => {
    function validateTypedData(parameters) {
      const { domain, message, primaryType, types } = parameters;
      const validateData = (struct, data) => {
        for (const param of struct) {
          const { name, type } = param;
          const value = data[name];
          const integerMatch = type.match(regex_js_1.integerRegex);
          if (integerMatch && (typeof value === "number" || typeof value === "bigint")) {
            const [_type, base2, size_] = integerMatch;
            (0, toHex_js_1.numberToHex)(value, {
              signed: base2 === "int",
              size: parseInt(size_) / 8
            });
          }
          if (type === "address" && typeof value === "string" && !(0, isAddress_js_1.isAddress)(value))
            throw new address_js_1.InvalidAddressError({ address: value });
          const bytesMatch = type.match(regex_js_1.bytesRegex);
          if (bytesMatch) {
            const [_type, size_] = bytesMatch;
            if (size_ && (0, size_js_1.size)(value) !== parseInt(size_))
              throw new abi_js_1.BytesSizeMismatchError({
                expectedSize: parseInt(size_),
                givenSize: (0, size_js_1.size)(value)
              });
          }
          const struct2 = types[type];
          if (struct2)
            validateData(struct2, value);
        }
      };
      if (types.EIP712Domain && domain)
        validateData(types.EIP712Domain, domain);
      if (primaryType !== "EIP712Domain") {
        const type = types[primaryType];
        validateData(type, message);
      }
    }
    function getTypesForEIP712Domain({ domain }) {
      return [
        typeof domain?.name === "string" && { name: "name", type: "string" },
        domain?.version && { name: "version", type: "string" },
        typeof domain?.chainId === "number" && {
          name: "chainId",
          type: "uint256"
        },
        domain?.verifyingContract && {
          name: "verifyingContract",
          type: "address"
        },
        domain?.salt && { name: "salt", type: "bytes32" }
      ].filter(Boolean);
    }
    function domainSeparator({ domain }) {
      return (0, hashTypedData_js_1.hashDomain)({
        domain,
        types: {
          EIP712Domain: getTypesForEIP712Domain({ domain })
        }
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.domainSeparator = exports2.getTypesForEIP712Domain = exports2.validateTypedData = void 0;
    var abi_js_1 = require_abi();
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    var size_js_1 = require_size();
    var toHex_js_1 = require_toHex();
    var regex_js_1 = require_regex2();
    var hashTypedData_js_1 = require_hashTypedData();
    exports2.validateTypedData = validateTypedData;
    exports2.getTypesForEIP712Domain = getTypesForEIP712Domain;
    exports2.domainSeparator = domainSeparator;
  });
  var require_decodeFunctionData = __commonJS2((exports2) => {
    function decodeFunctionData(parameters) {
      const { abi, data } = parameters;
      const signature = (0, slice_js_1.slice)(data, 0, 4);
      const description = abi.find((x) => x.type === "function" && signature === (0, toFunctionSelector_js_1.toFunctionSelector)((0, formatAbiItem_js_1.formatAbiItem)(x)));
      if (!description)
        throw new abi_js_1.AbiFunctionSignatureNotFoundError(signature, {
          docsPath: "/docs/contract/decodeFunctionData"
        });
      return {
        functionName: description.name,
        args: "inputs" in description && description.inputs && description.inputs.length > 0 ? (0, decodeAbiParameters_js_1.decodeAbiParameters)(description.inputs, (0, slice_js_1.slice)(data, 4)) : void 0
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeFunctionData = void 0;
    var abi_js_1 = require_abi();
    var slice_js_1 = require_slice();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    exports2.decodeFunctionData = decodeFunctionData;
  });
  var require_encodeDeployData = __commonJS2((exports2) => {
    function encodeDeployData2(parameters) {
      const { abi, args, bytecode } = parameters;
      if (!args || args.length === 0)
        return bytecode;
      const description = abi.find((x) => "type" in x && x.type === "constructor");
      if (!description)
        throw new abi_js_1.AbiConstructorNotFoundError({ docsPath: docsPath52 });
      if (!("inputs" in description))
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath: docsPath52 });
      if (!description.inputs || description.inputs.length === 0)
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath: docsPath52 });
      const data = (0, encodeAbiParameters_js_1.encodeAbiParameters)(description.inputs, args);
      return (0, concat_js_1.concatHex)([bytecode, data]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeDeployData = void 0;
    var abi_js_1 = require_abi();
    var concat_js_1 = require_concat();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var docsPath52 = "/docs/contract/encodeDeployData";
    exports2.encodeDeployData = encodeDeployData2;
  });
  var require_encodeErrorResult = __commonJS2((exports2) => {
    function encodeErrorResult(parameters) {
      const { abi, errorName, args } = parameters;
      let abiItem = abi[0];
      if (errorName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, args, name: errorName });
        if (!item)
          throw new abi_js_1.AbiErrorNotFoundError(errorName, { docsPath: docsPath52 });
        abiItem = item;
      }
      if (abiItem.type !== "error")
        throw new abi_js_1.AbiErrorNotFoundError(void 0, { docsPath: docsPath52 });
      const definition = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);
      const signature = (0, toFunctionSelector_js_1.toFunctionSelector)(definition);
      let data = "0x";
      if (args && args.length > 0) {
        if (!abiItem.inputs)
          throw new abi_js_1.AbiErrorInputsNotFoundError(abiItem.name, { docsPath: docsPath52 });
        data = (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.inputs, args);
      }
      return (0, concat_js_1.concatHex)([signature, data]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeErrorResult = void 0;
    var abi_js_1 = require_abi();
    var concat_js_1 = require_concat();
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var formatAbiItem_js_1 = require_formatAbiItem2();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath52 = "/docs/contract/encodeErrorResult";
    exports2.encodeErrorResult = encodeErrorResult;
  });
  var require_encodeFunctionResult = __commonJS2((exports2) => {
    function encodeFunctionResult(parameters) {
      const { abi, functionName, result } = parameters;
      let abiItem = abi[0];
      if (functionName) {
        const item = (0, getAbiItem_js_1.getAbiItem)({ abi, name: functionName });
        if (!item)
          throw new abi_js_1.AbiFunctionNotFoundError(functionName, { docsPath: docsPath52 });
        abiItem = item;
      }
      if (abiItem.type !== "function")
        throw new abi_js_1.AbiFunctionNotFoundError(void 0, { docsPath: docsPath52 });
      if (!abiItem.outputs)
        throw new abi_js_1.AbiFunctionOutputsNotFoundError(abiItem.name, { docsPath: docsPath52 });
      let values = Array.isArray(result) ? result : [result];
      if (abiItem.outputs.length === 0 && !values[0])
        values = [];
      return (0, encodeAbiParameters_js_1.encodeAbiParameters)(abiItem.outputs, values);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeFunctionResult = void 0;
    var abi_js_1 = require_abi();
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    var getAbiItem_js_1 = require_getAbiItem();
    var docsPath52 = "/docs/contract/encodeFunctionResult";
    exports2.encodeFunctionResult = encodeFunctionResult;
  });
  var require_encodePacked = __commonJS2((exports2) => {
    function encodePacked2(types, values) {
      if (types.length !== values.length)
        throw new abi_js_1.AbiEncodingLengthMismatchError({
          expectedLength: types.length,
          givenLength: values.length
        });
      const data = [];
      for (let i = 0; i < types.length; i++) {
        const type = types[i];
        const value = values[i];
        data.push(encode2(type, value));
      }
      return (0, concat_js_1.concatHex)(data);
    }
    function encode2(type, value, isArray = false) {
      if (type === "address") {
        const address = value;
        if (!(0, isAddress_js_1.isAddress)(address))
          throw new address_js_1.InvalidAddressError({ address });
        return (0, pad_js_1.pad)(address.toLowerCase(), {
          size: isArray ? 32 : null
        });
      }
      if (type === "string")
        return (0, toHex_js_1.stringToHex)(value);
      if (type === "bytes")
        return value;
      if (type === "bool")
        return (0, pad_js_1.pad)((0, toHex_js_1.boolToHex)(value), { size: isArray ? 32 : 1 });
      const intMatch = type.match(regex_js_1.integerRegex);
      if (intMatch) {
        const [_type, baseType, bits = "256"] = intMatch;
        const size22 = parseInt(bits) / 8;
        return (0, toHex_js_1.numberToHex)(value, {
          size: isArray ? 32 : size22,
          signed: baseType === "int"
        });
      }
      const bytesMatch = type.match(regex_js_1.bytesRegex);
      if (bytesMatch) {
        const [_type, size22] = bytesMatch;
        if (parseInt(size22) !== (value.length - 2) / 2)
          throw new abi_js_1.BytesSizeMismatchError({
            expectedSize: parseInt(size22),
            givenSize: (value.length - 2) / 2
          });
        return (0, pad_js_1.pad)(value, { dir: "right", size: isArray ? 32 : null });
      }
      const arrayMatch = type.match(regex_js_1.arrayRegex);
      if (arrayMatch && Array.isArray(value)) {
        const [_type, childType] = arrayMatch;
        const data = [];
        for (let i = 0; i < value.length; i++) {
          data.push(encode2(childType, value[i], true));
        }
        if (data.length === 0)
          return "0x";
        return (0, concat_js_1.concatHex)(data);
      }
      throw new abi_js_1.UnsupportedPackedAbiType(type);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodePacked = void 0;
    var abi_js_1 = require_abi();
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var pad_js_1 = require_pad();
    var toHex_js_1 = require_toHex();
    var regex_js_1 = require_regex2();
    exports2.encodePacked = encodePacked2;
  });
  var require_isBytes = __commonJS2((exports2) => {
    function isBytes5(value) {
      if (!value)
        return false;
      if (typeof value !== "object")
        return false;
      if (!("BYTES_PER_ELEMENT" in value))
        return false;
      return value.BYTES_PER_ELEMENT === 1 && value.constructor.name === "Uint8Array";
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isBytes = void 0;
    exports2.isBytes = isBytes5;
  });
  var require_getContractAddress = __commonJS2((exports2) => {
    function getContractAddress22(opts) {
      if (opts.opcode === "CREATE2")
        return getCreate2Address2(opts);
      return getCreateAddress2(opts);
    }
    function getCreateAddress2(opts) {
      const from = (0, toBytes_js_1.toBytes)((0, getAddress_js_1.getAddress)(opts.from));
      let nonce = (0, toBytes_js_1.toBytes)(opts.nonce);
      if (nonce[0] === 0)
        nonce = new Uint8Array([]);
      return (0, getAddress_js_1.getAddress)(`0x${(0, keccak256_js_1.keccak256)((0, toRlp_js_1.toRlp)([from, nonce], "bytes")).slice(26)}`);
    }
    function getCreate2Address2(opts) {
      const from = (0, toBytes_js_1.toBytes)((0, getAddress_js_1.getAddress)(opts.from));
      const salt = (0, pad_js_1.pad)((0, isBytes_js_1.isBytes)(opts.salt) ? opts.salt : (0, toBytes_js_1.toBytes)(opts.salt), {
        size: 32
      });
      const bytecodeHash = (() => {
        if ("bytecodeHash" in opts) {
          if ((0, isBytes_js_1.isBytes)(opts.bytecodeHash))
            return opts.bytecodeHash;
          return (0, toBytes_js_1.toBytes)(opts.bytecodeHash);
        }
        return (0, keccak256_js_1.keccak256)(opts.bytecode, "bytes");
      })();
      return (0, getAddress_js_1.getAddress)((0, slice_js_1.slice)((0, keccak256_js_1.keccak256)((0, concat_js_1.concat)([(0, toBytes_js_1.toBytes)("0xff"), from, salt, bytecodeHash])), 12));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCreate2Address = exports2.getCreateAddress = exports2.getContractAddress = void 0;
    var concat_js_1 = require_concat();
    var isBytes_js_1 = require_isBytes();
    var pad_js_1 = require_pad();
    var slice_js_1 = require_slice();
    var toBytes_js_1 = require_toBytes();
    var toRlp_js_1 = require_toRlp();
    var keccak256_js_1 = require_keccak256();
    var getAddress_js_1 = require_getAddress();
    exports2.getContractAddress = getContractAddress22;
    exports2.getCreateAddress = getCreateAddress2;
    exports2.getCreate2Address = getCreate2Address2;
  });
  var require_fromRlp = __commonJS2((exports2) => {
    function fromRlp2(value, to = "hex") {
      const bytes22 = (() => {
        if (typeof value === "string") {
          if (value.length > 3 && value.length % 2 !== 0)
            throw new encoding_js_1.InvalidHexValueError(value);
          return (0, toBytes_js_1.hexToBytes)(value);
        }
        return value;
      })();
      const cursor = (0, cursor_js_1.createCursor)(bytes22, { recursiveReadLimit: Infinity });
      const result = fromRlpCursor2(cursor, to);
      return result;
    }
    function rlpToBytes(bytes22, to = "bytes") {
      return fromRlp2(bytes22, to);
    }
    function rlpToHex(hex, to = "hex") {
      return fromRlp2(hex, to);
    }
    function fromRlpCursor2(cursor, to = "hex") {
      if (cursor.bytes.length === 0)
        return to === "hex" ? (0, toHex_js_1.bytesToHex)(cursor.bytes) : cursor.bytes;
      const prefix = cursor.readByte();
      if (prefix < 128)
        cursor.decrementPosition(1);
      if (prefix < 192) {
        const length2 = readLength2(cursor, prefix, 128);
        const bytes22 = cursor.readBytes(length2);
        return to === "hex" ? (0, toHex_js_1.bytesToHex)(bytes22) : bytes22;
      }
      const length = readLength2(cursor, prefix, 192);
      return readList2(cursor, length, to);
    }
    function readLength2(cursor, prefix, offset) {
      if (offset === 128 && prefix < 128)
        return 1;
      if (prefix <= offset + 55)
        return prefix - offset;
      if (prefix === offset + 55 + 1)
        return cursor.readUint8();
      if (prefix === offset + 55 + 2)
        return cursor.readUint16();
      if (prefix === offset + 55 + 3)
        return cursor.readUint24();
      if (prefix === offset + 55 + 4)
        return cursor.readUint32();
      throw new base_js_1.BaseError("Invalid RLP prefix");
    }
    function readList2(cursor, length, to) {
      const position = cursor.position;
      const value = [];
      while (cursor.position - position < length)
        value.push(fromRlpCursor2(cursor, to));
      return value;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rlpToHex = exports2.rlpToBytes = exports2.fromRlp = void 0;
    var base_js_1 = require_base();
    var encoding_js_1 = require_encoding();
    var cursor_js_1 = require_cursor2();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.fromRlp = fromRlp2;
    exports2.rlpToBytes = rlpToBytes;
    exports2.rlpToHex = rlpToHex;
  });
  var require_toEventSignature = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEventSignature = void 0;
    var toSignature_js_1 = require_toSignature();
    Object.defineProperty(exports2, "toEventSignature", { enumerable: true, get: function() {
      return toSignature_js_1.toSignature;
    } });
  });
  var require_toFunctionSignature = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toFunctionSignature = void 0;
    var toSignature_js_1 = require_toSignature();
    Object.defineProperty(exports2, "toFunctionSignature", { enumerable: true, get: function() {
      return toSignature_js_1.toSignature;
    } });
  });
  var require_toEventHash = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEventHash = void 0;
    var toSignatureHash_js_1 = require_toSignatureHash();
    Object.defineProperty(exports2, "toEventHash", { enumerable: true, get: function() {
      return toSignatureHash_js_1.toSignatureHash;
    } });
  });
  var require_toFunctionHash = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toFunctionHash = void 0;
    var toSignatureHash_js_1 = require_toSignatureHash();
    Object.defineProperty(exports2, "toFunctionHash", { enumerable: true, get: function() {
      return toSignatureHash_js_1.toSignatureHash;
    } });
  });
  var require_isHash = __commonJS2((exports2) => {
    function isHash(hash22) {
      return (0, isHex_js_1.isHex)(hash22) && (0, size_js_1.size)(hash22) === 32;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isHash = void 0;
    var isHex_js_1 = require_isHex();
    var size_js_1 = require_size();
    exports2.isHash = isHash;
  });
  var require_ripemd160 = __commonJS2((exports2) => {
    function f(group, x, y, z) {
      if (group === 0)
        return x ^ y ^ z;
      else if (group === 1)
        return x & y | ~x & z;
      else if (group === 2)
        return (x | ~y) ^ z;
      else if (group === 3)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = exports2.RIPEMD160 = void 0;
    var _sha2_js_1 = require__sha2();
    var utils_js_1 = require_utils2();
    var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
    var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j of [idxL, idxR])
        j.push(j[i].map((k) => Rho[k]));
    var shifts = /* @__PURE__ */ [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
    var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
    var Kl = /* @__PURE__ */ new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = /* @__PURE__ */ new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    var rotl = (word, shift) => word << shift | word >>> 32 - shift;
    var BUF = /* @__PURE__ */ new Uint32Array(16);
    class RIPEMD160 extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          BUF[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr = idxR[group];
          const sl = shiftsL[group], sr = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    }
    exports2.RIPEMD160 = RIPEMD160;
    exports2.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  });
  var require_ripemd1602 = __commonJS2((exports2) => {
    function ripemd160(value, to_) {
      const to = to_ || "hex";
      const bytes22 = (0, ripemd160_1.ripemd160)((0, isHex_js_1.isHex)(value, { strict: false }) ? (0, toBytes_js_1.toBytes)(value) : value);
      if (to === "bytes")
        return bytes22;
      return (0, toHex_js_1.toHex)(bytes22);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ripemd160 = void 0;
    var ripemd160_1 = require_ripemd160();
    var isHex_js_1 = require_isHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.ripemd160 = ripemd160;
  });
  var require_utils6 = __commonJS2((exports2) => {
    function bytesToHex22(bytes22) {
      if (!u8a2(bytes22))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes22.length; i++) {
        hex += hexes22[bytes22[i]];
      }
      return hex;
    }
    function numberToHexUnpadded2(num2) {
      const hex = num2.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber22(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    function hexToBytes22(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    function bytesToNumberBE2(bytes22) {
      return hexToNumber22(bytesToHex22(bytes22));
    }
    function bytesToNumberLE2(bytes22) {
      if (!u8a2(bytes22))
        throw new Error("Uint8Array expected");
      return hexToNumber22(bytesToHex22(Uint8Array.from(bytes22).reverse()));
    }
    function numberToBytesBE2(n, len) {
      return hexToBytes22(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE2(n, len) {
      return numberToBytesBE2(n, len).reverse();
    }
    function numberToVarBytesBE2(n) {
      return hexToBytes22(numberToHexUnpadded2(n));
    }
    function ensureBytes2(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes22(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (u8a2(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    function concatBytes22(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad22 = 0;
      arrays.forEach((a) => {
        if (!u8a2(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad22);
        pad22 += a.length;
      });
      return r;
    }
    function equalBytes2(b1, b2) {
      if (b1.length !== b2.length)
        return false;
      for (let i = 0; i < b1.length; i++)
        if (b1[i] !== b2[i])
          return false;
      return true;
    }
    function utf8ToBytes22(str2) {
      if (typeof str2 !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
      return new Uint8Array(new TextEncoder().encode(str2));
    }
    function bitLen2(n) {
      let len;
      for (len = 0; n > _0n22; n >>= _1n22, len += 1)
        ;
      return len;
    }
    function bitGet2(n, pos) {
      return n >> BigInt(pos) & _1n22;
    }
    function createHmacDrbg2(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n2(hashLen);
      let k = u8n2(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n2()) => {
        k = h(u8fr2([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr2([1]), seed);
        v = h();
      };
      const gen22 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes22(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen22())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    function validateObject2(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns2[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateObject = exports2.createHmacDrbg = exports2.bitMask = exports2.bitSet = exports2.bitGet = exports2.bitLen = exports2.utf8ToBytes = exports2.equalBytes = exports2.concatBytes = exports2.ensureBytes = exports2.numberToVarBytesBE = exports2.numberToBytesLE = exports2.numberToBytesBE = exports2.bytesToNumberLE = exports2.bytesToNumberBE = exports2.hexToBytes = exports2.hexToNumber = exports2.numberToHexUnpadded = exports2.bytesToHex = void 0;
    var _0n22 = BigInt(0);
    var _1n22 = BigInt(1);
    var _2n22 = BigInt(2);
    var u8a2 = (a) => a instanceof Uint8Array;
    var hexes22 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    exports2.bytesToHex = bytesToHex22;
    exports2.numberToHexUnpadded = numberToHexUnpadded2;
    exports2.hexToNumber = hexToNumber22;
    exports2.hexToBytes = hexToBytes22;
    exports2.bytesToNumberBE = bytesToNumberBE2;
    exports2.bytesToNumberLE = bytesToNumberLE2;
    exports2.numberToBytesBE = numberToBytesBE2;
    exports2.numberToBytesLE = numberToBytesLE2;
    exports2.numberToVarBytesBE = numberToVarBytesBE2;
    exports2.ensureBytes = ensureBytes2;
    exports2.concatBytes = concatBytes22;
    exports2.equalBytes = equalBytes2;
    exports2.utf8ToBytes = utf8ToBytes22;
    exports2.bitLen = bitLen2;
    exports2.bitGet = bitGet2;
    var bitSet2 = (n, pos, value) => {
      return n | (value ? _1n22 : _0n22) << BigInt(pos);
    };
    exports2.bitSet = bitSet2;
    var bitMask2 = (n) => (_2n22 << BigInt(n - 1)) - _1n22;
    exports2.bitMask = bitMask2;
    var u8n2 = (data) => new Uint8Array(data);
    var u8fr2 = (arr) => Uint8Array.from(arr);
    exports2.createHmacDrbg = createHmacDrbg2;
    var validatorFns2 = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    exports2.validateObject = validateObject2;
  });
  var require_modular = __commonJS2((exports2) => {
    function mod2(a, b) {
      const result = a % b;
      return result >= _0n22 ? result : b + result;
    }
    function pow3(num2, power, modulo) {
      if (modulo <= _0n22 || power < _0n22)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n22)
        return _0n22;
      let res = _1n22;
      while (power > _0n22) {
        if (power & _1n22)
          res = res * num2 % modulo;
        num2 = num2 * num2 % modulo;
        power >>= _1n22;
      }
      return res;
    }
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n22) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert2(number22, modulo) {
      if (number22 === _0n22 || modulo <= _0n22) {
        throw new Error(`invert: expected positive integers, got n=${number22} mod=${modulo}`);
      }
      let a = mod2(number22, modulo);
      let b = modulo;
      let x = _0n22, y = _1n22, u = _1n22, v = _0n22;
      while (a !== _0n22) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n22)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    function tonelliShanks2(P) {
      const legendreC = (P - _1n22) / _2n22;
      let Q, S, Z;
      for (Q = P - _1n22, S = 0; Q % _2n22 === _0n22; Q /= _2n22, S++)
        ;
      for (Z = _2n22; Z < P && pow3(Z, legendreC, P) !== P - _1n22; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n22) / _4n3;
        return function tonelliFast(Fp2, n) {
          const root = Fp2.pow(n, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n22) / _2n22;
      return function tonelliSlow(Fp2, n) {
        if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
        let x = Fp2.pow(n, Q1div2);
        let b = Fp2.pow(n, Q);
        while (!Fp2.eql(b, Fp2.ONE)) {
          if (Fp2.eql(b, Fp2.ZERO))
            return Fp2.ZERO;
          let m = 1;
          for (let t2 = Fp2.sqr(b); m < r; m++) {
            if (Fp2.eql(t2, Fp2.ONE))
              break;
            t2 = Fp2.sqr(t2);
          }
          const ge = Fp2.pow(g, _1n22 << BigInt(r - m - 1));
          g = Fp2.sqr(ge);
          x = Fp2.mul(x, ge);
          b = Fp2.mul(b, g);
          r = m;
        }
        return x;
      };
    }
    function FpSqrt2(P) {
      if (P % _4n3 === _3n3) {
        const p1div4 = (P + _1n22) / _4n3;
        return function sqrt3mod4(Fp2, n) {
          const root = Fp2.pow(n, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n2 === _5n2) {
        const c1 = (P - _5n2) / _8n2;
        return function sqrt5mod8(Fp2, n) {
          const n2 = Fp2.mul(n, _2n22);
          const v = Fp2.pow(n2, c1);
          const nv = Fp2.mul(n, v);
          const i = Fp2.mul(Fp2.mul(nv, _2n22), v);
          const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
          if (!Fp2.eql(Fp2.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n2 === _9n2) {
      }
      return tonelliShanks2(P);
    }
    function validateField2(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS2.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    function FpPow2(f, num2, power) {
      if (power < _0n22)
        throw new Error("Expected power > 0");
      if (power === _0n22)
        return f.ONE;
      if (power === _1n22)
        return num2;
      let p = f.ONE;
      let d = num2;
      while (power > _0n22) {
        if (power & _1n22)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n22;
      }
      return p;
    }
    function FpInvertBatch2(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num2, i) => {
        if (f.is0(num2))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num2);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num2, i) => {
        if (f.is0(num2))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num2);
      }, inverted);
      return tmp;
    }
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert2(rhs, f.ORDER) : f.inv(rhs));
    }
    function FpIsSquare(f) {
      const legendreConst = (f.ORDER - _1n22) / _2n22;
      return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    function nLength2(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field2(ORDER4, bitLen2, isLE22 = false, redef = {}) {
      if (ORDER4 <= _0n22)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER4}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength2(ORDER4, bitLen2);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt2(ORDER4);
      const f = Object.freeze({
        ORDER: ORDER4,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n22,
        ONE: _1n22,
        create: (num2) => mod2(num2, ORDER4),
        isValid: (num2) => {
          if (typeof num2 !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num2}`);
          return _0n22 <= num2 && num2 < ORDER4;
        },
        is0: (num2) => num2 === _0n22,
        isOdd: (num2) => (num2 & _1n22) === _1n22,
        neg: (num2) => mod2(-num2, ORDER4),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num2) => mod2(num2 * num2, ORDER4),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER4),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER4),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER4),
        pow: (num2, power) => FpPow2(f, num2, power),
        div: (lhs, rhs) => mod2(lhs * invert2(rhs, ORDER4), ORDER4),
        sqrN: (num2) => num2 * num2,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num2) => invert2(num2, ORDER4),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch2(f, lst),
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num2) => isLE22 ? (0, utils_js_1.numberToBytesLE)(num2, BYTES) : (0, utils_js_1.numberToBytesBE)(num2, BYTES),
        fromBytes: (bytes22) => {
          if (bytes22.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes22.length}`);
          return isLE22 ? (0, utils_js_1.bytesToNumberLE)(bytes22) : (0, utils_js_1.bytesToNumberBE)(bytes22);
        }
      });
      return Object.freeze(f);
    }
    function FpSqrtOdd(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? root : Fp2.neg(root);
    }
    function FpSqrtEven(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? Fp2.neg(root) : root;
    }
    function hashToPrivateScalar(hash22, groupOrder, isLE22 = false) {
      hash22 = (0, utils_js_1.ensureBytes)("privateHash", hash22);
      const hashLen = hash22.length;
      const minLen = nLength2(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num2 = isLE22 ? (0, utils_js_1.bytesToNumberLE)(hash22) : (0, utils_js_1.bytesToNumberBE)(hash22);
      return mod2(num2, groupOrder - _1n22) + _1n22;
    }
    function getFieldBytesLength2(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength2(fieldOrder) {
      const length = getFieldBytesLength2(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField2(key, fieldOrder, isLE22 = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength2(fieldOrder);
      const minLen = getMinHashLength2(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num2 = isLE22 ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod2(num2, fieldOrder - _1n22) + _1n22;
      return isLE22 ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapHashToField = exports2.getMinHashLength = exports2.getFieldBytesLength = exports2.hashToPrivateScalar = exports2.FpSqrtEven = exports2.FpSqrtOdd = exports2.Field = exports2.nLength = exports2.FpIsSquare = exports2.FpDiv = exports2.FpInvertBatch = exports2.FpPow = exports2.validateField = exports2.isNegativeLE = exports2.FpSqrt = exports2.tonelliShanks = exports2.invert = exports2.pow2 = exports2.pow = exports2.mod = void 0;
    var utils_js_1 = require_utils6();
    var _0n22 = BigInt(0);
    var _1n22 = BigInt(1);
    var _2n22 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n3 = BigInt(4);
    var _5n2 = BigInt(5);
    var _8n2 = BigInt(8);
    var _9n2 = BigInt(9);
    var _16n2 = BigInt(16);
    exports2.mod = mod2;
    exports2.pow = pow3;
    exports2.pow2 = pow22;
    exports2.invert = invert2;
    exports2.tonelliShanks = tonelliShanks2;
    exports2.FpSqrt = FpSqrt2;
    var isNegativeLE = (num2, modulo) => (mod2(num2, modulo) & _1n22) === _1n22;
    exports2.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS2 = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    exports2.validateField = validateField2;
    exports2.FpPow = FpPow2;
    exports2.FpInvertBatch = FpInvertBatch2;
    exports2.FpDiv = FpDiv;
    exports2.FpIsSquare = FpIsSquare;
    exports2.nLength = nLength2;
    exports2.Field = Field2;
    exports2.FpSqrtOdd = FpSqrtOdd;
    exports2.FpSqrtEven = FpSqrtEven;
    exports2.hashToPrivateScalar = hashToPrivateScalar;
    exports2.getFieldBytesLength = getFieldBytesLength2;
    exports2.getMinHashLength = getMinHashLength2;
    exports2.mapHashToField = mapHashToField2;
  });
  var require_curve = __commonJS2((exports2) => {
    function wNAF2(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n22) {
            if (n & _1n22)
              p = p.add(d);
            d = d.double();
            n >>= _1n22;
          }
          return p;
        },
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base2 = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base2 = p;
            points.push(base2);
            for (let i = 1; i < windowSize; i++) {
              base2 = base2.add(p);
              points.push(base2);
            }
            p = base2.double();
          }
          return points;
        },
        wNAF(W, precomputes, n) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n22;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P, precomputesMap, n, transform) {
          const W = P._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1) {
              precomputesMap.set(P, transform(comp));
            }
          }
          return this.wNAF(W, comp, n);
        }
      };
    }
    function validateBasic2(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateBasic = exports2.wNAF = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils6();
    var _0n22 = BigInt(0);
    var _1n22 = BigInt(1);
    exports2.wNAF = wNAF2;
    exports2.validateBasic = validateBasic2;
  });
  var require_weierstrass = __commonJS2((exports2) => {
    function validatePointOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp: Fp2, a } = opts;
      if (endo) {
        if (!Fp2.eql(a, Fp2.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    function weierstrassPoints2(opts) {
      const CURVE = validatePointOpts2(opts);
      const { Fp: Fp2 } = CURVE;
      const toBytes32 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes22) => {
        const tail = bytes22.subarray(1);
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp2.sqr(x);
        const x3 = Fp2.mul(x2, x);
        return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b);
      }
      if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num2) {
        return typeof num2 === "bigint" && _0n22 < num2 && num2 < CURVE.n;
      }
      function assertGE(num2) {
        if (!isWithinCurveOrder(num2))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (key instanceof Uint8Array)
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num2;
        try {
          num2 = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num2 = mod2.mod(num2, n);
        assertGE(num2);
        return num2;
      }
      const pointPrecomputes2 = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp2.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp2.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp2.isValid(pz))
            throw new Error("z required");
        }
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp2.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        static normalizeZ(points) {
          const toInv = Fp2.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        static fromHex(hex) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes2.delete(this);
        }
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp2.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp2.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp2.isOdd)
            return !Fp2.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
          const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
          return U1 && U2;
        }
        negate() {
          return new Point2(this.px, Fp2.neg(this.py), this.pz);
        }
        double() {
          const { a, b } = CURVE;
          const b3 = Fp2.mul(b, _3n3);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let { ZERO: X3, ZERO: Y3, ZERO: Z3 } = Fp2;
          let t0 = Fp2.mul(X1, X1);
          let t1 = Fp2.mul(Y1, Y1);
          let t2 = Fp2.mul(Z1, Z1);
          let t3 = Fp2.mul(X1, Y1);
          t3 = Fp2.add(t3, t3);
          Z3 = Fp2.mul(X1, Z1);
          Z3 = Fp2.add(Z3, Z3);
          X3 = Fp2.mul(a, Z3);
          Y3 = Fp2.mul(b3, t2);
          Y3 = Fp2.add(X3, Y3);
          X3 = Fp2.sub(t1, Y3);
          Y3 = Fp2.add(t1, Y3);
          Y3 = Fp2.mul(X3, Y3);
          X3 = Fp2.mul(t3, X3);
          Z3 = Fp2.mul(b3, Z3);
          t2 = Fp2.mul(a, t2);
          t3 = Fp2.sub(t0, t2);
          t3 = Fp2.mul(a, t3);
          t3 = Fp2.add(t3, Z3);
          Z3 = Fp2.add(t0, t0);
          t0 = Fp2.add(Z3, t0);
          t0 = Fp2.add(t0, t2);
          t0 = Fp2.mul(t0, t3);
          Y3 = Fp2.add(Y3, t0);
          t2 = Fp2.mul(Y1, Z1);
          t2 = Fp2.add(t2, t2);
          t0 = Fp2.mul(t2, t3);
          X3 = Fp2.sub(X3, t0);
          Z3 = Fp2.mul(t2, t1);
          Z3 = Fp2.add(Z3, Z3);
          Z3 = Fp2.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let { ZERO: X3, ZERO: Y3, ZERO: Z3 } = Fp2;
          const a = CURVE.a;
          const b3 = Fp2.mul(CURVE.b, _3n3);
          let t0 = Fp2.mul(X1, X2);
          let t1 = Fp2.mul(Y1, Y2);
          let t2 = Fp2.mul(Z1, Z2);
          let t3 = Fp2.add(X1, Y1);
          let t4 = Fp2.add(X2, Y2);
          t3 = Fp2.mul(t3, t4);
          t4 = Fp2.add(t0, t1);
          t3 = Fp2.sub(t3, t4);
          t4 = Fp2.add(X1, Z1);
          let t5 = Fp2.add(X2, Z2);
          t4 = Fp2.mul(t4, t5);
          t5 = Fp2.add(t0, t2);
          t4 = Fp2.sub(t4, t5);
          t5 = Fp2.add(Y1, Z1);
          X3 = Fp2.add(Y2, Z2);
          t5 = Fp2.mul(t5, X3);
          X3 = Fp2.add(t1, t2);
          t5 = Fp2.sub(t5, X3);
          Z3 = Fp2.mul(a, t4);
          X3 = Fp2.mul(b3, t2);
          Z3 = Fp2.add(X3, Z3);
          X3 = Fp2.sub(t1, Z3);
          Z3 = Fp2.add(t1, Z3);
          Y3 = Fp2.mul(X3, Z3);
          t1 = Fp2.add(t0, t0);
          t1 = Fp2.add(t1, t0);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.mul(b3, t4);
          t1 = Fp2.add(t1, t2);
          t2 = Fp2.sub(t0, t2);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.add(t4, t2);
          t0 = Fp2.mul(t1, t4);
          Y3 = Fp2.add(Y3, t0);
          t0 = Fp2.mul(t5, t4);
          X3 = Fp2.mul(t3, X3);
          X3 = Fp2.sub(X3, t0);
          t0 = Fp2.mul(t3, t1);
          Z3 = Fp2.mul(t5, Z3);
          Z3 = Fp2.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes2, n, (comp) => {
            const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
          });
        }
        multiplyUnsafe(n) {
          const I = Point2.ZERO;
          if (n === _0n22)
            return I;
          assertGE(n);
          if (n === _1n22)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n22 || k2 > _0n22) {
            if (k1 & _1n22)
              k1p = k1p.add(d);
            if (k2 & _1n22)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n22;
            k2 >>= _1n22;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point = p;
            fake = f;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n22 || a2 === _1n22 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp2.ONE : Fp2.inv(z);
          const ax = Fp2.mul(x, iz);
          const ay = Fp2.mul(y, iz);
          const zz = Fp2.mul(z, iz);
          if (is0)
            return { x: Fp2.ZERO, y: Fp2.ZERO };
          if (!Fp2.eql(zz, Fp2.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n22)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n22)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes32(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
      Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass2(curveDef) {
      const CURVE = validateOpts2(curveDef);
      const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp2.BYTES + 1;
      const uncompressedLen = 2 * Fp2.BYTES + 1;
      function isValidFieldElement(num2) {
        return _0n22 < num2 && num2 < Fp2.ORDER;
      }
      function modN2(a) {
        return mod2.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod2.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints2({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp2.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
          }
        },
        fromBytes(bytes22) {
          const len = bytes22.length;
          const head = bytes22[0];
          const tail = bytes22.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y = Fp2.sqrt(y2);
            const isYOdd = (y & _1n22) === _1n22;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp2.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
            const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num2) => ut.bytesToHex(ut.numberToBytesBE(num2, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number22) {
        const HALF = CURVE_ORDER >> _1n22;
        return number22 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        static fromDER(hex) {
          const { r, s } = exports2.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp2.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN2(-h * ir);
          const u2 = modN2(s * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN2(-this.s), this.recovery) : this;
        }
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports2.DER.hexFromSig({ r: this.r, s: this.s });
        }
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        randomPrivateKey: () => {
          const length = mod2.getMinHashLength(CURVE.n);
          return mod2.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str2 = typeof item === "string";
        const len = (arr || str2) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str2)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point2.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes22) {
        const num2 = ut.bytesToNumberBE(bytes22);
        const delta = bytes22.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num2 >> BigInt(delta) : num2;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes22) {
        return modN2(bits2int(bytes22));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num2) {
        if (typeof num2 !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n22 <= num2 && num2 < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num2, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash22, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash22(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null) {
          const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r = modN2(q.x);
          if (r === _0n22)
            return;
          const s = modN2(ik * modN2(m + r * d));
          if (s === _0n22)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n22);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || sg instanceof Uint8Array) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports2.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point2.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN2(h * is);
        const u2 = modN2(r * is);
        const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R)
          return false;
        const v = modN2(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point2,
        Signature,
        utils
      };
    }
    function SWUFpSqrtRatio2(Fp2, Z) {
      const q = Fp2.ORDER;
      let l = _0n22;
      for (let o = q - _1n22; o % _2n22 === _0n22; o /= _2n22)
        l += _1n22;
      const c1 = l;
      const _2n_pow_c1_1 = _2n22 << c1 - _1n22 - _1n22;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n22;
      const c2 = (q - _1n22) / _2n_pow_c1;
      const c3 = (c2 - _1n22) / _2n22;
      const c4 = _2n_pow_c1 - _1n22;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp2.pow(Z, c2);
      const c7 = Fp2.pow(Z, (c2 + _1n22) / _2n22);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp2.pow(v, c4);
        let tv3 = Fp2.sqr(tv2);
        tv3 = Fp2.mul(tv3, v);
        let tv5 = Fp2.mul(u, tv3);
        tv5 = Fp2.pow(tv5, c3);
        tv5 = Fp2.mul(tv5, tv2);
        tv2 = Fp2.mul(tv5, v);
        tv3 = Fp2.mul(tv5, u);
        let tv4 = Fp2.mul(tv3, tv2);
        tv5 = Fp2.pow(tv4, c5);
        let isQR = Fp2.eql(tv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, c7);
        tv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, isQR);
        tv4 = Fp2.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n22; i--) {
          let tv52 = i - _2n22;
          tv52 = _2n22 << tv52 - _1n22;
          let tvv5 = Fp2.pow(tv4, tv52);
          const e1 = Fp2.eql(tvv5, Fp2.ONE);
          tv2 = Fp2.mul(tv3, tv1);
          tv1 = Fp2.mul(tv1, tv1);
          tvv5 = Fp2.mul(tv4, tv1);
          tv3 = Fp2.cmov(tv2, tv3, e1);
          tv4 = Fp2.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp2.ORDER % _4n3 === _3n3) {
        const c12 = (Fp2.ORDER - _3n3) / _4n3;
        const c22 = Fp2.sqrt(Fp2.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp2.sqr(v);
          const tv2 = Fp2.mul(u, v);
          tv1 = Fp2.mul(tv1, tv2);
          let y1 = Fp2.pow(tv1, c12);
          y1 = Fp2.mul(y1, tv2);
          const y2 = Fp2.mul(y1, c22);
          const tv3 = Fp2.mul(Fp2.sqr(y1), v);
          const isQR = Fp2.eql(tv3, u);
          let y = Fp2.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU2(Fp2, opts) {
      mod2.validateField(Fp2);
      if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio2(Fp2, opts.Z);
      if (!Fp2.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp2.sqr(u);
        tv1 = Fp2.mul(tv1, opts.Z);
        tv2 = Fp2.sqr(tv1);
        tv2 = Fp2.add(tv2, tv1);
        tv3 = Fp2.add(tv2, Fp2.ONE);
        tv3 = Fp2.mul(tv3, opts.B);
        tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
        tv4 = Fp2.mul(tv4, opts.A);
        tv2 = Fp2.sqr(tv3);
        tv6 = Fp2.sqr(tv4);
        tv5 = Fp2.mul(tv6, opts.A);
        tv2 = Fp2.add(tv2, tv5);
        tv2 = Fp2.mul(tv2, tv3);
        tv6 = Fp2.mul(tv6, tv4);
        tv5 = Fp2.mul(tv6, opts.B);
        tv2 = Fp2.add(tv2, tv5);
        x = Fp2.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp2.mul(tv1, u);
        y = Fp2.mul(y, value);
        x = Fp2.cmov(x, tv3, isValid);
        y = Fp2.cmov(y, value, isValid);
        const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
        y = Fp2.cmov(Fp2.neg(y), y, e1);
        x = Fp2.div(x, tv4);
        return { x, y };
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapToCurveSimpleSWU = exports2.SWUFpSqrtRatio = exports2.weierstrass = exports2.weierstrassPoints = exports2.DER = void 0;
    var mod2 = require_modular();
    var ut = require_utils6();
    var utils_js_1 = require_utils6();
    var curve_js_1 = require_curve();
    var { bytesToNumberBE: b2n2, hexToBytes: h2b2 } = ut;
    exports2.DER = {
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports2.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n2(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports2.DER;
        const data = typeof hex === "string" ? h2b2(hex) : hex;
        if (!(data instanceof Uint8Array))
          throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports2.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports2.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig) {
        const slice22 = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num2) => {
          const hex = num2.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice22(h(sig.s));
        const r = slice22(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    var _0n22 = BigInt(0);
    var _1n22 = BigInt(1);
    var _2n22 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n3 = BigInt(4);
    exports2.weierstrassPoints = weierstrassPoints2;
    exports2.weierstrass = weierstrass2;
    exports2.SWUFpSqrtRatio = SWUFpSqrtRatio2;
    exports2.mapToCurveSimpleSWU = mapToCurveSimpleSWU2;
  });
  var require_hash_to_curve = __commonJS2((exports2) => {
    function validateDST(dst) {
      if (dst instanceof Uint8Array)
        return dst;
      if (typeof dst === "string")
        return (0, utils_js_1.utf8ToBytes)(dst);
      throw new Error("DST must be Uint8Array or string");
    }
    function i2osp2(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor2(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function isBytes5(item) {
      if (!(item instanceof Uint8Array))
        throw new Error("Uint8Array expected");
    }
    function isNum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd2(msg, DST, lenInBytes, H) {
      isBytes5(msg);
      isBytes5(DST);
      isNum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp2(DST.length, 1));
      const Z_pad = i2osp2(0, r_in_bytes);
      const l_i_b_str = i2osp2(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp2(0, 1), DST_prime));
      b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp2(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor2(b_0, b[i - 1]), i2osp2(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof2(msg, DST, lenInBytes, k, H) {
      isBytes5(msg);
      isBytes5(DST);
      isNum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp2(lenInBytes, 2)).update(DST).update(i2osp2(DST.length, 1)).digest();
    }
    function hash_to_field2(msg, count, options2) {
      (0, utils_js_1.validateObject)(options2, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash: hash22, expand, DST: _DST } = options2;
      isBytes5(msg);
      isNum(count);
      const DST = validateDST(_DST);
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd2(msg, DST, len_in_bytes, hash22);
      } else if (expand === "xof") {
        prb = expand_message_xof2(msg, DST, len_in_bytes, k, hash22);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip2(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap2(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    function createHasher2(Point2, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        hashToCurve(msg, options2) {
          const u = hash_to_field2(msg, 2, { ...def, DST: def.DST, ...options2 });
          const u0 = Point2.fromAffine(mapToCurve(u[0]));
          const u1 = Point2.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        encodeToCurve(msg, options2) {
          const u = hash_to_field2(msg, 1, { ...def, DST: def.encodeDST, ...options2 });
          const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createHasher = exports2.isogenyMap = exports2.hash_to_field = exports2.expand_message_xof = exports2.expand_message_xmd = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils6();
    var os2ip2 = utils_js_1.bytesToNumberBE;
    exports2.expand_message_xmd = expand_message_xmd2;
    exports2.expand_message_xof = expand_message_xof2;
    exports2.hash_to_field = hash_to_field2;
    exports2.isogenyMap = isogenyMap2;
    exports2.createHasher = createHasher2;
  });
  var require_hmac = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hmac = exports2.HMAC = void 0;
    var _assert_js_1 = require__assert();
    var utils_js_1 = require_utils2();
    class HMAC2 extends utils_js_1.Hash {
      constructor(hash22, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash22);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash22.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad22 = new Uint8Array(blockLen);
        pad22.set(key.length > blockLen ? hash22.create().update(key).digest() : key);
        for (let i = 0; i < pad22.length; i++)
          pad22[i] ^= 54;
        this.iHash.update(pad22);
        this.oHash = hash22.create();
        for (let i = 0; i < pad22.length; i++)
          pad22[i] ^= 54 ^ 92;
        this.oHash.update(pad22);
        pad22.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    }
    exports2.HMAC = HMAC2;
    var hmac2 = (hash22, key, message) => new HMAC2(hash22, key).update(message).digest();
    exports2.hmac = hmac2;
    exports2.hmac.create = (hash22, key) => new HMAC2(hash22, key);
  });
  var require__shortw_utils = __commonJS2((exports2) => {
    function getHash2(hash22) {
      return {
        hash: hash22,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash22, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    function createCurve2(curveDef, defHash) {
      const create = (hash22) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash2(hash22) });
      return Object.freeze({ ...create(defHash), create });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCurve = exports2.getHash = void 0;
    var hmac_1 = require_hmac();
    var utils_1 = require_utils2();
    var weierstrass_js_1 = require_weierstrass();
    exports2.getHash = getHash2;
    exports2.createCurve = createCurve2;
  });
  var require_secp256k1 = __commonJS2((exports2) => {
    function sqrtMod2(y) {
      const P = secp256k1P2;
      const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n3, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n3, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n22, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n3, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n22, P);
      if (!Fp2.eql(Fp2.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    function taggedHash2(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES2[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES2[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    function schnorrGetExtPubKey2(priv) {
      let d_ = exports2.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point2.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN2(-d_);
      return { scalar, bytes: pointToBytes2(p) };
    }
    function lift_x2(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP2(x * x);
      const c = modP2(xx * x + BigInt(7));
      let y = sqrtMod2(c);
      if (y % _2n22 !== _0n22)
        y = modP2(-y);
      const p = new Point2(x, y, _1n22);
      p.assertValidity();
      return p;
    }
    function challenge2(...args) {
      return modN2((0, utils_js_1.bytesToNumberBE)(taggedHash2("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey2(privateKey) {
      return schnorrGetExtPubKey2(privateKey).bytes;
    }
    function schnorrSign2(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey2(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b2(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash2("BIP0340/aux", a)));
      const rand = taggedHash2("BIP0340/nonce", t, px, m);
      const k_ = modN2((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n22)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey2(k_);
      const e = challenge2(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b2(modN2(k + e * d)), 32);
      if (!schnorrVerify2(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify2(signature, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x2((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s))
          return false;
        const e = challenge2(numTo32b2(r), pointToBytes2(P), m);
        const R = GmulAdd2(P, s, modN2(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeToCurve = exports2.hashToCurve = exports2.schnorr = exports2.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils2();
    var modular_js_1 = require_modular();
    var weierstrass_js_1 = require_weierstrass();
    var utils_js_1 = require_utils6();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var _shortw_utils_js_1 = require__shortw_utils();
    var secp256k1P2 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n22 = BigInt(1);
    var _2n22 = BigInt(2);
    var divNearest2 = (a, b) => (a + b / _2n22) / b;
    var Fp2 = (0, modular_js_1.Field)(secp256k1P2, void 0, void 0, { sqrt: sqrtMod2 });
    exports2.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      b: BigInt(7),
      Fp: Fp2,
      n: secp256k1N2,
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N2;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n22 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest2(b2 * k, n);
          const c2 = divNearest2(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n22 = BigInt(0);
    var fe = (x) => typeof x === "bigint" && _0n22 < x && x < secp256k1P2;
    var ge = (x) => typeof x === "bigint" && _0n22 < x && x < secp256k1N2;
    var TAGGED_HASH_PREFIXES2 = {};
    var pointToBytes2 = (point) => point.toRawBytes(true).slice(1);
    var numTo32b2 = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP2 = (x) => (0, modular_js_1.mod)(x, secp256k1P2);
    var modN2 = (x) => (0, modular_js_1.mod)(x, secp256k1N2);
    var Point2 = exports2.secp256k1.ProjectivePoint;
    var GmulAdd2 = (Q, a, b) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b);
    exports2.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey2,
      sign: schnorrSign2,
      verify: schnorrVerify2,
      utils: {
        randomPrivateKey: exports2.secp256k1.utils.randomPrivateKey,
        lift_x: lift_x2,
        pointToBytes: pointToBytes2,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash: taggedHash2,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap2 = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp2, [
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ],
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU2 = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp2, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp2.create(BigInt("-11"))
    }))();
    var htf2 = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports2.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU2(Fp2.create(scalars[0]));
      return isoMap2(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp2.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports2.hashToCurve = (() => htf2.hashToCurve)();
    exports2.encodeToCurve = (() => htf2.encodeToCurve)();
  });
  var require_recoverPublicKey = __commonJS2((exports2) => {
    async function recoverPublicKey2({ hash: hash22, signature }) {
      const signatureHex = (0, isHex_js_1.isHex)(signature) ? signature : (0, toHex_js_1.toHex)(signature);
      const hashHex = (0, isHex_js_1.isHex)(hash22) ? hash22 : (0, toHex_js_1.toHex)(hash22);
      let v = (0, fromHex_js_1.hexToNumber)(`0x${signatureHex.slice(130)}`);
      if (v === 0 || v === 1)
        v += 27;
      const { secp256k1: secp256k12 } = await Promise.resolve().then(() => require_secp256k1());
      const publicKey = secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(v - 27).recoverPublicKey(hashHex.substring(2)).toHex(false);
      return `0x${publicKey}`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverPublicKey = void 0;
    var isHex_js_1 = require_isHex();
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    exports2.recoverPublicKey = recoverPublicKey2;
  });
  var require_recoverAddress = __commonJS2((exports2) => {
    async function recoverAddress2({ hash: hash22, signature }) {
      return (0, publicKeyToAddress_js_1.publicKeyToAddress)(await (0, recoverPublicKey_js_1.recoverPublicKey)({ hash: hash22, signature }));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverAddress = void 0;
    var publicKeyToAddress_js_1 = require_publicKeyToAddress();
    var recoverPublicKey_js_1 = require_recoverPublicKey();
    exports2.recoverAddress = recoverAddress2;
  });
  var require_strings = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.presignMessagePrefix = void 0;
    exports2.presignMessagePrefix = `Ethereum Signed Message:
`;
  });
  var require_hashMessage = __commonJS2((exports2) => {
    function hashMessage(message, to_) {
      const messageBytes = (() => {
        if (typeof message === "string")
          return (0, toBytes_js_1.stringToBytes)(message);
        if (message.raw instanceof Uint8Array)
          return message.raw;
        return (0, toBytes_js_1.toBytes)(message.raw);
      })();
      const prefixBytes = (0, toBytes_js_1.stringToBytes)(`${strings_js_1.presignMessagePrefix}${messageBytes.length}`);
      return (0, keccak256_js_1.keccak256)((0, concat_js_1.concat)([prefixBytes, messageBytes]), to_);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashMessage = void 0;
    var strings_js_1 = require_strings();
    var concat_js_1 = require_concat();
    var toBytes_js_1 = require_toBytes();
    var keccak256_js_1 = require_keccak256();
    exports2.hashMessage = hashMessage;
  });
  var require_recoverMessageAddress = __commonJS2((exports2) => {
    async function recoverMessageAddress({ message, signature }) {
      return (0, recoverAddress_js_1.recoverAddress)({ hash: (0, hashMessage_js_1.hashMessage)(message), signature });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverMessageAddress = void 0;
    var hashMessage_js_1 = require_hashMessage();
    var recoverAddress_js_1 = require_recoverAddress();
    exports2.recoverMessageAddress = recoverMessageAddress;
  });
  var require_recoverTypedDataAddress = __commonJS2((exports2) => {
    async function recoverTypedDataAddress(parameters) {
      const { domain, message, primaryType, signature, types } = parameters;
      return (0, recoverAddress_js_1.recoverAddress)({
        hash: (0, hashTypedData_js_1.hashTypedData)({
          domain,
          message,
          primaryType,
          types
        }),
        signature
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverTypedDataAddress = void 0;
    var hashTypedData_js_1 = require_hashTypedData();
    var recoverAddress_js_1 = require_recoverAddress();
    exports2.recoverTypedDataAddress = recoverTypedDataAddress;
  });
  var require_verifyMessage = __commonJS2((exports2) => {
    async function verifyMessage({ address, message, signature }) {
      return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverMessageAddress_js_1.recoverMessageAddress)({ message, signature }));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyMessage = void 0;
    var getAddress_js_1 = require_getAddress();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var recoverMessageAddress_js_1 = require_recoverMessageAddress();
    exports2.verifyMessage = verifyMessage;
  });
  var require_verifyTypedData = __commonJS2((exports2) => {
    async function verifyTypedData(parameters) {
      const { address, domain, message, primaryType, signature, types } = parameters;
      return (0, isAddressEqual_js_1.isAddressEqual)((0, getAddress_js_1.getAddress)(address), await (0, recoverTypedDataAddress_js_1.recoverTypedDataAddress)({
        domain,
        message,
        primaryType,
        signature,
        types
      }));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = void 0;
    var getAddress_js_1 = require_getAddress();
    var isAddressEqual_js_1 = require_isAddressEqual();
    var recoverTypedDataAddress_js_1 = require_recoverTypedDataAddress();
    exports2.verifyTypedData = verifyTypedData;
  });
  var require_getSerializedTransactionType = __commonJS2((exports2) => {
    function getSerializedTransactionType(serializedTransaction) {
      const serializedType = (0, slice_js_1.sliceHex)(serializedTransaction, 0, 1);
      if (serializedType === "0x03")
        return "eip4844";
      if (serializedType === "0x02")
        return "eip1559";
      if (serializedType === "0x01")
        return "eip2930";
      if (serializedType !== "0x" && (0, fromHex_js_1.hexToNumber)(serializedType) >= 192)
        return "legacy";
      throw new transaction_js_1.InvalidSerializedTransactionTypeError({ serializedType });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerializedTransactionType = void 0;
    var transaction_js_1 = require_transaction2();
    var slice_js_1 = require_slice();
    var fromHex_js_1 = require_fromHex();
    exports2.getSerializedTransactionType = getSerializedTransactionType;
  });
  var require_assertTransaction = __commonJS2((exports2) => {
    function assertTransactionEIP48442(transaction) {
      const { blobVersionedHashes } = transaction;
      if (blobVersionedHashes) {
        if (blobVersionedHashes.length === 0)
          throw new blob_js_1.EmptyBlobError();
        for (const hash22 of blobVersionedHashes) {
          const size_ = (0, size_js_1.size)(hash22);
          const version22 = (0, fromHex_js_1.hexToNumber)((0, slice_js_1.slice)(hash22, 0, 1));
          if (size_ !== 32)
            throw new blob_js_1.InvalidVersionedHashSizeError({ hash: hash22, size: size_ });
          if (version22 !== kzg_js_1.versionedHashVersionKzg)
            throw new blob_js_1.InvalidVersionedHashVersionError({
              hash: hash22,
              version: version22
            });
        }
      }
      assertTransactionEIP15592(transaction);
    }
    function assertTransactionEIP15592(transaction) {
      const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
    }
    function assertTransactionEIP29302(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (maxPriorityFeePerGas || maxFeePerGas)
        throw new base_js_1.BaseError("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
      if (gasPrice && gasPrice > 2n ** 256n - 1n)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas: gasPrice });
    }
    function assertTransactionLegacy2(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, accessList } = transaction;
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (typeof chainId !== "undefined" && chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (maxPriorityFeePerGas || maxFeePerGas)
        throw new base_js_1.BaseError("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
      if (gasPrice && gasPrice > 2n ** 256n - 1n)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas: gasPrice });
      if (accessList)
        throw new base_js_1.BaseError("`accessList` is not a valid Legacy Transaction attribute.");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertTransactionLegacy = exports2.assertTransactionEIP2930 = exports2.assertTransactionEIP1559 = exports2.assertTransactionEIP4844 = void 0;
    var kzg_js_1 = require_kzg();
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var blob_js_1 = require_blob2();
    var chain_js_1 = require_chain();
    var node_js_1 = require_node();
    var isAddress_js_1 = require_isAddress();
    var size_js_1 = require_size();
    var slice_js_1 = require_slice();
    var fromHex_js_1 = require_fromHex();
    exports2.assertTransactionEIP4844 = assertTransactionEIP48442;
    exports2.assertTransactionEIP1559 = assertTransactionEIP15592;
    exports2.assertTransactionEIP2930 = assertTransactionEIP29302;
    exports2.assertTransactionLegacy = assertTransactionLegacy2;
  });
  var require_parseTransaction = __commonJS2((exports2) => {
    function parseTransaction(serializedTransaction) {
      const type = (0, getSerializedTransactionType_js_1.getSerializedTransactionType)(serializedTransaction);
      if (type === "eip1559")
        return parseTransactionEIP1559(serializedTransaction);
      if (type === "eip2930")
        return parseTransactionEIP2930(serializedTransaction);
      if (type === "eip4844")
        return parseTransactionEIP4844(serializedTransaction);
      return parseTransactionLegacy(serializedTransaction);
    }
    function parseTransactionEIP4844(serializedTransaction) {
      const transactionOrWrapperArray = toTransactionArray(serializedTransaction);
      const hasNetworkWrapper = transactionOrWrapperArray.length === 4;
      const transactionArray = hasNetworkWrapper ? transactionOrWrapperArray[0] : transactionOrWrapperArray;
      const wrapperArray = hasNetworkWrapper ? transactionOrWrapperArray.slice(1) : [];
      const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s] = transactionArray;
      const [blobs, commitments, proofs] = wrapperArray;
      if (!(transactionArray.length === 11 || transactionArray.length === 14))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gas,
            to,
            value,
            data,
            accessList,
            ...transactionArray.length > 9 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip4844"
        });
      const transaction = {
        blobVersionedHashes,
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip4844"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(maxFeePerBlobGas) && maxFeePerBlobGas !== "0x")
        transaction.maxFeePerBlobGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerBlobGas);
      if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== "0x")
        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);
      if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== "0x")
        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      if (blobs && commitments && proofs)
        transaction.sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({
          blobs,
          commitments,
          proofs
        });
      (0, assertTransaction_js_1.assertTransactionEIP4844)(transaction);
      const signature = transactionArray.length === 14 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionEIP1559(serializedTransaction) {
      const transactionArray = toTransactionArray(serializedTransaction);
      const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, v, r, s] = transactionArray;
      if (!(transactionArray.length === 9 || transactionArray.length === 12))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gas,
            to,
            value,
            data,
            accessList,
            ...transactionArray.length > 9 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip1559"
        });
      const transaction = {
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip1559"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(maxFeePerGas) && maxFeePerGas !== "0x")
        transaction.maxFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxFeePerGas);
      if ((0, isHex_js_1.isHex)(maxPriorityFeePerGas) && maxPriorityFeePerGas !== "0x")
        transaction.maxPriorityFeePerGas = (0, fromHex_js_1.hexToBigInt)(maxPriorityFeePerGas);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);
      const signature = transactionArray.length === 12 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionEIP2930(serializedTransaction) {
      const transactionArray = toTransactionArray(serializedTransaction);
      const [chainId, nonce, gasPrice, gas, to, value, data, accessList, v, r, s] = transactionArray;
      if (!(transactionArray.length === 8 || transactionArray.length === 11))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            chainId,
            nonce,
            gasPrice,
            gas,
            to,
            value,
            data,
            accessList,
            ...transactionArray.length > 8 ? {
              v,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "eip2930"
        });
      const transaction = {
        chainId: (0, fromHex_js_1.hexToNumber)(chainId),
        type: "eip2930"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== "0x")
        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);
      if (accessList.length !== 0 && accessList !== "0x")
        transaction.accessList = parseAccessList(accessList);
      (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);
      const signature = transactionArray.length === 11 ? parseEIP155Signature(transactionArray) : void 0;
      return { ...signature, ...transaction };
    }
    function parseTransactionLegacy(serializedTransaction) {
      const transactionArray = (0, fromRlp_js_1.fromRlp)(serializedTransaction, "hex");
      const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = transactionArray;
      if (!(transactionArray.length === 6 || transactionArray.length === 9))
        throw new transaction_js_1.InvalidSerializedTransactionError({
          attributes: {
            nonce,
            gasPrice,
            gas,
            to,
            value,
            data,
            ...transactionArray.length > 6 ? {
              v: chainIdOrV_,
              r,
              s
            } : {}
          },
          serializedTransaction,
          type: "legacy"
        });
      const transaction = {
        type: "legacy"
      };
      if ((0, isHex_js_1.isHex)(to) && to !== "0x")
        transaction.to = to;
      if ((0, isHex_js_1.isHex)(gas) && gas !== "0x")
        transaction.gas = (0, fromHex_js_1.hexToBigInt)(gas);
      if ((0, isHex_js_1.isHex)(data) && data !== "0x")
        transaction.data = data;
      if ((0, isHex_js_1.isHex)(nonce) && nonce !== "0x")
        transaction.nonce = (0, fromHex_js_1.hexToNumber)(nonce);
      if ((0, isHex_js_1.isHex)(value) && value !== "0x")
        transaction.value = (0, fromHex_js_1.hexToBigInt)(value);
      if ((0, isHex_js_1.isHex)(gasPrice) && gasPrice !== "0x")
        transaction.gasPrice = (0, fromHex_js_1.hexToBigInt)(gasPrice);
      (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);
      if (transactionArray.length === 6)
        return transaction;
      const chainIdOrV = (0, isHex_js_1.isHex)(chainIdOrV_) && chainIdOrV_ !== "0x" ? (0, fromHex_js_1.hexToBigInt)(chainIdOrV_) : 0n;
      if (s === "0x" && r === "0x") {
        if (chainIdOrV > 0)
          transaction.chainId = Number(chainIdOrV);
        return transaction;
      }
      const v = chainIdOrV;
      const chainId = Number((v - 35n) / 2n);
      if (chainId > 0)
        transaction.chainId = chainId;
      else if (v !== 27n && v !== 28n)
        throw new transaction_js_1.InvalidLegacyVError({ v });
      delete transaction.yParity;
      transaction.v = v;
      transaction.s = s;
      transaction.r = r;
      return transaction;
    }
    function toTransactionArray(serializedTransaction) {
      return (0, fromRlp_js_1.fromRlp)(`0x${serializedTransaction.slice(4)}`, "hex");
    }
    function parseAccessList(accessList_) {
      const accessList = [];
      for (let i = 0; i < accessList_.length; i++) {
        const [address, storageKeys] = accessList_[i];
        if (!(0, isAddress_js_1.isAddress)(address, { strict: false }))
          throw new address_js_1.InvalidAddressError({ address });
        accessList.push({
          address,
          storageKeys: storageKeys.map((key) => (0, isHash_js_1.isHash)(key) ? key : (0, trim_js_1.trim)(key))
        });
      }
      return accessList;
    }
    function parseEIP155Signature(transactionArray) {
      const signature = transactionArray.slice(-3);
      const v = signature[0] === "0x" || (0, fromHex_js_1.hexToBigInt)(signature[0]) === 0n ? 27n : 28n;
      return {
        r: (0, pad_js_1.padHex)(signature[1], { size: 32 }),
        s: (0, pad_js_1.padHex)(signature[2], { size: 32 }),
        v,
        yParity: v === 27n ? 0 : 1
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAccessList = exports2.toTransactionArray = exports2.parseTransaction = void 0;
    var address_js_1 = require_address();
    var transaction_js_1 = require_transaction2();
    var isAddress_js_1 = require_isAddress();
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    var isHex_js_1 = require_isHex();
    var pad_js_1 = require_pad();
    var trim_js_1 = require_trim();
    var fromHex_js_1 = require_fromHex();
    var fromRlp_js_1 = require_fromRlp();
    var isHash_js_1 = require_isHash();
    var assertTransaction_js_1 = require_assertTransaction();
    var getSerializedTransactionType_js_1 = require_getSerializedTransactionType();
    exports2.parseTransaction = parseTransaction;
    exports2.toTransactionArray = toTransactionArray;
    exports2.parseAccessList = parseAccessList;
  });
  var require_serializeAccessList = __commonJS2((exports2) => {
    function serializeAccessList2(accessList) {
      if (!accessList || accessList.length === 0)
        return [];
      const serializedAccessList = [];
      for (let i = 0; i < accessList.length; i++) {
        const { address, storageKeys } = accessList[i];
        for (let j = 0; j < storageKeys.length; j++) {
          if (storageKeys[j].length - 2 !== 64) {
            throw new transaction_js_1.InvalidStorageKeySizeError({ storageKey: storageKeys[j] });
          }
        }
        if (!(0, isAddress_js_1.isAddress)(address, { strict: false })) {
          throw new address_js_1.InvalidAddressError({ address });
        }
        serializedAccessList.push([address, storageKeys]);
      }
      return serializedAccessList;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeAccessList = void 0;
    var address_js_1 = require_address();
    var transaction_js_1 = require_transaction2();
    var isAddress_js_1 = require_isAddress();
    exports2.serializeAccessList = serializeAccessList2;
  });
  var require_serializeTransaction = __commonJS2((exports2) => {
    function serializeTransaction5(transaction, signature) {
      const type = (0, getTransactionType_js_1.getTransactionType)(transaction);
      if (type === "eip1559")
        return serializeTransactionEIP15592(transaction, signature);
      if (type === "eip2930")
        return serializeTransactionEIP29302(transaction, signature);
      if (type === "eip4844")
        return serializeTransactionEIP48442(transaction, signature);
      return serializeTransactionLegacy2(transaction, signature);
    }
    function serializeTransactionEIP48442(transaction, signature) {
      const { chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP4844)(transaction);
      let blobVersionedHashes = transaction.blobVersionedHashes;
      let sidecars = transaction.sidecars;
      if (transaction.blobs && (typeof blobVersionedHashes === "undefined" || typeof sidecars === "undefined")) {
        const blobs2 = typeof transaction.blobs[0] === "string" ? transaction.blobs : transaction.blobs.map((x) => (0, toHex_js_1.bytesToHex)(x));
        const kzg = transaction.kzg;
        const commitments2 = (0, blobsToCommitments_js_1.blobsToCommitments)({
          blobs: blobs2,
          kzg
        });
        if (typeof blobVersionedHashes === "undefined")
          blobVersionedHashes = (0, commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes)({
            commitments: commitments2
          });
        if (typeof sidecars === "undefined") {
          const proofs2 = (0, blobsToProofs_js_1.blobsToProofs)({ blobs: blobs2, commitments: commitments2, kzg });
          sidecars = (0, toBlobSidecars_js_1.toBlobSidecars)({ blobs: blobs2, commitments: commitments2, proofs: proofs2 });
        }
      }
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        maxFeePerBlobGas ? (0, toHex_js_1.toHex)(maxFeePerBlobGas) : "0x",
        blobVersionedHashes ?? [],
        ...toYParitySignatureArray2(transaction, signature)
      ];
      const blobs = [];
      const commitments = [];
      const proofs = [];
      if (sidecars)
        for (let i = 0; i < sidecars.length; i++) {
          const { blob, commitment, proof } = sidecars[i];
          blobs.push(blob);
          commitments.push(commitment);
          proofs.push(proof);
        }
      return (0, concat_js_1.concatHex)([
        "0x03",
        sidecars ? (0, toRlp_js_1.toRlp)([serializedTransaction, blobs, commitments, proofs]) : (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionEIP15592(transaction, signature) {
      const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP1559)(transaction);
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        ...toYParitySignatureArray2(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x02",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionEIP29302(transaction, signature) {
      const { chainId, gas, data, nonce, to, value, accessList, gasPrice } = transaction;
      (0, assertTransaction_js_1.assertTransactionEIP2930)(transaction);
      const serializedAccessList = (0, serializeAccessList_js_1.serializeAccessList)(accessList);
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        gasPrice ? (0, toHex_js_1.toHex)(gasPrice) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        serializedAccessList,
        ...toYParitySignatureArray2(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x01",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionLegacy2(transaction, signature) {
      const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction;
      (0, assertTransaction_js_1.assertTransactionLegacy)(transaction);
      let serializedTransaction = [
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        gasPrice ? (0, toHex_js_1.toHex)(gasPrice) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x"
      ];
      if (signature) {
        const v = (() => {
          if (signature.v >= 35n) {
            const inferredChainId = (signature.v - 35n) / 2n;
            if (inferredChainId > 0)
              return signature.v;
            return 27n + (signature.v === 35n ? 0n : 1n);
          }
          if (chainId > 0)
            return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);
          const v2 = 27n + (signature.v === 27n ? 0n : 1n);
          if (signature.v !== v2)
            throw new transaction_js_1.InvalidLegacyVError({ v: signature.v });
          return v2;
        })();
        serializedTransaction = [
          ...serializedTransaction,
          (0, toHex_js_1.toHex)(v),
          signature.r,
          signature.s
        ];
      } else if (chainId > 0) {
        serializedTransaction = [
          ...serializedTransaction,
          (0, toHex_js_1.toHex)(chainId),
          "0x",
          "0x"
        ];
      }
      return (0, toRlp_js_1.toRlp)(serializedTransaction);
    }
    function toYParitySignatureArray2(transaction, signature) {
      const { r, s, v, yParity } = signature ?? transaction;
      if (typeof r === "undefined")
        return [];
      if (typeof s === "undefined")
        return [];
      if (typeof v === "undefined" && typeof yParity === "undefined")
        return [];
      const yParity_ = (() => {
        if (typeof yParity === "number")
          return yParity ? (0, toHex_js_1.toHex)(1) : "0x";
        if (v === 0n)
          return "0x";
        if (v === 1n)
          return (0, toHex_js_1.toHex)(1);
        return v === 27n ? "0x" : (0, toHex_js_1.toHex)(1);
      })();
      return [yParity_, (0, trim_js_1.trim)(r), (0, trim_js_1.trim)(s)];
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toYParitySignatureArray = exports2.serializeTransaction = void 0;
    var transaction_js_1 = require_transaction2();
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    var blobsToProofs_js_1 = require_blobsToProofs();
    var commitmentsToVersionedHashes_js_1 = require_commitmentsToVersionedHashes();
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    var concat_js_1 = require_concat();
    var trim_js_1 = require_trim();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var assertTransaction_js_1 = require_assertTransaction();
    var getTransactionType_js_1 = require_getTransactionType();
    var serializeAccessList_js_1 = require_serializeAccessList();
    exports2.serializeTransaction = serializeTransaction5;
    exports2.toYParitySignatureArray = toYParitySignatureArray2;
  });
  var require_parseUnits = __commonJS2((exports2) => {
    function parseUnits2(value, decimals) {
      let [integer, fraction = "0"] = value.split(".");
      const negative = integer.startsWith("-");
      if (negative)
        integer = integer.slice(1);
      fraction = fraction.replace(/(0+)$/, "");
      if (decimals === 0) {
        if (Math.round(Number(`.${fraction}`)) === 1)
          integer = `${BigInt(integer) + 1n}`;
        fraction = "";
      } else if (fraction.length > decimals) {
        const [left, unit, right] = [
          fraction.slice(0, decimals - 1),
          fraction.slice(decimals - 1, decimals),
          fraction.slice(decimals)
        ];
        const rounded = Math.round(Number(`${unit}.${right}`));
        if (rounded > 9)
          fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, "0");
        else
          fraction = `${left}${rounded}`;
        if (fraction.length > decimals) {
          fraction = fraction.slice(1);
          integer = `${BigInt(integer) + 1n}`;
        }
        fraction = fraction.slice(0, decimals);
      } else {
        fraction = fraction.padEnd(decimals, "0");
      }
      return BigInt(`${negative ? "-" : ""}${integer}${fraction}`);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUnits = void 0;
    exports2.parseUnits = parseUnits2;
  });
  var require_parseEther = __commonJS2((exports2) => {
    function parseEther2(ether, unit = "wei") {
      return (0, parseUnits_js_1.parseUnits)(ether, unit_js_1.etherUnits[unit]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEther = void 0;
    var unit_js_1 = require_unit();
    var parseUnits_js_1 = require_parseUnits();
    exports2.parseEther = parseEther2;
  });
  var require_parseGwei = __commonJS2((exports2) => {
    function parseGwei(ether, unit = "wei") {
      return (0, parseUnits_js_1.parseUnits)(ether, unit_js_1.gweiUnits[unit]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseGwei = void 0;
    var unit_js_1 = require_unit();
    var parseUnits_js_1 = require_parseUnits();
    exports2.parseGwei = parseGwei;
  });
  var require_utils7 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAddressEqual = exports2.isAddress = exports2.getAddress = exports2.getCreate2Address = exports2.getCreateAddress = exports2.getContractAddress = exports2.publicKeyToAddress = exports2.parseAccount = exports2.formatAbiParams = exports2.formatAbiItem = exports2.formatAbiItemWithArgs = exports2.encodePacked = exports2.parseAbiParameters = exports2.parseAbiParameter = exports2.parseAbiItem = exports2.parseAbi = exports2.getAbiItem = exports2.parseEventLogs = exports2.encodeFunctionResult = exports2.encodeFunctionData = exports2.encodeEventTopics = exports2.encodeErrorResult = exports2.encodeDeployData = exports2.encodeAbiParameters = exports2.decodeFunctionResult = exports2.decodeFunctionData = exports2.decodeEventLog = exports2.decodeErrorResult = exports2.decodeAbiParameters = exports2.validateTypedData = exports2.stringify = exports2.getWebSocketRpcClient = exports2.socketClientCache = exports2.getSocketRpcClient = exports2.getHttpRpcClient = exports2.rpc = exports2.getSocket = exports2.integerRegex = exports2.bytesRegex = exports2.arrayRegex = exports2.getChainContractAddress = exports2.extractChain = exports2.defineChain = exports2.assertCurrentChain = exports2.offchainLookupSignature = exports2.offchainLookupAbiItem = exports2.offchainLookup = exports2.ccipFetch = exports2.ccipRequest = exports2.buildRequest = void 0;
    exports2.getContractError = exports2.getCallError = exports2.getNodeError = exports2.containsNodeError = exports2.fromRlp = exports2.hexToString = exports2.hexToNumber = exports2.hexToBigInt = exports2.hexToBool = exports2.fromHex = exports2.fromBytes = exports2.bytesToString = exports2.bytesToNumber = exports2.bytesToBool = exports2.bytesToBigint = exports2.bytesToBigInt = exports2.stringToHex = exports2.numberToHex = exports2.toHex = exports2.bytesToHex = exports2.boolToHex = exports2.stringToBytes = exports2.numberToBytes = exports2.hexToBytes = exports2.toBytes = exports2.boolToBytes = exports2.toRlp = exports2.extract = exports2.formatTransactionRequest = exports2.defineTransactionRequest = exports2.defineTransactionReceipt = exports2.formatLog = exports2.transactionType = exports2.formatTransaction = exports2.defineTransaction = exports2.formatBlock = exports2.defineBlock = exports2.trim = exports2.sliceHex = exports2.sliceBytes = exports2.slice = exports2.size = exports2.padHex = exports2.padBytes = exports2.pad = exports2.isHex = exports2.isBytes = exports2.concatHex = exports2.concatBytes = exports2.concat = void 0;
    exports2.parseGwei = exports2.parseEther = exports2.parseUnits = exports2.formatUnits = exports2.formatGwei = exports2.formatEther = exports2.serializeAccessList = exports2.serializeTransaction = exports2.parseTransaction = exports2.assertTransactionLegacy = exports2.assertTransactionEIP2930 = exports2.assertTransactionEIP1559 = exports2.assertRequest = exports2.getTransactionType = exports2.getSerializedTransactionType = exports2.hashMessage = exports2.verifyTypedData = exports2.verifyMessage = exports2.recoverTypedDataAddress = exports2.recoverPublicKey = exports2.recoverMessageAddress = exports2.recoverAddress = exports2.hashTypedData = exports2.ripemd160 = exports2.sha256 = exports2.keccak256 = exports2.isHash = exports2.toFunctionHash = exports2.toEventHash = exports2.getFunctionSignature = exports2.toFunctionSignature = exports2.getEventSignature = exports2.toEventSignature = exports2.getFunctionSelector = exports2.toFunctionSelector = exports2.getEventSelector = exports2.toEventSelector = exports2.defineFormatter = exports2.getAction = exports2.getTransactionError = exports2.getEstimateGasError = void 0;
    var buildRequest_js_1 = require_buildRequest();
    Object.defineProperty(exports2, "buildRequest", { enumerable: true, get: function() {
      return buildRequest_js_1.buildRequest;
    } });
    var ccip_js_1 = require_ccip2();
    Object.defineProperty(exports2, "ccipRequest", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "ccipFetch", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "offchainLookup", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookup;
    } });
    Object.defineProperty(exports2, "offchainLookupAbiItem", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupAbiItem;
    } });
    Object.defineProperty(exports2, "offchainLookupSignature", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupSignature;
    } });
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    Object.defineProperty(exports2, "assertCurrentChain", { enumerable: true, get: function() {
      return assertCurrentChain_js_1.assertCurrentChain;
    } });
    var defineChain_js_1 = require_defineChain();
    Object.defineProperty(exports2, "defineChain", { enumerable: true, get: function() {
      return defineChain_js_1.defineChain;
    } });
    var extractChain_js_1 = require_extractChain();
    Object.defineProperty(exports2, "extractChain", { enumerable: true, get: function() {
      return extractChain_js_1.extractChain;
    } });
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    Object.defineProperty(exports2, "getChainContractAddress", { enumerable: true, get: function() {
      return getChainContractAddress_js_1.getChainContractAddress;
    } });
    var regex_js_1 = require_regex2();
    Object.defineProperty(exports2, "arrayRegex", { enumerable: true, get: function() {
      return regex_js_1.arrayRegex;
    } });
    Object.defineProperty(exports2, "bytesRegex", { enumerable: true, get: function() {
      return regex_js_1.bytesRegex;
    } });
    Object.defineProperty(exports2, "integerRegex", { enumerable: true, get: function() {
      return regex_js_1.integerRegex;
    } });
    var compat_js_1 = require_compat();
    Object.defineProperty(exports2, "getSocket", { enumerable: true, get: function() {
      return compat_js_1.getSocket;
    } });
    Object.defineProperty(exports2, "rpc", { enumerable: true, get: function() {
      return compat_js_1.rpc;
    } });
    var http_js_1 = require_http();
    Object.defineProperty(exports2, "getHttpRpcClient", { enumerable: true, get: function() {
      return http_js_1.getHttpRpcClient;
    } });
    var socket_js_1 = require_socket();
    Object.defineProperty(exports2, "getSocketRpcClient", { enumerable: true, get: function() {
      return socket_js_1.getSocketRpcClient;
    } });
    Object.defineProperty(exports2, "socketClientCache", { enumerable: true, get: function() {
      return socket_js_1.socketClientCache;
    } });
    var webSocket_js_1 = require_webSocket();
    Object.defineProperty(exports2, "getWebSocketRpcClient", { enumerable: true, get: function() {
      return webSocket_js_1.getWebSocketRpcClient;
    } });
    var stringify_js_1 = require_stringify();
    Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
      return stringify_js_1.stringify;
    } });
    var typedData_js_1 = require_typedData();
    Object.defineProperty(exports2, "validateTypedData", { enumerable: true, get: function() {
      return typedData_js_1.validateTypedData;
    } });
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    Object.defineProperty(exports2, "decodeAbiParameters", { enumerable: true, get: function() {
      return decodeAbiParameters_js_1.decodeAbiParameters;
    } });
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    Object.defineProperty(exports2, "decodeErrorResult", { enumerable: true, get: function() {
      return decodeErrorResult_js_1.decodeErrorResult;
    } });
    var decodeEventLog_js_1 = require_decodeEventLog();
    Object.defineProperty(exports2, "decodeEventLog", { enumerable: true, get: function() {
      return decodeEventLog_js_1.decodeEventLog;
    } });
    var decodeFunctionData_js_1 = require_decodeFunctionData();
    Object.defineProperty(exports2, "decodeFunctionData", { enumerable: true, get: function() {
      return decodeFunctionData_js_1.decodeFunctionData;
    } });
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    Object.defineProperty(exports2, "decodeFunctionResult", { enumerable: true, get: function() {
      return decodeFunctionResult_js_1.decodeFunctionResult;
    } });
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    Object.defineProperty(exports2, "encodeAbiParameters", { enumerable: true, get: function() {
      return encodeAbiParameters_js_1.encodeAbiParameters;
    } });
    var encodeDeployData_js_1 = require_encodeDeployData();
    Object.defineProperty(exports2, "encodeDeployData", { enumerable: true, get: function() {
      return encodeDeployData_js_1.encodeDeployData;
    } });
    var encodeErrorResult_js_1 = require_encodeErrorResult();
    Object.defineProperty(exports2, "encodeErrorResult", { enumerable: true, get: function() {
      return encodeErrorResult_js_1.encodeErrorResult;
    } });
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    Object.defineProperty(exports2, "encodeEventTopics", { enumerable: true, get: function() {
      return encodeEventTopics_js_1.encodeEventTopics;
    } });
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    Object.defineProperty(exports2, "encodeFunctionData", { enumerable: true, get: function() {
      return encodeFunctionData_js_1.encodeFunctionData;
    } });
    var encodeFunctionResult_js_1 = require_encodeFunctionResult();
    Object.defineProperty(exports2, "encodeFunctionResult", { enumerable: true, get: function() {
      return encodeFunctionResult_js_1.encodeFunctionResult;
    } });
    var parseEventLogs_js_1 = require_parseEventLogs();
    Object.defineProperty(exports2, "parseEventLogs", { enumerable: true, get: function() {
      return parseEventLogs_js_1.parseEventLogs;
    } });
    var getAbiItem_js_1 = require_getAbiItem();
    Object.defineProperty(exports2, "getAbiItem", { enumerable: true, get: function() {
      return getAbiItem_js_1.getAbiItem;
    } });
    var abitype_1 = require_exports();
    Object.defineProperty(exports2, "parseAbi", { enumerable: true, get: function() {
      return abitype_1.parseAbi;
    } });
    Object.defineProperty(exports2, "parseAbiItem", { enumerable: true, get: function() {
      return abitype_1.parseAbiItem;
    } });
    Object.defineProperty(exports2, "parseAbiParameter", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameter;
    } });
    Object.defineProperty(exports2, "parseAbiParameters", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameters;
    } });
    var encodePacked_js_1 = require_encodePacked();
    Object.defineProperty(exports2, "encodePacked", { enumerable: true, get: function() {
      return encodePacked_js_1.encodePacked;
    } });
    var formatAbiItemWithArgs_js_1 = require_formatAbiItemWithArgs();
    Object.defineProperty(exports2, "formatAbiItemWithArgs", { enumerable: true, get: function() {
      return formatAbiItemWithArgs_js_1.formatAbiItemWithArgs;
    } });
    var formatAbiItem_js_1 = require_formatAbiItem2();
    Object.defineProperty(exports2, "formatAbiItem", { enumerable: true, get: function() {
      return formatAbiItem_js_1.formatAbiItem;
    } });
    Object.defineProperty(exports2, "formatAbiParams", { enumerable: true, get: function() {
      return formatAbiItem_js_1.formatAbiParams;
    } });
    var parseAccount_js_1 = require_parseAccount();
    Object.defineProperty(exports2, "parseAccount", { enumerable: true, get: function() {
      return parseAccount_js_1.parseAccount;
    } });
    var publicKeyToAddress_js_1 = require_publicKeyToAddress();
    Object.defineProperty(exports2, "publicKeyToAddress", { enumerable: true, get: function() {
      return publicKeyToAddress_js_1.publicKeyToAddress;
    } });
    var getContractAddress_js_1 = require_getContractAddress();
    Object.defineProperty(exports2, "getContractAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getContractAddress;
    } });
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreate2Address;
    } });
    var getAddress_js_1 = require_getAddress();
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return getAddress_js_1.getAddress;
    } });
    var isAddress_js_1 = require_isAddress();
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return isAddress_js_1.isAddress;
    } });
    var isAddressEqual_js_1 = require_isAddressEqual();
    Object.defineProperty(exports2, "isAddressEqual", { enumerable: true, get: function() {
      return isAddressEqual_js_1.isAddressEqual;
    } });
    var concat_js_1 = require_concat();
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return concat_js_1.concat;
    } });
    Object.defineProperty(exports2, "concatBytes", { enumerable: true, get: function() {
      return concat_js_1.concatBytes;
    } });
    Object.defineProperty(exports2, "concatHex", { enumerable: true, get: function() {
      return concat_js_1.concatHex;
    } });
    var isBytes_js_1 = require_isBytes();
    Object.defineProperty(exports2, "isBytes", { enumerable: true, get: function() {
      return isBytes_js_1.isBytes;
    } });
    var isHex_js_1 = require_isHex();
    Object.defineProperty(exports2, "isHex", { enumerable: true, get: function() {
      return isHex_js_1.isHex;
    } });
    var pad_js_1 = require_pad();
    Object.defineProperty(exports2, "pad", { enumerable: true, get: function() {
      return pad_js_1.pad;
    } });
    Object.defineProperty(exports2, "padBytes", { enumerable: true, get: function() {
      return pad_js_1.padBytes;
    } });
    Object.defineProperty(exports2, "padHex", { enumerable: true, get: function() {
      return pad_js_1.padHex;
    } });
    var size_js_1 = require_size();
    Object.defineProperty(exports2, "size", { enumerable: true, get: function() {
      return size_js_1.size;
    } });
    var slice_js_1 = require_slice();
    Object.defineProperty(exports2, "slice", { enumerable: true, get: function() {
      return slice_js_1.slice;
    } });
    Object.defineProperty(exports2, "sliceBytes", { enumerable: true, get: function() {
      return slice_js_1.sliceBytes;
    } });
    Object.defineProperty(exports2, "sliceHex", { enumerable: true, get: function() {
      return slice_js_1.sliceHex;
    } });
    var trim_js_1 = require_trim();
    Object.defineProperty(exports2, "trim", { enumerable: true, get: function() {
      return trim_js_1.trim;
    } });
    var block_js_1 = require_block();
    Object.defineProperty(exports2, "defineBlock", { enumerable: true, get: function() {
      return block_js_1.defineBlock;
    } });
    Object.defineProperty(exports2, "formatBlock", { enumerable: true, get: function() {
      return block_js_1.formatBlock;
    } });
    var transaction_js_1 = require_transaction();
    Object.defineProperty(exports2, "defineTransaction", { enumerable: true, get: function() {
      return transaction_js_1.defineTransaction;
    } });
    Object.defineProperty(exports2, "formatTransaction", { enumerable: true, get: function() {
      return transaction_js_1.formatTransaction;
    } });
    Object.defineProperty(exports2, "transactionType", { enumerable: true, get: function() {
      return transaction_js_1.transactionType;
    } });
    var log_js_1 = require_log();
    Object.defineProperty(exports2, "formatLog", { enumerable: true, get: function() {
      return log_js_1.formatLog;
    } });
    var transactionReceipt_js_1 = require_transactionReceipt();
    Object.defineProperty(exports2, "defineTransactionReceipt", { enumerable: true, get: function() {
      return transactionReceipt_js_1.defineTransactionReceipt;
    } });
    var transactionRequest_js_1 = require_transactionRequest();
    Object.defineProperty(exports2, "defineTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.defineTransactionRequest;
    } });
    Object.defineProperty(exports2, "formatTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.formatTransactionRequest;
    } });
    var extract_js_1 = require_extract();
    Object.defineProperty(exports2, "extract", { enumerable: true, get: function() {
      return extract_js_1.extract;
    } });
    var toRlp_js_1 = require_toRlp();
    Object.defineProperty(exports2, "toRlp", { enumerable: true, get: function() {
      return toRlp_js_1.toRlp;
    } });
    var toBytes_js_1 = require_toBytes();
    Object.defineProperty(exports2, "boolToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.boolToBytes;
    } });
    Object.defineProperty(exports2, "toBytes", { enumerable: true, get: function() {
      return toBytes_js_1.toBytes;
    } });
    Object.defineProperty(exports2, "hexToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.hexToBytes;
    } });
    Object.defineProperty(exports2, "numberToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.numberToBytes;
    } });
    Object.defineProperty(exports2, "stringToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.stringToBytes;
    } });
    var toHex_js_1 = require_toHex();
    Object.defineProperty(exports2, "boolToHex", { enumerable: true, get: function() {
      return toHex_js_1.boolToHex;
    } });
    Object.defineProperty(exports2, "bytesToHex", { enumerable: true, get: function() {
      return toHex_js_1.bytesToHex;
    } });
    Object.defineProperty(exports2, "toHex", { enumerable: true, get: function() {
      return toHex_js_1.toHex;
    } });
    Object.defineProperty(exports2, "numberToHex", { enumerable: true, get: function() {
      return toHex_js_1.numberToHex;
    } });
    Object.defineProperty(exports2, "stringToHex", { enumerable: true, get: function() {
      return toHex_js_1.stringToHex;
    } });
    var fromBytes_js_1 = require_fromBytes();
    Object.defineProperty(exports2, "bytesToBigInt", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBigInt;
    } });
    Object.defineProperty(exports2, "bytesToBigint", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBigInt;
    } });
    Object.defineProperty(exports2, "bytesToBool", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBool;
    } });
    Object.defineProperty(exports2, "bytesToNumber", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToNumber;
    } });
    Object.defineProperty(exports2, "bytesToString", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToString;
    } });
    Object.defineProperty(exports2, "fromBytes", { enumerable: true, get: function() {
      return fromBytes_js_1.fromBytes;
    } });
    var fromHex_js_1 = require_fromHex();
    Object.defineProperty(exports2, "fromHex", { enumerable: true, get: function() {
      return fromHex_js_1.fromHex;
    } });
    Object.defineProperty(exports2, "hexToBool", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBool;
    } });
    Object.defineProperty(exports2, "hexToBigInt", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBigInt;
    } });
    Object.defineProperty(exports2, "hexToNumber", { enumerable: true, get: function() {
      return fromHex_js_1.hexToNumber;
    } });
    Object.defineProperty(exports2, "hexToString", { enumerable: true, get: function() {
      return fromHex_js_1.hexToString;
    } });
    var fromRlp_js_1 = require_fromRlp();
    Object.defineProperty(exports2, "fromRlp", { enumerable: true, get: function() {
      return fromRlp_js_1.fromRlp;
    } });
    var getNodeError_js_1 = require_getNodeError();
    Object.defineProperty(exports2, "containsNodeError", { enumerable: true, get: function() {
      return getNodeError_js_1.containsNodeError;
    } });
    Object.defineProperty(exports2, "getNodeError", { enumerable: true, get: function() {
      return getNodeError_js_1.getNodeError;
    } });
    var getCallError_js_1 = require_getCallError();
    Object.defineProperty(exports2, "getCallError", { enumerable: true, get: function() {
      return getCallError_js_1.getCallError;
    } });
    var getContractError_js_1 = require_getContractError();
    Object.defineProperty(exports2, "getContractError", { enumerable: true, get: function() {
      return getContractError_js_1.getContractError;
    } });
    var getEstimateGasError_js_1 = require_getEstimateGasError();
    Object.defineProperty(exports2, "getEstimateGasError", { enumerable: true, get: function() {
      return getEstimateGasError_js_1.getEstimateGasError;
    } });
    var getTransactionError_js_1 = require_getTransactionError();
    Object.defineProperty(exports2, "getTransactionError", { enumerable: true, get: function() {
      return getTransactionError_js_1.getTransactionError;
    } });
    var getAction_js_1 = require_getAction();
    Object.defineProperty(exports2, "getAction", { enumerable: true, get: function() {
      return getAction_js_1.getAction;
    } });
    var formatter_js_1 = require_formatter();
    Object.defineProperty(exports2, "defineFormatter", { enumerable: true, get: function() {
      return formatter_js_1.defineFormatter;
    } });
    var toEventSelector_js_1 = require_toEventSelector();
    Object.defineProperty(exports2, "toEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    Object.defineProperty(exports2, "getEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    Object.defineProperty(exports2, "toFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    Object.defineProperty(exports2, "getFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    var toEventSignature_js_1 = require_toEventSignature();
    Object.defineProperty(exports2, "toEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    Object.defineProperty(exports2, "getEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    var toFunctionSignature_js_1 = require_toFunctionSignature();
    Object.defineProperty(exports2, "toFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    Object.defineProperty(exports2, "getFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    var toEventHash_js_1 = require_toEventHash();
    Object.defineProperty(exports2, "toEventHash", { enumerable: true, get: function() {
      return toEventHash_js_1.toEventHash;
    } });
    var toFunctionHash_js_1 = require_toFunctionHash();
    Object.defineProperty(exports2, "toFunctionHash", { enumerable: true, get: function() {
      return toFunctionHash_js_1.toFunctionHash;
    } });
    var isHash_js_1 = require_isHash();
    Object.defineProperty(exports2, "isHash", { enumerable: true, get: function() {
      return isHash_js_1.isHash;
    } });
    var keccak256_js_1 = require_keccak256();
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return keccak256_js_1.keccak256;
    } });
    var sha256_js_1 = require_sha2562();
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha256_js_1.sha256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var hashTypedData_js_1 = require_hashTypedData();
    Object.defineProperty(exports2, "hashTypedData", { enumerable: true, get: function() {
      return hashTypedData_js_1.hashTypedData;
    } });
    var recoverAddress_js_1 = require_recoverAddress();
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return recoverAddress_js_1.recoverAddress;
    } });
    var recoverMessageAddress_js_1 = require_recoverMessageAddress();
    Object.defineProperty(exports2, "recoverMessageAddress", { enumerable: true, get: function() {
      return recoverMessageAddress_js_1.recoverMessageAddress;
    } });
    var recoverPublicKey_js_1 = require_recoverPublicKey();
    Object.defineProperty(exports2, "recoverPublicKey", { enumerable: true, get: function() {
      return recoverPublicKey_js_1.recoverPublicKey;
    } });
    var recoverTypedDataAddress_js_1 = require_recoverTypedDataAddress();
    Object.defineProperty(exports2, "recoverTypedDataAddress", { enumerable: true, get: function() {
      return recoverTypedDataAddress_js_1.recoverTypedDataAddress;
    } });
    var verifyMessage_js_1 = require_verifyMessage();
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return verifyMessage_js_1.verifyMessage;
    } });
    var verifyTypedData_js_1 = require_verifyTypedData();
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return verifyTypedData_js_1.verifyTypedData;
    } });
    var hashMessage_js_1 = require_hashMessage();
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return hashMessage_js_1.hashMessage;
    } });
    var getSerializedTransactionType_js_1 = require_getSerializedTransactionType();
    Object.defineProperty(exports2, "getSerializedTransactionType", { enumerable: true, get: function() {
      return getSerializedTransactionType_js_1.getSerializedTransactionType;
    } });
    var getTransactionType_js_1 = require_getTransactionType();
    Object.defineProperty(exports2, "getTransactionType", { enumerable: true, get: function() {
      return getTransactionType_js_1.getTransactionType;
    } });
    var assertRequest_js_1 = require_assertRequest();
    Object.defineProperty(exports2, "assertRequest", { enumerable: true, get: function() {
      return assertRequest_js_1.assertRequest;
    } });
    var assertTransaction_js_1 = require_assertTransaction();
    Object.defineProperty(exports2, "assertTransactionEIP1559", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP1559;
    } });
    Object.defineProperty(exports2, "assertTransactionEIP2930", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP2930;
    } });
    Object.defineProperty(exports2, "assertTransactionLegacy", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionLegacy;
    } });
    var parseTransaction_js_1 = require_parseTransaction();
    Object.defineProperty(exports2, "parseTransaction", { enumerable: true, get: function() {
      return parseTransaction_js_1.parseTransaction;
    } });
    var serializeTransaction_js_1 = require_serializeTransaction();
    Object.defineProperty(exports2, "serializeTransaction", { enumerable: true, get: function() {
      return serializeTransaction_js_1.serializeTransaction;
    } });
    var serializeAccessList_js_1 = require_serializeAccessList();
    Object.defineProperty(exports2, "serializeAccessList", { enumerable: true, get: function() {
      return serializeAccessList_js_1.serializeAccessList;
    } });
    var formatEther_js_1 = require_formatEther();
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return formatEther_js_1.formatEther;
    } });
    var formatGwei_js_1 = require_formatGwei();
    Object.defineProperty(exports2, "formatGwei", { enumerable: true, get: function() {
      return formatGwei_js_1.formatGwei;
    } });
    var formatUnits_js_1 = require_formatUnits();
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return formatUnits_js_1.formatUnits;
    } });
    var parseUnits_js_1 = require_parseUnits();
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return parseUnits_js_1.parseUnits;
    } });
    var parseEther_js_1 = require_parseEther();
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return parseEther_js_1.parseEther;
    } });
    var parseGwei_js_1 = require_parseGwei();
    Object.defineProperty(exports2, "parseGwei", { enumerable: true, get: function() {
      return parseGwei_js_1.parseGwei;
    } });
  });
  var require_proof = __commonJS2((exports2) => {
    function formatStorageProof2(storageProof) {
      return storageProof.map((proof) => ({
        ...proof,
        value: BigInt(proof.value)
      }));
    }
    function formatProof2(proof) {
      return {
        ...proof,
        balance: proof.balance ? BigInt(proof.balance) : void 0,
        nonce: proof.nonce ? (0, index_js_1.hexToNumber)(proof.nonce) : void 0,
        storageProof: proof.storageProof ? formatStorageProof2(proof.storageProof) : void 0
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatProof = void 0;
    var index_js_1 = require_utils7();
    exports2.formatProof = formatProof2;
  });
  var require_getProof = __commonJS2((exports2) => {
    async function getProof3(client, { address, blockNumber, blockTag: blockTag_, storageKeys }) {
      const blockTag = blockTag_ ?? "latest";
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const proof = await client.request({
        method: "eth_getProof",
        params: [address, storageKeys, blockNumberHex || blockTag]
      });
      return (0, proof_js_1.formatProof)(proof);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProof = void 0;
    var toHex_js_1 = require_toHex();
    var proof_js_1 = require_proof();
    exports2.getProof = getProof3;
  });
  var require_getStorageAt = __commonJS2((exports2) => {
    async function getStorageAt2(client, { address, blockNumber, blockTag = "latest", slot }) {
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      const data = await client.request({
        method: "eth_getStorageAt",
        params: [address, slot, blockNumberHex || blockTag]
      });
      return data;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getStorageAt = void 0;
    var toHex_js_1 = require_toHex();
    exports2.getStorageAt = getStorageAt2;
  });
  var require_getTransaction = __commonJS2((exports2) => {
    async function getTransaction2(client, { blockHash, blockNumber, blockTag: blockTag_, hash: hash22, index: index2 }) {
      const blockTag = blockTag_ || "latest";
      const blockNumberHex = blockNumber !== void 0 ? (0, toHex_js_1.numberToHex)(blockNumber) : void 0;
      let transaction = null;
      if (hash22) {
        transaction = await client.request({
          method: "eth_getTransactionByHash",
          params: [hash22]
        });
      } else if (blockHash) {
        transaction = await client.request({
          method: "eth_getTransactionByBlockHashAndIndex",
          params: [blockHash, (0, toHex_js_1.numberToHex)(index2)]
        });
      } else if (blockNumberHex || blockTag) {
        transaction = await client.request({
          method: "eth_getTransactionByBlockNumberAndIndex",
          params: [blockNumberHex || blockTag, (0, toHex_js_1.numberToHex)(index2)]
        });
      }
      if (!transaction)
        throw new transaction_js_1.TransactionNotFoundError({
          blockHash,
          blockNumber,
          blockTag,
          hash: hash22,
          index: index2
        });
      const format = client.chain?.formatters?.transaction?.format || transaction_js_2.formatTransaction;
      return format(transaction);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransaction = void 0;
    var transaction_js_1 = require_transaction2();
    var toHex_js_1 = require_toHex();
    var transaction_js_2 = require_transaction();
    exports2.getTransaction = getTransaction2;
  });
  var require_getTransactionConfirmations = __commonJS2((exports2) => {
    async function getTransactionConfirmations(client, { hash: hash22, transactionReceipt }) {
      const [blockNumber, transaction] = await Promise.all([
        (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({}),
        hash22 ? (0, getAction_js_1.getAction)(client, getTransaction_js_1.getTransaction, "getBlockNumber")({ hash: hash22 }) : void 0
      ]);
      const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;
      if (!transactionBlockNumber)
        return 0n;
      return blockNumber - transactionBlockNumber + 1n;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionConfirmations = void 0;
    var getAction_js_1 = require_getAction();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getTransaction_js_1 = require_getTransaction();
    exports2.getTransactionConfirmations = getTransactionConfirmations;
  });
  var require_getTransactionReceipt = __commonJS2((exports2) => {
    async function getTransactionReceipt2(client, { hash: hash22 }) {
      const receipt = await client.request({
        method: "eth_getTransactionReceipt",
        params: [hash22]
      });
      if (!receipt)
        throw new transaction_js_1.TransactionReceiptNotFoundError({ hash: hash22 });
      const format = client.chain?.formatters?.transactionReceipt?.format || transactionReceipt_js_1.formatTransactionReceipt;
      return format(receipt);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransactionReceipt = void 0;
    var transaction_js_1 = require_transaction2();
    var transactionReceipt_js_1 = require_transactionReceipt();
    exports2.getTransactionReceipt = getTransactionReceipt2;
  });
  var require_multicall = __commonJS2((exports2) => {
    async function multicall(client, parameters) {
      const { allowFailure = true, batchSize: batchSize_, blockNumber, blockTag, multicallAddress: multicallAddress_, stateOverride } = parameters;
      const contracts2 = parameters.contracts;
      const batchSize = batchSize_ ?? (typeof client.batch?.multicall === "object" && client.batch.multicall.batchSize || 1024);
      let multicallAddress = multicallAddress_;
      if (!multicallAddress) {
        if (!client.chain)
          throw new Error("client chain not configured. multicallAddress is required.");
        multicallAddress = (0, getChainContractAddress_js_1.getChainContractAddress)({
          blockNumber,
          chain: client.chain,
          contract: "multicall3"
        });
      }
      const chunkedCalls = [[]];
      let currentChunk = 0;
      let currentChunkSize = 0;
      for (let i = 0; i < contracts2.length; i++) {
        const { abi, address, args, functionName } = contracts2[i];
        try {
          const callData = (0, encodeFunctionData_js_1.encodeFunctionData)({ abi, args, functionName });
          currentChunkSize += (callData.length - 2) / 2;
          if (batchSize > 0 && currentChunkSize > batchSize && chunkedCalls[currentChunk].length > 0) {
            currentChunk++;
            currentChunkSize = (callData.length - 2) / 2;
            chunkedCalls[currentChunk] = [];
          }
          chunkedCalls[currentChunk] = [
            ...chunkedCalls[currentChunk],
            {
              allowFailure: true,
              callData,
              target: address
            }
          ];
        } catch (err) {
          const error = (0, getContractError_js_1.getContractError)(err, {
            abi,
            address,
            args,
            docsPath: "/docs/contract/multicall",
            functionName
          });
          if (!allowFailure)
            throw error;
          chunkedCalls[currentChunk] = [
            ...chunkedCalls[currentChunk],
            {
              allowFailure: true,
              callData: "0x",
              target: address
            }
          ];
        }
      }
      const aggregate3Results = await Promise.allSettled(chunkedCalls.map((calls) => (0, getAction_js_1.getAction)(client, readContract_js_1.readContract, "readContract")({
        abi: abis_js_1.multicall3Abi,
        address: multicallAddress,
        args: [calls],
        blockNumber,
        blockTag,
        functionName: "aggregate3",
        stateOverride
      })));
      const results = [];
      for (let i = 0; i < aggregate3Results.length; i++) {
        const result = aggregate3Results[i];
        if (result.status === "rejected") {
          if (!allowFailure)
            throw result.reason;
          for (let j = 0; j < chunkedCalls[i].length; j++) {
            results.push({
              status: "failure",
              error: result.reason,
              result: void 0
            });
          }
          continue;
        }
        const aggregate3Result = result.value;
        for (let j = 0; j < aggregate3Result.length; j++) {
          const { returnData, success } = aggregate3Result[j];
          const { callData } = chunkedCalls[i][j];
          const { abi, address, functionName, args } = contracts2[results.length];
          try {
            if (callData === "0x")
              throw new abi_js_1.AbiDecodingZeroDataError();
            if (!success)
              throw new contract_js_1.RawContractError({ data: returnData });
            const result2 = (0, decodeFunctionResult_js_1.decodeFunctionResult)({
              abi,
              args,
              data: returnData,
              functionName
            });
            results.push(allowFailure ? { result: result2, status: "success" } : result2);
          } catch (err) {
            const error = (0, getContractError_js_1.getContractError)(err, {
              abi,
              address,
              args,
              docsPath: "/docs/contract/multicall",
              functionName
            });
            if (!allowFailure)
              throw error;
            results.push({ error, result: void 0, status: "failure" });
          }
        }
      }
      if (results.length !== contracts2.length)
        throw new base_js_1.BaseError("multicall results mismatch");
      return results;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.multicall = void 0;
    var abis_js_1 = require_abis();
    var abi_js_1 = require_abi();
    var base_js_1 = require_base();
    var contract_js_1 = require_contract();
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    var getContractError_js_1 = require_getContractError();
    var getAction_js_1 = require_getAction();
    var readContract_js_1 = require_readContract();
    exports2.multicall = multicall;
  });
  var require_contracts2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.universalSignatureValidatorByteCode = void 0;
    exports2.universalSignatureValidatorByteCode = "0x60806040523480156200001157600080fd5b50604051620007003803806200070083398101604081905262000034916200056f565b6000620000438484846200004f565b9050806000526001601ff35b600080846001600160a01b0316803b806020016040519081016040528181526000908060200190933c90507f6492649264926492649264926492649264926492649264926492649264926492620000a68462000451565b036200021f57600060608085806020019051810190620000c79190620005ce565b8651929550909350915060000362000192576000836001600160a01b031683604051620000f5919062000643565b6000604051808303816000865af19150503d806000811462000134576040519150601f19603f3d011682016040523d82523d6000602084013e62000139565b606091505b5050905080620001905760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b505b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90620001c4908b90869060040162000661565b602060405180830381865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200069d565b6001600160e01b031916149450505050506200044a565b805115620002b157604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9062000259908890889060040162000661565b602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d91906200069d565b6001600160e01b031916149150506200044a565b8251604114620003195760405162461bcd60e51b815260206004820152603a6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000606482015260840162000187565b620003236200046b565b506020830151604080850151855186939260009185919081106200034b576200034b620006c9565b016020015160f81c9050601b81148015906200036b57508060ff16601c14155b15620003cf5760405162461bcd60e51b815260206004820152603b6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000606482015260840162000187565b6040805160008152602081018083528a905260ff83169181019190915260608101849052608081018390526001600160a01b038a169060019060a0016020604051602081039080840390855afa1580156200042e573d6000803e3d6000fd5b505050602060405103516001600160a01b031614955050505050505b9392505050565b60006020825110156200046357600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b03811681146200049f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004d5578181015183820152602001620004bb565b50506000910152565b600082601f830112620004f057600080fd5b81516001600160401b03808211156200050d576200050d620004a2565b604051601f8301601f19908116603f01168101908282118183101715620005385762000538620004a2565b816040528381528660208588010111156200055257600080fd5b62000565846020830160208901620004b8565b9695505050505050565b6000806000606084860312156200058557600080fd5b8351620005928162000489565b6020850151604086015191945092506001600160401b03811115620005b657600080fd5b620005c486828701620004de565b9150509250925092565b600080600060608486031215620005e457600080fd5b8351620005f18162000489565b60208501519093506001600160401b03808211156200060f57600080fd5b6200061d87838801620004de565b935060408601519150808211156200063457600080fd5b50620005c486828701620004de565b6000825162000657818460208701620004b8565b9190910192915050565b828152604060208201526000825180604084015262000688816060850160208701620004b8565b601f01601f1916919091016060019392505050565b600060208284031215620006b057600080fd5b81516001600160e01b0319811681146200044a57600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572";
  });
  var require_isBytesEqual = __commonJS2((exports2) => {
    function isBytesEqual(a_, b_) {
      const a = (0, isHex_js_1.isHex)(a_) ? (0, toBytes_js_1.toBytes)(a_) : a_;
      const b = (0, isHex_js_1.isHex)(b_) ? (0, toBytes_js_1.toBytes)(b_) : b_;
      return (0, utils_1.equalBytes)(a, b);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isBytesEqual = void 0;
    var utils_1 = require_utils6();
    var toBytes_js_1 = require_toBytes();
    var isHex_js_1 = require_isHex();
    exports2.isBytesEqual = isBytesEqual;
  });
  var require_verifyHash = __commonJS2((exports2) => {
    async function verifyHash(client, { address, hash: hash22, signature, ...callRequest }) {
      const signatureHex = (0, index_js_1.isHex)(signature) ? signature : (0, index_js_1.toHex)(signature);
      try {
        const { data } = await (0, getAction_js_1.getAction)(client, call_js_1.call, "call")({
          data: (0, index_js_1.encodeDeployData)({
            abi: abis_js_1.universalSignatureValidatorAbi,
            args: [address, hash22, signatureHex],
            bytecode: contracts_js_1.universalSignatureValidatorByteCode
          }),
          ...callRequest
        });
        return (0, isBytesEqual_js_1.isBytesEqual)(data ?? "0x0", "0x1");
      } catch (error) {
        if (error instanceof contract_js_1.CallExecutionError) {
          return false;
        }
        throw error;
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyHash = void 0;
    var abis_js_1 = require_abis();
    var contracts_js_1 = require_contracts2();
    var contract_js_1 = require_contract();
    var isBytesEqual_js_1 = require_isBytesEqual();
    var getAction_js_1 = require_getAction();
    var index_js_1 = require_utils7();
    var call_js_1 = require_call();
    exports2.verifyHash = verifyHash;
  });
  var require_verifyMessage2 = __commonJS2((exports2) => {
    async function verifyMessage(client, { address, message, signature, ...callRequest }) {
      const hash22 = (0, index_js_1.hashMessage)(message);
      return (0, verifyHash_js_1.verifyHash)(client, {
        address,
        hash: hash22,
        signature,
        ...callRequest
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyMessage = void 0;
    var index_js_1 = require_utils7();
    var verifyHash_js_1 = require_verifyHash();
    exports2.verifyMessage = verifyMessage;
  });
  var require_verifyTypedData2 = __commonJS2((exports2) => {
    async function verifyTypedData(client, parameters) {
      const { address, signature, message, primaryType, types, domain, ...callRequest } = parameters;
      const hash22 = (0, hashTypedData_js_1.hashTypedData)({ message, primaryType, types, domain });
      return (0, verifyHash_js_1.verifyHash)(client, {
        address,
        hash: hash22,
        signature,
        ...callRequest
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyTypedData = void 0;
    var hashTypedData_js_1 = require_hashTypedData();
    var verifyHash_js_1 = require_verifyHash();
    exports2.verifyTypedData = verifyTypedData;
  });
  var require_watchBlockNumber = __commonJS2((exports2) => {
    function watchBlockNumber(client, { emitOnBegin = false, emitMissed = false, onBlockNumber, onError, poll: poll_, pollingInterval = client.pollingInterval }) {
      const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket";
      let prevBlockNumber;
      const pollBlockNumber = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchBlockNumber",
          client.uid,
          emitOnBegin,
          emitMissed,
          pollingInterval
        ]);
        return (0, observe_js_1.observe)(observerId, { onBlockNumber, onError }, (emit) => (0, poll_js_1.poll)(async () => {
          try {
            const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({ cacheTime: 0 });
            if (prevBlockNumber) {
              if (blockNumber === prevBlockNumber)
                return;
              if (blockNumber - prevBlockNumber > 1 && emitMissed) {
                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {
                  emit.onBlockNumber(i, prevBlockNumber);
                  prevBlockNumber = i;
                }
              }
            }
            if (!prevBlockNumber || blockNumber > prevBlockNumber) {
              emit.onBlockNumber(blockNumber, prevBlockNumber);
              prevBlockNumber = blockNumber;
            }
          } catch (err) {
            emit.onError?.(err);
          }
        }, {
          emitOnBegin,
          interval: pollingInterval
        }));
      };
      const subscribeBlockNumber = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchBlockNumber",
          client.uid,
          emitOnBegin,
          emitMissed
        ]);
        return (0, observe_js_1.observe)(observerId, { onBlockNumber, onError }, (emit) => {
          let active = true;
          let unsubscribe = () => active = false;
          (async () => {
            try {
              const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
                params: ["newHeads"],
                onData(data) {
                  if (!active)
                    return;
                  const blockNumber = (0, fromHex_js_1.hexToBigInt)(data.result?.number);
                  emit.onBlockNumber(blockNumber, prevBlockNumber);
                  prevBlockNumber = blockNumber;
                },
                onError(error) {
                  emit.onError?.(error);
                }
              });
              unsubscribe = unsubscribe_;
              if (!active)
                unsubscribe();
            } catch (err) {
              onError?.(err);
            }
          })();
          return () => unsubscribe();
        });
      };
      return enablePolling ? pollBlockNumber() : subscribeBlockNumber();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchBlockNumber = void 0;
    var fromHex_js_1 = require_fromHex();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var getBlockNumber_js_1 = require_getBlockNumber();
    exports2.watchBlockNumber = watchBlockNumber;
  });
  var require_waitForTransactionReceipt = __commonJS2((exports2) => {
    async function waitForTransactionReceipt(client, { confirmations = 1, hash: hash22, onReplaced, pollingInterval = client.pollingInterval, retryCount = 6, retryDelay = ({ count }) => ~~(1 << count) * 200, timeout }) {
      const observerId = (0, stringify_js_1.stringify)(["waitForTransactionReceipt", client.uid, hash22]);
      let transaction;
      let replacedTransaction;
      let receipt;
      let retrying = false;
      return new Promise((resolve, reject) => {
        if (timeout)
          setTimeout(() => reject(new transaction_js_1.WaitForTransactionReceiptTimeoutError({ hash: hash22 })), timeout);
        const _unobserve = (0, observe_js_1.observe)(observerId, { onReplaced, resolve, reject }, (emit) => {
          const _unwatch = (0, getAction_js_1.getAction)(client, watchBlockNumber_js_1.watchBlockNumber, "watchBlockNumber")({
            emitMissed: true,
            emitOnBegin: true,
            poll: true,
            pollingInterval,
            async onBlockNumber(blockNumber_) {
              if (retrying)
                return;
              let blockNumber = blockNumber_;
              const done = (fn) => {
                _unwatch();
                fn();
                _unobserve();
              };
              try {
                if (receipt) {
                  if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                    return;
                  done(() => emit.resolve(receipt));
                  return;
                }
                if (!transaction) {
                  retrying = true;
                  await (0, withRetry_js_1.withRetry)(async () => {
                    transaction = await (0, getAction_js_1.getAction)(client, getTransaction_js_1.getTransaction, "getTransaction")({ hash: hash22 });
                    if (transaction.blockNumber)
                      blockNumber = transaction.blockNumber;
                  }, {
                    delay: retryDelay,
                    retryCount
                  });
                  retrying = false;
                }
                receipt = await (0, getAction_js_1.getAction)(client, getTransactionReceipt_js_1.getTransactionReceipt, "getTransactionReceipt")({ hash: hash22 });
                if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                  return;
                done(() => emit.resolve(receipt));
              } catch (err) {
                if (err instanceof transaction_js_1.TransactionNotFoundError || err instanceof transaction_js_1.TransactionReceiptNotFoundError) {
                  if (!transaction) {
                    retrying = false;
                    return;
                  }
                  try {
                    replacedTransaction = transaction;
                    retrying = true;
                    const block = await (0, withRetry_js_1.withRetry)(() => (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
                      blockNumber,
                      includeTransactions: true
                    }), {
                      delay: retryDelay,
                      retryCount,
                      shouldRetry: ({ error }) => error instanceof block_js_1.BlockNotFoundError
                    });
                    retrying = false;
                    const replacementTransaction = block.transactions.find(({ from, nonce }) => from === replacedTransaction.from && nonce === replacedTransaction.nonce);
                    if (!replacementTransaction)
                      return;
                    receipt = await (0, getAction_js_1.getAction)(client, getTransactionReceipt_js_1.getTransactionReceipt, "getTransactionReceipt")({
                      hash: replacementTransaction.hash
                    });
                    if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                      return;
                    let reason = "replaced";
                    if (replacementTransaction.to === replacedTransaction.to && replacementTransaction.value === replacedTransaction.value) {
                      reason = "repriced";
                    } else if (replacementTransaction.from === replacementTransaction.to && replacementTransaction.value === 0n) {
                      reason = "cancelled";
                    }
                    done(() => {
                      emit.onReplaced?.({
                        reason,
                        replacedTransaction,
                        transaction: replacementTransaction,
                        transactionReceipt: receipt
                      });
                      emit.resolve(receipt);
                    });
                  } catch (err_) {
                    done(() => emit.reject(err_));
                  }
                } else {
                  done(() => emit.reject(err));
                }
              }
            }
          });
        });
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitForTransactionReceipt = void 0;
    var block_js_1 = require_block2();
    var transaction_js_1 = require_transaction2();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var withRetry_js_1 = require_withRetry();
    var stringify_js_1 = require_stringify();
    var getBlock_js_1 = require_getBlock();
    var getTransaction_js_1 = require_getTransaction();
    var getTransactionReceipt_js_1 = require_getTransactionReceipt();
    var watchBlockNumber_js_1 = require_watchBlockNumber();
    exports2.waitForTransactionReceipt = waitForTransactionReceipt;
  });
  var require_watchBlocks = __commonJS2((exports2) => {
    function watchBlocks(client, { blockTag = "latest", emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval }) {
      const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket";
      const includeTransactions = includeTransactions_ ?? false;
      let prevBlock;
      const pollBlocks = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchBlocks",
          client.uid,
          blockTag,
          emitMissed,
          emitOnBegin,
          includeTransactions,
          pollingInterval
        ]);
        return (0, observe_js_1.observe)(observerId, { onBlock, onError }, (emit) => (0, poll_js_1.poll)(async () => {
          try {
            const block = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
              blockTag,
              includeTransactions
            });
            if (block.number && prevBlock?.number) {
              if (block.number === prevBlock.number)
                return;
              if (block.number - prevBlock.number > 1 && emitMissed) {
                for (let i = prevBlock?.number + 1n; i < block.number; i++) {
                  const block2 = await (0, getAction_js_1.getAction)(client, getBlock_js_1.getBlock, "getBlock")({
                    blockNumber: i,
                    includeTransactions
                  });
                  emit.onBlock(block2, prevBlock);
                  prevBlock = block2;
                }
              }
            }
            if (!prevBlock?.number || blockTag === "pending" && !block?.number || block.number && block.number > prevBlock.number) {
              emit.onBlock(block, prevBlock);
              prevBlock = block;
            }
          } catch (err) {
            emit.onError?.(err);
          }
        }, {
          emitOnBegin,
          interval: pollingInterval
        }));
      };
      const subscribeBlocks = () => {
        let active = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
              params: ["newHeads"],
              onData(data) {
                if (!active)
                  return;
                const format = client.chain?.formatters?.block?.format || block_js_1.formatBlock;
                const block = format(data.result);
                onBlock(block, prevBlock);
                prevBlock = block;
              },
              onError(error) {
                onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      };
      return enablePolling ? pollBlocks() : subscribeBlocks();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchBlocks = void 0;
    var block_js_1 = require_block();
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var getBlock_js_1 = require_getBlock();
    exports2.watchBlocks = watchBlocks;
  });
  var require_watchEvent = __commonJS2((exports2) => {
    function watchEvent(client, { address, args, batch = true, event, events, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ }) {
      const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket" || typeof fromBlock === "bigint";
      const strict = strict_ ?? false;
      const pollEvent = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchEvent",
          address,
          args,
          batch,
          client.uid,
          event,
          pollingInterval,
          fromBlock
        ]);
        return (0, observe_js_1.observe)(observerId, { onLogs, onError }, (emit) => {
          let previousBlockNumber;
          if (fromBlock !== void 0)
            previousBlockNumber = fromBlock - 1n;
          let filter;
          let initialized = false;
          const unwatch = (0, poll_js_1.poll)(async () => {
            if (!initialized) {
              try {
                filter = await (0, getAction_js_1.getAction)(client, createEventFilter_js_1.createEventFilter, "createEventFilter")({
                  address,
                  args,
                  event,
                  events,
                  strict,
                  fromBlock
                });
              } catch {
              }
              initialized = true;
              return;
            }
            try {
              let logs;
              if (filter) {
                logs = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, "getFilterChanges")({ filter });
              } else {
                const blockNumber = await (0, getAction_js_1.getAction)(client, getBlockNumber_js_1.getBlockNumber, "getBlockNumber")({});
                if (previousBlockNumber && previousBlockNumber !== blockNumber) {
                  logs = await (0, getAction_js_1.getAction)(client, getLogs_js_1.getLogs, "getLogs")({
                    address,
                    args,
                    event,
                    events,
                    fromBlock: previousBlockNumber + 1n,
                    toBlock: blockNumber
                  });
                } else {
                  logs = [];
                }
                previousBlockNumber = blockNumber;
              }
              if (logs.length === 0)
                return;
              if (batch)
                emit.onLogs(logs);
              else
                for (const log of logs)
                  emit.onLogs([log]);
            } catch (err) {
              if (filter && err instanceof rpc_js_1.InvalidInputRpcError)
                initialized = false;
              emit.onError?.(err);
            }
          }, {
            emitOnBegin: true,
            interval: pollingInterval
          });
          return async () => {
            if (filter)
              await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, "uninstallFilter")({ filter });
            unwatch();
          };
        });
      };
      const subscribeEvent = () => {
        let active = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            const events_ = events ?? (event ? [event] : void 0);
            let topics = [];
            if (events_) {
              topics = [
                events_.flatMap((event2) => (0, index_js_1.encodeEventTopics)({
                  abi: [event2],
                  eventName: event2.name,
                  args
                }))
              ];
              if (event)
                topics = topics[0];
            }
            const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
              params: ["logs", { address, topics }],
              onData(data) {
                if (!active)
                  return;
                const log = data.result;
                try {
                  const { eventName, args: args2 } = (0, index_js_1.decodeEventLog)({
                    abi: events_ ?? [],
                    data: log.data,
                    topics: log.topics,
                    strict
                  });
                  const formatted = (0, index_js_1.formatLog)(log, { args: args2, eventName });
                  onLogs([formatted]);
                } catch (err) {
                  let eventName;
                  let isUnnamed;
                  if (err instanceof abi_js_1.DecodeLogDataMismatch || err instanceof abi_js_1.DecodeLogTopicsMismatch) {
                    if (strict_)
                      return;
                    eventName = err.abiItem.name;
                    isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                  }
                  const formatted = (0, index_js_1.formatLog)(log, {
                    args: isUnnamed ? [] : {},
                    eventName
                  });
                  onLogs([formatted]);
                }
              },
              onError(error) {
                onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      };
      return enablePolling ? pollEvent() : subscribeEvent();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchEvent = void 0;
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var abi_js_1 = require_abi();
    var rpc_js_1 = require_rpc();
    var getAction_js_1 = require_getAction();
    var index_js_1 = require_utils7();
    var createEventFilter_js_1 = require_createEventFilter();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var getLogs_js_1 = require_getLogs();
    var uninstallFilter_js_1 = require_uninstallFilter();
    exports2.watchEvent = watchEvent;
  });
  var require_watchPendingTransactions = __commonJS2((exports2) => {
    function watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval }) {
      const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket";
      const pollPendingTransactions = () => {
        const observerId = (0, stringify_js_1.stringify)([
          "watchPendingTransactions",
          client.uid,
          batch,
          pollingInterval
        ]);
        return (0, observe_js_1.observe)(observerId, { onTransactions, onError }, (emit) => {
          let filter;
          const unwatch = (0, poll_js_1.poll)(async () => {
            try {
              if (!filter) {
                try {
                  filter = await (0, getAction_js_1.getAction)(client, createPendingTransactionFilter_js_1.createPendingTransactionFilter, "createPendingTransactionFilter")({});
                  return;
                } catch (err) {
                  unwatch();
                  throw err;
                }
              }
              const hashes = await (0, getAction_js_1.getAction)(client, getFilterChanges_js_1.getFilterChanges, "getFilterChanges")({ filter });
              if (hashes.length === 0)
                return;
              if (batch)
                emit.onTransactions(hashes);
              else
                for (const hash22 of hashes)
                  emit.onTransactions([hash22]);
            } catch (err) {
              emit.onError?.(err);
            }
          }, {
            emitOnBegin: true,
            interval: pollingInterval
          });
          return async () => {
            if (filter)
              await (0, getAction_js_1.getAction)(client, uninstallFilter_js_1.uninstallFilter, "uninstallFilter")({ filter });
            unwatch();
          };
        });
      };
      const subscribePendingTransactions = () => {
        let active = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
              params: ["newPendingTransactions"],
              onData(data) {
                if (!active)
                  return;
                const transaction = data.result;
                onTransactions([transaction]);
              },
              onError(error) {
                onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      };
      return enablePolling ? pollPendingTransactions() : subscribePendingTransactions();
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchPendingTransactions = void 0;
    var getAction_js_1 = require_getAction();
    var observe_js_1 = require_observe();
    var poll_js_1 = require_poll();
    var stringify_js_1 = require_stringify();
    var createPendingTransactionFilter_js_1 = require_createPendingTransactionFilter();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var uninstallFilter_js_1 = require_uninstallFilter();
    exports2.watchPendingTransactions = watchPendingTransactions;
  });
  var require_public = __commonJS2((exports2) => {
    function publicActions(client) {
      return {
        call: (args) => (0, call_js_1.call)(client, args),
        createBlockFilter: () => (0, createBlockFilter_js_1.createBlockFilter)(client),
        createContractEventFilter: (args) => (0, createContractEventFilter_js_1.createContractEventFilter)(client, args),
        createEventFilter: (args) => (0, createEventFilter_js_1.createEventFilter)(client, args),
        createPendingTransactionFilter: () => (0, createPendingTransactionFilter_js_1.createPendingTransactionFilter)(client),
        estimateContractGas: (args) => (0, estimateContractGas_js_1.estimateContractGas)(client, args),
        estimateGas: (args) => (0, estimateGas_js_1.estimateGas)(client, args),
        getBalance: (args) => (0, getBalance_js_1.getBalance)(client, args),
        getBlobBaseFee: () => (0, getBlobBaseFee_js_1.getBlobBaseFee)(client),
        getBlock: (args) => (0, getBlock_js_1.getBlock)(client, args),
        getBlockNumber: (args) => (0, getBlockNumber_js_1.getBlockNumber)(client, args),
        getBlockTransactionCount: (args) => (0, getBlockTransactionCount_js_1.getBlockTransactionCount)(client, args),
        getBytecode: (args) => (0, getBytecode_js_1.getBytecode)(client, args),
        getChainId: () => (0, getChainId_js_1.getChainId)(client),
        getContractEvents: (args) => (0, getContractEvents_js_1.getContractEvents)(client, args),
        getEnsAddress: (args) => (0, getEnsAddress_js_1.getEnsAddress)(client, args),
        getEnsAvatar: (args) => (0, getEnsAvatar_js_1.getEnsAvatar)(client, args),
        getEnsName: (args) => (0, getEnsName_js_1.getEnsName)(client, args),
        getEnsResolver: (args) => (0, getEnsResolver_js_1.getEnsResolver)(client, args),
        getEnsText: (args) => (0, getEnsText_js_1.getEnsText)(client, args),
        getFeeHistory: (args) => (0, getFeeHistory_js_1.getFeeHistory)(client, args),
        estimateFeesPerGas: (args) => (0, estimateFeesPerGas_js_1.estimateFeesPerGas)(client, args),
        getFilterChanges: (args) => (0, getFilterChanges_js_1.getFilterChanges)(client, args),
        getFilterLogs: (args) => (0, getFilterLogs_js_1.getFilterLogs)(client, args),
        getGasPrice: () => (0, getGasPrice_js_1.getGasPrice)(client),
        getLogs: (args) => (0, getLogs_js_1.getLogs)(client, args),
        getProof: (args) => (0, getProof_js_1.getProof)(client, args),
        estimateMaxPriorityFeePerGas: (args) => (0, estimateMaxPriorityFeePerGas_js_1.estimateMaxPriorityFeePerGas)(client, args),
        getStorageAt: (args) => (0, getStorageAt_js_1.getStorageAt)(client, args),
        getTransaction: (args) => (0, getTransaction_js_1.getTransaction)(client, args),
        getTransactionConfirmations: (args) => (0, getTransactionConfirmations_js_1.getTransactionConfirmations)(client, args),
        getTransactionCount: (args) => (0, getTransactionCount_js_1.getTransactionCount)(client, args),
        getTransactionReceipt: (args) => (0, getTransactionReceipt_js_1.getTransactionReceipt)(client, args),
        multicall: (args) => (0, multicall_js_1.multicall)(client, args),
        prepareTransactionRequest: (args) => (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args),
        readContract: (args) => (0, readContract_js_1.readContract)(client, args),
        sendRawTransaction: (args) => (0, sendRawTransaction_js_1.sendRawTransaction)(client, args),
        simulateContract: (args) => (0, simulateContract_js_1.simulateContract)(client, args),
        verifyMessage: (args) => (0, verifyMessage_js_1.verifyMessage)(client, args),
        verifyTypedData: (args) => (0, verifyTypedData_js_1.verifyTypedData)(client, args),
        uninstallFilter: (args) => (0, uninstallFilter_js_1.uninstallFilter)(client, args),
        waitForTransactionReceipt: (args) => (0, waitForTransactionReceipt_js_1.waitForTransactionReceipt)(client, args),
        watchBlocks: (args) => (0, watchBlocks_js_1.watchBlocks)(client, args),
        watchBlockNumber: (args) => (0, watchBlockNumber_js_1.watchBlockNumber)(client, args),
        watchContractEvent: (args) => (0, watchContractEvent_js_1.watchContractEvent)(client, args),
        watchEvent: (args) => (0, watchEvent_js_1.watchEvent)(client, args),
        watchPendingTransactions: (args) => (0, watchPendingTransactions_js_1.watchPendingTransactions)(client, args)
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.publicActions = void 0;
    var getEnsAddress_js_1 = require_getEnsAddress();
    var getEnsAvatar_js_1 = require_getEnsAvatar();
    var getEnsName_js_1 = require_getEnsName();
    var getEnsResolver_js_1 = require_getEnsResolver();
    var getEnsText_js_1 = require_getEnsText();
    var call_js_1 = require_call();
    var createBlockFilter_js_1 = require_createBlockFilter();
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    var createEventFilter_js_1 = require_createEventFilter();
    var createPendingTransactionFilter_js_1 = require_createPendingTransactionFilter();
    var estimateContractGas_js_1 = require_estimateContractGas();
    var estimateFeesPerGas_js_1 = require_estimateFeesPerGas();
    var estimateGas_js_1 = require_estimateGas2();
    var estimateMaxPriorityFeePerGas_js_1 = require_estimateMaxPriorityFeePerGas();
    var getBalance_js_1 = require_getBalance();
    var getBlobBaseFee_js_1 = require_getBlobBaseFee();
    var getBlock_js_1 = require_getBlock();
    var getBlockNumber_js_1 = require_getBlockNumber();
    var getBlockTransactionCount_js_1 = require_getBlockTransactionCount();
    var getBytecode_js_1 = require_getBytecode();
    var getChainId_js_1 = require_getChainId();
    var getContractEvents_js_1 = require_getContractEvents();
    var getFeeHistory_js_1 = require_getFeeHistory();
    var getFilterChanges_js_1 = require_getFilterChanges();
    var getFilterLogs_js_1 = require_getFilterLogs();
    var getGasPrice_js_1 = require_getGasPrice();
    var getLogs_js_1 = require_getLogs();
    var getProof_js_1 = require_getProof();
    var getStorageAt_js_1 = require_getStorageAt();
    var getTransaction_js_1 = require_getTransaction();
    var getTransactionConfirmations_js_1 = require_getTransactionConfirmations();
    var getTransactionCount_js_1 = require_getTransactionCount();
    var getTransactionReceipt_js_1 = require_getTransactionReceipt();
    var multicall_js_1 = require_multicall();
    var readContract_js_1 = require_readContract();
    var simulateContract_js_1 = require_simulateContract();
    var uninstallFilter_js_1 = require_uninstallFilter();
    var verifyMessage_js_1 = require_verifyMessage2();
    var verifyTypedData_js_1 = require_verifyTypedData2();
    var waitForTransactionReceipt_js_1 = require_waitForTransactionReceipt();
    var watchBlockNumber_js_1 = require_watchBlockNumber();
    var watchBlocks_js_1 = require_watchBlocks();
    var watchContractEvent_js_1 = require_watchContractEvent();
    var watchEvent_js_1 = require_watchEvent();
    var watchPendingTransactions_js_1 = require_watchPendingTransactions();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    exports2.publicActions = publicActions;
  });
  var require_createPublicClient = __commonJS2((exports2) => {
    function createPublicClient(parameters) {
      const { key = "public", name = "Public Client" } = parameters;
      const client = (0, createClient_js_1.createClient)({
        ...parameters,
        key,
        name,
        type: "publicClient"
      });
      return client.extend(public_js_1.publicActions);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createPublicClient = void 0;
    var createClient_js_1 = require_createClient();
    var public_js_1 = require_public();
    exports2.createPublicClient = createPublicClient;
  });
  var require_dropTransaction = __commonJS2((exports2) => {
    async function dropTransaction(client, { hash: hash22 }) {
      await client.request({
        method: `${client.mode}_dropTransaction`,
        params: [hash22]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dropTransaction = void 0;
    exports2.dropTransaction = dropTransaction;
  });
  var require_dumpState = __commonJS2((exports2) => {
    async function dumpState(client) {
      return client.request({
        method: `${client.mode}_dumpState`
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dumpState = void 0;
    exports2.dumpState = dumpState;
  });
  var require_getAutomine = __commonJS2((exports2) => {
    async function getAutomine(client) {
      if (client.mode === "ganache")
        return await client.request({
          method: "eth_mining"
        });
      return await client.request({
        method: `${client.mode}_getAutomine`
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAutomine = void 0;
    exports2.getAutomine = getAutomine;
  });
  var require_getTxpoolContent = __commonJS2((exports2) => {
    async function getTxpoolContent(client) {
      return await client.request({
        method: "txpool_content"
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTxpoolContent = void 0;
    exports2.getTxpoolContent = getTxpoolContent;
  });
  var require_getTxpoolStatus = __commonJS2((exports2) => {
    async function getTxpoolStatus(client) {
      const { pending, queued } = await client.request({
        method: "txpool_status"
      });
      return {
        pending: (0, fromHex_js_1.hexToNumber)(pending),
        queued: (0, fromHex_js_1.hexToNumber)(queued)
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTxpoolStatus = void 0;
    var fromHex_js_1 = require_fromHex();
    exports2.getTxpoolStatus = getTxpoolStatus;
  });
  var require_impersonateAccount = __commonJS2((exports2) => {
    async function impersonateAccount(client, { address }) {
      await client.request({
        method: `${client.mode}_impersonateAccount`,
        params: [address]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.impersonateAccount = void 0;
    exports2.impersonateAccount = impersonateAccount;
  });
  var require_increaseTime = __commonJS2((exports2) => {
    async function increaseTime(client, { seconds }) {
      return await client.request({
        method: "evm_increaseTime",
        params: [(0, toHex_js_1.numberToHex)(seconds)]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.increaseTime = void 0;
    var toHex_js_1 = require_toHex();
    exports2.increaseTime = increaseTime;
  });
  var require_inspectTxpool = __commonJS2((exports2) => {
    async function inspectTxpool(client) {
      return await client.request({
        method: "txpool_inspect"
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.inspectTxpool = void 0;
    exports2.inspectTxpool = inspectTxpool;
  });
  var require_loadState = __commonJS2((exports2) => {
    async function loadState(client, { state }) {
      await client.request({
        method: `${client.mode}_loadState`,
        params: [state]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadState = void 0;
    exports2.loadState = loadState;
  });
  var require_mine = __commonJS2((exports2) => {
    async function mine(client, { blocks, interval }) {
      if (client.mode === "ganache")
        await client.request({
          method: "evm_mine",
          params: [{ blocks: (0, toHex_js_1.numberToHex)(blocks) }]
        });
      else
        await client.request({
          method: `${client.mode}_mine`,
          params: [(0, toHex_js_1.numberToHex)(blocks), (0, toHex_js_1.numberToHex)(interval || 0)]
        });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mine = void 0;
    var toHex_js_1 = require_toHex();
    exports2.mine = mine;
  });
  var require_removeBlockTimestampInterval = __commonJS2((exports2) => {
    async function removeBlockTimestampInterval(client) {
      await client.request({
        method: `${client.mode}_removeBlockTimestampInterval`
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.removeBlockTimestampInterval = void 0;
    exports2.removeBlockTimestampInterval = removeBlockTimestampInterval;
  });
  var require_reset = __commonJS2((exports2) => {
    async function reset(client, { blockNumber, jsonRpcUrl } = {}) {
      await client.request({
        method: `${client.mode}_reset`,
        params: [{ forking: { blockNumber: Number(blockNumber), jsonRpcUrl } }]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.reset = void 0;
    exports2.reset = reset;
  });
  var require_revert = __commonJS2((exports2) => {
    async function revert(client, { id }) {
      await client.request({
        method: "evm_revert",
        params: [id]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.revert = void 0;
    exports2.revert = revert;
  });
  var require_sendUnsignedTransaction = __commonJS2((exports2) => {
    async function sendUnsignedTransaction(client, args) {
      const { accessList, data, from, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = args;
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || transactionRequest_js_1.formatTransactionRequest;
      const request = format({
        ...(0, extract_js_1.extract)(rest, { format: chainFormat }),
        accessList,
        data,
        from,
        gas,
        gasPrice,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      const hash22 = await client.request({
        method: "eth_sendUnsignedTransaction",
        params: [request]
      });
      return hash22;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sendUnsignedTransaction = void 0;
    var extract_js_1 = require_extract();
    var transactionRequest_js_1 = require_transactionRequest();
    exports2.sendUnsignedTransaction = sendUnsignedTransaction;
  });
  var require_setAutomine = __commonJS2((exports2) => {
    async function setAutomine(client, enabled) {
      if (client.mode === "ganache") {
        if (enabled)
          await client.request({ method: "miner_start" });
        else
          await client.request({ method: "miner_stop" });
      } else
        await client.request({
          method: "evm_setAutomine",
          params: [enabled]
        });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setAutomine = void 0;
    exports2.setAutomine = setAutomine;
  });
  var require_setBalance = __commonJS2((exports2) => {
    async function setBalance(client, { address, value }) {
      if (client.mode === "ganache")
        await client.request({
          method: "evm_setAccountBalance",
          params: [address, (0, toHex_js_1.numberToHex)(value)]
        });
      else
        await client.request({
          method: `${client.mode}_setBalance`,
          params: [address, (0, toHex_js_1.numberToHex)(value)]
        });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setBalance = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setBalance = setBalance;
  });
  var require_setBlockGasLimit = __commonJS2((exports2) => {
    async function setBlockGasLimit(client, { gasLimit }) {
      await client.request({
        method: "evm_setBlockGasLimit",
        params: [(0, toHex_js_1.numberToHex)(gasLimit)]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setBlockGasLimit = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setBlockGasLimit = setBlockGasLimit;
  });
  var require_setBlockTimestampInterval = __commonJS2((exports2) => {
    async function setBlockTimestampInterval(client, { interval }) {
      const interval_ = (() => {
        if (client.mode === "hardhat")
          return interval * 1e3;
        return interval;
      })();
      await client.request({
        method: `${client.mode}_setBlockTimestampInterval`,
        params: [interval_]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setBlockTimestampInterval = void 0;
    exports2.setBlockTimestampInterval = setBlockTimestampInterval;
  });
  var require_setCode = __commonJS2((exports2) => {
    async function setCode(client, { address, bytecode }) {
      await client.request({
        method: `${client.mode}_setCode`,
        params: [address, bytecode]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setCode = void 0;
    exports2.setCode = setCode;
  });
  var require_setCoinbase = __commonJS2((exports2) => {
    async function setCoinbase(client, { address }) {
      await client.request({
        method: `${client.mode}_setCoinbase`,
        params: [address]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setCoinbase = void 0;
    exports2.setCoinbase = setCoinbase;
  });
  var require_setIntervalMining = __commonJS2((exports2) => {
    async function setIntervalMining(client, { interval }) {
      const interval_ = (() => {
        if (client.mode === "hardhat")
          return interval * 1e3;
        return interval;
      })();
      await client.request({
        method: "evm_setIntervalMining",
        params: [interval_]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setIntervalMining = void 0;
    exports2.setIntervalMining = setIntervalMining;
  });
  var require_setLoggingEnabled = __commonJS2((exports2) => {
    async function setLoggingEnabled(client, enabled) {
      await client.request({
        method: `${client.mode}_setLoggingEnabled`,
        params: [enabled]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setLoggingEnabled = void 0;
    exports2.setLoggingEnabled = setLoggingEnabled;
  });
  var require_setMinGasPrice = __commonJS2((exports2) => {
    async function setMinGasPrice(client, { gasPrice }) {
      await client.request({
        method: `${client.mode}_setMinGasPrice`,
        params: [(0, toHex_js_1.numberToHex)(gasPrice)]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setMinGasPrice = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setMinGasPrice = setMinGasPrice;
  });
  var require_setNextBlockBaseFeePerGas = __commonJS2((exports2) => {
    async function setNextBlockBaseFeePerGas(client, { baseFeePerGas }) {
      await client.request({
        method: `${client.mode}_setNextBlockBaseFeePerGas`,
        params: [(0, toHex_js_1.numberToHex)(baseFeePerGas)]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setNextBlockBaseFeePerGas = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setNextBlockBaseFeePerGas = setNextBlockBaseFeePerGas;
  });
  var require_setNextBlockTimestamp = __commonJS2((exports2) => {
    async function setNextBlockTimestamp(client, { timestamp }) {
      await client.request({
        method: "evm_setNextBlockTimestamp",
        params: [(0, toHex_js_1.numberToHex)(timestamp)]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setNextBlockTimestamp = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setNextBlockTimestamp = setNextBlockTimestamp;
  });
  var require_setNonce = __commonJS2((exports2) => {
    async function setNonce(client, { address, nonce }) {
      await client.request({
        method: `${client.mode}_setNonce`,
        params: [address, (0, toHex_js_1.numberToHex)(nonce)]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setNonce = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setNonce = setNonce;
  });
  var require_setRpcUrl = __commonJS2((exports2) => {
    async function setRpcUrl(client, jsonRpcUrl) {
      await client.request({
        method: `${client.mode}_setRpcUrl`,
        params: [jsonRpcUrl]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setRpcUrl = void 0;
    exports2.setRpcUrl = setRpcUrl;
  });
  var require_setStorageAt = __commonJS2((exports2) => {
    async function setStorageAt(client, { address, index: index2, value }) {
      await client.request({
        method: `${client.mode}_setStorageAt`,
        params: [
          address,
          typeof index2 === "number" ? (0, toHex_js_1.numberToHex)(index2) : index2,
          value
        ]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setStorageAt = void 0;
    var toHex_js_1 = require_toHex();
    exports2.setStorageAt = setStorageAt;
  });
  var require_snapshot = __commonJS2((exports2) => {
    async function snapshot(client) {
      return await client.request({
        method: "evm_snapshot"
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.snapshot = void 0;
    exports2.snapshot = snapshot;
  });
  var require_stopImpersonatingAccount = __commonJS2((exports2) => {
    async function stopImpersonatingAccount(client, { address }) {
      await client.request({
        method: `${client.mode}_stopImpersonatingAccount`,
        params: [address]
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stopImpersonatingAccount = void 0;
    exports2.stopImpersonatingAccount = stopImpersonatingAccount;
  });
  var require_test = __commonJS2((exports2) => {
    function testActions({ mode }) {
      return (client_) => {
        const client = client_.extend(() => ({
          mode
        }));
        return {
          dropTransaction: (args) => (0, dropTransaction_js_1.dropTransaction)(client, args),
          dumpState: () => (0, dumpState_js_1.dumpState)(client),
          getAutomine: () => (0, getAutomine_js_1.getAutomine)(client),
          getTxpoolContent: () => (0, getTxpoolContent_js_1.getTxpoolContent)(client),
          getTxpoolStatus: () => (0, getTxpoolStatus_js_1.getTxpoolStatus)(client),
          impersonateAccount: (args) => (0, impersonateAccount_js_1.impersonateAccount)(client, args),
          increaseTime: (args) => (0, increaseTime_js_1.increaseTime)(client, args),
          inspectTxpool: () => (0, inspectTxpool_js_1.inspectTxpool)(client),
          loadState: (args) => (0, loadState_js_1.loadState)(client, args),
          mine: (args) => (0, mine_js_1.mine)(client, args),
          removeBlockTimestampInterval: () => (0, removeBlockTimestampInterval_js_1.removeBlockTimestampInterval)(client),
          reset: (args) => (0, reset_js_1.reset)(client, args),
          revert: (args) => (0, revert_js_1.revert)(client, args),
          sendUnsignedTransaction: (args) => (0, sendUnsignedTransaction_js_1.sendUnsignedTransaction)(client, args),
          setAutomine: (args) => (0, setAutomine_js_1.setAutomine)(client, args),
          setBalance: (args) => (0, setBalance_js_1.setBalance)(client, args),
          setBlockGasLimit: (args) => (0, setBlockGasLimit_js_1.setBlockGasLimit)(client, args),
          setBlockTimestampInterval: (args) => (0, setBlockTimestampInterval_js_1.setBlockTimestampInterval)(client, args),
          setCode: (args) => (0, setCode_js_1.setCode)(client, args),
          setCoinbase: (args) => (0, setCoinbase_js_1.setCoinbase)(client, args),
          setIntervalMining: (args) => (0, setIntervalMining_js_1.setIntervalMining)(client, args),
          setLoggingEnabled: (args) => (0, setLoggingEnabled_js_1.setLoggingEnabled)(client, args),
          setMinGasPrice: (args) => (0, setMinGasPrice_js_1.setMinGasPrice)(client, args),
          setNextBlockBaseFeePerGas: (args) => (0, setNextBlockBaseFeePerGas_js_1.setNextBlockBaseFeePerGas)(client, args),
          setNextBlockTimestamp: (args) => (0, setNextBlockTimestamp_js_1.setNextBlockTimestamp)(client, args),
          setNonce: (args) => (0, setNonce_js_1.setNonce)(client, args),
          setRpcUrl: (args) => (0, setRpcUrl_js_1.setRpcUrl)(client, args),
          setStorageAt: (args) => (0, setStorageAt_js_1.setStorageAt)(client, args),
          snapshot: () => (0, snapshot_js_1.snapshot)(client),
          stopImpersonatingAccount: (args) => (0, stopImpersonatingAccount_js_1.stopImpersonatingAccount)(client, args)
        };
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.testActions = void 0;
    var dropTransaction_js_1 = require_dropTransaction();
    var dumpState_js_1 = require_dumpState();
    var getAutomine_js_1 = require_getAutomine();
    var getTxpoolContent_js_1 = require_getTxpoolContent();
    var getTxpoolStatus_js_1 = require_getTxpoolStatus();
    var impersonateAccount_js_1 = require_impersonateAccount();
    var increaseTime_js_1 = require_increaseTime();
    var inspectTxpool_js_1 = require_inspectTxpool();
    var loadState_js_1 = require_loadState();
    var mine_js_1 = require_mine();
    var removeBlockTimestampInterval_js_1 = require_removeBlockTimestampInterval();
    var reset_js_1 = require_reset();
    var revert_js_1 = require_revert();
    var sendUnsignedTransaction_js_1 = require_sendUnsignedTransaction();
    var setAutomine_js_1 = require_setAutomine();
    var setBalance_js_1 = require_setBalance();
    var setBlockGasLimit_js_1 = require_setBlockGasLimit();
    var setBlockTimestampInterval_js_1 = require_setBlockTimestampInterval();
    var setCode_js_1 = require_setCode();
    var setCoinbase_js_1 = require_setCoinbase();
    var setIntervalMining_js_1 = require_setIntervalMining();
    var setLoggingEnabled_js_1 = require_setLoggingEnabled();
    var setMinGasPrice_js_1 = require_setMinGasPrice();
    var setNextBlockBaseFeePerGas_js_1 = require_setNextBlockBaseFeePerGas();
    var setNextBlockTimestamp_js_1 = require_setNextBlockTimestamp();
    var setNonce_js_1 = require_setNonce();
    var setRpcUrl_js_1 = require_setRpcUrl();
    var setStorageAt_js_1 = require_setStorageAt();
    var snapshot_js_1 = require_snapshot();
    var stopImpersonatingAccount_js_1 = require_stopImpersonatingAccount();
    exports2.testActions = testActions;
  });
  var require_createTestClient = __commonJS2((exports2) => {
    function createTestClient(parameters) {
      const { key = "test", name = "Test Client", mode } = parameters;
      const client = (0, createClient_js_1.createClient)({
        ...parameters,
        key,
        name,
        type: "testClient"
      });
      return client.extend((config) => ({
        mode,
        ...(0, test_js_1.testActions)({ mode })(config)
      }));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createTestClient = void 0;
    var createClient_js_1 = require_createClient();
    var test_js_1 = require_test();
    exports2.createTestClient = createTestClient;
  });
  var require_addChain = __commonJS2((exports2) => {
    async function addChain(client, { chain }) {
      const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain;
      await client.request({
        method: "wallet_addEthereumChain",
        params: [
          {
            chainId: (0, toHex_js_1.numberToHex)(id),
            chainName: name,
            nativeCurrency,
            rpcUrls: rpcUrls.default.http,
            blockExplorerUrls: blockExplorers ? Object.values(blockExplorers).map(({ url }) => url) : void 0
          }
        ]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addChain = void 0;
    var toHex_js_1 = require_toHex();
    exports2.addChain = addChain;
  });
  var require_deployContract = __commonJS2((exports2) => {
    function deployContract2(walletClient, parameters) {
      const { abi, args, bytecode, ...request } = parameters;
      const calldata = (0, encodeDeployData_js_1.encodeDeployData)({ abi, args, bytecode });
      return (0, sendTransaction_js_1.sendTransaction)(walletClient, {
        ...request,
        data: calldata
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deployContract = void 0;
    var encodeDeployData_js_1 = require_encodeDeployData();
    var sendTransaction_js_1 = require_sendTransaction();
    exports2.deployContract = deployContract2;
  });
  var require_getAddresses = __commonJS2((exports2) => {
    async function getAddresses(client) {
      if (client.account?.type === "local")
        return [client.account.address];
      const addresses = await client.request({ method: "eth_accounts" });
      return addresses.map((address) => (0, getAddress_js_1.checksumAddress)(address));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAddresses = void 0;
    var getAddress_js_1 = require_getAddress();
    exports2.getAddresses = getAddresses;
  });
  var require_getPermissions = __commonJS2((exports2) => {
    async function getPermissions(client) {
      const permissions = await client.request({ method: "wallet_getPermissions" });
      return permissions;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPermissions = void 0;
    exports2.getPermissions = getPermissions;
  });
  var require_requestAddresses = __commonJS2((exports2) => {
    async function requestAddresses(client) {
      const addresses = await client.request({ method: "eth_requestAccounts" }, { retryCount: 0 });
      return addresses.map((address) => (0, getAddress_js_1.getAddress)(address));
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestAddresses = void 0;
    var getAddress_js_1 = require_getAddress();
    exports2.requestAddresses = requestAddresses;
  });
  var require_requestPermissions = __commonJS2((exports2) => {
    async function requestPermissions(client, permissions) {
      return client.request({
        method: "wallet_requestPermissions",
        params: [permissions]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestPermissions = void 0;
    exports2.requestPermissions = requestPermissions;
  });
  var require_signMessage = __commonJS2((exports2) => {
    async function signMessage(client, { account: account_ = client.account, message }) {
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/signMessage"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      if (account.type === "local")
        return account.signMessage({ message });
      const message_ = (() => {
        if (typeof message === "string")
          return (0, toHex_js_1.stringToHex)(message);
        if (message.raw instanceof Uint8Array)
          return (0, toHex_js_1.toHex)(message.raw);
        return message.raw;
      })();
      return client.request({
        method: "personal_sign",
        params: [message_, account.address]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signMessage = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var toHex_js_1 = require_toHex();
    exports2.signMessage = signMessage;
  });
  var require_signTransaction = __commonJS2((exports2) => {
    async function signTransaction(client, parameters) {
      const { account: account_ = client.account, chain = client.chain, ...transaction } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/signTransaction"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      (0, assertRequest_js_1.assertRequest)({
        account,
        ...parameters
      });
      const chainId = await (0, getAction_js_1.getAction)(client, getChainId_js_1.getChainId, "getChainId")({});
      if (chain !== null)
        (0, assertCurrentChain_js_1.assertCurrentChain)({
          currentChainId: chainId,
          chain
        });
      const formatters4 = chain?.formatters || client.chain?.formatters;
      const format = formatters4?.transactionRequest?.format || transactionRequest_js_1.formatTransactionRequest;
      if (account.type === "local") {
        return account.signTransaction({
          ...transaction,
          chainId
        }, { serializer: client.chain?.serializers?.transaction });
      }
      return await client.request({
        method: "eth_signTransaction",
        params: [
          {
            ...format(transaction),
            chainId: (0, toHex_js_1.numberToHex)(chainId),
            from: account.address
          }
        ]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signTransaction = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    var toHex_js_1 = require_toHex();
    var transactionRequest_js_1 = require_transactionRequest();
    var getAction_js_1 = require_getAction();
    var assertRequest_js_1 = require_assertRequest();
    var getChainId_js_1 = require_getChainId();
    exports2.signTransaction = signTransaction;
  });
  var require_signTypedData = __commonJS2((exports2) => {
    async function signTypedData(client, parameters) {
      const { account: account_ = client.account, domain, message, primaryType } = parameters;
      if (!account_)
        throw new account_js_1.AccountNotFoundError({
          docsPath: "/docs/actions/wallet/signTypedData"
        });
      const account = (0, parseAccount_js_1.parseAccount)(account_);
      const types = {
        EIP712Domain: (0, typedData_js_1.getTypesForEIP712Domain)({ domain }),
        ...parameters.types
      };
      (0, typedData_js_1.validateTypedData)({ domain, message, primaryType, types });
      if (account.type === "local")
        return account.signTypedData({ domain, message, primaryType, types });
      const typedData = (0, stringify_js_1.stringify)({ domain: domain ?? {}, message, primaryType, types }, (_, value) => (0, isHex_js_1.isHex)(value) ? value.toLowerCase() : value);
      return client.request({
        method: "eth_signTypedData_v4",
        params: [account.address, typedData]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signTypedData = void 0;
    var parseAccount_js_1 = require_parseAccount();
    var account_js_1 = require_account();
    var isHex_js_1 = require_isHex();
    var stringify_js_1 = require_stringify();
    var typedData_js_1 = require_typedData();
    exports2.signTypedData = signTypedData;
  });
  var require_switchChain = __commonJS2((exports2) => {
    async function switchChain(client, { id }) {
      await client.request({
        method: "wallet_switchEthereumChain",
        params: [
          {
            chainId: (0, toHex_js_1.numberToHex)(id)
          }
        ]
      }, { retryCount: 0 });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.switchChain = void 0;
    var toHex_js_1 = require_toHex();
    exports2.switchChain = switchChain;
  });
  var require_watchAsset = __commonJS2((exports2) => {
    async function watchAsset(client, params) {
      const added = await client.request({
        method: "wallet_watchAsset",
        params
      }, { retryCount: 0 });
      return added;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.watchAsset = void 0;
    exports2.watchAsset = watchAsset;
  });
  var require_wallet = __commonJS2((exports2) => {
    function walletActions(client) {
      return {
        addChain: (args) => (0, addChain_js_1.addChain)(client, args),
        deployContract: (args) => (0, deployContract_js_1.deployContract)(client, args),
        getAddresses: () => (0, getAddresses_js_1.getAddresses)(client),
        getChainId: () => (0, getChainId_js_1.getChainId)(client),
        getPermissions: () => (0, getPermissions_js_1.getPermissions)(client),
        prepareTransactionRequest: (args) => (0, prepareTransactionRequest_js_1.prepareTransactionRequest)(client, args),
        requestAddresses: () => (0, requestAddresses_js_1.requestAddresses)(client),
        requestPermissions: (args) => (0, requestPermissions_js_1.requestPermissions)(client, args),
        sendRawTransaction: (args) => (0, sendRawTransaction_js_1.sendRawTransaction)(client, args),
        sendTransaction: (args) => (0, sendTransaction_js_1.sendTransaction)(client, args),
        signMessage: (args) => (0, signMessage_js_1.signMessage)(client, args),
        signTransaction: (args) => (0, signTransaction_js_1.signTransaction)(client, args),
        signTypedData: (args) => (0, signTypedData_js_1.signTypedData)(client, args),
        switchChain: (args) => (0, switchChain_js_1.switchChain)(client, args),
        watchAsset: (args) => (0, watchAsset_js_1.watchAsset)(client, args),
        writeContract: (args) => (0, writeContract_js_1.writeContract)(client, args)
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.walletActions = void 0;
    var getChainId_js_1 = require_getChainId();
    var addChain_js_1 = require_addChain();
    var deployContract_js_1 = require_deployContract();
    var getAddresses_js_1 = require_getAddresses();
    var getPermissions_js_1 = require_getPermissions();
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    var requestAddresses_js_1 = require_requestAddresses();
    var requestPermissions_js_1 = require_requestPermissions();
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    var sendTransaction_js_1 = require_sendTransaction();
    var signMessage_js_1 = require_signMessage();
    var signTransaction_js_1 = require_signTransaction();
    var signTypedData_js_1 = require_signTypedData();
    var switchChain_js_1 = require_switchChain();
    var watchAsset_js_1 = require_watchAsset();
    var writeContract_js_1 = require_writeContract();
    exports2.walletActions = walletActions;
  });
  var require_createWalletClient = __commonJS2((exports2) => {
    function createWalletClient(parameters) {
      const { key = "wallet", name = "Wallet Client", transport } = parameters;
      const client = (0, createClient_js_1.createClient)({
        ...parameters,
        key,
        name,
        transport,
        type: "walletClient"
      });
      return client.extend(wallet_js_1.walletActions);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWalletClient = void 0;
    var createClient_js_1 = require_createClient();
    var wallet_js_1 = require_wallet();
    exports2.createWalletClient = createWalletClient;
  });
  var require_webSocket2 = __commonJS2((exports2) => {
    function webSocket(url, config = {}) {
      const { key = "webSocket", name = "WebSocket JSON-RPC", reconnect, retryDelay } = config;
      return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
        const retryCount = config.retryCount ?? retryCount_;
        const timeout = timeout_ ?? config.timeout ?? 1e4;
        const url_ = url || chain?.rpcUrls.default.webSocket?.[0];
        if (!url_)
          throw new transport_js_1.UrlRequiredError();
        return (0, createTransport_js_1.createTransport)({
          key,
          name,
          async request({ method, params }) {
            const body = { method, params };
            const rpcClient = await (0, webSocket_js_1.getWebSocketRpcClient)(url_, { reconnect });
            const { error, result } = await rpcClient.requestAsync({
              body,
              timeout
            });
            if (error)
              throw new request_js_1.RpcRequestError({
                body,
                error,
                url: url_
              });
            return result;
          },
          retryCount,
          retryDelay,
          timeout,
          type: "webSocket"
        }, {
          getSocket() {
            return (0, compat_js_1.getSocket)(url_);
          },
          getRpcClient() {
            return (0, webSocket_js_1.getWebSocketRpcClient)(url_);
          },
          async subscribe({ params, onData, onError }) {
            const rpcClient = await (0, webSocket_js_1.getWebSocketRpcClient)(url_);
            const { result: subscriptionId } = await new Promise((resolve, reject) => rpcClient.request({
              body: {
                method: "eth_subscribe",
                params
              },
              onResponse(response) {
                if (response.error) {
                  reject(response.error);
                  onError?.(response.error);
                  return;
                }
                if (typeof response.id === "number") {
                  resolve(response);
                  return;
                }
                if (response.method !== "eth_subscription")
                  return;
                onData(response.params);
              }
            }));
            return {
              subscriptionId,
              async unsubscribe() {
                return new Promise((resolve) => rpcClient.request({
                  body: {
                    method: "eth_unsubscribe",
                    params: [subscriptionId]
                  },
                  onResponse: resolve
                }));
              }
            };
          }
        });
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.webSocket = void 0;
    var request_js_1 = require_request();
    var transport_js_1 = require_transport();
    var compat_js_1 = require_compat();
    var webSocket_js_1 = require_webSocket();
    var createTransport_js_1 = require_createTransport();
    exports2.webSocket = webSocket;
  });
  var require_address2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zeroAddress = void 0;
    exports2.zeroAddress = "0x0000000000000000000000000000000000000000";
  });
  var require_number = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.minInt144 = exports2.minInt136 = exports2.minInt128 = exports2.minInt120 = exports2.minInt112 = exports2.minInt104 = exports2.minInt96 = exports2.minInt88 = exports2.minInt80 = exports2.minInt72 = exports2.minInt64 = exports2.minInt56 = exports2.minInt48 = exports2.minInt40 = exports2.minInt32 = exports2.minInt24 = exports2.minInt16 = exports2.minInt8 = exports2.maxInt256 = exports2.maxInt248 = exports2.maxInt240 = exports2.maxInt232 = exports2.maxInt224 = exports2.maxInt216 = exports2.maxInt208 = exports2.maxInt200 = exports2.maxInt192 = exports2.maxInt184 = exports2.maxInt176 = exports2.maxInt168 = exports2.maxInt160 = exports2.maxInt152 = exports2.maxInt144 = exports2.maxInt136 = exports2.maxInt128 = exports2.maxInt120 = exports2.maxInt112 = exports2.maxInt104 = exports2.maxInt96 = exports2.maxInt88 = exports2.maxInt80 = exports2.maxInt72 = exports2.maxInt64 = exports2.maxInt56 = exports2.maxInt48 = exports2.maxInt40 = exports2.maxInt32 = exports2.maxInt24 = exports2.maxInt16 = exports2.maxInt8 = void 0;
    exports2.maxUint256 = exports2.maxUint248 = exports2.maxUint240 = exports2.maxUint232 = exports2.maxUint224 = exports2.maxUint216 = exports2.maxUint208 = exports2.maxUint200 = exports2.maxUint192 = exports2.maxUint184 = exports2.maxUint176 = exports2.maxUint168 = exports2.maxUint160 = exports2.maxUint152 = exports2.maxUint144 = exports2.maxUint136 = exports2.maxUint128 = exports2.maxUint120 = exports2.maxUint112 = exports2.maxUint104 = exports2.maxUint96 = exports2.maxUint88 = exports2.maxUint80 = exports2.maxUint72 = exports2.maxUint64 = exports2.maxUint56 = exports2.maxUint48 = exports2.maxUint40 = exports2.maxUint32 = exports2.maxUint24 = exports2.maxUint16 = exports2.maxUint8 = exports2.minInt256 = exports2.minInt248 = exports2.minInt240 = exports2.minInt232 = exports2.minInt224 = exports2.minInt216 = exports2.minInt208 = exports2.minInt200 = exports2.minInt192 = exports2.minInt184 = exports2.minInt176 = exports2.minInt168 = exports2.minInt160 = exports2.minInt152 = void 0;
    exports2.maxInt8 = 2n ** (8n - 1n) - 1n;
    exports2.maxInt16 = 2n ** (16n - 1n) - 1n;
    exports2.maxInt24 = 2n ** (24n - 1n) - 1n;
    exports2.maxInt32 = 2n ** (32n - 1n) - 1n;
    exports2.maxInt40 = 2n ** (40n - 1n) - 1n;
    exports2.maxInt48 = 2n ** (48n - 1n) - 1n;
    exports2.maxInt56 = 2n ** (56n - 1n) - 1n;
    exports2.maxInt64 = 2n ** (64n - 1n) - 1n;
    exports2.maxInt72 = 2n ** (72n - 1n) - 1n;
    exports2.maxInt80 = 2n ** (80n - 1n) - 1n;
    exports2.maxInt88 = 2n ** (88n - 1n) - 1n;
    exports2.maxInt96 = 2n ** (96n - 1n) - 1n;
    exports2.maxInt104 = 2n ** (104n - 1n) - 1n;
    exports2.maxInt112 = 2n ** (112n - 1n) - 1n;
    exports2.maxInt120 = 2n ** (120n - 1n) - 1n;
    exports2.maxInt128 = 2n ** (128n - 1n) - 1n;
    exports2.maxInt136 = 2n ** (136n - 1n) - 1n;
    exports2.maxInt144 = 2n ** (144n - 1n) - 1n;
    exports2.maxInt152 = 2n ** (152n - 1n) - 1n;
    exports2.maxInt160 = 2n ** (160n - 1n) - 1n;
    exports2.maxInt168 = 2n ** (168n - 1n) - 1n;
    exports2.maxInt176 = 2n ** (176n - 1n) - 1n;
    exports2.maxInt184 = 2n ** (184n - 1n) - 1n;
    exports2.maxInt192 = 2n ** (192n - 1n) - 1n;
    exports2.maxInt200 = 2n ** (200n - 1n) - 1n;
    exports2.maxInt208 = 2n ** (208n - 1n) - 1n;
    exports2.maxInt216 = 2n ** (216n - 1n) - 1n;
    exports2.maxInt224 = 2n ** (224n - 1n) - 1n;
    exports2.maxInt232 = 2n ** (232n - 1n) - 1n;
    exports2.maxInt240 = 2n ** (240n - 1n) - 1n;
    exports2.maxInt248 = 2n ** (248n - 1n) - 1n;
    exports2.maxInt256 = 2n ** (256n - 1n) - 1n;
    exports2.minInt8 = -(2n ** (8n - 1n));
    exports2.minInt16 = -(2n ** (16n - 1n));
    exports2.minInt24 = -(2n ** (24n - 1n));
    exports2.minInt32 = -(2n ** (32n - 1n));
    exports2.minInt40 = -(2n ** (40n - 1n));
    exports2.minInt48 = -(2n ** (48n - 1n));
    exports2.minInt56 = -(2n ** (56n - 1n));
    exports2.minInt64 = -(2n ** (64n - 1n));
    exports2.minInt72 = -(2n ** (72n - 1n));
    exports2.minInt80 = -(2n ** (80n - 1n));
    exports2.minInt88 = -(2n ** (88n - 1n));
    exports2.minInt96 = -(2n ** (96n - 1n));
    exports2.minInt104 = -(2n ** (104n - 1n));
    exports2.minInt112 = -(2n ** (112n - 1n));
    exports2.minInt120 = -(2n ** (120n - 1n));
    exports2.minInt128 = -(2n ** (128n - 1n));
    exports2.minInt136 = -(2n ** (136n - 1n));
    exports2.minInt144 = -(2n ** (144n - 1n));
    exports2.minInt152 = -(2n ** (152n - 1n));
    exports2.minInt160 = -(2n ** (160n - 1n));
    exports2.minInt168 = -(2n ** (168n - 1n));
    exports2.minInt176 = -(2n ** (176n - 1n));
    exports2.minInt184 = -(2n ** (184n - 1n));
    exports2.minInt192 = -(2n ** (192n - 1n));
    exports2.minInt200 = -(2n ** (200n - 1n));
    exports2.minInt208 = -(2n ** (208n - 1n));
    exports2.minInt216 = -(2n ** (216n - 1n));
    exports2.minInt224 = -(2n ** (224n - 1n));
    exports2.minInt232 = -(2n ** (232n - 1n));
    exports2.minInt240 = -(2n ** (240n - 1n));
    exports2.minInt248 = -(2n ** (248n - 1n));
    exports2.minInt256 = -(2n ** (256n - 1n));
    exports2.maxUint8 = 2n ** 8n - 1n;
    exports2.maxUint16 = 2n ** 16n - 1n;
    exports2.maxUint24 = 2n ** 24n - 1n;
    exports2.maxUint32 = 2n ** 32n - 1n;
    exports2.maxUint40 = 2n ** 40n - 1n;
    exports2.maxUint48 = 2n ** 48n - 1n;
    exports2.maxUint56 = 2n ** 56n - 1n;
    exports2.maxUint64 = 2n ** 64n - 1n;
    exports2.maxUint72 = 2n ** 72n - 1n;
    exports2.maxUint80 = 2n ** 80n - 1n;
    exports2.maxUint88 = 2n ** 88n - 1n;
    exports2.maxUint96 = 2n ** 96n - 1n;
    exports2.maxUint104 = 2n ** 104n - 1n;
    exports2.maxUint112 = 2n ** 112n - 1n;
    exports2.maxUint120 = 2n ** 120n - 1n;
    exports2.maxUint128 = 2n ** 128n - 1n;
    exports2.maxUint136 = 2n ** 136n - 1n;
    exports2.maxUint144 = 2n ** 144n - 1n;
    exports2.maxUint152 = 2n ** 152n - 1n;
    exports2.maxUint160 = 2n ** 160n - 1n;
    exports2.maxUint168 = 2n ** 168n - 1n;
    exports2.maxUint176 = 2n ** 176n - 1n;
    exports2.maxUint184 = 2n ** 184n - 1n;
    exports2.maxUint192 = 2n ** 192n - 1n;
    exports2.maxUint200 = 2n ** 200n - 1n;
    exports2.maxUint208 = 2n ** 208n - 1n;
    exports2.maxUint216 = 2n ** 216n - 1n;
    exports2.maxUint224 = 2n ** 224n - 1n;
    exports2.maxUint232 = 2n ** 232n - 1n;
    exports2.maxUint240 = 2n ** 240n - 1n;
    exports2.maxUint248 = 2n ** 248n - 1n;
    exports2.maxUint256 = 2n ** 256n - 1n;
  });
  var require_bytes = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zeroHash = void 0;
    exports2.zeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  });
  var require_decodeDeployData = __commonJS2((exports2) => {
    function decodeDeployData(parameters) {
      const { abi, bytecode, data } = parameters;
      if (data === bytecode)
        return { bytecode };
      const description = abi.find((x) => "type" in x && x.type === "constructor");
      if (!description)
        throw new abi_js_1.AbiConstructorNotFoundError({ docsPath: docsPath52 });
      if (!("inputs" in description))
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath: docsPath52 });
      if (!description.inputs || description.inputs.length === 0)
        throw new abi_js_1.AbiConstructorParamsNotFoundError({ docsPath: docsPath52 });
      const args = (0, decodeAbiParameters_js_1.decodeAbiParameters)(description.inputs, `0x${data.replace(bytecode, "")}`);
      return { args, bytecode };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeDeployData = void 0;
    var abi_js_1 = require_abi();
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    var docsPath52 = "/docs/contract/decodeDeployData";
    exports2.decodeDeployData = decodeDeployData;
  });
  var require_compactSignatureToSignature = __commonJS2((exports2) => {
    function compactSignatureToSignature({ r, yParityAndS }) {
      const yParityAndS_bytes = (0, toBytes_js_1.hexToBytes)(yParityAndS);
      const yParity = yParityAndS_bytes[0] & 128 ? 1 : 0;
      const s = yParityAndS_bytes;
      if (yParity === 1)
        s[0] &= 127;
      return { r, s: (0, toHex_js_1.bytesToHex)(s), yParity };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compactSignatureToSignature = void 0;
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.compactSignatureToSignature = compactSignatureToSignature;
  });
  var require_hexToCompactSignature = __commonJS2((exports2) => {
    function hexToCompactSignature(signatureHex) {
      const { r, s } = secp256k1_1.secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));
      return {
        r: (0, toHex_js_1.numberToHex)(r, { size: 32 }),
        yParityAndS: (0, toHex_js_1.numberToHex)(s, { size: 32 })
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hexToCompactSignature = void 0;
    var secp256k1_1 = require_secp256k1();
    var toHex_js_1 = require_toHex();
    exports2.hexToCompactSignature = hexToCompactSignature;
  });
  var require_hexToSignature = __commonJS2((exports2) => {
    function hexToSignature(signatureHex) {
      const { r, s } = secp256k1_1.secp256k1.Signature.fromCompact(signatureHex.slice(2, 130));
      const v = BigInt(`0x${signatureHex.slice(130)}`);
      return {
        r: (0, toHex_js_1.numberToHex)(r, { size: 32 }),
        s: (0, toHex_js_1.numberToHex)(s, { size: 32 }),
        v,
        yParity: v === 28n ? 1 : 0
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hexToSignature = void 0;
    var secp256k1_1 = require_secp256k1();
    var toHex_js_1 = require_toHex();
    exports2.hexToSignature = hexToSignature;
  });
  var require_signatureToHex = __commonJS2((exports2) => {
    function signatureToHex({ r, s, v, yParity }) {
      const vHex = (() => {
        if (v === 27n || yParity === 0)
          return "1b";
        if (v === 28n || yParity === 1)
          return "1c";
        throw new Error("Invalid v value");
      })();
      return `0x${new secp256k1_1.secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(s)).toCompactHex()}${vHex}`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signatureToHex = void 0;
    var secp256k1_1 = require_secp256k1();
    var fromHex_js_1 = require_fromHex();
    exports2.signatureToHex = signatureToHex;
  });
  var require_recoverTransactionAddress = __commonJS2((exports2) => {
    async function recoverTransactionAddress(parameters) {
      const { serializedTransaction, signature: signature_ } = parameters;
      const transaction = (0, parseTransaction_js_1.parseTransaction)(serializedTransaction);
      const signature = signature_ ?? (0, signatureToHex_js_1.signatureToHex)({
        r: transaction.r,
        s: transaction.s,
        v: transaction.v,
        yParity: transaction.yParity
      });
      const serialized = (0, serializeTransaction_js_1.serializeTransaction)({
        ...transaction,
        r: void 0,
        s: void 0,
        v: void 0,
        yParity: void 0
      });
      return await (0, recoverAddress_js_1.recoverAddress)({
        hash: (0, keccak256_js_1.keccak256)(serialized),
        signature
      });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.recoverTransactionAddress = void 0;
    var keccak256_js_1 = require_keccak256();
    var parseTransaction_js_1 = require_parseTransaction();
    var serializeTransaction_js_1 = require_serializeTransaction();
    var recoverAddress_js_1 = require_recoverAddress();
    var signatureToHex_js_1 = require_signatureToHex();
    exports2.recoverTransactionAddress = recoverTransactionAddress;
  });
  var require_signatureToCompactSignature = __commonJS2((exports2) => {
    function signatureToCompactSignature(signature) {
      const { r, s, v, yParity } = signature;
      const yParity_ = Number(yParity ?? v - 27n);
      let yParityAndS = s;
      if (yParity_ === 1) {
        const bytes22 = (0, index_js_1.hexToBytes)(s);
        bytes22[0] |= 128;
        yParityAndS = (0, index_js_1.bytesToHex)(bytes22);
      }
      return { r, yParityAndS };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signatureToCompactSignature = void 0;
    var index_js_1 = require_utils7();
    exports2.signatureToCompactSignature = signatureToCompactSignature;
  });
  var require_compactSignatureToHex = __commonJS2((exports2) => {
    function compactSignatureToHex({ r, yParityAndS }) {
      return `0x${new secp256k1_1.secp256k1.Signature((0, fromHex_js_1.hexToBigInt)(r), (0, fromHex_js_1.hexToBigInt)(yParityAndS)).toCompactHex()}`;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compactSignatureToHex = void 0;
    var secp256k1_1 = require_secp256k1();
    var fromHex_js_1 = require_fromHex();
    exports2.compactSignatureToHex = compactSignatureToHex;
  });
  var require_sidecarsToVersionedHashes = __commonJS2((exports2) => {
    function sidecarsToVersionedHashes(parameters) {
      const { sidecars, version: version22 } = parameters;
      const to = parameters.to ?? (typeof sidecars[0].blob === "string" ? "hex" : "bytes");
      const hashes = [];
      for (const { commitment } of sidecars) {
        hashes.push((0, commitmentToVersionedHash_js_1.commitmentToVersionedHash)({
          commitment,
          to,
          version: version22
        }));
      }
      return hashes;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sidecarsToVersionedHashes = void 0;
    var commitmentToVersionedHash_js_1 = require_commitmentToVersionedHash();
    exports2.sidecarsToVersionedHashes = sidecarsToVersionedHashes;
  });
  var require_fromBlobs = __commonJS2((exports2) => {
    function fromBlobs(parameters) {
      const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
      const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => (0, toBytes_js_1.hexToBytes)(x)) : parameters.blobs;
      const length = blobs.reduce((length2, blob) => length2 + blob.length, 0);
      const data = (0, cursor_js_1.createCursor)(new Uint8Array(length));
      let active = true;
      for (const blob of blobs) {
        const cursor = (0, cursor_js_1.createCursor)(blob);
        while (active && cursor.position < blob.length) {
          cursor.incrementPosition(1);
          let consume = 31;
          if (blob.length - cursor.position < 31)
            consume = blob.length - cursor.position;
          for (const _ in Array.from({ length: consume })) {
            const byte = cursor.readByte();
            const isTerminator = byte === 128 && !cursor.inspectBytes(cursor.remaining).includes(128);
            if (isTerminator) {
              active = false;
              break;
            }
            data.pushByte(byte);
          }
        }
      }
      const trimmedData = data.bytes.slice(0, data.position);
      return to === "hex" ? (0, toHex_js_1.bytesToHex)(trimmedData) : trimmedData;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBlobs = void 0;
    var cursor_js_1 = require_cursor2();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.fromBlobs = fromBlobs;
  });
  var require_defineKzg = __commonJS2((exports2) => {
    function defineKzg({ blobToKzgCommitment, computeBlobKzgProof }) {
      return {
        blobToKzgCommitment,
        computeBlobKzgProof
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defineKzg = void 0;
    exports2.defineKzg = defineKzg;
  });
  var require_setupKzg = __commonJS2((exports2) => {
    function setupKzg(parameters, path2) {
      try {
        parameters.loadTrustedSetup(path2);
      } catch (e) {
        const error = e;
        if (!error.message.includes("trusted setup is already loaded"))
          throw error;
      }
      return (0, defineKzg_js_1.defineKzg)(parameters);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setupKzg = void 0;
    var defineKzg_js_1 = require_defineKzg();
    exports2.setupKzg = setupKzg;
  });
  var require__cjs2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maxInt72 = exports2.maxInt64 = exports2.maxInt56 = exports2.maxInt48 = exports2.maxInt40 = exports2.maxInt32 = exports2.maxInt24 = exports2.maxInt16 = exports2.maxInt8 = exports2.weiUnits = exports2.gweiUnits = exports2.etherUnits = exports2.zeroAddress = exports2.erc4626Abi = exports2.erc721Abi = exports2.erc20Abi_bytes32 = exports2.erc20Abi = exports2.multicall3Abi = exports2.webSocket = exports2.createWalletClient = exports2.createTransport = exports2.walletActions = exports2.testActions = exports2.publicActions = exports2.createTestClient = exports2.createPublicClient = exports2.http = exports2.fallback = exports2.custom = exports2.rpcSchema = exports2.createClient = exports2.getContract = exports2.parseAbiParameters = exports2.parseAbiParameter = exports2.parseAbiItem = exports2.parseAbi = exports2.UnknownSignatureError = exports2.UnknownTypeError = exports2.SolidityProtectedKeywordError = exports2.InvalidStructSignatureError = exports2.InvalidSignatureError = exports2.InvalidParenthesisError = exports2.InvalidParameterError = exports2.InvalidModifierError = exports2.InvalidFunctionModifierError = exports2.InvalidAbiTypeParameterError = exports2.InvalidAbiItemError = exports2.InvalidAbiParametersError = exports2.InvalidAbiParameterError = exports2.CircularReferenceError = void 0;
    exports2.maxUint216 = exports2.maxUint208 = exports2.maxUint200 = exports2.maxUint192 = exports2.maxUint184 = exports2.maxUint176 = exports2.maxUint168 = exports2.maxUint160 = exports2.maxUint152 = exports2.maxUint144 = exports2.maxUint136 = exports2.maxUint128 = exports2.maxUint120 = exports2.maxUint112 = exports2.maxUint104 = exports2.maxUint96 = exports2.maxUint88 = exports2.maxUint80 = exports2.maxUint72 = exports2.maxUint64 = exports2.maxUint56 = exports2.maxUint48 = exports2.maxUint40 = exports2.maxUint32 = exports2.maxUint24 = exports2.maxUint16 = exports2.maxUint8 = exports2.maxInt256 = exports2.maxInt248 = exports2.maxInt240 = exports2.maxInt232 = exports2.maxInt224 = exports2.maxInt216 = exports2.maxInt208 = exports2.maxInt200 = exports2.maxInt192 = exports2.maxInt184 = exports2.maxInt176 = exports2.maxInt168 = exports2.maxInt160 = exports2.maxInt152 = exports2.maxInt144 = exports2.maxInt136 = exports2.maxInt128 = exports2.maxInt120 = exports2.maxInt112 = exports2.maxInt104 = exports2.maxInt96 = exports2.maxInt88 = exports2.maxInt80 = void 0;
    exports2.AbiErrorSignatureNotFoundError = exports2.AbiErrorNotFoundError = exports2.AbiErrorInputsNotFoundError = exports2.AbiEncodingBytesSizeMismatchError = exports2.AbiEncodingLengthMismatchError = exports2.AbiEncodingArrayLengthMismatchError = exports2.AbiDecodingZeroDataError = exports2.AbiDecodingDataSizeTooSmallError = exports2.AbiDecodingDataSizeInvalidError = exports2.AbiConstructorParamsNotFoundError = exports2.AbiConstructorNotFoundError = exports2.presignMessagePrefix = exports2.zeroHash = exports2.minInt256 = exports2.minInt248 = exports2.minInt240 = exports2.minInt232 = exports2.minInt224 = exports2.minInt216 = exports2.minInt208 = exports2.minInt200 = exports2.minInt192 = exports2.minInt184 = exports2.minInt176 = exports2.minInt168 = exports2.minInt160 = exports2.minInt152 = exports2.minInt144 = exports2.minInt136 = exports2.minInt128 = exports2.minInt120 = exports2.minInt112 = exports2.minInt104 = exports2.minInt96 = exports2.minInt88 = exports2.minInt80 = exports2.minInt72 = exports2.minInt64 = exports2.minInt56 = exports2.minInt48 = exports2.minInt40 = exports2.minInt32 = exports2.minInt24 = exports2.minInt16 = exports2.minInt8 = exports2.maxUint256 = exports2.maxUint248 = exports2.maxUint240 = exports2.maxUint232 = exports2.maxUint224 = void 0;
    exports2.InvalidChainIdError = exports2.ClientChainNotConfiguredError = exports2.ChainNotFoundError = exports2.ChainMismatchError = exports2.ChainDoesNotSupportContract = exports2.UserRejectedRequestError = exports2.UnsupportedProviderMethodError = exports2.UnknownRpcError = exports2.UnauthorizedProviderError = exports2.TransactionRejectedRpcError = exports2.SwitchChainError = exports2.RpcError = exports2.ResourceUnavailableRpcError = exports2.ResourceNotFoundRpcError = exports2.ProviderRpcError = exports2.ProviderDisconnectedError = exports2.ParseRpcError = exports2.MethodNotSupportedRpcError = exports2.MethodNotFoundRpcError = exports2.LimitExceededRpcError = exports2.JsonRpcVersionUnsupportedError = exports2.InvalidRequestRpcError = exports2.InvalidParamsRpcError = exports2.InvalidInputRpcError = exports2.InternalRpcError = exports2.ChainDisconnectedError = exports2.MaxFeePerGasTooLowError = exports2.Eip1559FeesNotSupportedError = exports2.BaseFeeScalarError = exports2.RawContractError = exports2.ContractFunctionZeroDataError = exports2.ContractFunctionRevertedError = exports2.ContractFunctionExecutionError = exports2.CallExecutionError = exports2.BlockNotFoundError = exports2.BaseError = exports2.UnsupportedPackedAbiType = exports2.InvalidDefinitionTypeError = exports2.InvalidArrayError = exports2.InvalidAbiEncodingTypeError = exports2.InvalidAbiDecodingTypeError = exports2.DecodeLogTopicsMismatch = exports2.DecodeLogDataMismatch = exports2.BytesSizeMismatchError = exports2.AbiFunctionSignatureNotFoundError = exports2.AbiFunctionOutputsNotFoundError = exports2.AbiFunctionNotFoundError = exports2.AbiEventSignatureNotFoundError = exports2.AbiEventSignatureEmptyTopicsError = exports2.AbiEventNotFoundError = void 0;
    exports2.decodeErrorResult = exports2.decodeDeployData = exports2.decodeAbiParameters = exports2.formatLog = exports2.formatBlock = exports2.defineBlock = exports2.namehash = exports2.labelhash = exports2.StateAssignmentConflictError = exports2.AccountStateConflictError = exports2.UrlRequiredError = exports2.SliceOffsetOutOfBoundsError = exports2.SizeExceedsPaddingSizeError = exports2.WaitForTransactionReceiptTimeoutError = exports2.TransactionReceiptNotFoundError = exports2.TransactionNotFoundError = exports2.TransactionExecutionError = exports2.InvalidStorageKeySizeError = exports2.InvalidSerializedTransactionTypeError = exports2.InvalidSerializedTransactionError = exports2.InvalidSerializableTransactionError = exports2.InvalidLegacyVError = exports2.FeeConflictError = exports2.InvalidAddressError = exports2.WebSocketRequestError = exports2.TimeoutError = exports2.RpcRequestError = exports2.HttpRequestError = exports2.FilterTypeNotSupportedError = exports2.UnknownNodeError = exports2.TransactionTypeNotSupportedError = exports2.TipAboveFeeCapError = exports2.NonceTooLowError = exports2.NonceTooHighError = exports2.NonceMaxValueError = exports2.IntrinsicGasTooLowError = exports2.IntrinsicGasTooHighError = exports2.InsufficientFundsError = exports2.FeeCapTooLowError = exports2.FeeCapTooHighError = exports2.ExecutionRevertedError = exports2.EstimateGasExecutionError = exports2.EnsAvatarUnsupportedNamespaceError = exports2.EnsAvatarInvalidNftUriError = exports2.EnsAvatarUriResolutionError = exports2.SizeOverflowError = exports2.InvalidHexValueError = exports2.InvalidHexBooleanError = exports2.IntegerOutOfRangeError = exports2.InvalidBytesBooleanError = void 0;
    exports2.numberToBytes = exports2.hexToBytes = exports2.boolToBytes = exports2.assertTransactionLegacy = exports2.assertTransactionEIP2930 = exports2.assertTransactionEIP1559 = exports2.assertRequest = exports2.verifyTypedData = exports2.verifyMessage = exports2.toRlp = exports2.hexToRlp = exports2.bytesToRlp = exports2.signatureToHex = exports2.compactSignatureToHex = exports2.signatureToCompactSignature = exports2.recoverTypedDataAddress = exports2.recoverTransactionAddress = exports2.recoverPublicKey = exports2.recoverMessageAddress = exports2.recoverAddress = exports2.hexToSignature = exports2.hexToCompactSignature = exports2.compactSignatureToSignature = exports2.hashTypedData = exports2.hashDomain = exports2.getTransactionType = exports2.getSerializedTransactionType = exports2.getCreateAddress = exports2.getCreate2Address = exports2.getContractAddress = exports2.getAbiItem = exports2.rpcTransactionType = exports2.formatTransactionRequest = exports2.defineTransactionRequest = exports2.formatTransactionReceipt = exports2.defineTransactionReceipt = exports2.transactionType = exports2.formatTransaction = exports2.defineTransaction = exports2.parseEventLogs = exports2.encodeFunctionResult = exports2.prepareEncodeFunctionData = exports2.encodeFunctionData = exports2.encodeEventTopics = exports2.encodeErrorResult = exports2.encodeDeployData = exports2.encodeAbiParameters = exports2.decodeFunctionResult = exports2.decodeFunctionData = exports2.decodeEventLog = void 0;
    exports2.toEventSelector = exports2.getContractError = exports2.getAddress = exports2.checksumAddress = exports2.fromRlp = exports2.hexToString = exports2.hexToNumber = exports2.hexToBool = exports2.hexToBigInt = exports2.fromHex = exports2.formatUnits = exports2.formatGwei = exports2.formatEther = exports2.withTimeout = exports2.withRetry = exports2.encodePacked = exports2.getChainContractAddress = exports2.extractChain = exports2.defineChain = exports2.assertCurrentChain = exports2.concatHex = exports2.concatBytes = exports2.concat = exports2.setupKzg = exports2.defineKzg = exports2.toBlobs = exports2.toBlobSidecars = exports2.fromBlobs = exports2.blobsToProofs = exports2.sidecarsToVersionedHashes = exports2.commitmentsToVersionedHashes = exports2.commitmentToVersionedHash = exports2.blobsToCommitments = exports2.offchainLookupSignature = exports2.offchainLookupAbiItem = exports2.offchainLookup = exports2.ccipFetch = exports2.ccipRequest = exports2.fromBytes = exports2.bytesToString = exports2.bytesToNumber = exports2.bytesToBool = exports2.bytesToBigInt = exports2.toHex = exports2.stringToHex = exports2.numberToHex = exports2.bytesToHex = exports2.boolToHex = exports2.toBytes = exports2.stringToBytes = void 0;
    exports2.getTypesForEIP712Domain = exports2.domainSeparator = exports2.validateTypedData = exports2.trim = exports2.stringify = exports2.sliceHex = exports2.sliceBytes = exports2.slice = exports2.size = exports2.serializeTransaction = exports2.serializeAccessList = exports2.parseUnits = exports2.parseTransaction = exports2.parseGwei = exports2.parseEther = exports2.padHex = exports2.padBytes = exports2.pad = exports2.ripemd160 = exports2.sha256 = exports2.keccak256 = exports2.isHex = exports2.isHash = exports2.isBytes = exports2.isAddressEqual = exports2.isAddress = exports2.hashMessage = exports2.toFunctionHash = exports2.toEventHash = exports2.getFunctionSignature = exports2.toFunctionSignature = exports2.getEventSignature = exports2.toEventSignature = exports2.getFunctionSelector = exports2.toFunctionSelector = exports2.getEventSelector = void 0;
    var abitype_1 = require_exports();
    Object.defineProperty(exports2, "CircularReferenceError", { enumerable: true, get: function() {
      return abitype_1.CircularReferenceError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParameterError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiParameterError;
    } });
    Object.defineProperty(exports2, "InvalidAbiParametersError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiParametersError;
    } });
    Object.defineProperty(exports2, "InvalidAbiItemError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiItemError;
    } });
    Object.defineProperty(exports2, "InvalidAbiTypeParameterError", { enumerable: true, get: function() {
      return abitype_1.InvalidAbiTypeParameterError;
    } });
    Object.defineProperty(exports2, "InvalidFunctionModifierError", { enumerable: true, get: function() {
      return abitype_1.InvalidFunctionModifierError;
    } });
    Object.defineProperty(exports2, "InvalidModifierError", { enumerable: true, get: function() {
      return abitype_1.InvalidModifierError;
    } });
    Object.defineProperty(exports2, "InvalidParameterError", { enumerable: true, get: function() {
      return abitype_1.InvalidParameterError;
    } });
    Object.defineProperty(exports2, "InvalidParenthesisError", { enumerable: true, get: function() {
      return abitype_1.InvalidParenthesisError;
    } });
    Object.defineProperty(exports2, "InvalidSignatureError", { enumerable: true, get: function() {
      return abitype_1.InvalidSignatureError;
    } });
    Object.defineProperty(exports2, "InvalidStructSignatureError", { enumerable: true, get: function() {
      return abitype_1.InvalidStructSignatureError;
    } });
    Object.defineProperty(exports2, "SolidityProtectedKeywordError", { enumerable: true, get: function() {
      return abitype_1.SolidityProtectedKeywordError;
    } });
    Object.defineProperty(exports2, "UnknownTypeError", { enumerable: true, get: function() {
      return abitype_1.UnknownTypeError;
    } });
    Object.defineProperty(exports2, "UnknownSignatureError", { enumerable: true, get: function() {
      return abitype_1.UnknownSignatureError;
    } });
    Object.defineProperty(exports2, "parseAbi", { enumerable: true, get: function() {
      return abitype_1.parseAbi;
    } });
    Object.defineProperty(exports2, "parseAbiItem", { enumerable: true, get: function() {
      return abitype_1.parseAbiItem;
    } });
    Object.defineProperty(exports2, "parseAbiParameter", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameter;
    } });
    Object.defineProperty(exports2, "parseAbiParameters", { enumerable: true, get: function() {
      return abitype_1.parseAbiParameters;
    } });
    var getContract_js_1 = require_getContract();
    Object.defineProperty(exports2, "getContract", { enumerable: true, get: function() {
      return getContract_js_1.getContract;
    } });
    var createClient_js_1 = require_createClient();
    Object.defineProperty(exports2, "createClient", { enumerable: true, get: function() {
      return createClient_js_1.createClient;
    } });
    Object.defineProperty(exports2, "rpcSchema", { enumerable: true, get: function() {
      return createClient_js_1.rpcSchema;
    } });
    var custom_js_1 = require_custom();
    Object.defineProperty(exports2, "custom", { enumerable: true, get: function() {
      return custom_js_1.custom;
    } });
    var fallback_js_1 = require_fallback();
    Object.defineProperty(exports2, "fallback", { enumerable: true, get: function() {
      return fallback_js_1.fallback;
    } });
    var http_js_1 = require_http2();
    Object.defineProperty(exports2, "http", { enumerable: true, get: function() {
      return http_js_1.http;
    } });
    var createPublicClient_js_1 = require_createPublicClient();
    Object.defineProperty(exports2, "createPublicClient", { enumerable: true, get: function() {
      return createPublicClient_js_1.createPublicClient;
    } });
    var createTestClient_js_1 = require_createTestClient();
    Object.defineProperty(exports2, "createTestClient", { enumerable: true, get: function() {
      return createTestClient_js_1.createTestClient;
    } });
    var public_js_1 = require_public();
    Object.defineProperty(exports2, "publicActions", { enumerable: true, get: function() {
      return public_js_1.publicActions;
    } });
    var test_js_1 = require_test();
    Object.defineProperty(exports2, "testActions", { enumerable: true, get: function() {
      return test_js_1.testActions;
    } });
    var wallet_js_1 = require_wallet();
    Object.defineProperty(exports2, "walletActions", { enumerable: true, get: function() {
      return wallet_js_1.walletActions;
    } });
    var createTransport_js_1 = require_createTransport();
    Object.defineProperty(exports2, "createTransport", { enumerable: true, get: function() {
      return createTransport_js_1.createTransport;
    } });
    var createWalletClient_js_1 = require_createWalletClient();
    Object.defineProperty(exports2, "createWalletClient", { enumerable: true, get: function() {
      return createWalletClient_js_1.createWalletClient;
    } });
    var webSocket_js_1 = require_webSocket2();
    Object.defineProperty(exports2, "webSocket", { enumerable: true, get: function() {
      return webSocket_js_1.webSocket;
    } });
    var abis_js_1 = require_abis();
    Object.defineProperty(exports2, "multicall3Abi", { enumerable: true, get: function() {
      return abis_js_1.multicall3Abi;
    } });
    Object.defineProperty(exports2, "erc20Abi", { enumerable: true, get: function() {
      return abis_js_1.erc20Abi;
    } });
    Object.defineProperty(exports2, "erc20Abi_bytes32", { enumerable: true, get: function() {
      return abis_js_1.erc20Abi_bytes32;
    } });
    Object.defineProperty(exports2, "erc721Abi", { enumerable: true, get: function() {
      return abis_js_1.erc721Abi;
    } });
    Object.defineProperty(exports2, "erc4626Abi", { enumerable: true, get: function() {
      return abis_js_1.erc4626Abi;
    } });
    var address_js_1 = require_address2();
    Object.defineProperty(exports2, "zeroAddress", { enumerable: true, get: function() {
      return address_js_1.zeroAddress;
    } });
    var unit_js_1 = require_unit();
    Object.defineProperty(exports2, "etherUnits", { enumerable: true, get: function() {
      return unit_js_1.etherUnits;
    } });
    Object.defineProperty(exports2, "gweiUnits", { enumerable: true, get: function() {
      return unit_js_1.gweiUnits;
    } });
    Object.defineProperty(exports2, "weiUnits", { enumerable: true, get: function() {
      return unit_js_1.weiUnits;
    } });
    var number_js_1 = require_number();
    Object.defineProperty(exports2, "maxInt8", { enumerable: true, get: function() {
      return number_js_1.maxInt8;
    } });
    Object.defineProperty(exports2, "maxInt16", { enumerable: true, get: function() {
      return number_js_1.maxInt16;
    } });
    Object.defineProperty(exports2, "maxInt24", { enumerable: true, get: function() {
      return number_js_1.maxInt24;
    } });
    Object.defineProperty(exports2, "maxInt32", { enumerable: true, get: function() {
      return number_js_1.maxInt32;
    } });
    Object.defineProperty(exports2, "maxInt40", { enumerable: true, get: function() {
      return number_js_1.maxInt40;
    } });
    Object.defineProperty(exports2, "maxInt48", { enumerable: true, get: function() {
      return number_js_1.maxInt48;
    } });
    Object.defineProperty(exports2, "maxInt56", { enumerable: true, get: function() {
      return number_js_1.maxInt56;
    } });
    Object.defineProperty(exports2, "maxInt64", { enumerable: true, get: function() {
      return number_js_1.maxInt64;
    } });
    Object.defineProperty(exports2, "maxInt72", { enumerable: true, get: function() {
      return number_js_1.maxInt72;
    } });
    Object.defineProperty(exports2, "maxInt80", { enumerable: true, get: function() {
      return number_js_1.maxInt80;
    } });
    Object.defineProperty(exports2, "maxInt88", { enumerable: true, get: function() {
      return number_js_1.maxInt88;
    } });
    Object.defineProperty(exports2, "maxInt96", { enumerable: true, get: function() {
      return number_js_1.maxInt96;
    } });
    Object.defineProperty(exports2, "maxInt104", { enumerable: true, get: function() {
      return number_js_1.maxInt104;
    } });
    Object.defineProperty(exports2, "maxInt112", { enumerable: true, get: function() {
      return number_js_1.maxInt112;
    } });
    Object.defineProperty(exports2, "maxInt120", { enumerable: true, get: function() {
      return number_js_1.maxInt120;
    } });
    Object.defineProperty(exports2, "maxInt128", { enumerable: true, get: function() {
      return number_js_1.maxInt128;
    } });
    Object.defineProperty(exports2, "maxInt136", { enumerable: true, get: function() {
      return number_js_1.maxInt136;
    } });
    Object.defineProperty(exports2, "maxInt144", { enumerable: true, get: function() {
      return number_js_1.maxInt144;
    } });
    Object.defineProperty(exports2, "maxInt152", { enumerable: true, get: function() {
      return number_js_1.maxInt152;
    } });
    Object.defineProperty(exports2, "maxInt160", { enumerable: true, get: function() {
      return number_js_1.maxInt160;
    } });
    Object.defineProperty(exports2, "maxInt168", { enumerable: true, get: function() {
      return number_js_1.maxInt168;
    } });
    Object.defineProperty(exports2, "maxInt176", { enumerable: true, get: function() {
      return number_js_1.maxInt176;
    } });
    Object.defineProperty(exports2, "maxInt184", { enumerable: true, get: function() {
      return number_js_1.maxInt184;
    } });
    Object.defineProperty(exports2, "maxInt192", { enumerable: true, get: function() {
      return number_js_1.maxInt192;
    } });
    Object.defineProperty(exports2, "maxInt200", { enumerable: true, get: function() {
      return number_js_1.maxInt200;
    } });
    Object.defineProperty(exports2, "maxInt208", { enumerable: true, get: function() {
      return number_js_1.maxInt208;
    } });
    Object.defineProperty(exports2, "maxInt216", { enumerable: true, get: function() {
      return number_js_1.maxInt216;
    } });
    Object.defineProperty(exports2, "maxInt224", { enumerable: true, get: function() {
      return number_js_1.maxInt224;
    } });
    Object.defineProperty(exports2, "maxInt232", { enumerable: true, get: function() {
      return number_js_1.maxInt232;
    } });
    Object.defineProperty(exports2, "maxInt240", { enumerable: true, get: function() {
      return number_js_1.maxInt240;
    } });
    Object.defineProperty(exports2, "maxInt248", { enumerable: true, get: function() {
      return number_js_1.maxInt248;
    } });
    Object.defineProperty(exports2, "maxInt256", { enumerable: true, get: function() {
      return number_js_1.maxInt256;
    } });
    Object.defineProperty(exports2, "maxUint8", { enumerable: true, get: function() {
      return number_js_1.maxUint8;
    } });
    Object.defineProperty(exports2, "maxUint16", { enumerable: true, get: function() {
      return number_js_1.maxUint16;
    } });
    Object.defineProperty(exports2, "maxUint24", { enumerable: true, get: function() {
      return number_js_1.maxUint24;
    } });
    Object.defineProperty(exports2, "maxUint32", { enumerable: true, get: function() {
      return number_js_1.maxUint32;
    } });
    Object.defineProperty(exports2, "maxUint40", { enumerable: true, get: function() {
      return number_js_1.maxUint40;
    } });
    Object.defineProperty(exports2, "maxUint48", { enumerable: true, get: function() {
      return number_js_1.maxUint48;
    } });
    Object.defineProperty(exports2, "maxUint56", { enumerable: true, get: function() {
      return number_js_1.maxUint56;
    } });
    Object.defineProperty(exports2, "maxUint64", { enumerable: true, get: function() {
      return number_js_1.maxUint64;
    } });
    Object.defineProperty(exports2, "maxUint72", { enumerable: true, get: function() {
      return number_js_1.maxUint72;
    } });
    Object.defineProperty(exports2, "maxUint80", { enumerable: true, get: function() {
      return number_js_1.maxUint80;
    } });
    Object.defineProperty(exports2, "maxUint88", { enumerable: true, get: function() {
      return number_js_1.maxUint88;
    } });
    Object.defineProperty(exports2, "maxUint96", { enumerable: true, get: function() {
      return number_js_1.maxUint96;
    } });
    Object.defineProperty(exports2, "maxUint104", { enumerable: true, get: function() {
      return number_js_1.maxUint104;
    } });
    Object.defineProperty(exports2, "maxUint112", { enumerable: true, get: function() {
      return number_js_1.maxUint112;
    } });
    Object.defineProperty(exports2, "maxUint120", { enumerable: true, get: function() {
      return number_js_1.maxUint120;
    } });
    Object.defineProperty(exports2, "maxUint128", { enumerable: true, get: function() {
      return number_js_1.maxUint128;
    } });
    Object.defineProperty(exports2, "maxUint136", { enumerable: true, get: function() {
      return number_js_1.maxUint136;
    } });
    Object.defineProperty(exports2, "maxUint144", { enumerable: true, get: function() {
      return number_js_1.maxUint144;
    } });
    Object.defineProperty(exports2, "maxUint152", { enumerable: true, get: function() {
      return number_js_1.maxUint152;
    } });
    Object.defineProperty(exports2, "maxUint160", { enumerable: true, get: function() {
      return number_js_1.maxUint160;
    } });
    Object.defineProperty(exports2, "maxUint168", { enumerable: true, get: function() {
      return number_js_1.maxUint168;
    } });
    Object.defineProperty(exports2, "maxUint176", { enumerable: true, get: function() {
      return number_js_1.maxUint176;
    } });
    Object.defineProperty(exports2, "maxUint184", { enumerable: true, get: function() {
      return number_js_1.maxUint184;
    } });
    Object.defineProperty(exports2, "maxUint192", { enumerable: true, get: function() {
      return number_js_1.maxUint192;
    } });
    Object.defineProperty(exports2, "maxUint200", { enumerable: true, get: function() {
      return number_js_1.maxUint200;
    } });
    Object.defineProperty(exports2, "maxUint208", { enumerable: true, get: function() {
      return number_js_1.maxUint208;
    } });
    Object.defineProperty(exports2, "maxUint216", { enumerable: true, get: function() {
      return number_js_1.maxUint216;
    } });
    Object.defineProperty(exports2, "maxUint224", { enumerable: true, get: function() {
      return number_js_1.maxUint224;
    } });
    Object.defineProperty(exports2, "maxUint232", { enumerable: true, get: function() {
      return number_js_1.maxUint232;
    } });
    Object.defineProperty(exports2, "maxUint240", { enumerable: true, get: function() {
      return number_js_1.maxUint240;
    } });
    Object.defineProperty(exports2, "maxUint248", { enumerable: true, get: function() {
      return number_js_1.maxUint248;
    } });
    Object.defineProperty(exports2, "maxUint256", { enumerable: true, get: function() {
      return number_js_1.maxUint256;
    } });
    Object.defineProperty(exports2, "minInt8", { enumerable: true, get: function() {
      return number_js_1.minInt8;
    } });
    Object.defineProperty(exports2, "minInt16", { enumerable: true, get: function() {
      return number_js_1.minInt16;
    } });
    Object.defineProperty(exports2, "minInt24", { enumerable: true, get: function() {
      return number_js_1.minInt24;
    } });
    Object.defineProperty(exports2, "minInt32", { enumerable: true, get: function() {
      return number_js_1.minInt32;
    } });
    Object.defineProperty(exports2, "minInt40", { enumerable: true, get: function() {
      return number_js_1.minInt40;
    } });
    Object.defineProperty(exports2, "minInt48", { enumerable: true, get: function() {
      return number_js_1.minInt48;
    } });
    Object.defineProperty(exports2, "minInt56", { enumerable: true, get: function() {
      return number_js_1.minInt56;
    } });
    Object.defineProperty(exports2, "minInt64", { enumerable: true, get: function() {
      return number_js_1.minInt64;
    } });
    Object.defineProperty(exports2, "minInt72", { enumerable: true, get: function() {
      return number_js_1.minInt72;
    } });
    Object.defineProperty(exports2, "minInt80", { enumerable: true, get: function() {
      return number_js_1.minInt80;
    } });
    Object.defineProperty(exports2, "minInt88", { enumerable: true, get: function() {
      return number_js_1.minInt88;
    } });
    Object.defineProperty(exports2, "minInt96", { enumerable: true, get: function() {
      return number_js_1.minInt96;
    } });
    Object.defineProperty(exports2, "minInt104", { enumerable: true, get: function() {
      return number_js_1.minInt104;
    } });
    Object.defineProperty(exports2, "minInt112", { enumerable: true, get: function() {
      return number_js_1.minInt112;
    } });
    Object.defineProperty(exports2, "minInt120", { enumerable: true, get: function() {
      return number_js_1.minInt120;
    } });
    Object.defineProperty(exports2, "minInt128", { enumerable: true, get: function() {
      return number_js_1.minInt128;
    } });
    Object.defineProperty(exports2, "minInt136", { enumerable: true, get: function() {
      return number_js_1.minInt136;
    } });
    Object.defineProperty(exports2, "minInt144", { enumerable: true, get: function() {
      return number_js_1.minInt144;
    } });
    Object.defineProperty(exports2, "minInt152", { enumerable: true, get: function() {
      return number_js_1.minInt152;
    } });
    Object.defineProperty(exports2, "minInt160", { enumerable: true, get: function() {
      return number_js_1.minInt160;
    } });
    Object.defineProperty(exports2, "minInt168", { enumerable: true, get: function() {
      return number_js_1.minInt168;
    } });
    Object.defineProperty(exports2, "minInt176", { enumerable: true, get: function() {
      return number_js_1.minInt176;
    } });
    Object.defineProperty(exports2, "minInt184", { enumerable: true, get: function() {
      return number_js_1.minInt184;
    } });
    Object.defineProperty(exports2, "minInt192", { enumerable: true, get: function() {
      return number_js_1.minInt192;
    } });
    Object.defineProperty(exports2, "minInt200", { enumerable: true, get: function() {
      return number_js_1.minInt200;
    } });
    Object.defineProperty(exports2, "minInt208", { enumerable: true, get: function() {
      return number_js_1.minInt208;
    } });
    Object.defineProperty(exports2, "minInt216", { enumerable: true, get: function() {
      return number_js_1.minInt216;
    } });
    Object.defineProperty(exports2, "minInt224", { enumerable: true, get: function() {
      return number_js_1.minInt224;
    } });
    Object.defineProperty(exports2, "minInt232", { enumerable: true, get: function() {
      return number_js_1.minInt232;
    } });
    Object.defineProperty(exports2, "minInt240", { enumerable: true, get: function() {
      return number_js_1.minInt240;
    } });
    Object.defineProperty(exports2, "minInt248", { enumerable: true, get: function() {
      return number_js_1.minInt248;
    } });
    Object.defineProperty(exports2, "minInt256", { enumerable: true, get: function() {
      return number_js_1.minInt256;
    } });
    var bytes_js_1 = require_bytes();
    Object.defineProperty(exports2, "zeroHash", { enumerable: true, get: function() {
      return bytes_js_1.zeroHash;
    } });
    var strings_js_1 = require_strings();
    Object.defineProperty(exports2, "presignMessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.presignMessagePrefix;
    } });
    var abi_js_1 = require_abi();
    Object.defineProperty(exports2, "AbiConstructorNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiConstructorNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiConstructorParamsNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiConstructorParamsNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiDecodingDataSizeInvalidError", { enumerable: true, get: function() {
      return abi_js_1.AbiDecodingDataSizeInvalidError;
    } });
    Object.defineProperty(exports2, "AbiDecodingDataSizeTooSmallError", { enumerable: true, get: function() {
      return abi_js_1.AbiDecodingDataSizeTooSmallError;
    } });
    Object.defineProperty(exports2, "AbiDecodingZeroDataError", { enumerable: true, get: function() {
      return abi_js_1.AbiDecodingZeroDataError;
    } });
    Object.defineProperty(exports2, "AbiEncodingArrayLengthMismatchError", { enumerable: true, get: function() {
      return abi_js_1.AbiEncodingArrayLengthMismatchError;
    } });
    Object.defineProperty(exports2, "AbiEncodingLengthMismatchError", { enumerable: true, get: function() {
      return abi_js_1.AbiEncodingLengthMismatchError;
    } });
    Object.defineProperty(exports2, "AbiEncodingBytesSizeMismatchError", { enumerable: true, get: function() {
      return abi_js_1.AbiEncodingBytesSizeMismatchError;
    } });
    Object.defineProperty(exports2, "AbiErrorInputsNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiErrorInputsNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiErrorNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiErrorNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiErrorSignatureNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiErrorSignatureNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiEventNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiEventNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiEventSignatureEmptyTopicsError", { enumerable: true, get: function() {
      return abi_js_1.AbiEventSignatureEmptyTopicsError;
    } });
    Object.defineProperty(exports2, "AbiEventSignatureNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiEventSignatureNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiFunctionNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiFunctionNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiFunctionOutputsNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiFunctionOutputsNotFoundError;
    } });
    Object.defineProperty(exports2, "AbiFunctionSignatureNotFoundError", { enumerable: true, get: function() {
      return abi_js_1.AbiFunctionSignatureNotFoundError;
    } });
    Object.defineProperty(exports2, "BytesSizeMismatchError", { enumerable: true, get: function() {
      return abi_js_1.BytesSizeMismatchError;
    } });
    Object.defineProperty(exports2, "DecodeLogDataMismatch", { enumerable: true, get: function() {
      return abi_js_1.DecodeLogDataMismatch;
    } });
    Object.defineProperty(exports2, "DecodeLogTopicsMismatch", { enumerable: true, get: function() {
      return abi_js_1.DecodeLogTopicsMismatch;
    } });
    Object.defineProperty(exports2, "InvalidAbiDecodingTypeError", { enumerable: true, get: function() {
      return abi_js_1.InvalidAbiDecodingTypeError;
    } });
    Object.defineProperty(exports2, "InvalidAbiEncodingTypeError", { enumerable: true, get: function() {
      return abi_js_1.InvalidAbiEncodingTypeError;
    } });
    Object.defineProperty(exports2, "InvalidArrayError", { enumerable: true, get: function() {
      return abi_js_1.InvalidArrayError;
    } });
    Object.defineProperty(exports2, "InvalidDefinitionTypeError", { enumerable: true, get: function() {
      return abi_js_1.InvalidDefinitionTypeError;
    } });
    Object.defineProperty(exports2, "UnsupportedPackedAbiType", { enumerable: true, get: function() {
      return abi_js_1.UnsupportedPackedAbiType;
    } });
    var base_js_1 = require_base();
    Object.defineProperty(exports2, "BaseError", { enumerable: true, get: function() {
      return base_js_1.BaseError;
    } });
    var block_js_1 = require_block2();
    Object.defineProperty(exports2, "BlockNotFoundError", { enumerable: true, get: function() {
      return block_js_1.BlockNotFoundError;
    } });
    var contract_js_1 = require_contract();
    Object.defineProperty(exports2, "CallExecutionError", { enumerable: true, get: function() {
      return contract_js_1.CallExecutionError;
    } });
    Object.defineProperty(exports2, "ContractFunctionExecutionError", { enumerable: true, get: function() {
      return contract_js_1.ContractFunctionExecutionError;
    } });
    Object.defineProperty(exports2, "ContractFunctionRevertedError", { enumerable: true, get: function() {
      return contract_js_1.ContractFunctionRevertedError;
    } });
    Object.defineProperty(exports2, "ContractFunctionZeroDataError", { enumerable: true, get: function() {
      return contract_js_1.ContractFunctionZeroDataError;
    } });
    Object.defineProperty(exports2, "RawContractError", { enumerable: true, get: function() {
      return contract_js_1.RawContractError;
    } });
    var fee_js_1 = require_fee();
    Object.defineProperty(exports2, "BaseFeeScalarError", { enumerable: true, get: function() {
      return fee_js_1.BaseFeeScalarError;
    } });
    Object.defineProperty(exports2, "Eip1559FeesNotSupportedError", { enumerable: true, get: function() {
      return fee_js_1.Eip1559FeesNotSupportedError;
    } });
    Object.defineProperty(exports2, "MaxFeePerGasTooLowError", { enumerable: true, get: function() {
      return fee_js_1.MaxFeePerGasTooLowError;
    } });
    var rpc_js_1 = require_rpc();
    Object.defineProperty(exports2, "ChainDisconnectedError", { enumerable: true, get: function() {
      return rpc_js_1.ChainDisconnectedError;
    } });
    Object.defineProperty(exports2, "InternalRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InternalRpcError;
    } });
    Object.defineProperty(exports2, "InvalidInputRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InvalidInputRpcError;
    } });
    Object.defineProperty(exports2, "InvalidParamsRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InvalidParamsRpcError;
    } });
    Object.defineProperty(exports2, "InvalidRequestRpcError", { enumerable: true, get: function() {
      return rpc_js_1.InvalidRequestRpcError;
    } });
    Object.defineProperty(exports2, "JsonRpcVersionUnsupportedError", { enumerable: true, get: function() {
      return rpc_js_1.JsonRpcVersionUnsupportedError;
    } });
    Object.defineProperty(exports2, "LimitExceededRpcError", { enumerable: true, get: function() {
      return rpc_js_1.LimitExceededRpcError;
    } });
    Object.defineProperty(exports2, "MethodNotFoundRpcError", { enumerable: true, get: function() {
      return rpc_js_1.MethodNotFoundRpcError;
    } });
    Object.defineProperty(exports2, "MethodNotSupportedRpcError", { enumerable: true, get: function() {
      return rpc_js_1.MethodNotSupportedRpcError;
    } });
    Object.defineProperty(exports2, "ParseRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ParseRpcError;
    } });
    Object.defineProperty(exports2, "ProviderDisconnectedError", { enumerable: true, get: function() {
      return rpc_js_1.ProviderDisconnectedError;
    } });
    Object.defineProperty(exports2, "ProviderRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ProviderRpcError;
    } });
    Object.defineProperty(exports2, "ResourceNotFoundRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ResourceNotFoundRpcError;
    } });
    Object.defineProperty(exports2, "ResourceUnavailableRpcError", { enumerable: true, get: function() {
      return rpc_js_1.ResourceUnavailableRpcError;
    } });
    Object.defineProperty(exports2, "RpcError", { enumerable: true, get: function() {
      return rpc_js_1.RpcError;
    } });
    Object.defineProperty(exports2, "SwitchChainError", { enumerable: true, get: function() {
      return rpc_js_1.SwitchChainError;
    } });
    Object.defineProperty(exports2, "TransactionRejectedRpcError", { enumerable: true, get: function() {
      return rpc_js_1.TransactionRejectedRpcError;
    } });
    Object.defineProperty(exports2, "UnauthorizedProviderError", { enumerable: true, get: function() {
      return rpc_js_1.UnauthorizedProviderError;
    } });
    Object.defineProperty(exports2, "UnknownRpcError", { enumerable: true, get: function() {
      return rpc_js_1.UnknownRpcError;
    } });
    Object.defineProperty(exports2, "UnsupportedProviderMethodError", { enumerable: true, get: function() {
      return rpc_js_1.UnsupportedProviderMethodError;
    } });
    Object.defineProperty(exports2, "UserRejectedRequestError", { enumerable: true, get: function() {
      return rpc_js_1.UserRejectedRequestError;
    } });
    var chain_js_1 = require_chain();
    Object.defineProperty(exports2, "ChainDoesNotSupportContract", { enumerable: true, get: function() {
      return chain_js_1.ChainDoesNotSupportContract;
    } });
    Object.defineProperty(exports2, "ChainMismatchError", { enumerable: true, get: function() {
      return chain_js_1.ChainMismatchError;
    } });
    Object.defineProperty(exports2, "ChainNotFoundError", { enumerable: true, get: function() {
      return chain_js_1.ChainNotFoundError;
    } });
    Object.defineProperty(exports2, "ClientChainNotConfiguredError", { enumerable: true, get: function() {
      return chain_js_1.ClientChainNotConfiguredError;
    } });
    Object.defineProperty(exports2, "InvalidChainIdError", { enumerable: true, get: function() {
      return chain_js_1.InvalidChainIdError;
    } });
    var encoding_js_1 = require_encoding();
    Object.defineProperty(exports2, "InvalidBytesBooleanError", { enumerable: true, get: function() {
      return encoding_js_1.InvalidBytesBooleanError;
    } });
    Object.defineProperty(exports2, "IntegerOutOfRangeError", { enumerable: true, get: function() {
      return encoding_js_1.IntegerOutOfRangeError;
    } });
    Object.defineProperty(exports2, "InvalidHexBooleanError", { enumerable: true, get: function() {
      return encoding_js_1.InvalidHexBooleanError;
    } });
    Object.defineProperty(exports2, "InvalidHexValueError", { enumerable: true, get: function() {
      return encoding_js_1.InvalidHexValueError;
    } });
    Object.defineProperty(exports2, "SizeOverflowError", { enumerable: true, get: function() {
      return encoding_js_1.SizeOverflowError;
    } });
    var ens_js_1 = require_ens();
    Object.defineProperty(exports2, "EnsAvatarUriResolutionError", { enumerable: true, get: function() {
      return ens_js_1.EnsAvatarUriResolutionError;
    } });
    Object.defineProperty(exports2, "EnsAvatarInvalidNftUriError", { enumerable: true, get: function() {
      return ens_js_1.EnsAvatarInvalidNftUriError;
    } });
    Object.defineProperty(exports2, "EnsAvatarUnsupportedNamespaceError", { enumerable: true, get: function() {
      return ens_js_1.EnsAvatarUnsupportedNamespaceError;
    } });
    var estimateGas_js_1 = require_estimateGas();
    Object.defineProperty(exports2, "EstimateGasExecutionError", { enumerable: true, get: function() {
      return estimateGas_js_1.EstimateGasExecutionError;
    } });
    var node_js_1 = require_node();
    Object.defineProperty(exports2, "ExecutionRevertedError", { enumerable: true, get: function() {
      return node_js_1.ExecutionRevertedError;
    } });
    Object.defineProperty(exports2, "FeeCapTooHighError", { enumerable: true, get: function() {
      return node_js_1.FeeCapTooHighError;
    } });
    Object.defineProperty(exports2, "FeeCapTooLowError", { enumerable: true, get: function() {
      return node_js_1.FeeCapTooLowError;
    } });
    Object.defineProperty(exports2, "InsufficientFundsError", { enumerable: true, get: function() {
      return node_js_1.InsufficientFundsError;
    } });
    Object.defineProperty(exports2, "IntrinsicGasTooHighError", { enumerable: true, get: function() {
      return node_js_1.IntrinsicGasTooHighError;
    } });
    Object.defineProperty(exports2, "IntrinsicGasTooLowError", { enumerable: true, get: function() {
      return node_js_1.IntrinsicGasTooLowError;
    } });
    Object.defineProperty(exports2, "NonceMaxValueError", { enumerable: true, get: function() {
      return node_js_1.NonceMaxValueError;
    } });
    Object.defineProperty(exports2, "NonceTooHighError", { enumerable: true, get: function() {
      return node_js_1.NonceTooHighError;
    } });
    Object.defineProperty(exports2, "NonceTooLowError", { enumerable: true, get: function() {
      return node_js_1.NonceTooLowError;
    } });
    Object.defineProperty(exports2, "TipAboveFeeCapError", { enumerable: true, get: function() {
      return node_js_1.TipAboveFeeCapError;
    } });
    Object.defineProperty(exports2, "TransactionTypeNotSupportedError", { enumerable: true, get: function() {
      return node_js_1.TransactionTypeNotSupportedError;
    } });
    Object.defineProperty(exports2, "UnknownNodeError", { enumerable: true, get: function() {
      return node_js_1.UnknownNodeError;
    } });
    var log_js_1 = require_log2();
    Object.defineProperty(exports2, "FilterTypeNotSupportedError", { enumerable: true, get: function() {
      return log_js_1.FilterTypeNotSupportedError;
    } });
    var request_js_1 = require_request();
    Object.defineProperty(exports2, "HttpRequestError", { enumerable: true, get: function() {
      return request_js_1.HttpRequestError;
    } });
    Object.defineProperty(exports2, "RpcRequestError", { enumerable: true, get: function() {
      return request_js_1.RpcRequestError;
    } });
    Object.defineProperty(exports2, "TimeoutError", { enumerable: true, get: function() {
      return request_js_1.TimeoutError;
    } });
    Object.defineProperty(exports2, "WebSocketRequestError", { enumerable: true, get: function() {
      return request_js_1.WebSocketRequestError;
    } });
    var address_js_2 = require_address();
    Object.defineProperty(exports2, "InvalidAddressError", { enumerable: true, get: function() {
      return address_js_2.InvalidAddressError;
    } });
    var transaction_js_1 = require_transaction2();
    Object.defineProperty(exports2, "FeeConflictError", { enumerable: true, get: function() {
      return transaction_js_1.FeeConflictError;
    } });
    Object.defineProperty(exports2, "InvalidLegacyVError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidLegacyVError;
    } });
    Object.defineProperty(exports2, "InvalidSerializableTransactionError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidSerializableTransactionError;
    } });
    Object.defineProperty(exports2, "InvalidSerializedTransactionError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidSerializedTransactionError;
    } });
    Object.defineProperty(exports2, "InvalidSerializedTransactionTypeError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidSerializedTransactionTypeError;
    } });
    Object.defineProperty(exports2, "InvalidStorageKeySizeError", { enumerable: true, get: function() {
      return transaction_js_1.InvalidStorageKeySizeError;
    } });
    Object.defineProperty(exports2, "TransactionExecutionError", { enumerable: true, get: function() {
      return transaction_js_1.TransactionExecutionError;
    } });
    Object.defineProperty(exports2, "TransactionNotFoundError", { enumerable: true, get: function() {
      return transaction_js_1.TransactionNotFoundError;
    } });
    Object.defineProperty(exports2, "TransactionReceiptNotFoundError", { enumerable: true, get: function() {
      return transaction_js_1.TransactionReceiptNotFoundError;
    } });
    Object.defineProperty(exports2, "WaitForTransactionReceiptTimeoutError", { enumerable: true, get: function() {
      return transaction_js_1.WaitForTransactionReceiptTimeoutError;
    } });
    var data_js_1 = require_data();
    Object.defineProperty(exports2, "SizeExceedsPaddingSizeError", { enumerable: true, get: function() {
      return data_js_1.SizeExceedsPaddingSizeError;
    } });
    Object.defineProperty(exports2, "SliceOffsetOutOfBoundsError", { enumerable: true, get: function() {
      return data_js_1.SliceOffsetOutOfBoundsError;
    } });
    var transport_js_1 = require_transport();
    Object.defineProperty(exports2, "UrlRequiredError", { enumerable: true, get: function() {
      return transport_js_1.UrlRequiredError;
    } });
    var stateOverride_js_1 = require_stateOverride();
    Object.defineProperty(exports2, "AccountStateConflictError", { enumerable: true, get: function() {
      return stateOverride_js_1.AccountStateConflictError;
    } });
    Object.defineProperty(exports2, "StateAssignmentConflictError", { enumerable: true, get: function() {
      return stateOverride_js_1.StateAssignmentConflictError;
    } });
    var labelhash_js_1 = require_labelhash();
    Object.defineProperty(exports2, "labelhash", { enumerable: true, get: function() {
      return labelhash_js_1.labelhash;
    } });
    var namehash_js_1 = require_namehash();
    Object.defineProperty(exports2, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    var block_js_2 = require_block();
    Object.defineProperty(exports2, "defineBlock", { enumerable: true, get: function() {
      return block_js_2.defineBlock;
    } });
    Object.defineProperty(exports2, "formatBlock", { enumerable: true, get: function() {
      return block_js_2.formatBlock;
    } });
    var log_js_2 = require_log();
    Object.defineProperty(exports2, "formatLog", { enumerable: true, get: function() {
      return log_js_2.formatLog;
    } });
    var decodeAbiParameters_js_1 = require_decodeAbiParameters();
    Object.defineProperty(exports2, "decodeAbiParameters", { enumerable: true, get: function() {
      return decodeAbiParameters_js_1.decodeAbiParameters;
    } });
    var decodeDeployData_js_1 = require_decodeDeployData();
    Object.defineProperty(exports2, "decodeDeployData", { enumerable: true, get: function() {
      return decodeDeployData_js_1.decodeDeployData;
    } });
    var decodeErrorResult_js_1 = require_decodeErrorResult();
    Object.defineProperty(exports2, "decodeErrorResult", { enumerable: true, get: function() {
      return decodeErrorResult_js_1.decodeErrorResult;
    } });
    var decodeEventLog_js_1 = require_decodeEventLog();
    Object.defineProperty(exports2, "decodeEventLog", { enumerable: true, get: function() {
      return decodeEventLog_js_1.decodeEventLog;
    } });
    var decodeFunctionData_js_1 = require_decodeFunctionData();
    Object.defineProperty(exports2, "decodeFunctionData", { enumerable: true, get: function() {
      return decodeFunctionData_js_1.decodeFunctionData;
    } });
    var decodeFunctionResult_js_1 = require_decodeFunctionResult();
    Object.defineProperty(exports2, "decodeFunctionResult", { enumerable: true, get: function() {
      return decodeFunctionResult_js_1.decodeFunctionResult;
    } });
    var encodeAbiParameters_js_1 = require_encodeAbiParameters();
    Object.defineProperty(exports2, "encodeAbiParameters", { enumerable: true, get: function() {
      return encodeAbiParameters_js_1.encodeAbiParameters;
    } });
    var encodeDeployData_js_1 = require_encodeDeployData();
    Object.defineProperty(exports2, "encodeDeployData", { enumerable: true, get: function() {
      return encodeDeployData_js_1.encodeDeployData;
    } });
    var encodeErrorResult_js_1 = require_encodeErrorResult();
    Object.defineProperty(exports2, "encodeErrorResult", { enumerable: true, get: function() {
      return encodeErrorResult_js_1.encodeErrorResult;
    } });
    var encodeEventTopics_js_1 = require_encodeEventTopics();
    Object.defineProperty(exports2, "encodeEventTopics", { enumerable: true, get: function() {
      return encodeEventTopics_js_1.encodeEventTopics;
    } });
    var encodeFunctionData_js_1 = require_encodeFunctionData();
    Object.defineProperty(exports2, "encodeFunctionData", { enumerable: true, get: function() {
      return encodeFunctionData_js_1.encodeFunctionData;
    } });
    var prepareEncodeFunctionData_js_1 = require_prepareEncodeFunctionData();
    Object.defineProperty(exports2, "prepareEncodeFunctionData", { enumerable: true, get: function() {
      return prepareEncodeFunctionData_js_1.prepareEncodeFunctionData;
    } });
    var encodeFunctionResult_js_1 = require_encodeFunctionResult();
    Object.defineProperty(exports2, "encodeFunctionResult", { enumerable: true, get: function() {
      return encodeFunctionResult_js_1.encodeFunctionResult;
    } });
    var parseEventLogs_js_1 = require_parseEventLogs();
    Object.defineProperty(exports2, "parseEventLogs", { enumerable: true, get: function() {
      return parseEventLogs_js_1.parseEventLogs;
    } });
    var transaction_js_2 = require_transaction();
    Object.defineProperty(exports2, "defineTransaction", { enumerable: true, get: function() {
      return transaction_js_2.defineTransaction;
    } });
    Object.defineProperty(exports2, "formatTransaction", { enumerable: true, get: function() {
      return transaction_js_2.formatTransaction;
    } });
    Object.defineProperty(exports2, "transactionType", { enumerable: true, get: function() {
      return transaction_js_2.transactionType;
    } });
    var transactionReceipt_js_1 = require_transactionReceipt();
    Object.defineProperty(exports2, "defineTransactionReceipt", { enumerable: true, get: function() {
      return transactionReceipt_js_1.defineTransactionReceipt;
    } });
    Object.defineProperty(exports2, "formatTransactionReceipt", { enumerable: true, get: function() {
      return transactionReceipt_js_1.formatTransactionReceipt;
    } });
    var transactionRequest_js_1 = require_transactionRequest();
    Object.defineProperty(exports2, "defineTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.defineTransactionRequest;
    } });
    Object.defineProperty(exports2, "formatTransactionRequest", { enumerable: true, get: function() {
      return transactionRequest_js_1.formatTransactionRequest;
    } });
    Object.defineProperty(exports2, "rpcTransactionType", { enumerable: true, get: function() {
      return transactionRequest_js_1.rpcTransactionType;
    } });
    var getAbiItem_js_1 = require_getAbiItem();
    Object.defineProperty(exports2, "getAbiItem", { enumerable: true, get: function() {
      return getAbiItem_js_1.getAbiItem;
    } });
    var getContractAddress_js_1 = require_getContractAddress();
    Object.defineProperty(exports2, "getContractAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getContractAddress;
    } });
    Object.defineProperty(exports2, "getCreate2Address", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreate2Address;
    } });
    Object.defineProperty(exports2, "getCreateAddress", { enumerable: true, get: function() {
      return getContractAddress_js_1.getCreateAddress;
    } });
    var getSerializedTransactionType_js_1 = require_getSerializedTransactionType();
    Object.defineProperty(exports2, "getSerializedTransactionType", { enumerable: true, get: function() {
      return getSerializedTransactionType_js_1.getSerializedTransactionType;
    } });
    var getTransactionType_js_1 = require_getTransactionType();
    Object.defineProperty(exports2, "getTransactionType", { enumerable: true, get: function() {
      return getTransactionType_js_1.getTransactionType;
    } });
    var hashTypedData_js_1 = require_hashTypedData();
    Object.defineProperty(exports2, "hashDomain", { enumerable: true, get: function() {
      return hashTypedData_js_1.hashDomain;
    } });
    Object.defineProperty(exports2, "hashTypedData", { enumerable: true, get: function() {
      return hashTypedData_js_1.hashTypedData;
    } });
    var compactSignatureToSignature_js_1 = require_compactSignatureToSignature();
    Object.defineProperty(exports2, "compactSignatureToSignature", { enumerable: true, get: function() {
      return compactSignatureToSignature_js_1.compactSignatureToSignature;
    } });
    var hexToCompactSignature_js_1 = require_hexToCompactSignature();
    Object.defineProperty(exports2, "hexToCompactSignature", { enumerable: true, get: function() {
      return hexToCompactSignature_js_1.hexToCompactSignature;
    } });
    var hexToSignature_js_1 = require_hexToSignature();
    Object.defineProperty(exports2, "hexToSignature", { enumerable: true, get: function() {
      return hexToSignature_js_1.hexToSignature;
    } });
    var recoverAddress_js_1 = require_recoverAddress();
    Object.defineProperty(exports2, "recoverAddress", { enumerable: true, get: function() {
      return recoverAddress_js_1.recoverAddress;
    } });
    var recoverMessageAddress_js_1 = require_recoverMessageAddress();
    Object.defineProperty(exports2, "recoverMessageAddress", { enumerable: true, get: function() {
      return recoverMessageAddress_js_1.recoverMessageAddress;
    } });
    var recoverPublicKey_js_1 = require_recoverPublicKey();
    Object.defineProperty(exports2, "recoverPublicKey", { enumerable: true, get: function() {
      return recoverPublicKey_js_1.recoverPublicKey;
    } });
    var recoverTransactionAddress_js_1 = require_recoverTransactionAddress();
    Object.defineProperty(exports2, "recoverTransactionAddress", { enumerable: true, get: function() {
      return recoverTransactionAddress_js_1.recoverTransactionAddress;
    } });
    var recoverTypedDataAddress_js_1 = require_recoverTypedDataAddress();
    Object.defineProperty(exports2, "recoverTypedDataAddress", { enumerable: true, get: function() {
      return recoverTypedDataAddress_js_1.recoverTypedDataAddress;
    } });
    var signatureToCompactSignature_js_1 = require_signatureToCompactSignature();
    Object.defineProperty(exports2, "signatureToCompactSignature", { enumerable: true, get: function() {
      return signatureToCompactSignature_js_1.signatureToCompactSignature;
    } });
    var compactSignatureToHex_js_1 = require_compactSignatureToHex();
    Object.defineProperty(exports2, "compactSignatureToHex", { enumerable: true, get: function() {
      return compactSignatureToHex_js_1.compactSignatureToHex;
    } });
    var signatureToHex_js_1 = require_signatureToHex();
    Object.defineProperty(exports2, "signatureToHex", { enumerable: true, get: function() {
      return signatureToHex_js_1.signatureToHex;
    } });
    var toRlp_js_1 = require_toRlp();
    Object.defineProperty(exports2, "bytesToRlp", { enumerable: true, get: function() {
      return toRlp_js_1.bytesToRlp;
    } });
    Object.defineProperty(exports2, "hexToRlp", { enumerable: true, get: function() {
      return toRlp_js_1.hexToRlp;
    } });
    Object.defineProperty(exports2, "toRlp", { enumerable: true, get: function() {
      return toRlp_js_1.toRlp;
    } });
    var verifyMessage_js_1 = require_verifyMessage();
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return verifyMessage_js_1.verifyMessage;
    } });
    var verifyTypedData_js_1 = require_verifyTypedData();
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return verifyTypedData_js_1.verifyTypedData;
    } });
    var assertRequest_js_1 = require_assertRequest();
    Object.defineProperty(exports2, "assertRequest", { enumerable: true, get: function() {
      return assertRequest_js_1.assertRequest;
    } });
    var assertTransaction_js_1 = require_assertTransaction();
    Object.defineProperty(exports2, "assertTransactionEIP1559", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP1559;
    } });
    Object.defineProperty(exports2, "assertTransactionEIP2930", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionEIP2930;
    } });
    Object.defineProperty(exports2, "assertTransactionLegacy", { enumerable: true, get: function() {
      return assertTransaction_js_1.assertTransactionLegacy;
    } });
    var toBytes_js_1 = require_toBytes();
    Object.defineProperty(exports2, "boolToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.boolToBytes;
    } });
    Object.defineProperty(exports2, "hexToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.hexToBytes;
    } });
    Object.defineProperty(exports2, "numberToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.numberToBytes;
    } });
    Object.defineProperty(exports2, "stringToBytes", { enumerable: true, get: function() {
      return toBytes_js_1.stringToBytes;
    } });
    Object.defineProperty(exports2, "toBytes", { enumerable: true, get: function() {
      return toBytes_js_1.toBytes;
    } });
    var toHex_js_1 = require_toHex();
    Object.defineProperty(exports2, "boolToHex", { enumerable: true, get: function() {
      return toHex_js_1.boolToHex;
    } });
    Object.defineProperty(exports2, "bytesToHex", { enumerable: true, get: function() {
      return toHex_js_1.bytesToHex;
    } });
    Object.defineProperty(exports2, "numberToHex", { enumerable: true, get: function() {
      return toHex_js_1.numberToHex;
    } });
    Object.defineProperty(exports2, "stringToHex", { enumerable: true, get: function() {
      return toHex_js_1.stringToHex;
    } });
    Object.defineProperty(exports2, "toHex", { enumerable: true, get: function() {
      return toHex_js_1.toHex;
    } });
    var fromBytes_js_1 = require_fromBytes();
    Object.defineProperty(exports2, "bytesToBigInt", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBigInt;
    } });
    Object.defineProperty(exports2, "bytesToBool", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToBool;
    } });
    Object.defineProperty(exports2, "bytesToNumber", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToNumber;
    } });
    Object.defineProperty(exports2, "bytesToString", { enumerable: true, get: function() {
      return fromBytes_js_1.bytesToString;
    } });
    Object.defineProperty(exports2, "fromBytes", { enumerable: true, get: function() {
      return fromBytes_js_1.fromBytes;
    } });
    var ccip_js_1 = require_ccip2();
    Object.defineProperty(exports2, "ccipRequest", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "ccipFetch", { enumerable: true, get: function() {
      return ccip_js_1.ccipRequest;
    } });
    Object.defineProperty(exports2, "offchainLookup", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookup;
    } });
    Object.defineProperty(exports2, "offchainLookupAbiItem", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupAbiItem;
    } });
    Object.defineProperty(exports2, "offchainLookupSignature", { enumerable: true, get: function() {
      return ccip_js_1.offchainLookupSignature;
    } });
    var blobsToCommitments_js_1 = require_blobsToCommitments();
    Object.defineProperty(exports2, "blobsToCommitments", { enumerable: true, get: function() {
      return blobsToCommitments_js_1.blobsToCommitments;
    } });
    var commitmentToVersionedHash_js_1 = require_commitmentToVersionedHash();
    Object.defineProperty(exports2, "commitmentToVersionedHash", { enumerable: true, get: function() {
      return commitmentToVersionedHash_js_1.commitmentToVersionedHash;
    } });
    var commitmentsToVersionedHashes_js_1 = require_commitmentsToVersionedHashes();
    Object.defineProperty(exports2, "commitmentsToVersionedHashes", { enumerable: true, get: function() {
      return commitmentsToVersionedHashes_js_1.commitmentsToVersionedHashes;
    } });
    var sidecarsToVersionedHashes_js_1 = require_sidecarsToVersionedHashes();
    Object.defineProperty(exports2, "sidecarsToVersionedHashes", { enumerable: true, get: function() {
      return sidecarsToVersionedHashes_js_1.sidecarsToVersionedHashes;
    } });
    var blobsToProofs_js_1 = require_blobsToProofs();
    Object.defineProperty(exports2, "blobsToProofs", { enumerable: true, get: function() {
      return blobsToProofs_js_1.blobsToProofs;
    } });
    var fromBlobs_js_1 = require_fromBlobs();
    Object.defineProperty(exports2, "fromBlobs", { enumerable: true, get: function() {
      return fromBlobs_js_1.fromBlobs;
    } });
    var toBlobSidecars_js_1 = require_toBlobSidecars();
    Object.defineProperty(exports2, "toBlobSidecars", { enumerable: true, get: function() {
      return toBlobSidecars_js_1.toBlobSidecars;
    } });
    var toBlobs_js_1 = require_toBlobs();
    Object.defineProperty(exports2, "toBlobs", { enumerable: true, get: function() {
      return toBlobs_js_1.toBlobs;
    } });
    var defineKzg_js_1 = require_defineKzg();
    Object.defineProperty(exports2, "defineKzg", { enumerable: true, get: function() {
      return defineKzg_js_1.defineKzg;
    } });
    var setupKzg_js_1 = require_setupKzg();
    Object.defineProperty(exports2, "setupKzg", { enumerable: true, get: function() {
      return setupKzg_js_1.setupKzg;
    } });
    var concat_js_1 = require_concat();
    Object.defineProperty(exports2, "concat", { enumerable: true, get: function() {
      return concat_js_1.concat;
    } });
    Object.defineProperty(exports2, "concatBytes", { enumerable: true, get: function() {
      return concat_js_1.concatBytes;
    } });
    Object.defineProperty(exports2, "concatHex", { enumerable: true, get: function() {
      return concat_js_1.concatHex;
    } });
    var assertCurrentChain_js_1 = require_assertCurrentChain();
    Object.defineProperty(exports2, "assertCurrentChain", { enumerable: true, get: function() {
      return assertCurrentChain_js_1.assertCurrentChain;
    } });
    var defineChain_js_1 = require_defineChain();
    Object.defineProperty(exports2, "defineChain", { enumerable: true, get: function() {
      return defineChain_js_1.defineChain;
    } });
    var extractChain_js_1 = require_extractChain();
    Object.defineProperty(exports2, "extractChain", { enumerable: true, get: function() {
      return extractChain_js_1.extractChain;
    } });
    var getChainContractAddress_js_1 = require_getChainContractAddress();
    Object.defineProperty(exports2, "getChainContractAddress", { enumerable: true, get: function() {
      return getChainContractAddress_js_1.getChainContractAddress;
    } });
    var encodePacked_js_1 = require_encodePacked();
    Object.defineProperty(exports2, "encodePacked", { enumerable: true, get: function() {
      return encodePacked_js_1.encodePacked;
    } });
    var withRetry_js_1 = require_withRetry();
    Object.defineProperty(exports2, "withRetry", { enumerable: true, get: function() {
      return withRetry_js_1.withRetry;
    } });
    var withTimeout_js_1 = require_withTimeout();
    Object.defineProperty(exports2, "withTimeout", { enumerable: true, get: function() {
      return withTimeout_js_1.withTimeout;
    } });
    var formatEther_js_1 = require_formatEther();
    Object.defineProperty(exports2, "formatEther", { enumerable: true, get: function() {
      return formatEther_js_1.formatEther;
    } });
    var formatGwei_js_1 = require_formatGwei();
    Object.defineProperty(exports2, "formatGwei", { enumerable: true, get: function() {
      return formatGwei_js_1.formatGwei;
    } });
    var formatUnits_js_1 = require_formatUnits();
    Object.defineProperty(exports2, "formatUnits", { enumerable: true, get: function() {
      return formatUnits_js_1.formatUnits;
    } });
    var fromHex_js_1 = require_fromHex();
    Object.defineProperty(exports2, "fromHex", { enumerable: true, get: function() {
      return fromHex_js_1.fromHex;
    } });
    Object.defineProperty(exports2, "hexToBigInt", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBigInt;
    } });
    Object.defineProperty(exports2, "hexToBool", { enumerable: true, get: function() {
      return fromHex_js_1.hexToBool;
    } });
    Object.defineProperty(exports2, "hexToNumber", { enumerable: true, get: function() {
      return fromHex_js_1.hexToNumber;
    } });
    Object.defineProperty(exports2, "hexToString", { enumerable: true, get: function() {
      return fromHex_js_1.hexToString;
    } });
    var fromRlp_js_1 = require_fromRlp();
    Object.defineProperty(exports2, "fromRlp", { enumerable: true, get: function() {
      return fromRlp_js_1.fromRlp;
    } });
    var getAddress_js_1 = require_getAddress();
    Object.defineProperty(exports2, "checksumAddress", { enumerable: true, get: function() {
      return getAddress_js_1.checksumAddress;
    } });
    Object.defineProperty(exports2, "getAddress", { enumerable: true, get: function() {
      return getAddress_js_1.getAddress;
    } });
    var getContractError_js_1 = require_getContractError();
    Object.defineProperty(exports2, "getContractError", { enumerable: true, get: function() {
      return getContractError_js_1.getContractError;
    } });
    var toEventSelector_js_1 = require_toEventSelector();
    Object.defineProperty(exports2, "toEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    Object.defineProperty(exports2, "getEventSelector", { enumerable: true, get: function() {
      return toEventSelector_js_1.toEventSelector;
    } });
    var toFunctionSelector_js_1 = require_toFunctionSelector();
    Object.defineProperty(exports2, "toFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    Object.defineProperty(exports2, "getFunctionSelector", { enumerable: true, get: function() {
      return toFunctionSelector_js_1.toFunctionSelector;
    } });
    var toEventSignature_js_1 = require_toEventSignature();
    Object.defineProperty(exports2, "toEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    Object.defineProperty(exports2, "getEventSignature", { enumerable: true, get: function() {
      return toEventSignature_js_1.toEventSignature;
    } });
    var toFunctionSignature_js_1 = require_toFunctionSignature();
    Object.defineProperty(exports2, "toFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    Object.defineProperty(exports2, "getFunctionSignature", { enumerable: true, get: function() {
      return toFunctionSignature_js_1.toFunctionSignature;
    } });
    var toEventHash_js_1 = require_toEventHash();
    Object.defineProperty(exports2, "toEventHash", { enumerable: true, get: function() {
      return toEventHash_js_1.toEventHash;
    } });
    var toFunctionHash_js_1 = require_toFunctionHash();
    Object.defineProperty(exports2, "toFunctionHash", { enumerable: true, get: function() {
      return toFunctionHash_js_1.toFunctionHash;
    } });
    var hashMessage_js_1 = require_hashMessage();
    Object.defineProperty(exports2, "hashMessage", { enumerable: true, get: function() {
      return hashMessage_js_1.hashMessage;
    } });
    var isAddress_js_1 = require_isAddress();
    Object.defineProperty(exports2, "isAddress", { enumerable: true, get: function() {
      return isAddress_js_1.isAddress;
    } });
    var isAddressEqual_js_1 = require_isAddressEqual();
    Object.defineProperty(exports2, "isAddressEqual", { enumerable: true, get: function() {
      return isAddressEqual_js_1.isAddressEqual;
    } });
    var isBytes_js_1 = require_isBytes();
    Object.defineProperty(exports2, "isBytes", { enumerable: true, get: function() {
      return isBytes_js_1.isBytes;
    } });
    var isHash_js_1 = require_isHash();
    Object.defineProperty(exports2, "isHash", { enumerable: true, get: function() {
      return isHash_js_1.isHash;
    } });
    var isHex_js_1 = require_isHex();
    Object.defineProperty(exports2, "isHex", { enumerable: true, get: function() {
      return isHex_js_1.isHex;
    } });
    var keccak256_js_1 = require_keccak256();
    Object.defineProperty(exports2, "keccak256", { enumerable: true, get: function() {
      return keccak256_js_1.keccak256;
    } });
    var sha256_js_1 = require_sha2562();
    Object.defineProperty(exports2, "sha256", { enumerable: true, get: function() {
      return sha256_js_1.sha256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports2, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var pad_js_1 = require_pad();
    Object.defineProperty(exports2, "pad", { enumerable: true, get: function() {
      return pad_js_1.pad;
    } });
    Object.defineProperty(exports2, "padBytes", { enumerable: true, get: function() {
      return pad_js_1.padBytes;
    } });
    Object.defineProperty(exports2, "padHex", { enumerable: true, get: function() {
      return pad_js_1.padHex;
    } });
    var parseEther_js_1 = require_parseEther();
    Object.defineProperty(exports2, "parseEther", { enumerable: true, get: function() {
      return parseEther_js_1.parseEther;
    } });
    var parseGwei_js_1 = require_parseGwei();
    Object.defineProperty(exports2, "parseGwei", { enumerable: true, get: function() {
      return parseGwei_js_1.parseGwei;
    } });
    var parseTransaction_js_1 = require_parseTransaction();
    Object.defineProperty(exports2, "parseTransaction", { enumerable: true, get: function() {
      return parseTransaction_js_1.parseTransaction;
    } });
    var parseUnits_js_1 = require_parseUnits();
    Object.defineProperty(exports2, "parseUnits", { enumerable: true, get: function() {
      return parseUnits_js_1.parseUnits;
    } });
    var serializeAccessList_js_1 = require_serializeAccessList();
    Object.defineProperty(exports2, "serializeAccessList", { enumerable: true, get: function() {
      return serializeAccessList_js_1.serializeAccessList;
    } });
    var serializeTransaction_js_1 = require_serializeTransaction();
    Object.defineProperty(exports2, "serializeTransaction", { enumerable: true, get: function() {
      return serializeTransaction_js_1.serializeTransaction;
    } });
    var size_js_1 = require_size();
    Object.defineProperty(exports2, "size", { enumerable: true, get: function() {
      return size_js_1.size;
    } });
    var slice_js_1 = require_slice();
    Object.defineProperty(exports2, "slice", { enumerable: true, get: function() {
      return slice_js_1.slice;
    } });
    Object.defineProperty(exports2, "sliceBytes", { enumerable: true, get: function() {
      return slice_js_1.sliceBytes;
    } });
    Object.defineProperty(exports2, "sliceHex", { enumerable: true, get: function() {
      return slice_js_1.sliceHex;
    } });
    var stringify_js_1 = require_stringify();
    Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
      return stringify_js_1.stringify;
    } });
    var trim_js_1 = require_trim();
    Object.defineProperty(exports2, "trim", { enumerable: true, get: function() {
      return trim_js_1.trim;
    } });
    var typedData_js_1 = require_typedData();
    Object.defineProperty(exports2, "validateTypedData", { enumerable: true, get: function() {
      return typedData_js_1.validateTypedData;
    } });
    Object.defineProperty(exports2, "domainSeparator", { enumerable: true, get: function() {
      return typedData_js_1.domainSeparator;
    } });
    Object.defineProperty(exports2, "getTypesForEIP712Domain", { enumerable: true, get: function() {
      return typedData_js_1.getTypesForEIP712Domain;
    } });
  });
  var require_toRlp = __commonJS2((exports2) => {
    function toRlp3(bytes22, to = "hex") {
      const encodable = getEncodable3(bytes22);
      const cursor = (0, cursor_js_1.createCursor)(new Uint8Array(encodable.length));
      encodable.encode(cursor);
      if (to === "hex")
        return (0, toHex_js_1.bytesToHex)(cursor.bytes);
      return cursor.bytes;
    }
    function bytesToRlp2(bytes22, to = "bytes") {
      return toRlp3(bytes22, to);
    }
    function hexToRlp2(hex, to = "hex") {
      return toRlp3(hex, to);
    }
    function getEncodable3(bytes22) {
      if (Array.isArray(bytes22))
        return getEncodableList3(bytes22.map((x) => getEncodable3(x)));
      return getEncodableBytes3(bytes22);
    }
    function getEncodableList3(list) {
      const bodyLength = list.reduce((acc, x) => acc + x.length, 0);
      const sizeOfBodyLength = getSizeOfLength3(bodyLength);
      const length = (() => {
        if (bodyLength <= 55)
          return 1 + bodyLength;
        return 1 + sizeOfBodyLength + bodyLength;
      })();
      return {
        length,
        encode(cursor) {
          if (bodyLength <= 55) {
            cursor.pushByte(192 + bodyLength);
          } else {
            cursor.pushByte(192 + 55 + sizeOfBodyLength);
            if (sizeOfBodyLength === 1)
              cursor.pushUint8(bodyLength);
            else if (sizeOfBodyLength === 2)
              cursor.pushUint16(bodyLength);
            else if (sizeOfBodyLength === 3)
              cursor.pushUint24(bodyLength);
            else
              cursor.pushUint32(bodyLength);
          }
          for (const { encode: encode2 } of list) {
            encode2(cursor);
          }
        }
      };
    }
    function getEncodableBytes3(bytesOrHex) {
      const bytes22 = typeof bytesOrHex === "string" ? (0, toBytes_js_1.hexToBytes)(bytesOrHex) : bytesOrHex;
      const sizeOfBytesLength = getSizeOfLength3(bytes22.length);
      const length = (() => {
        if (bytes22.length === 1 && bytes22[0] < 128)
          return 1;
        if (bytes22.length <= 55)
          return 1 + bytes22.length;
        return 1 + sizeOfBytesLength + bytes22.length;
      })();
      return {
        length,
        encode(cursor) {
          if (bytes22.length === 1 && bytes22[0] < 128) {
            cursor.pushBytes(bytes22);
          } else if (bytes22.length <= 55) {
            cursor.pushByte(128 + bytes22.length);
            cursor.pushBytes(bytes22);
          } else {
            cursor.pushByte(128 + 55 + sizeOfBytesLength);
            if (sizeOfBytesLength === 1)
              cursor.pushUint8(bytes22.length);
            else if (sizeOfBytesLength === 2)
              cursor.pushUint16(bytes22.length);
            else if (sizeOfBytesLength === 3)
              cursor.pushUint24(bytes22.length);
            else
              cursor.pushUint32(bytes22.length);
            cursor.pushBytes(bytes22);
          }
        }
      };
    }
    function getSizeOfLength3(length) {
      if (length < 2 ** 8)
        return 1;
      if (length < 2 ** 16)
        return 2;
      if (length < 2 ** 24)
        return 3;
      if (length < 2 ** 32)
        return 4;
      throw new index_js_1.BaseError("Length is too large.");
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hexToRlp = exports2.bytesToRlp = exports2.toRlp = void 0;
    var index_js_1 = require__cjs2();
    var cursor_js_1 = require_cursor2();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    exports2.toRlp = toRlp3;
    exports2.bytesToRlp = bytesToRlp2;
    exports2.hexToRlp = hexToRlp2;
  });
  var require_serializers = __commonJS2((exports2) => {
    function serializeTransaction5(transaction, signature) {
      if (isDeposit2(transaction))
        return serializeTransactionDeposit2(transaction);
      return (0, serializeTransaction_js_1.serializeTransaction)(transaction, signature);
    }
    function serializeTransactionDeposit2(transaction) {
      assertTransactionDeposit2(transaction);
      const { sourceHash, data, from, gas, isSystemTx, mint, to, value } = transaction;
      const serializedTransaction = [
        sourceHash,
        from,
        to ?? "0x",
        mint ? (0, toHex_js_1.toHex)(mint) : "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        isSystemTx ? "0x1" : "0x",
        data ?? "0x"
      ];
      return (0, concat_js_1.concatHex)([
        "0x7e",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function isDeposit2(transaction) {
      if (transaction.type === "deposit")
        return true;
      if (typeof transaction.sourceHash !== "undefined")
        return true;
      return false;
    }
    function assertTransactionDeposit2(transaction) {
      const { from, to } = transaction;
      if (from && !(0, isAddress_js_1.isAddress)(from))
        throw new address_js_1.InvalidAddressError({ address: from });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertTransactionDeposit = exports2.serializers = exports2.serializeTransaction = void 0;
    var address_js_1 = require_address();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeTransaction_js_1 = require_serializeTransaction();
    exports2.serializeTransaction = serializeTransaction5;
    exports2.serializers = {
      transaction: serializeTransaction5
    };
    exports2.assertTransactionDeposit = assertTransactionDeposit2;
  });
  var require_chainConfig = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var contracts_js_1 = require_contracts();
    var formatters_js_1 = require_formatters();
    var serializers_js_1 = require_serializers();
    exports2.chainConfig = {
      contracts: contracts_js_1.contracts,
      formatters: formatters_js_1.formatters,
      serializers: serializers_js_1.serializers
    };
  });
  var require_ancient8 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ancient8 = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.ancient8 = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 888888888,
      name: "Ancient8",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.ancient8.gg"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ancient8 explorer",
          url: "https://scan.ancient8.gg",
          apiUrl: "https://scan.ancient8.gg/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xB09DC08428C8b4EFB4ff9C0827386CDF34277996"
          }
        },
        portal: {
          [sourceId5]: {
            address: "0x639F2AECE398Aa76b07e59eF6abe2cFe32bacb68",
            blockCreated: 19070571
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xd5e3eDf5b68135D559D572E26bF863FBC1950033",
            blockCreated: 19070571
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_ancient8Sepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ancient8Sepolia = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.ancient8Sepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 28122024,
      name: "Ancient8 Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpcv2-testnet.ancient8.gg"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ancient8 Celestia Testnet explorer",
          url: "https://scanv2-testnet.ancient8.gg",
          apiUrl: "https://scanv2-testnet.ancient8.gg/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB"
          }
        },
        portal: {
          [sourceId5]: {
            address: "0xfa1d9E26A6aCD7b22115D27572c1221B9803c960",
            blockCreated: 4972908
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xF6Bc0146d3c74D48306e79Ae134A260E418C9335",
            blockCreated: 4972908
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_anvil = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.anvil = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.anvil = (0, defineChain_js_1.defineChain)({
      id: 31337,
      name: "Anvil",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:8545"],
          webSocket: ["ws://127.0.0.1:8545"]
        }
      }
    });
  });
  var require_apexTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.apexTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.apexTestnet = (0, defineChain_js_1.defineChain)({
      id: 3993,
      name: "APEX Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.apexlayer.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://exp-testnet.apexlayer.xyz",
          apiUrl: "https://exp-testnet.apexlayer.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xf7642be33a6b18D16a995657adb5a68CD0438aE2",
          blockCreated: 283775
        }
      },
      testnet: true
    });
  });
  var require_arbitrum = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrum = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrum = (0, defineChain_js_1.defineChain)({
      id: 42161,
      name: "Arbitrum One",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://arb1.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://arbiscan.io",
          apiUrl: "https://api.arbiscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7654707
        }
      }
    });
  });
  var require_arbitrumGoerli = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrumGoerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrumGoerli = (0, defineChain_js_1.defineChain)({
      id: 421613,
      name: "Arbitrum Goerli",
      nativeCurrency: {
        name: "Arbitrum Goerli Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://goerli-rollup.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://goerli.arbiscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 88114
        }
      },
      testnet: true
    });
  });
  var require_arbitrumNova = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrumNova = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrumNova = (0, defineChain_js_1.defineChain)({
      id: 42170,
      name: "Arbitrum Nova",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://nova.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://nova.arbiscan.io",
          apiUrl: "https://api-nova.arbiscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1746963
        }
      }
    });
  });
  var require_astar = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astar = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.astar = (0, defineChain_js_1.defineChain)({
      id: 592,
      name: "Astar",
      network: "astar-mainnet",
      nativeCurrency: {
        name: "Astar",
        symbol: "ASTR",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://astar.api.onfinality.io/public"] }
      },
      blockExplorers: {
        default: {
          name: "Astar Subscan",
          url: "https://astar.subscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 761794
        }
      },
      testnet: false
    });
  });
  var require_astarZkEVM = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astarZkEVM = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.astarZkEVM = (0, defineChain_js_1.defineChain)({
      id: 3776,
      name: "Astar zkEVM",
      network: "AstarZkEVM",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.startale.com/astar-zkevm"]
        }
      },
      blockExplorers: {
        default: {
          name: "Astar zkEVM Explorer",
          url: "https://astar-zkevm.explorer.startale.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 93528
        }
      },
      testnet: false
    });
  });
  var require_astarZkyoto = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.astarZkyoto = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.astarZkyoto = (0, defineChain_js_1.defineChain)({
      id: 6038361,
      name: "Astar zkEVM Testnet zKyoto",
      network: "zKyoto",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.startale.com/zkyoto"]
        }
      },
      blockExplorers: {
        default: {
          name: "zKyoto Explorer",
          url: "https://zkyoto.explorer.startale.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 196153
        }
      },
      testnet: true
    });
  });
  var require_arbitrumSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.arbitrumSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.arbitrumSepolia = (0, defineChain_js_1.defineChain)({
      id: 421614,
      name: "Arbitrum Sepolia",
      nativeCurrency: {
        name: "Arbitrum Sepolia Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rollup.arbitrum.io/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Arbiscan",
          url: "https://sepolia.arbiscan.io",
          apiUrl: "https://api-sepolia.arbiscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 81930
        }
      },
      testnet: true
    });
  });
  var require_areonNetwork = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.areonNetwork = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.areonNetwork = (0, defineChain_js_1.defineChain)({
      id: 463,
      name: "Areon Network",
      nativeCurrency: { decimals: 18, name: "AREA", symbol: "AREA" },
      rpcUrls: {
        default: {
          http: ["https://mainnet-rpc.areon.network"],
          webSocket: ["wss://mainnet-ws.areon.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Areonscan",
          url: "https://areonscan.com"
        }
      },
      testnet: false
    });
  });
  var require_areonNetworkTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.areonNetworkTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.areonNetworkTestnet = (0, defineChain_js_1.defineChain)({
      id: 462,
      name: "Areon Network Testnet",
      nativeCurrency: { decimals: 18, name: "TAREA", symbol: "TAREA" },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.areon.network"],
          webSocket: ["wss://testnet-ws.areon.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Areonscan",
          url: "https://areonscan.com"
        }
      },
      testnet: true
    });
  });
  var require_aurora = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aurora = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.aurora = (0, defineChain_js_1.defineChain)({
      id: 1313161554,
      name: "Aurora",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.aurora.dev"] }
      },
      blockExplorers: {
        default: {
          name: "Aurorascan",
          url: "https://aurorascan.dev",
          apiUrl: "https://aurorascan.dev/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 62907816
        }
      }
    });
  });
  var require_auroraTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.auroraTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.auroraTestnet = (0, defineChain_js_1.defineChain)({
      id: 1313161555,
      name: "Aurora Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://testnet.aurora.dev"] }
      },
      blockExplorers: {
        default: {
          name: "Aurorascan",
          url: "https://testnet.aurorascan.dev",
          apiUrl: "https://testnet.aurorascan.dev/api"
        }
      },
      testnet: true
    });
  });
  var require_auroria = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.auroria = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.auroria = (0, defineChain_js_1.defineChain)({
      id: 205205,
      name: "Auroria Testnet",
      network: "auroria",
      nativeCurrency: {
        name: "Auroria Stratis",
        symbol: "tSTRAX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://auroria.rpc.stratisevm.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Auroria Testnet Explorer",
          url: "https://auroria.explorer.stratisevm.com"
        }
      },
      testnet: true
    });
  });
  var require_avalanche = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.avalanche = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.avalanche = (0, defineChain_js_1.defineChain)({
      id: 43114,
      name: "Avalanche",
      nativeCurrency: {
        decimals: 18,
        name: "Avalanche",
        symbol: "AVAX"
      },
      rpcUrls: {
        default: { http: ["https://api.avax.network/ext/bc/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "SnowScan",
          url: "https://snowscan.xyz",
          apiUrl: "https://api.snowscan.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 11907934
        }
      }
    });
  });
  var require_avalancheFuji = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.avalancheFuji = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.avalancheFuji = (0, defineChain_js_1.defineChain)({
      id: 43113,
      name: "Avalanche Fuji",
      nativeCurrency: {
        decimals: 18,
        name: "Avalanche Fuji",
        symbol: "AVAX"
      },
      rpcUrls: {
        default: { http: ["https://api.avax-test.network/ext/bc/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "SnowScan",
          url: "https://testnet.snowscan.xyz",
          apiUrl: "https://api-testnet.snowscan.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7096959
        }
      },
      testnet: true
    });
  });
  var require_bahamut = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bahamut = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bahamut = (0, defineChain_js_1.defineChain)({
      id: 5165,
      network: "bahamut",
      name: "Bahamut",
      nativeCurrency: { name: "Fasttoken", symbol: "FTN", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://rpc1.bahamut.io",
            "https://bahamut-rpc.publicnode.com",
            "https://rpc2.bahamut.io"
          ],
          webSocket: [
            "wss://ws1.sahara.bahamutchain.com",
            "wss://bahamut-rpc.publicnode.com",
            "wss://ws2.sahara.bahamutchain.com"
          ]
        },
        public: {
          http: [
            "https://rpc1.bahamut.io",
            "https://bahamut-rpc.publicnode.com",
            "https://rpc2.bahamut.io"
          ],
          webSocket: [
            "wss://ws1.sahara.bahamutchain.com",
            "wss://bahamut-rpc.publicnode.com",
            "wss://ws2.sahara.bahamutchain.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Ftnscan",
          url: "https://www.ftnscan.com",
          apiUrl: "https://www.ftnscan.com/api"
        }
      }
    });
  });
  var require_base2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.base = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.base = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 8453,
      name: "Base",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.base.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Basescan",
          url: "https://basescan.org",
          apiUrl: "https://api.basescan.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x56315b90c40730925ec5485cf004d835058518A0"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 5022
        },
        portal: {
          [sourceId5]: {
            address: "0x49048044D57e1C92A77f79988d21Fa8fAF74E97e",
            blockCreated: 17482143
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x3154Cf16ccdb4C6d922629664174b904d80F2C35",
            blockCreated: 17482143
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_baseGoerli = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseGoerli = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 5;
    exports2.baseGoerli = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 84531,
      name: "Base Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://goerli.base.org"] }
      },
      blockExplorers: {
        default: {
          name: "Basescan",
          url: "https://goerli.basescan.org",
          apiUrl: "https://goerli.basescan.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x2A35891ff30313CcFa6CE88dcf3858bb075A2298"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1376988
        },
        portal: {
          [sourceId5]: {
            address: "0xe93c8cD0D409341205A592f8c4Ac1A5fe5585cfA"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xfA6D8Ee5BE770F84FC001D098C4bD604Fe01284a"
          }
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_baseSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.baseSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.baseSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 84532,
      network: "base-sepolia",
      name: "Base Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.base.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Basescan",
          url: "https://sepolia.basescan.org",
          apiUrl: "https://api-sepolia.basescan.org/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254"
          }
        },
        portal: {
          [sourceId5]: {
            address: "0x49f53e41452c74589e85ca1677426ba426459e85",
            blockCreated: 4446677
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xfd0Bf71F60660E2f608ed56e1659C450eB113120",
            blockCreated: 4446677
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1059647
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_beam = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.beam = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.beam = (0, defineChain_js_1.defineChain)({
      id: 4337,
      name: "Beam",
      network: "beam",
      nativeCurrency: {
        decimals: 18,
        name: "Beam",
        symbol: "BEAM"
      },
      rpcUrls: {
        public: {
          http: ["https://build.onbeam.com/rpc"],
          webSocket: ["wss://build.onbeam.com/ws"]
        },
        default: {
          http: ["https://build.onbeam.com/rpc"],
          webSocket: ["wss://build.onbeam.com/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Beam Explorer",
          url: "https://subnets.avax.network/beam"
        }
      },
      contracts: {
        multicall3: {
          address: "0x4956f15efdc3dc16645e90cc356eafa65ffc65ec",
          blockCreated: 1
        }
      }
    });
  });
  var require_beamTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.beamTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.beamTestnet = (0, defineChain_js_1.defineChain)({
      id: 13337,
      name: "Beam Testnet",
      network: "beam",
      nativeCurrency: {
        decimals: 18,
        name: "Beam",
        symbol: "BEAM"
      },
      rpcUrls: {
        public: {
          http: ["https://build.onbeam.com/rpc/testnet"],
          webSocket: ["wss://build.onbeam.com/ws/testnet"]
        },
        default: {
          http: ["https://build.onbeam.com/rpc/testnet"],
          webSocket: ["wss://build.onbeam.com/ws/testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "Beam Explorer",
          url: "https://subnets-test.avax.network/beam"
        }
      },
      contracts: {
        multicall3: {
          address: "0x9bf49b704ee2a095b95c1f2d4eb9010510c41c9e",
          blockCreated: 3
        }
      },
      testnet: true
    });
  });
  var require_bearNetworkChainMainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bearNetworkChainMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bearNetworkChainMainnet = (0, defineChain_js_1.defineChain)({
      id: 641230,
      name: "Bear Network Chain Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "BearNetworkChain",
        symbol: "BRNKC"
      },
      rpcUrls: {
        default: { http: ["https://brnkc-mainnet.bearnetwork.net"] }
      },
      blockExplorers: {
        default: {
          name: "BrnkScan",
          url: "https://brnkscan.bearnetwork.net",
          apiUrl: "https://brnkscan.bearnetwork.net/api"
        }
      }
    });
  });
  var require_bearNetworkChainTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bearNetworkChainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bearNetworkChainTestnet = (0, defineChain_js_1.defineChain)({
      id: 751230,
      name: "Bear Network Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "tBRNKC",
        symbol: "tBRNKC"
      },
      rpcUrls: {
        default: { http: ["https://brnkc-test.bearnetwork.net"] }
      },
      blockExplorers: {
        default: {
          name: "BrnkTestScan",
          url: "https://brnktest-scan.bearnetwork.net",
          apiUrl: "https://brnktest-scan.bearnetwork.net/api"
        }
      },
      testnet: true
    });
  });
  var require_berachainTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.berachainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.berachainTestnet = (0, defineChain_js_1.defineChain)({
      id: 80085,
      name: "Berachain Artio",
      nativeCurrency: {
        decimals: 18,
        name: "BERA Token",
        symbol: "BERA"
      },
      rpcUrls: {
        default: { http: ["https://artio.rpc.berachain.com"] }
      },
      blockExplorers: {
        default: {
          name: "Berachain",
          url: "https://artio.beratrail.io"
        }
      },
      testnet: true
    });
  });
  var require_bevmMainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bevmMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bevmMainnet = (0, defineChain_js_1.defineChain)({
      id: 11501,
      name: "BEVM Mainnet",
      nativeCurrency: { name: "Bitcoin", symbol: "BTC", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc-mainnet-1.bevm.io"] }
      },
      blockExplorers: {
        default: {
          name: "Bevmscan",
          url: "https://scan-mainnet.bevm.io",
          apiUrl: "https://scan-mainnet-api.bevm.io/api"
        }
      }
    });
  });
  var require_bitTorrent = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitTorrent = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitTorrent = (0, defineChain_js_1.defineChain)({
      id: 199,
      name: "BitTorrent",
      network: "bittorrent-chain-mainnet",
      nativeCurrency: { name: "BitTorrent", symbol: "BTT", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.bittorrentchain.io"] },
        public: { http: ["https://rpc.bittorrentchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Bttcscan",
          url: "https://bttcscan.com",
          apiUrl: "https://api.bttcscan.com/api"
        }
      }
    });
  });
  var require_bitTorrentTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bitTorrentTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bitTorrentTestnet = (0, defineChain_js_1.defineChain)({
      id: 1028,
      name: "BitTorrent Chain Testnet",
      network: "bittorrent-chain-testnet",
      nativeCurrency: { name: "BitTorrent", symbol: "BTT", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://testrpc.bittorrentchain.io"] },
        public: { http: ["https://testrpc.bittorrentchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Bttcscan",
          url: "https://testnet.bttcscan.com",
          apiUrl: "https://testnet.bttcscan.com/api"
        }
      },
      testnet: true
    });
  });
  var require_blast = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blast = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.blast = (0, defineChain_js_1.defineChain)({
      id: 81457,
      name: "Blast",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://rpc.blast.io"] }
      },
      blockExplorers: {
        default: {
          name: "Blastscan",
          url: "https://blastscan.io",
          apiUrl: "https://api.blastscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 212929
        }
      },
      sourceId: sourceId5
    });
  });
  var require_blastSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.blastSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.blastSepolia = (0, defineChain_js_1.defineChain)({
      id: 168587773,
      name: "Blast Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia.blast.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blastscan",
          url: "https://sepolia.blastscan.io",
          apiUrl: "https://api-sepolia.blastscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 756690
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_boba = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.boba = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.boba = (0, defineChain_js_1.defineChain)({
      id: 288,
      name: "Boba Network",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.boba.network"] }
      },
      blockExplorers: {
        default: {
          name: "BOBAScan",
          url: "https://bobascan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 446859
        }
      }
    });
  });
  var require_bronos = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bronos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bronos = (0, defineChain_js_1.defineChain)({
      id: 1039,
      name: "Bronos",
      nativeCurrency: {
        decimals: 18,
        name: "BRO",
        symbol: "BRO"
      },
      rpcUrls: {
        default: { http: ["https://evm.bronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "BronoScan",
          url: "https://broscan.bronos.org"
        }
      }
    });
  });
  var require_bronosTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bronosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bronosTestnet = (0, defineChain_js_1.defineChain)({
      id: 1038,
      name: "Bronos Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Bronos Coin",
        symbol: "tBRO"
      },
      rpcUrls: {
        default: { http: ["https://evm-testnet.bronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "BronoScan",
          url: "https://tbroscan.bronos.org"
        }
      },
      testnet: true
    });
  });
  var require_bsc = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bsc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bsc = (0, defineChain_js_1.defineChain)({
      id: 56,
      name: "BNB Smart Chain",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "BNB"
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/bsc"] }
      },
      blockExplorers: {
        default: {
          name: "BscScan",
          url: "https://bscscan.com",
          apiUrl: "https://api.bscscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15921452
        }
      }
    });
  });
  var require_bscTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bscTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bscTestnet = (0, defineChain_js_1.defineChain)({
      id: 97,
      name: "Binance Smart Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "tBNB"
      },
      rpcUrls: {
        default: { http: ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"] }
      },
      blockExplorers: {
        default: {
          name: "BscScan",
          url: "https://testnet.bscscan.com",
          apiUrl: "https://testnet.bscscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 17422483
        }
      },
      testnet: true
    });
  });
  var require_bscGreenfield = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bscGreenfield = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bscGreenfield = (0, defineChain_js_1.defineChain)({
      id: 1017,
      name: "BNB Greenfield Chain",
      nativeCurrency: {
        decimals: 18,
        name: "BNB",
        symbol: "BNB"
      },
      rpcUrls: {
        default: { http: ["https://greenfield-chain.bnbchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "BNB Greenfield Mainnet Scan",
          url: "https://greenfieldscan.com"
        }
      },
      testnet: false
    });
  });
  var require_bxn = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bxn = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bxn = (0, defineChain_js_1.defineChain)({
      id: 4999,
      name: "BlackFort Exchange Network",
      nativeCurrency: { name: "BlackFort Token", symbol: "BXN", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.blackfort.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://explorer.blackfort.network",
          apiUrl: "https://explorer.blackfort.network/api"
        }
      }
    });
  });
  var require_bxnTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bxnTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.bxnTestnet = (0, defineChain_js_1.defineChain)({
      id: 4777,
      name: "BlackFort Exchange Network Testnet",
      nativeCurrency: {
        name: "BlackFort Testnet Token",
        symbol: "TBXN",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.blackfort.network/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet-explorer.blackfort.network",
          apiUrl: "https://testnet-explorer.blackfort.network/api"
        }
      }
    });
  });
  var require_canto = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.canto = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.canto = (0, defineChain_js_1.defineChain)({
      id: 7700,
      name: "Canto",
      nativeCurrency: {
        decimals: 18,
        name: "Canto",
        symbol: "CANTO"
      },
      rpcUrls: {
        default: { http: ["https://canto.gravitychain.io"] }
      },
      blockExplorers: {
        default: {
          name: "Tuber.Build (Blockscout)",
          url: "https://tuber.build"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2905789
        }
      }
    });
  });
  var require_fees = __commonJS2((exports2) => {
    async function estimateFeePerGasInFeeCurrency2(client, feeCurrency) {
      const fee = await client.request({
        method: "eth_gasPrice",
        params: [feeCurrency]
      });
      return BigInt(fee);
    }
    async function estimateMaxPriorityFeePerGasInFeeCurrency2(client, feeCurrency) {
      const feesPerGas = await client.request({
        method: "eth_maxPriorityFeePerGas",
        params: [feeCurrency]
      });
      return BigInt(feesPerGas);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fees = void 0;
    exports2.fees = {
      estimateFeesPerGas: async (params) => {
        if (!params.request?.feeCurrency)
          return null;
        const [maxFeePerGas, maxPriorityFeePerGas] = await Promise.all([
          estimateFeePerGasInFeeCurrency2(params.client, params.request.feeCurrency),
          estimateMaxPriorityFeePerGasInFeeCurrency2(params.client, params.request.feeCurrency)
        ]);
        return {
          maxFeePerGas,
          maxPriorityFeePerGas
        };
      }
    };
  });
  var require_utils8 = __commonJS2((exports2) => {
    function isEmpty2(value) {
      return value === 0 || value === 0n || value === void 0 || value === null || value === "0" || value === "" || typeof value === "string" && ((0, trim_js_1.trim)(value).toLowerCase() === "0x" || (0, trim_js_1.trim)(value).toLowerCase() === "0x00");
    }
    function isPresent2(value) {
      return !isEmpty2(value);
    }
    function isEIP15592(transaction) {
      return typeof transaction.maxFeePerGas !== "undefined" && typeof transaction.maxPriorityFeePerGas !== "undefined";
    }
    function isCIP42(transaction) {
      if (transaction.type === "cip42") {
        return true;
      }
      return isEIP15592(transaction) && (isPresent2(transaction.feeCurrency) || isPresent2(transaction.gatewayFeeRecipient) || isPresent2(transaction.gatewayFee));
    }
    function isCIP642(transaction) {
      if (transaction.type === "cip64") {
        return true;
      }
      return isEIP15592(transaction) && isPresent2(transaction.feeCurrency) && isEmpty2(transaction.gatewayFee) && isEmpty2(transaction.gatewayFeeRecipient);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCIP64 = exports2.isCIP42 = exports2.isEIP1559 = exports2.isPresent = exports2.isEmpty = void 0;
    var trim_js_1 = require_trim();
    exports2.isEmpty = isEmpty2;
    exports2.isPresent = isPresent2;
    exports2.isEIP1559 = isEIP15592;
    exports2.isCIP42 = isCIP42;
    exports2.isCIP64 = isCIP642;
  });
  var require_formatters2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatters = void 0;
    var fromHex_js_1 = require_fromHex();
    var toHex_js_1 = require_toHex();
    var block_js_1 = require_block();
    var transaction_js_1 = require_transaction();
    var transactionRequest_js_1 = require_transactionRequest();
    var utils_js_1 = require_utils8();
    exports2.formatters = {
      block: (0, block_js_1.defineBlock)({
        exclude: ["difficulty", "gasLimit", "mixHash", "nonce", "uncles"],
        format(args) {
          const transactions = args.transactions?.map((transaction) => {
            if (typeof transaction === "string")
              return transaction;
            return {
              ...(0, transaction_js_1.formatTransaction)(transaction),
              feeCurrency: transaction.feeCurrency,
              ...transaction.type !== "0x7b" ? {
                gatewayFee: transaction.gatewayFee ? (0, fromHex_js_1.hexToBigInt)(transaction.gatewayFee) : null,
                gatewayFeeRecipient: transaction.gatewayFeeRecipient || null
              } : {}
            };
          });
          return {
            randomness: args.randomness,
            transactions
          };
        }
      }),
      transaction: (0, transaction_js_1.defineTransaction)({
        format(args) {
          const transaction = { feeCurrency: args.feeCurrency };
          if (args.type === "0x7b")
            transaction.type = "cip64";
          else {
            if (args.type === "0x7c")
              transaction.type = "cip42";
            transaction.gatewayFee = args.gatewayFee ? (0, fromHex_js_1.hexToBigInt)(args.gatewayFee) : null;
            transaction.gatewayFeeRecipient = args.gatewayFeeRecipient;
          }
          return transaction;
        }
      }),
      transactionRequest: (0, transactionRequest_js_1.defineTransactionRequest)({
        format(args) {
          const request = {
            feeCurrency: args.feeCurrency
          };
          if ((0, utils_js_1.isCIP64)(args))
            request.type = "0x7b";
          else {
            if ((0, utils_js_1.isCIP42)(args))
              request.type = "0x7c";
            request.gatewayFee = typeof args.gatewayFee !== "undefined" ? (0, toHex_js_1.numberToHex)(args.gatewayFee) : void 0;
            request.gatewayFeeRecipient = args.gatewayFeeRecipient;
          }
          return request;
        }
      })
    };
  });
  var require_serializers2 = __commonJS2((exports2) => {
    function serializeTransaction5(transaction, signature) {
      if ((0, utils_js_1.isCIP64)(transaction))
        return serializeTransactionCIP642(transaction, signature);
      if ((0, utils_js_1.isCIP42)(transaction))
        return serializeTransactionCIP42(transaction, signature);
      return (0, serializeTransaction_js_1.serializeTransaction)(transaction, signature);
    }
    function serializeTransactionCIP42(transaction, signature) {
      assertTransactionCIP42(transaction);
      const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, feeCurrency, gatewayFeeRecipient, gatewayFee, data } = transaction;
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        feeCurrency ?? "0x",
        gatewayFeeRecipient ?? "0x",
        gatewayFee ? (0, toHex_js_1.toHex)(gatewayFee) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        (0, serializeAccessList_js_1.serializeAccessList)(accessList),
        ...(0, serializeTransaction_js_1.toYParitySignatureArray)(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x7c",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function serializeTransactionCIP642(transaction, signature) {
      assertTransactionCIP642(transaction);
      const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, feeCurrency, data } = transaction;
      const serializedTransaction = [
        (0, toHex_js_1.toHex)(chainId),
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x",
        (0, serializeAccessList_js_1.serializeAccessList)(accessList),
        feeCurrency,
        ...(0, serializeTransaction_js_1.toYParitySignatureArray)(transaction, signature)
      ];
      return (0, concat_js_1.concatHex)([
        "0x7b",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    function assertTransactionCIP42(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency, gatewayFee, gatewayFeeRecipient } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (gasPrice)
        throw new base_js_1.BaseError("`gasPrice` is not a valid CIP-42 Transaction attribute.");
      if ((0, utils_js_1.isPresent)(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS2)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if ((0, utils_js_1.isPresent)(maxPriorityFeePerGas) && (0, utils_js_1.isPresent)(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
      if ((0, utils_js_1.isPresent)(gatewayFee) && (0, utils_js_1.isEmpty)(gatewayFeeRecipient) || (0, utils_js_1.isPresent)(gatewayFeeRecipient) && (0, utils_js_1.isEmpty)(gatewayFee)) {
        throw new base_js_1.BaseError("`gatewayFee` and `gatewayFeeRecipient` must be provided together.");
      }
      if ((0, utils_js_1.isPresent)(feeCurrency) && !(0, isAddress_js_1.isAddress)(feeCurrency)) {
        throw new base_js_1.BaseError("`feeCurrency` MUST be a token address for CIP-42 transactions.");
      }
      if ((0, utils_js_1.isPresent)(gatewayFeeRecipient) && !(0, isAddress_js_1.isAddress)(gatewayFeeRecipient)) {
        throw new address_js_1.InvalidAddressError(gatewayFeeRecipient);
      }
      if ((0, utils_js_1.isEmpty)(feeCurrency) && (0, utils_js_1.isEmpty)(gatewayFeeRecipient)) {
        throw new base_js_1.BaseError("Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.");
      }
    }
    function assertTransactionCIP642(transaction) {
      const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency } = transaction;
      if (chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (gasPrice)
        throw new base_js_1.BaseError("`gasPrice` is not a valid CIP-64 Transaction attribute.");
      if ((0, utils_js_1.isPresent)(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS2)
        throw new node_js_1.FeeCapTooHighError({ maxFeePerGas });
      if ((0, utils_js_1.isPresent)(maxPriorityFeePerGas) && (0, utils_js_1.isPresent)(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas)
        throw new node_js_1.TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
      if ((0, utils_js_1.isPresent)(feeCurrency) && !(0, isAddress_js_1.isAddress)(feeCurrency)) {
        throw new base_js_1.BaseError("`feeCurrency` MUST be a token address for CIP-64 transactions.");
      }
      if ((0, utils_js_1.isEmpty)(feeCurrency)) {
        throw new base_js_1.BaseError("`feeCurrency` must be provided for CIP-64 transactions.");
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertTransactionCIP64 = exports2.assertTransactionCIP42 = exports2.serializers = exports2.serializeTransaction = void 0;
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var chain_js_1 = require_chain();
    var node_js_1 = require_node();
    var isAddress_js_1 = require_isAddress();
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeAccessList_js_1 = require_serializeAccessList();
    var serializeTransaction_js_1 = require_serializeTransaction();
    var utils_js_1 = require_utils8();
    exports2.serializeTransaction = serializeTransaction5;
    exports2.serializers = {
      transaction: serializeTransaction5
    };
    var MAX_MAX_FEE_PER_GAS2 = 2n ** 256n - 1n;
    exports2.assertTransactionCIP42 = assertTransactionCIP42;
    exports2.assertTransactionCIP64 = assertTransactionCIP642;
  });
  var require_chainConfig2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var fees_js_1 = require_fees();
    var formatters_js_1 = require_formatters2();
    var serializers_js_1 = require_serializers2();
    exports2.chainConfig = {
      formatters: formatters_js_1.formatters,
      serializers: serializers_js_1.serializers,
      fees: fees_js_1.fees
    };
  });
  var require_celo = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.celo = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    exports2.celo = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 42220,
      name: "Celo",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "CELO"
      },
      rpcUrls: {
        default: { http: ["https://forno.celo.org"] }
      },
      blockExplorers: {
        default: {
          name: "Celo Explorer",
          url: "https://explorer.celo.org/mainnet",
          apiUrl: "https://explorer.celo.org/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 13112599
        }
      },
      testnet: false
    });
  });
  var require_celoAlfajores = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.celoAlfajores = void 0;
    var chainConfig_js_1 = require_chainConfig2();
    var defineChain_js_1 = require_defineChain();
    exports2.celoAlfajores = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 44787,
      name: "Alfajores",
      nativeCurrency: {
        decimals: 18,
        name: "CELO",
        symbol: "A-CELO"
      },
      rpcUrls: {
        default: {
          http: ["https://alfajores-forno.celo-testnet.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Celo Explorer",
          url: "https://explorer.celo.org/alfajores",
          apiUrl: "https://explorer.celo.org/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 14569001
        }
      },
      testnet: true
    });
  });
  var require_chiliz = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chiliz = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.chiliz = (0, defineChain_js_1.defineChain)({
      id: 88888,
      name: "Chiliz Chain",
      network: "chiliz-chain",
      nativeCurrency: {
        decimals: 18,
        name: "CHZ",
        symbol: "CHZ"
      },
      rpcUrls: {
        default: {
          http: [
            "https://rpc.ankr.com/chiliz",
            "https://chiliz-rpc.publicnode.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Chiliz Explorer",
          url: "https://scan.chiliz.com",
          apiUrl: "https://scan.chiliz.com/api"
        }
      }
    });
  });
  var require_classic = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.classic = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.classic = (0, defineChain_js_1.defineChain)({
      id: 61,
      name: "Ethereum Classic",
      nativeCurrency: {
        decimals: 18,
        name: "ETC",
        symbol: "ETC"
      },
      rpcUrls: {
        default: { http: ["https://etc.rivet.link"] }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.com/etc/mainnet"
        }
      }
    });
  });
  var require_confluxESpace = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.confluxESpace = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.confluxESpace = (0, defineChain_js_1.defineChain)({
      id: 1030,
      name: "Conflux eSpace",
      nativeCurrency: { name: "Conflux", symbol: "CFX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evm.confluxrpc.org"],
          webSocket: ["wss://evm.confluxrpc.org/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "ConfluxScan",
          url: "https://evm.confluxscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xEFf0078910f638cd81996cc117bccD3eDf2B072F",
          blockCreated: 68602935
        }
      }
    });
  });
  var require_confluxESpaceTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.confluxESpaceTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.confluxESpaceTestnet = (0, defineChain_js_1.defineChain)({
      id: 71,
      name: "Conflux eSpace Testnet",
      network: "cfx-espace-testnet",
      testnet: true,
      nativeCurrency: { name: "Conflux", symbol: "CFX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evmtestnet.confluxrpc.org"],
          webSocket: ["wss://evmtestnet.confluxrpc.org/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "ConfluxScan",
          url: "https://evmtestnet.confluxscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xEFf0078910f638cd81996cc117bccD3eDf2B072F",
          blockCreated: 117499050
        }
      }
    });
  });
  var require_coreDao = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.coreDao = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.coreDao = (0, defineChain_js_1.defineChain)({
      id: 1116,
      name: "Core Dao",
      nativeCurrency: {
        decimals: 18,
        name: "Core",
        symbol: "CORE"
      },
      rpcUrls: {
        default: { http: ["https://rpc.coredao.org"] }
      },
      blockExplorers: {
        default: {
          name: "CoreDao",
          url: "https://scan.coredao.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 11907934
        }
      },
      testnet: false
    });
  });
  var require_cronos = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cronos = (0, defineChain_js_1.defineChain)({
      id: 25,
      name: "Cronos Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Cronos",
        symbol: "CRO"
      },
      rpcUrls: {
        default: { http: ["https://evm.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos Explorer",
          url: "https://explorer.cronos.org",
          apiUrl: "https://explorer-api.cronos.org/mainnet/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1963112
        }
      }
    });
  });
  var require_cronosTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.cronosTestnet = (0, defineChain_js_1.defineChain)({
      id: 338,
      name: "Cronos Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "CRO",
        symbol: "tCRO"
      },
      rpcUrls: {
        default: { http: ["https://evm-t3.cronos.org"] }
      },
      blockExplorers: {
        default: {
          name: "Cronos Explorer",
          url: "https://cronos.org/explorer/testnet3"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 10191251
        }
      },
      testnet: true
    });
  });
  var require_crossbell = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.crossbell = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.crossbell = (0, defineChain_js_1.defineChain)({
      id: 3737,
      name: "Crossbell",
      nativeCurrency: {
        decimals: 18,
        name: "CSB",
        symbol: "CSB"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.crossbell.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "CrossScan",
          url: "https://scan.crossbell.io",
          apiUrl: "https://scan.crossbell.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 38246031
        }
      }
    });
  });
  var require_darwinia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.darwinia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.darwinia = (0, defineChain_js_1.defineChain)({
      id: 46,
      name: "Darwinia Network",
      nativeCurrency: {
        decimals: 18,
        name: "RING",
        symbol: "RING"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.darwinia.network"],
          webSocket: ["wss://rpc.darwinia.network"]
        }
      },
      blockExplorers: {
        default: { name: "Explorer", url: "https://darwinia.subscan.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 69420
        }
      }
    });
  });
  var require_defichainEvm = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defichainEvm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.defichainEvm = (0, defineChain_js_1.defineChain)({
      id: 1130,
      network: "defichain-evm",
      name: "DeFiChain EVM Mainnet",
      nativeCurrency: {
        name: "DeFiChain",
        symbol: "DFI",
        decimals: 8
      },
      rpcUrls: {
        default: {
          http: ["https://eth.mainnet.ocean.jellyfishsdk.com"]
        },
        public: {
          http: ["https://eth.mainnet.ocean.jellyfishsdk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "DeFiScan",
          url: "https://meta.defiscan.live"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 137852
        }
      }
    });
  });
  var require_defichainEvmTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defichainEvmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.defichainEvmTestnet = (0, defineChain_js_1.defineChain)({
      id: 1131,
      network: "defichain-evm-testnet",
      name: "DeFiChain EVM Testnet",
      nativeCurrency: {
        name: "DeFiChain",
        symbol: "DFI",
        decimals: 8
      },
      rpcUrls: {
        default: {
          http: ["https://eth.testnet.ocean.jellyfishsdk.com"]
        },
        public: {
          http: ["https://eth.testnet.ocean.jellyfishsdk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "DeFiScan",
          url: "https://meta.defiscan.live/?network=TestNet"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 156462
        }
      },
      testnet: true
    });
  });
  var require_degen = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.degen = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.degen = (0, defineChain_js_1.defineChain)({
      id: 666666666,
      name: "Degen",
      nativeCurrency: {
        decimals: 18,
        name: "Degen",
        symbol: "DEGEN"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.degen.tips"],
          webSocket: ["wss://rpc.degen.tips"]
        }
      },
      blockExplorers: {
        default: {
          name: "Degen Chain Explorer",
          url: "https://explorer.degen.tips",
          apiUrl: "https://explorer.degen.tips/api/v2"
        }
      }
    });
  });
  var require_dfk = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dfk = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dfk = (0, defineChain_js_1.defineChain)({
      id: 53935,
      name: "DFK Chain",
      nativeCurrency: {
        decimals: 18,
        name: "Jewel",
        symbol: "JEWEL"
      },
      rpcUrls: {
        default: {
          http: ["https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "DFKSubnetScan",
          url: "https://subnets.avax.network/defi-kingdoms"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14790551
        }
      }
    });
  });
  var require_dogechain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.dogechain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.dogechain = (0, defineChain_js_1.defineChain)({
      id: 2e3,
      name: "Dogechain",
      nativeCurrency: {
        decimals: 18,
        name: "Dogechain",
        symbol: "DC"
      },
      rpcUrls: {
        default: { http: ["https://rpc.dogechain.dog"] }
      },
      blockExplorers: {
        default: {
          name: "DogeChainExplorer",
          url: "https://explorer.dogechain.dog",
          apiUrl: "https://explorer.dogechain.dog/api"
        }
      }
    });
  });
  var require_edgeless = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgeless = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgeless = (0, defineChain_js_1.defineChain)({
      id: 2026,
      name: "Edgeless Network",
      nativeCurrency: {
        name: "Edgeless Wrapped ETH",
        symbol: "EwETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.edgeless.network/http"],
          webSocket: ["wss://rpc.edgeless.network/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Edgeless Explorer",
          url: "https://explorer.edgeless.network"
        }
      }
    });
  });
  var require_edgelessTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgelessTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgelessTestnet = (0, defineChain_js_1.defineChain)({
      id: 202,
      name: "Edgeless Testnet",
      nativeCurrency: {
        name: "Edgeless Wrapped ETH",
        symbol: "EwETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://edgeless-testnet.rpc.caldera.xyz/http"],
          webSocket: ["wss://edgeless-testnet.rpc.caldera.xyz/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Edgeless Testnet Explorer",
          url: "https://testnet.explorer.edgeless.network"
        }
      }
    });
  });
  var require_edgeware = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgeware = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgeware = (0, defineChain_js_1.defineChain)({
      id: 2021,
      name: "Edgeware EdgeEVM Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Edgeware",
        symbol: "EDG"
      },
      rpcUrls: {
        default: { http: ["https://edgeware-evm.jelliedowl.net"] }
      },
      blockExplorers: {
        default: {
          name: "Edgscan by Bharathcoorg",
          url: "https://edgscan.live",
          apiUrl: "https://edgscan.live/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 18117872
        }
      }
    });
  });
  var require_edgewareTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.edgewareTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.edgewareTestnet = (0, defineChain_js_1.defineChain)({
      id: 2022,
      name: "Beresheet BereEVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Testnet EDG",
        symbol: "tEDG"
      },
      rpcUrls: {
        default: { http: ["https://beresheet-evm.jelliedowl.net"] }
      },
      blockExplorers: {
        default: {
          name: "Edgscan by Bharathcoorg",
          url: "https://testnet.edgscan.live",
          apiUrl: "https://testnet.edgscan.live/api"
        }
      }
    });
  });
  var require_eon = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.eon = (0, defineChain_js_1.defineChain)({
      id: 7332,
      name: "Horizen EON",
      nativeCurrency: {
        decimals: 18,
        name: "ZEN",
        symbol: "ZEN"
      },
      rpcUrls: {
        default: { http: ["https://eon-rpc.horizenlabs.io/ethv1"] }
      },
      blockExplorers: {
        default: {
          name: "EON Explorer",
          url: "https://eon-explorer.horizenlabs.io"
        }
      },
      contracts: {}
    });
  });
  var require_eos = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.eos = (0, defineChain_js_1.defineChain)({
      id: 17777,
      name: "EOS EVM",
      nativeCurrency: {
        decimals: 18,
        name: "EOS",
        symbol: "EOS"
      },
      rpcUrls: {
        default: { http: ["https://api.evm.eosnetwork.com"] }
      },
      blockExplorers: {
        default: {
          name: "EOS EVM Explorer",
          url: "https://explorer.evm.eosnetwork.com",
          apiUrl: "https://explorer.evm.eosnetwork.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 7943933
        }
      }
    });
  });
  var require_eosTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.eosTestnet = (0, defineChain_js_1.defineChain)({
      id: 15557,
      name: "EOS EVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "EOS",
        symbol: "EOS"
      },
      rpcUrls: {
        default: { http: ["https://api.testnet.evm.eosnetwork.com"] }
      },
      blockExplorers: {
        default: {
          name: "EOS EVM Testnet Explorer",
          url: "https://explorer.testnet.evm.eosnetwork.com",
          apiUrl: "https://explorer.testnet.evm.eosnetwork.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 9067940
        }
      },
      testnet: true
    });
  });
  var require_etherlinkTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.etherlinkTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.etherlinkTestnet = (0, defineChain_js_1.defineChain)({
      id: 128123,
      name: "Etherlink Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Tez",
        symbol: "XTZ"
      },
      rpcUrls: {
        default: { http: ["https://node.ghostnet.etherlink.com"] }
      },
      blockExplorers: {
        default: {
          name: "Etherlink Testnet",
          url: "https://testnet-explorer.etherlink.com"
        }
      },
      testnet: true
    });
  });
  var require_evmos = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evmos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.evmos = (0, defineChain_js_1.defineChain)({
      id: 9001,
      name: "Evmos",
      nativeCurrency: {
        decimals: 18,
        name: "Evmos",
        symbol: "EVMOS"
      },
      rpcUrls: {
        default: { http: ["https://eth.bd.evmos.org:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Evmos Block Explorer",
          url: "https://escan.live"
        }
      }
    });
  });
  var require_evmosTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evmosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.evmosTestnet = (0, defineChain_js_1.defineChain)({
      id: 9e3,
      name: "Evmos Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Evmos",
        symbol: "EVMOS"
      },
      rpcUrls: {
        default: { http: ["https://eth.bd.evmos.dev:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Evmos Testnet Block Explorer",
          url: "https://evm.evmos.dev/"
        }
      }
    });
  });
  var require_ekta = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ekta = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ekta = (0, defineChain_js_1.defineChain)({
      id: 1994,
      name: "Ekta",
      nativeCurrency: {
        decimals: 18,
        name: "EKTA",
        symbol: "EKTA"
      },
      rpcUrls: {
        default: { http: ["https://main.ekta.io"] }
      },
      blockExplorers: {
        default: {
          name: "Ektascan",
          url: "https://ektascan.io",
          apiUrl: "https://ektascan.io/api"
        }
      }
    });
  });
  var require_ektaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ektaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ektaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1004,
      name: "Ekta Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "EKTA",
        symbol: "EKTA"
      },
      rpcUrls: {
        default: { http: ["https://test.ekta.io:8545"] }
      },
      blockExplorers: {
        default: {
          name: "Test Ektascan",
          url: "https://test.ektascan.io",
          apiUrl: "https://test.ektascan.io/api"
        }
      },
      testnet: true
    });
  });
  var require_fantom = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fantom = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fantom = (0, defineChain_js_1.defineChain)({
      id: 250,
      name: "Fantom",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/fantom"] }
      },
      blockExplorers: {
        default: {
          name: "FTMScan",
          url: "https://ftmscan.com",
          apiUrl: "https://api.ftmscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 33001987
        }
      }
    });
  });
  var require_fantomSonicTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fantomSonicTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fantomSonicTestnet = (0, defineChain_js_1.defineChain)({
      id: 64240,
      name: "Fantom Sonic Open Testnet",
      network: "fantom-sonic-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpcapi.sonic.fantom.network"] }
      },
      blockExplorers: {
        default: {
          name: "Fantom Sonic Open Testnet Explorer",
          url: "https://public-sonic.fantom.network"
        }
      },
      testnet: true
    });
  });
  var require_fantomTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fantomTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fantomTestnet = (0, defineChain_js_1.defineChain)({
      id: 4002,
      name: "Fantom Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Fantom",
        symbol: "FTM"
      },
      rpcUrls: {
        default: { http: ["https://rpc.testnet.fantom.network"] }
      },
      blockExplorers: {
        default: {
          name: "FTMScan",
          url: "https://testnet.ftmscan.com",
          apiUrl: "https://testnet.ftmscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 8328688
        }
      }
    });
  });
  var require_fibo = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fibo = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fibo = (0, defineChain_js_1.defineChain)({
      id: 12306,
      name: "Fibo Chain",
      nativeCurrency: {
        decimals: 18,
        name: "fibo",
        symbol: "FIBO"
      },
      rpcUrls: {
        default: { http: ["https://network.hzroc.art"] }
      },
      blockExplorers: {
        default: {
          name: "FiboScan",
          url: "https://scan.fibochain.org"
        }
      }
    });
  });
  var require_filecoin = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filecoin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.filecoin = (0, defineChain_js_1.defineChain)({
      id: 314,
      name: "Filecoin Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "filecoin",
        symbol: "FIL"
      },
      rpcUrls: {
        default: { http: ["https://api.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: {
          name: "Filfox",
          url: "https://filfox.info/en"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3328594
        }
      }
    });
  });
  var require_filecoinCalibration = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filecoinCalibration = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.filecoinCalibration = (0, defineChain_js_1.defineChain)({
      id: 314159,
      name: "Filecoin Calibration",
      nativeCurrency: {
        decimals: 18,
        name: "testnet filecoin",
        symbol: "tFIL"
      },
      rpcUrls: {
        default: { http: ["https://api.calibration.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: {
          name: "Filscan",
          url: "https://calibration.filscan.io"
        }
      },
      testnet: true
    });
  });
  var require_filecoinHyperspace = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filecoinHyperspace = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.filecoinHyperspace = (0, defineChain_js_1.defineChain)({
      id: 3141,
      name: "Filecoin Hyperspace",
      nativeCurrency: {
        decimals: 18,
        name: "testnet filecoin",
        symbol: "tFIL"
      },
      rpcUrls: {
        default: { http: ["https://api.hyperspace.node.glif.io/rpc/v1"] }
      },
      blockExplorers: {
        default: {
          name: "Filfox",
          url: "https://hyperspace.filfox.info/en"
        }
      },
      testnet: true
    });
  });
  var require_flare = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flare = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flare = (0, defineChain_js_1.defineChain)({
      id: 14,
      name: "Flare Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "flare",
        symbol: "FLR"
      },
      rpcUrls: {
        default: { http: ["https://flare-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Flare Explorer",
          url: "https://flare-explorer.flare.network",
          apiUrl: "https://flare-explorer.flare.network/api"
        }
      }
    });
  });
  var require_flareTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flareTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flareTestnet = (0, defineChain_js_1.defineChain)({
      id: 114,
      name: "Coston2",
      nativeCurrency: {
        decimals: 18,
        name: "coston2flare",
        symbol: "C2FLR"
      },
      rpcUrls: {
        default: { http: ["https://coston2-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Coston2 Explorer",
          url: "https://coston2-explorer.flare.network",
          apiUrl: "https://coston2-explorer.flare.network/api"
        }
      },
      testnet: true
    });
  });
  var require_flowPreviewnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flowPreviewnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flowPreviewnet = (0, defineChain_js_1.defineChain)({
      id: 646,
      name: "FlowEVM Previewnet",
      nativeCurrency: {
        decimals: 18,
        name: "Flow",
        symbol: "FLOW"
      },
      rpcUrls: {
        default: {
          http: ["https://previewnet.evm.nodes.onflow.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Previewnet Explorer",
          url: "https://previewnet.flowdiver.io"
        }
      }
    });
  });
  var require_flowMainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flowMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.flowMainnet = (0, defineChain_js_1.defineChain)({
      id: 747,
      name: "FlowEVM Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Flow",
        symbol: "FLOW"
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.evm.nodes.onflow.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mainnet Explorer",
          url: "https://flowdiver.io"
        }
      }
    });
  });
  var require_foundry = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.foundry = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.foundry = (0, defineChain_js_1.defineChain)({
      id: 31337,
      name: "Foundry",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:8545"],
          webSocket: ["ws://127.0.0.1:8545"]
        }
      }
    });
  });
  var require_fraxtal = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fraxtal = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.fraxtal = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 252,
      name: "Fraxtal",
      nativeCurrency: { name: "Frax Ether", symbol: "frxETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.frax.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "fraxscan",
          url: "https://fraxscan.com",
          apiUrl: "https://api.fraxscan.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x66CC916Ed5C6C2FA97014f7D1cD141528Ae171e4"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId5]: {
            address: "0x36cb65c1967A0Fb0EEE11569C51C2f2aA1Ca6f6D",
            blockCreated: 19135323
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x34C0bD5877A5Ee7099D0f5688D65F4bB9158BDE2",
            blockCreated: 19135323
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_fraxtalTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fraxtalTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 17e3;
    exports2.fraxtalTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2522,
      name: "Fraxtal Testnet",
      nativeCurrency: { name: "Frax Ether", symbol: "frxETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.frax.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "fraxscan testnet",
          url: "https://holesky.fraxscan.com",
          apiUrl: "https://api-holesky.fraxscan.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x715EA64DA13F4d0831ece4Ad3E8c1aa013167F32"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId5]: {
            address: "0xB9c64BfA498d5b9a8398Ed6f46eb76d90dE5505d",
            blockCreated: 318416
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x0BaafC217162f64930909aD9f2B27125121d6332",
            blockCreated: 318416
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_fuse = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fuse = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fuse = (0, defineChain_js_1.defineChain)({
      id: 122,
      name: "Fuse",
      nativeCurrency: { name: "Fuse", symbol: "FUSE", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.fuse.io"] }
      },
      blockExplorers: {
        default: {
          name: "Fuse Explorer",
          url: "https://explorer.fuse.io",
          apiUrl: "https://explorer.fuse.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 16146628
        }
      }
    });
  });
  var require_fuseSparknet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fuseSparknet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.fuseSparknet = (0, defineChain_js_1.defineChain)({
      id: 123,
      name: "Fuse Sparknet",
      nativeCurrency: { name: "Spark", symbol: "SPARK", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc.fusespark.io"] }
      },
      blockExplorers: {
        default: {
          name: "Sparkent Explorer",
          url: "https://explorer.fusespark.io",
          apiUrl: "https://explorer.fusespark.io/api"
        }
      }
    });
  });
  var require_iotex = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iotex = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.iotex = (0, defineChain_js_1.defineChain)({
      id: 4689,
      name: "IoTeX",
      nativeCurrency: {
        decimals: 18,
        name: "IoTeX",
        symbol: "IOTX"
      },
      rpcUrls: {
        default: {
          http: ["https://babel-api.mainnet.iotex.io"],
          webSocket: ["wss://babel-api.mainnet.iotex.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "IoTeXScan",
          url: "https://iotexscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 22163670
        }
      }
    });
  });
  var require_iotexTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.iotexTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.iotexTestnet = (0, defineChain_js_1.defineChain)({
      id: 4690,
      name: "IoTeX Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "IoTeX",
        symbol: "IOTX"
      },
      rpcUrls: {
        default: {
          http: ["https://babel-api.testnet.iotex.io"],
          webSocket: ["wss://babel-api.testnet.iotex.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "IoTeXScan",
          url: "https://testnet.iotexscan.io"
        }
      },
      testnet: true
    });
  });
  var require_jbc = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.jbc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.jbc = (0, defineChain_js_1.defineChain)({
      id: 8899,
      name: "JIBCHAIN L1",
      network: "jbc",
      nativeCurrency: { name: "JBC", symbol: "JBC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-l1.jibchain.net"]
        },
        public: {
          http: ["https://rpc-l1.jibchain.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://exp-l1.jibchain.net",
          apiUrl: "https://exp-l1.jibchain.net/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xc0C8C486D1466C57Efe13C2bf000d4c56F47CBdC",
          blockCreated: 2299048
        }
      },
      testnet: false
    });
  });
  var require_karura = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.karura = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.karura = (0, defineChain_js_1.defineChain)({
      id: 686,
      name: "Karura",
      network: "karura",
      nativeCurrency: {
        name: "Karura",
        symbol: "KAR",
        decimals: 18
      },
      rpcUrls: {
        public: {
          http: ["https://eth-rpc-karura.aca-api.network"],
          webSocket: ["wss://eth-rpc-karura.aca-api.network"]
        },
        default: {
          http: ["https://eth-rpc-karura.aca-api.network"],
          webSocket: ["wss://eth-rpc-karura.aca-api.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Karura Blockscout",
          url: "https://blockscout.karura.network",
          apiUrl: "https://blockscout.karura.network/api"
        }
      },
      testnet: false
    });
  });
  var require_gobi = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gobi = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gobi = (0, defineChain_js_1.defineChain)({
      id: 1663,
      name: "Horizen Gobi Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Test ZEN",
        symbol: "tZEN"
      },
      rpcUrls: {
        default: { http: ["https://gobi-testnet.horizenlabs.io/ethv1"] }
      },
      blockExplorers: {
        default: {
          name: "Gobi Explorer",
          url: "https://gobi-explorer.horizen.io"
        }
      },
      contracts: {},
      testnet: true
    });
  });
  var require_goerli = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.goerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.goerli = (0, defineChain_js_1.defineChain)({
      id: 5,
      name: "Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.ankr.com/eth_goerli"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.etherscan.io",
          apiUrl: "https://api-goerli.etherscan.io/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        ensUniversalResolver: {
          address: "0xfc4AC75C46C914aF5892d6d3eFFcebD7917293F1",
          blockCreated: 10339206
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6507670
        }
      },
      testnet: true
    });
  });
  var require_gnosis = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gnosis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gnosis = (0, defineChain_js_1.defineChain)({
      id: 100,
      name: "Gnosis",
      nativeCurrency: {
        decimals: 18,
        name: "Gnosis",
        symbol: "xDAI"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.gnosischain.com"],
          webSocket: ["wss://rpc.gnosischain.com/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "Gnosisscan",
          url: "https://gnosisscan.io",
          apiUrl: "https://api.gnosisscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 21022491
        }
      }
    });
  });
  var require_gnosisChiado = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.gnosisChiado = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.gnosisChiado = (0, defineChain_js_1.defineChain)({
      id: 10200,
      name: "Gnosis Chiado",
      nativeCurrency: {
        decimals: 18,
        name: "Gnosis",
        symbol: "xDAI"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.chiadochain.net"],
          webSocket: ["wss://rpc.chiadochain.net/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.chiadochain.net",
          apiUrl: "https://blockscout.chiadochain.net/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 4967313
        }
      },
      testnet: true
    });
  });
  var require_hardhat = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hardhat = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hardhat = (0, defineChain_js_1.defineChain)({
      id: 31337,
      name: "Hardhat",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] }
      }
    });
  });
  var require_harmonyOne = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.harmonyOne = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.harmonyOne = (0, defineChain_js_1.defineChain)({
      id: 16666e5,
      name: "Harmony One",
      nativeCurrency: {
        name: "Harmony",
        symbol: "ONE",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.ankr.com/harmony"] }
      },
      blockExplorers: {
        default: {
          name: "Harmony Explorer",
          url: "https://explorer.harmony.one"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 24185753
        }
      }
    });
  });
  var require_haqqMainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.haqqMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.haqqMainnet = (0, defineChain_js_1.defineChain)({
      id: 11235,
      name: "HAQQ Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Islamic Coin",
        symbol: "ISLM"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.eth.haqq.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "HAQQ Explorer",
          url: "https://explorer.haqq.network",
          apiUrl: "https://explorer.haqq.network/api"
        }
      }
    });
  });
  var require_haqqTestedge2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.haqqTestedge2 = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.haqqTestedge2 = (0, defineChain_js_1.defineChain)({
      id: 54211,
      name: "HAQQ Testedge 2",
      nativeCurrency: {
        decimals: 18,
        name: "Islamic Coin",
        symbol: "ISLMT"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.eth.testedge2.haqq.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "HAQQ Explorer",
          url: "https://explorer.testedge2.haqq.network",
          apiUrl: "https://explorer.testedge2.haqq.network/api"
        }
      }
    });
  });
  var require_hedera = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hedera = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hedera = (0, defineChain_js_1.defineChain)({
      id: 295,
      name: "Hedera Mainnet",
      network: "hedera-mainnet",
      nativeCurrency: {
        symbol: "HBAR",
        name: "HBAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.hashio.io/api"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hashscan",
          url: "https://hashscan.io/mainnet"
        }
      },
      testnet: false
    });
  });
  var require_hederaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hederaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hederaTestnet = (0, defineChain_js_1.defineChain)({
      id: 296,
      name: "Hedera Testnet",
      network: "hedera-testnet",
      nativeCurrency: {
        symbol: "HBAR",
        name: "HBAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.hashio.io/api"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hashscan",
          url: "https://hashscan.io/testnet"
        }
      },
      testnet: true
    });
  });
  var require_hederaPreviewnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hederaPreviewnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.hederaPreviewnet = (0, defineChain_js_1.defineChain)({
      id: 297,
      name: "Hedera Previewnet",
      network: "hedera-previewnet",
      nativeCurrency: {
        symbol: "HBAR",
        name: "HBAR",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://previewnet.hashio.io/api"]
        }
      },
      blockExplorers: {
        default: {
          name: "Hashscan",
          url: "https://hashscan.io/previewnet"
        }
      },
      testnet: true
    });
  });
  var require_holesky = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.holesky = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.holesky = (0, defineChain_js_1.defineChain)({
      id: 17e3,
      name: "Holesky",
      nativeCurrency: { name: "Holesky Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://ethereum-holesky-rpc.publicnode.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://holesky.etherscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 77
        },
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          blockCreated: 801613
        },
        ensUniversalResolver: {
          address: "0xa6AC935D4971E3CD133b950aE053bECD16fE7f3b",
          blockCreated: 973484
        }
      },
      testnet: true
    });
  });
  var require_immutableZkEvm = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.immutableZkEvm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.immutableZkEvm = (0, defineChain_js_1.defineChain)({
      id: 13371,
      name: "Immutable zkEVM",
      nativeCurrency: {
        decimals: 18,
        name: "Immutable Coin",
        symbol: "IMX"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.immutable.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Immutable Explorer",
          url: "https://explorer.immutable.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x236bdA4589e44e6850f5aC6a74BfCa398a86c6c0",
          blockCreated: 4335972
        }
      }
    });
  });
  var require_immutableZkEvmTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.immutableZkEvmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.immutableZkEvmTestnet = (0, defineChain_js_1.defineChain)({
      id: 13473,
      name: "Immutable zkEVM Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Immutable Coin",
        symbol: "IMX"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.immutable.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Immutable Testnet Explorer",
          url: "https://explorer.testnet.immutable.com/"
        }
      },
      contracts: {
        multicall3: {
          address: "0x2CC787Ed364600B0222361C4188308Fa8E68bA60",
          blockCreated: 5977391
        }
      },
      testnet: true
    });
  });
  var require_kakarotSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kakarotSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kakarotSepolia = (0, defineChain_js_1.defineChain)({
      id: 107107114116,
      name: "Kakarot Sepolia",
      nativeCurrency: {
        name: "Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rpc.kakarot.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kakarot Scan",
          url: "https://sepolia.kakarotscan.org"
        }
      },
      testnet: true
    });
  });
  var require_kava = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kava = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kava = (0, defineChain_js_1.defineChain)({
      id: 2222,
      name: "Kava EVM",
      network: "kava-mainnet",
      nativeCurrency: {
        name: "Kava",
        symbol: "KAVA",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://evm.kava.io"] }
      },
      blockExplorers: {
        default: {
          name: "Kava EVM Explorer",
          url: "https://kavascan.com",
          apiUrl: "https://kavascan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 3661165
        }
      },
      testnet: false
    });
  });
  var require_kavaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kavaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kavaTestnet = (0, defineChain_js_1.defineChain)({
      id: 2221,
      name: "Kava EVM Testnet",
      network: "kava-testnet",
      nativeCurrency: {
        name: "Kava",
        symbol: "KAVA",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://evm.testnet.kava.io"] }
      },
      blockExplorers: {
        default: {
          name: "Kava EVM Testnet Explorer",
          url: "https://testnet.kavascan.com/",
          apiUrl: "https://testnet.kavascan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xDf1D724A7166261eEB015418fe8c7679BBEa7fd6",
          blockCreated: 7242179
        }
      },
      testnet: true
    });
  });
  var require_kcc = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kcc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kcc = (0, defineChain_js_1.defineChain)({
      id: 321,
      name: "KCC Mainnet",
      network: "KCC Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "KCS",
        symbol: "KCS"
      },
      rpcUrls: {
        default: {
          http: ["https://kcc-rpc.com"]
        },
        public: {
          http: ["https://kcc-rpc.com"]
        }
      },
      blockExplorers: {
        default: { name: "KCC Explorer", url: "https://explorer.kcc.io" }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 11760430
        }
      },
      testnet: false
    });
  });
  var require_klaytn = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.klaytn = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.klaytn = (0, defineChain_js_1.defineChain)({
      id: 8217,
      name: "Klaytn",
      nativeCurrency: {
        decimals: 18,
        name: "Klaytn",
        symbol: "KLAY"
      },
      rpcUrls: {
        default: { http: ["https://public-en-cypress.klaytn.net"] }
      },
      blockExplorers: {
        default: {
          name: "KlaytnScope",
          url: "https://scope.klaytn.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 96002415
        }
      }
    });
  });
  var require_klaytnBaobab = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.klaytnBaobab = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.klaytnBaobab = (0, defineChain_js_1.defineChain)({
      id: 1001,
      name: "Klaytn Baobab Testnet",
      network: "klaytn-baobab",
      nativeCurrency: {
        decimals: 18,
        name: "Baobab Klaytn",
        symbol: "KLAY"
      },
      rpcUrls: {
        default: { http: ["https://public-en-baobab.klaytn.net"] }
      },
      blockExplorers: {
        default: {
          name: "KlaytnScope",
          url: "https://baobab.klaytnscope.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 123390593
        }
      },
      testnet: true
    });
  });
  var require_kroma = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kroma = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kroma = (0, defineChain_js_1.defineChain)({
      id: 255,
      name: "Kroma",
      nativeCurrency: { name: "ETH", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.kroma.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kroma Explorer",
          url: "https://blockscout.kroma.network",
          apiUrl: "https://blockscout.kroma.network/api"
        }
      },
      testnet: false
    });
  });
  var require_kromaSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.kromaSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.kromaSepolia = (0, defineChain_js_1.defineChain)({
      id: 2358,
      name: "Kroma Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.sepolia.kroma.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Kroma Sepolia Explorer",
          url: "https://blockscout.sepolia.kroma.network",
          apiUrl: "https://blockscout.sepolia.kroma.network/api"
        }
      },
      testnet: true
    });
  });
  var require_lightlinkPegasus = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lightlinkPegasus = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lightlinkPegasus = (0, defineChain_js_1.defineChain)({
      id: 1891,
      name: "LightLink Pegasus Testnet",
      network: "lightlink-pegasus",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://replicator.pegasus.lightlink.io/rpc/v1"]
        }
      },
      blockExplorers: {
        default: {
          name: "LightLink Pegasus Explorer",
          url: "https://pegasus.lightlink.io"
        }
      },
      testnet: true
    });
  });
  var require_lightlinkPhoenix = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lightlinkPhoenix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lightlinkPhoenix = (0, defineChain_js_1.defineChain)({
      id: 1890,
      name: "LightLink Phoenix Mainnet",
      network: "lightlink-phoenix",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://replicator.phoenix.lightlink.io/rpc/v1"]
        }
      },
      blockExplorers: {
        default: {
          name: "LightLink Phoenix Explorer",
          url: "https://phoenix.lightlink.io"
        }
      },
      testnet: false
    });
  });
  var require_linea = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.linea = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.linea = (0, defineChain_js_1.defineChain)({
      id: 59144,
      name: "Linea Mainnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.linea.build"],
          webSocket: ["wss://rpc.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://lineascan.build",
          apiUrl: "https://api.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 42
        }
      },
      testnet: false
    });
  });
  var require_lineaGoerli = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lineaGoerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lineaGoerli = (0, defineChain_js_1.defineChain)({
      id: 59140,
      name: "Linea Goerli Testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.goerli.linea.build"],
          webSocket: ["wss://rpc.goerli.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.lineascan.build",
          apiUrl: "https://api-goerli.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 498623
        }
      },
      testnet: true
    });
  });
  var require_lineaSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lineaSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lineaSepolia = (0, defineChain_js_1.defineChain)({
      id: 59141,
      name: "Linea Sepolia Testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.sepolia.linea.build"],
          webSocket: ["wss://rpc.sepolia.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://sepolia.lineascan.build",
          apiUrl: "https://api-sepolia.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 227427
        }
      },
      testnet: true
    });
  });
  var require_lineaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lineaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lineaTestnet = (0, defineChain_js_1.defineChain)({
      id: 59140,
      name: "Linea Goerli Testnet",
      nativeCurrency: { name: "Linea Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.goerli.linea.build"],
          webSocket: ["wss://rpc.goerli.linea.build"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli.lineascan.build",
          apiUrl: "https://goerli.lineascan.build/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 498623
        }
      },
      testnet: true
    });
  });
  var require_liskSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.liskSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.liskSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 4202,
      network: "lisk-sepolia",
      name: "Lisk Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.sepolia-api.lisk.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia-blockscout.lisk.com",
          apiUrl: "https://sepolia-blockscout.lisk.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xA0E35F56C318DE1bD5D9ca6A94Fe7e37C5663348"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11"
        },
        portal: {
          [sourceId5]: {
            address: "0xe3d90F21490686Ec7eF37BE788E02dfC12787264"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x1Fb30e446eA791cd1f011675E5F3f5311b70faF5"
          }
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_localhost = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.localhost = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.localhost = (0, defineChain_js_1.defineChain)({
      id: 1337,
      name: "Localhost",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["http://127.0.0.1:8545"] }
      }
    });
  });
  var require_lukso = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lukso = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.lukso = (0, defineChain_js_1.defineChain)({
      id: 42,
      network: "lukso",
      name: "LUKSO",
      nativeCurrency: {
        name: "LUKSO",
        symbol: "LYX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.lukso.network"],
          webSocket: ["wss://ws-rpc.mainnet.lukso.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "LUKSO Mainnet Explorer",
          url: "https://explorer.execution.mainnet.lukso.network",
          apiUrl: "https://api.explorer.execution.mainnet.lukso.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 468183
        }
      }
    });
  });
  var require_luksoTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.luksoTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.luksoTestnet = (0, defineChain_js_1.defineChain)({
      id: 4201,
      name: "LUKSO Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "LUKSO Testnet",
        symbol: "LYXt"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.lukso.network"],
          webSocket: ["wss://ws-rpc.testnet.lukso.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "LUKSO Testnet Explorer",
          url: "https://explorer.execution.testnet.lukso.network",
          apiUrl: "https://api.explorer.execution.testnet.lukso.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 605348
        }
      },
      testnet: true
    });
  });
  var require_mainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mainnet = (0, defineChain_js_1.defineChain)({
      id: 1,
      name: "Ethereum",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://cloudflare-eth.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://etherscan.io",
          apiUrl: "https://api.etherscan.io/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        ensUniversalResolver: {
          address: "0xce01f8eee7E479C928F8919abD53E553a36CeF67",
          blockCreated: 19258213
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    });
  });
  var require_mandala = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mandala = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mandala = (0, defineChain_js_1.defineChain)({
      id: 595,
      name: "Mandala TC9",
      network: "mandala",
      nativeCurrency: {
        name: "Mandala",
        symbol: "mACA",
        decimals: 18
      },
      rpcUrls: {
        public: {
          http: ["https://eth-rpc-tc9.aca-staging.network"],
          webSocket: ["wss://eth-rpc-tc9.aca-staging.network"]
        },
        default: {
          http: ["https://eth-rpc-tc9.aca-staging.network"],
          webSocket: ["wss://eth-rpc-tc9.aca-staging.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mandala Blockscout",
          url: "https://blockscout.mandala.aca-staging.network",
          apiUrl: "https://blockscout.mandala.aca-staging.network/api"
        }
      },
      testnet: true
    });
  });
  var require_manta = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.manta = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.manta = (0, defineChain_js_1.defineChain)({
      id: 169,
      name: "Manta Pacific Mainnet",
      network: "manta",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://pacific-rpc.manta.network/http"] }
      },
      blockExplorers: {
        default: {
          name: "Manta Explorer",
          url: "https://pacific-explorer.manta.network",
          apiUrl: "https://pacific-explorer.manta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 332890
        }
      }
    });
  });
  var require_mantaSepoliaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantaSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantaSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 3441006,
      name: "Manta Pacific Sepolia Testnet",
      network: "manta-sepolia",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://pacific-rpc.sepolia-testnet.manta.network/http"]
        }
      },
      blockExplorers: {
        default: {
          name: "Manta Sepolia Testnet Explorer",
          url: "https://pacific-explorer.sepolia-testnet.manta.network",
          apiUrl: "https://pacific-explorer.sepolia-testnet.manta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca54918f7B525C8df894668846506767412b53E3",
          blockCreated: 479584
        }
      },
      testnet: true
    });
  });
  var require_mantaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantaTestnet = (0, defineChain_js_1.defineChain)({
      id: 3441005,
      name: "Manta Pacific Testnet",
      network: "manta-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "ETH",
        symbol: "ETH"
      },
      rpcUrls: {
        default: { http: ["https://manta-testnet.calderachain.xyz/http"] }
      },
      blockExplorers: {
        default: {
          name: "Manta Testnet Explorer",
          url: "https://pacific-explorer.testnet.manta.network",
          apiUrl: "https://pacific-explorer.testnet.manta.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x211B1643b95Fe76f11eD8880EE810ABD9A4cf56C",
          blockCreated: 419915
        }
      },
      testnet: true
    });
  });
  var require_mantle = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantle = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantle = (0, defineChain_js_1.defineChain)({
      id: 5e3,
      name: "Mantle",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.mantle.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Mantle Explorer",
          url: "https://explorer.mantle.xyz",
          apiUrl: "https://explorer.mantle.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 304717
        }
      }
    });
  });
  var require_mantleSepoliaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantleSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantleSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 5003,
      name: "Mantle Sepolia Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.sepolia.mantle.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Mantle Testnet Explorer",
          url: "https://explorer.sepolia.mantle.xyz/",
          apiUrl: "https://explorer.sepolia.mantle.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 4584012
        }
      },
      testnet: true
    });
  });
  var require_mantleTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mantleTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mantleTestnet = (0, defineChain_js_1.defineChain)({
      id: 5001,
      name: "Mantle Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MNT",
        symbol: "MNT"
      },
      rpcUrls: {
        default: { http: ["https://rpc.testnet.mantle.xyz"] }
      },
      blockExplorers: {
        default: {
          name: "Mantle Testnet Explorer",
          url: "https://explorer.testnet.mantle.xyz",
          apiUrl: "https://explorer.testnet.mantle.xyz/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 561333
        }
      },
      testnet: true
    });
  });
  var require_merlin = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.merlin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.merlin = (0, defineChain_js_1.defineChain)({
      id: 4200,
      name: "Merlin",
      nativeCurrency: {
        name: "BTC",
        symbol: "BTC",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.merlinchain.io"] }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://scan.merlinchain.io",
          apiUrl: "https://scan.merlinchain.io/api"
        }
      }
    });
  });
  var require_metachain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metachain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metachain = (0, defineChain_js_1.defineChain)({
      id: 571,
      name: "MetaChain Mainnet",
      nativeCurrency: { name: "Metatime Coin", symbol: "MTC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.metatime.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "MetaExplorer",
          url: "https://explorer.metatime.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0000000000000000000000000000000000003001",
          blockCreated: 0
        }
      }
    });
  });
  var require_metachainIstanbul = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metachainIstanbul = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metachainIstanbul = (0, defineChain_js_1.defineChain)({
      id: 1453,
      name: "MetaChain Istanbul",
      nativeCurrency: { name: "Metatime Coin", symbol: "MTC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://istanbul-rpc.metachain.dev"]
        }
      },
      blockExplorers: {
        default: {
          name: "MetaExplorer",
          url: "https://istanbul-explorer.metachain.dev"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0000000000000000000000000000000000003001",
          blockCreated: 0
        }
      },
      testnet: true
    });
  });
  var require_meter = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.meter = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.meter = (0, defineChain_js_1.defineChain)({
      id: 82,
      name: "Meter",
      nativeCurrency: {
        decimals: 18,
        name: "MTR",
        symbol: "MTR"
      },
      rpcUrls: {
        default: { http: ["https://rpc.meter.io"] }
      },
      blockExplorers: {
        default: {
          name: "MeterScan",
          url: "https://scan.meter.io"
        }
      }
    });
  });
  var require_meterTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.meterTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.meterTestnet = (0, defineChain_js_1.defineChain)({
      id: 83,
      name: "Meter Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MTR",
        symbol: "MTR"
      },
      rpcUrls: {
        default: { http: ["https://rpctest.meter.io"] }
      },
      blockExplorers: {
        default: {
          name: "MeterTestnetScan",
          url: "https://scan-warringstakes.meter.io"
        }
      }
    });
  });
  var require_metis = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metis = (0, defineChain_js_1.defineChain)({
      id: 1088,
      name: "Metis",
      nativeCurrency: {
        decimals: 18,
        name: "Metis",
        symbol: "METIS"
      },
      rpcUrls: {
        default: { http: ["https://andromeda.metis.io/?owner=1088"] }
      },
      blockExplorers: {
        default: {
          name: "Andromeda Explorer",
          url: "https://andromeda-explorer.metis.io",
          apiUrl: "https://andromeda-explorer.metis.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2338552
        }
      }
    });
  });
  var require_metisGoerli = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.metisGoerli = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.metisGoerli = (0, defineChain_js_1.defineChain)({
      id: 599,
      name: "Metis Goerli",
      nativeCurrency: {
        decimals: 18,
        name: "Metis Goerli",
        symbol: "METIS"
      },
      rpcUrls: {
        default: { http: ["https://goerli.gateway.metisdevops.link"] }
      },
      blockExplorers: {
        default: {
          name: "Metis Goerli Explorer",
          url: "https://goerli.explorer.metisdevops.link",
          apiUrl: "https://goerli.explorer.metisdevops.link/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1006207
        }
      }
    });
  });
  var require_mev = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mev = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mev = (0, defineChain_js_1.defineChain)({
      id: 7518,
      name: "MEVerse Chain Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "MEVerse",
        symbol: "MEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.meversemainnet.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://www.meversescan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 86881340
        }
      }
    });
  });
  var require_mevTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mevTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mevTestnet = (0, defineChain_js_1.defineChain)({
      id: 4759,
      name: "MEVerse Chain Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "MEVerse",
        symbol: "MEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.meversetestnet.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://testnet.meversescan.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 64371115
        }
      },
      testnet: true
    });
  });
  var require_mintSepoliaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mintSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.mintSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1686,
      name: "Mint Sepolia Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.mintchain.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Mintchain Testnet explorer",
          url: "https://testnet-explorer.mintchain.io"
        }
      },
      testnet: true
    });
  });
  var require_mode = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mode = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.mode = (0, defineChain_js_1.defineChain)({
      id: 34443,
      name: "Mode Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.mode.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Modescan",
          url: "https://modescan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 2465882
        }
      },
      sourceId: sourceId5
    });
  });
  var require_modeTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.modeTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.modeTestnet = (0, defineChain_js_1.defineChain)({
      id: 919,
      name: "Mode Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.mode.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia.explorer.mode.network",
          apiUrl: "https://sepolia.explorer.mode.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xBAba8373113Fb7a68f195deF18732e01aF8eDfCF",
          blockCreated: 3019007
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_moonbaseAlpha = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonbaseAlpha = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonbaseAlpha = (0, defineChain_js_1.defineChain)({
      id: 1287,
      name: "Moonbase Alpha",
      nativeCurrency: {
        decimals: 18,
        name: "DEV",
        symbol: "DEV"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.api.moonbase.moonbeam.network"],
          webSocket: ["wss://wss.api.moonbase.moonbeam.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonbase.moonscan.io",
          apiUrl: "https://moonbase.moonscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1850686
        }
      },
      testnet: true
    });
  });
  var require_moonbeam = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonbeam = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonbeam = (0, defineChain_js_1.defineChain)({
      id: 1284,
      name: "Moonbeam",
      nativeCurrency: {
        decimals: 18,
        name: "GLMR",
        symbol: "GLMR"
      },
      rpcUrls: {
        default: {
          http: ["https://moonbeam.public.blastapi.io"],
          webSocket: ["wss://moonbeam.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonscan.io",
          apiUrl: "https://api-moonbeam.moonscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 609002
        }
      },
      testnet: false
    });
  });
  var require_moonbeamDev = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonbeamDev = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonbeamDev = (0, defineChain_js_1.defineChain)({
      id: 1281,
      name: "Moonbeam Development Node",
      nativeCurrency: {
        decimals: 18,
        name: "DEV",
        symbol: "DEV"
      },
      rpcUrls: {
        default: {
          http: ["http://127.0.0.1:9944"],
          webSocket: ["wss://127.0.0.1:9944"]
        }
      }
    });
  });
  var require_moonriver = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moonriver = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.moonriver = (0, defineChain_js_1.defineChain)({
      id: 1285,
      name: "Moonriver",
      nativeCurrency: {
        decimals: 18,
        name: "MOVR",
        symbol: "MOVR"
      },
      rpcUrls: {
        default: {
          http: ["https://moonriver.public.blastapi.io"],
          webSocket: ["wss://moonriver.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Moonscan",
          url: "https://moonriver.moonscan.io",
          apiUrl: "https://api-moonriver.moonscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1597904
        }
      },
      testnet: false
    });
  });
  var require_morphSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.morphSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.morphSepolia = (0, defineChain_js_1.defineChain)({
      id: 2710,
      name: "Morph Sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.morphl2.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Morph Testnet Explorer",
          url: "https://explorer-testnet.morphl2.io",
          apiUrl: "https://explorer-api-testnet.morphl2.io/api"
        }
      },
      testnet: true
    });
  });
  var require_neonDevnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.neonDevnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.neonDevnet = (0, defineChain_js_1.defineChain)({
      id: 245022926,
      name: "Neon EVM DevNet",
      nativeCurrency: { name: "NEON", symbol: "NEON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://devnet.neonevm.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Neonscan",
          url: "https://devnet.neonscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 205206112
        }
      },
      testnet: true
    });
  });
  var require_neonMainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.neonMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.neonMainnet = (0, defineChain_js_1.defineChain)({
      id: 245022934,
      network: "neonMainnet",
      name: "Neon EVM MainNet",
      nativeCurrency: { name: "NEON", symbol: "NEON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://neon-proxy-mainnet.solana.p2p.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Neonscan",
          url: "https://neonscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 206545524
        }
      },
      testnet: false
    });
  });
  var require_nexi = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nexi = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.nexi = (0, defineChain_js_1.defineChain)({
      id: 4242,
      name: "Nexi",
      nativeCurrency: { name: "Nexi", symbol: "NEXI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.chain.nexi.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "NexiScan",
          url: "https://www.nexiscan.com",
          apiUrl: "https://www.nexiscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0277A46Cc69A57eE3A6C8c158bA874832F718B8E",
          blockCreated: 25770160
        }
      }
    });
  });
  var require_nexilix = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nexilix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.nexilix = (0, defineChain_js_1.defineChain)({
      id: 240,
      name: "Nexilix Smart Chain",
      nativeCurrency: {
        decimals: 18,
        name: "Nexilix",
        symbol: "NEXILIX"
      },
      rpcUrls: {
        default: { http: ["https://rpcurl.pos.nexilix.com"] }
      },
      blockExplorers: {
        default: {
          name: "NexilixScan",
          url: "https://scan.nexilix.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x58381c8e2BF9d0C2C4259cA14BdA9Afe02831244",
          blockCreated: 74448
        }
      }
    });
  });
  var require_oasys = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oasys = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.oasys = (0, defineChain_js_1.defineChain)({
      id: 248,
      name: "Oasys",
      nativeCurrency: { name: "Oasys", symbol: "OAS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.oasys.games"]
        }
      },
      blockExplorers: {
        default: {
          name: "OasysScan",
          url: "https://scan.oasys.games",
          apiUrl: "https://scan.oasys.games/api"
        }
      }
    });
  });
  var require_oasisTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oasisTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.oasisTestnet = (0, defineChain_js_1.defineChain)({
      id: 4090,
      network: "oasis-testnet",
      name: "Oasis Testnet",
      nativeCurrency: { name: "Fasttoken", symbol: "FTN", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://rpc1.oasis.bahamutchain.com"] },
        public: { http: ["https://rpc1.oasis.bahamutchain.com"] }
      },
      blockExplorers: {
        default: {
          name: "Ftnscan",
          url: "https://oasis.ftnscan.com",
          apiUrl: "https://oasis.ftnscan.com/api"
        }
      },
      testnet: true
    });
  });
  var require_okc = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.okc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.okc = (0, defineChain_js_1.defineChain)({
      id: 66,
      name: "OKC",
      nativeCurrency: {
        decimals: 18,
        name: "OKT",
        symbol: "OKT"
      },
      rpcUrls: {
        default: { http: ["https://exchainrpc.okex.org"] }
      },
      blockExplorers: {
        default: {
          name: "oklink",
          url: "https://www.oklink.com/okc"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 10364792
        }
      }
    });
  });
  var require_optimism = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optimism = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.optimism = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 10,
      name: "OP Mainnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.optimism.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Optimism Explorer",
          url: "https://optimistic.etherscan.io",
          apiUrl: "https://api-optimistic.etherscan.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xdfe97868233d1aa22e815a266982f2cf17685a27"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 4286263
        },
        portal: {
          [sourceId5]: {
            address: "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1"
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_optimismGoerli = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optimismGoerli = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 5;
    exports2.optimismGoerli = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 420,
      name: "Optimism Goerli",
      nativeCurrency: { name: "Goerli Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://goerli.optimism.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://goerli-optimism.etherscan.io",
          apiUrl: "https://goerli-optimism.etherscan.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xE6Dfba0953616Bacab0c9A8ecb3a9BBa77FC15c0"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 49461
        },
        portal: {
          [sourceId5]: {
            address: "0x5b47E1A08Ea6d985D6649300584e6722Ec4B1383"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x636Af16bf2f682dD3109e60102b8E1A089FedAa8"
          }
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_optimismSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.optimismSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.optimismSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 11155420,
      name: "OP Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.optimism.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://optimism-sepolia.blockscout.com",
          apiUrl: "https://optimism-sepolia.blockscout.com/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        disputeGameFactory: {
          [sourceId5]: {
            address: "0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1"
          }
        },
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 1620204
        },
        portal: {
          [sourceId5]: {
            address: "0x16Fc5058F25648194471939df75CF27A2fdC48BC"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1"
          }
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_opBNB = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.opBNB = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.opBNB = (0, defineChain_js_1.defineChain)({
      id: 204,
      name: "opBNB",
      nativeCurrency: {
        name: "BNB",
        symbol: "BNB",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://opbnb-mainnet-rpc.bnbchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "opbnbscan",
          url: "https://mainnet.opbnbscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 512881
        }
      }
    });
  });
  var require_opBNBTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.opBNBTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.opBNBTestnet = (0, defineChain_js_1.defineChain)({
      id: 5611,
      name: "opBNB Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "tBNB",
        symbol: "tBNB"
      },
      rpcUrls: {
        default: { http: ["https://opbnb-testnet-rpc.bnbchain.org"] }
      },
      blockExplorers: {
        default: {
          name: "opbnbscan",
          url: "https://testnet.opbnbscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3705108
        }
      },
      testnet: true
    });
  });
  var require_oortmainnetDev = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.oortMainnetDev = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.oortMainnetDev = (0, defineChain_js_1.defineChain)({
      id: 9700,
      name: "OORT MainnetDev",
      nativeCurrency: {
        decimals: 18,
        name: "OORT",
        symbol: "OORT"
      },
      rpcUrls: {
        default: { http: ["https://dev-rpc.oortech.com"] }
      },
      blockExplorers: {
        oort: {
          name: "OORT MainnetDev Explorer",
          url: "https://dev-scan.oortech.com"
        },
        default: {
          name: "OORT MainnetDev Explorer",
          url: "https://dev-scan.oortech.com"
        }
      }
    });
  });
  var require_palm = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.palm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.palm = (0, defineChain_js_1.defineChain)({
      id: 11297108109,
      name: "Palm",
      nativeCurrency: {
        decimals: 18,
        name: "PALM",
        symbol: "PALM"
      },
      rpcUrls: {
        default: {
          http: ["https://palm-mainnet.public.blastapi.io"],
          webSocket: ["wss://palm-mainnet.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Chainlens",
          url: "https://palm.chainlens.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15429248
        }
      }
    });
  });
  var require_palmTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.palmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.palmTestnet = (0, defineChain_js_1.defineChain)({
      id: 11297108099,
      name: "Palm Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "PALM",
        symbol: "PALM"
      },
      rpcUrls: {
        default: {
          http: ["https://palm-mainnet.public.blastapi.io"],
          webSocket: ["wss://palm-mainnet.public.blastapi.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Chainlens",
          url: "https://palm.chainlens.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 15429248
        }
      },
      testnet: true
    });
  });
  var require_formatters3 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatters = void 0;
    var fromHex_js_1 = require_fromHex();
    var toBytes_js_1 = require_toBytes();
    var toHex_js_1 = require_toHex();
    var block_js_1 = require_block();
    var log_js_1 = require_log();
    var transaction_js_1 = require_transaction();
    var transactionReceipt_js_1 = require_transactionReceipt();
    var transactionRequest_js_1 = require_transactionRequest();
    exports2.formatters = {
      block: (0, block_js_1.defineBlock)({
        format(args) {
          const transactions = args.transactions?.map((transaction) => {
            if (typeof transaction === "string")
              return transaction;
            const formatted = exports2.formatters.transaction?.format(transaction);
            if (formatted.typeHex === "0x71")
              formatted.type = "eip712";
            else if (formatted.typeHex === "0xff")
              formatted.type = "priority";
            return formatted;
          });
          return {
            l1BatchNumber: args.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchNumber) : null,
            l1BatchTimestamp: args.l1BatchTimestamp ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchTimestamp) : null,
            transactions
          };
        }
      }),
      transaction: (0, transaction_js_1.defineTransaction)({
        format(args) {
          const transaction = {};
          if (args.type === "0x71")
            transaction.type = "eip712";
          else if (args.type === "0xff")
            transaction.type = "priority";
          return {
            ...transaction,
            l1BatchNumber: args.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchNumber) : null,
            l1BatchTxIndex: args.l1BatchTxIndex ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchTxIndex) : null
          };
        }
      }),
      transactionReceipt: (0, transactionReceipt_js_1.defineTransactionReceipt)({
        format(args) {
          return {
            l1BatchNumber: args.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchNumber) : null,
            l1BatchTxIndex: args.l1BatchTxIndex ? (0, fromHex_js_1.hexToBigInt)(args.l1BatchTxIndex) : null,
            logs: args.logs.map((log) => {
              return {
                ...(0, log_js_1.formatLog)(log),
                l1BatchNumber: log.l1BatchNumber ? (0, fromHex_js_1.hexToBigInt)(log.l1BatchNumber) : null,
                transactionLogIndex: (0, fromHex_js_1.hexToNumber)(log.transactionLogIndex),
                logType: log.logType
              };
            }),
            l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {
              return {
                blockNumber: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.blockHash),
                blockHash: l2ToL1Log.blockHash,
                l1BatchNumber: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.l1BatchNumber),
                transactionIndex: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.transactionIndex),
                shardId: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.shardId),
                isService: l2ToL1Log.isService,
                sender: l2ToL1Log.sender,
                key: l2ToL1Log.key,
                value: l2ToL1Log.value,
                transactionHash: l2ToL1Log.transactionHash,
                logIndex: (0, fromHex_js_1.hexToBigInt)(l2ToL1Log.logIndex)
              };
            })
          };
        }
      }),
      transactionRequest: (0, transactionRequest_js_1.defineTransactionRequest)({
        exclude: [
          "customSignature",
          "factoryDeps",
          "gasPerPubdata",
          "paymaster",
          "paymasterInput"
        ],
        format(args) {
          if (args.gasPerPubdata || args.paymaster && args.paymasterInput || args.factoryDeps || args.customSignature)
            return {
              eip712Meta: {
                ...args.gasPerPubdata ? { gasPerPubdata: (0, toHex_js_1.toHex)(args.gasPerPubdata) } : {},
                ...args.paymaster && args.paymasterInput ? {
                  paymasterParams: {
                    paymaster: args.paymaster,
                    paymasterInput: Array.from((0, toBytes_js_1.hexToBytes)(args.paymasterInput))
                  }
                } : {},
                ...args.factoryDeps ? {
                  factoryDeps: args.factoryDeps.map((dep) => Array.from((0, toBytes_js_1.hexToBytes)(dep)))
                } : {},
                ...args.customSignature ? {
                  customSignature: Array.from((0, toBytes_js_1.hexToBytes)(args.customSignature))
                } : {}
              },
              type: "0x71"
            };
          return {};
        }
      })
    };
  });
  var require_transaction3 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidEip712TransactionError = void 0;
    var base_js_1 = require_base();
    class InvalidEip712TransactionError2 extends base_js_1.BaseError {
      constructor() {
        super([
          "Transaction is not an EIP712 transaction.",
          "",
          "Transaction must:",
          '  - include `type: "eip712"`',
          "  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`"
        ].join("\n"));
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "InvalidEip712TransactionError"
        });
      }
    }
    exports2.InvalidEip712TransactionError = InvalidEip712TransactionError2;
  });
  var require_isEip712Transaction = __commonJS2((exports2) => {
    function isEIP712Transaction2(transaction) {
      if (transaction.type === "eip712")
        return true;
      if ("customSignature" in transaction && transaction.customSignature || "paymaster" in transaction && transaction.paymaster || "paymasterInput" in transaction && transaction.paymasterInput || "gasPerPubdata" in transaction && typeof transaction.gasPerPubdata === "bigint" || "factoryDeps" in transaction && transaction.factoryDeps)
        return true;
      return false;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEIP712Transaction = void 0;
    exports2.isEIP712Transaction = isEIP712Transaction2;
  });
  var require_assertEip712Transaction = __commonJS2((exports2) => {
    function assertEip712Transaction2(transaction) {
      const { chainId, to, from, paymaster, paymasterInput } = transaction;
      if (!(0, isEip712Transaction_js_1.isEIP712Transaction)(transaction))
        throw new transaction_js_1.InvalidEip712TransactionError();
      if (!chainId || chainId <= 0)
        throw new chain_js_1.InvalidChainIdError({ chainId });
      if (to && !(0, isAddress_js_1.isAddress)(to))
        throw new address_js_1.InvalidAddressError({ address: to });
      if (from && !(0, isAddress_js_1.isAddress)(from))
        throw new address_js_1.InvalidAddressError({ address: from });
      if (paymaster && !(0, isAddress_js_1.isAddress)(paymaster))
        throw new address_js_1.InvalidAddressError({ address: paymaster });
      if (paymaster && !paymasterInput) {
        throw new base_js_1.BaseError("`paymasterInput` must be provided when `paymaster` is defined");
      }
      if (!paymaster && paymasterInput) {
        throw new base_js_1.BaseError("`paymaster` must be provided when `paymasterInput` is defined");
      }
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertEip712Transaction = void 0;
    var address_js_1 = require_address();
    var base_js_1 = require_base();
    var chain_js_1 = require_chain();
    var isAddress_js_1 = require_isAddress();
    var transaction_js_1 = require_transaction3();
    var isEip712Transaction_js_1 = require_isEip712Transaction();
    exports2.assertEip712Transaction = assertEip712Transaction2;
  });
  var require_serializers3 = __commonJS2((exports2) => {
    function serializeTransaction5(transaction, signature) {
      if ((0, isEip712Transaction_js_1.isEIP712Transaction)(transaction))
        return serializeTransactionEIP7122(transaction);
      return (0, serializeTransaction_js_1.serializeTransaction)(transaction, signature);
    }
    function serializeTransactionEIP7122(transaction) {
      const { chainId, gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, customSignature, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
      (0, assertEip712Transaction_js_1.assertEip712Transaction)(transaction);
      const serializedTransaction = [
        nonce ? (0, toHex_js_1.toHex)(nonce) : "0x",
        maxPriorityFeePerGas ? (0, toHex_js_1.toHex)(maxPriorityFeePerGas) : "0x",
        maxFeePerGas ? (0, toHex_js_1.toHex)(maxFeePerGas) : "0x",
        gas ? (0, toHex_js_1.toHex)(gas) : "0x",
        to ?? "0x",
        value ? (0, toHex_js_1.toHex)(value) : "0x",
        data ?? "0x0",
        (0, toHex_js_1.toHex)(chainId),
        (0, toHex_js_1.toHex)(""),
        (0, toHex_js_1.toHex)(""),
        (0, toHex_js_1.toHex)(chainId),
        from ?? "0x",
        gasPerPubdata ? (0, toHex_js_1.toHex)(gasPerPubdata) : "0x",
        factoryDeps ?? [],
        customSignature ?? "0x",
        paymaster && paymasterInput ? [paymaster, paymasterInput] : []
      ];
      return (0, concat_js_1.concatHex)([
        "0x71",
        (0, toRlp_js_1.toRlp)(serializedTransaction)
      ]);
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializers = exports2.serializeTransaction = void 0;
    var concat_js_1 = require_concat();
    var toHex_js_1 = require_toHex();
    var toRlp_js_1 = require_toRlp();
    var serializeTransaction_js_1 = require_serializeTransaction();
    var assertEip712Transaction_js_1 = require_assertEip712Transaction();
    var isEip712Transaction_js_1 = require_isEip712Transaction();
    exports2.serializeTransaction = serializeTransaction5;
    exports2.serializers = {
      transaction: serializeTransaction5
    };
  });
  var require_number2 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maxBytecodeSize = void 0;
    var number_js_1 = require_number();
    exports2.maxBytecodeSize = number_js_1.maxUint16 * 32n;
  });
  var require_bytecode = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BytecodeLengthMustBeDivisibleBy32Error = exports2.BytecodeLengthInWordsMustBeOddError = exports2.BytecodeLengthExceedsMaxSizeError = void 0;
    var base_js_1 = require_base();
    class BytecodeLengthExceedsMaxSizeError2 extends base_js_1.BaseError {
      constructor({ givenLength, maxBytecodeSize: maxBytecodeSize2 }) {
        super(`Bytecode cannot be longer than ${maxBytecodeSize2} bytes. Given length: ${givenLength}`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BytecodeLengthExceedsMaxSizeError"
        });
      }
    }
    exports2.BytecodeLengthExceedsMaxSizeError = BytecodeLengthExceedsMaxSizeError2;
    class BytecodeLengthInWordsMustBeOddError2 extends base_js_1.BaseError {
      constructor({ givenLengthInWords }) {
        super(`Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BytecodeLengthInWordsMustBeOddError"
        });
      }
    }
    exports2.BytecodeLengthInWordsMustBeOddError = BytecodeLengthInWordsMustBeOddError2;
    class BytecodeLengthMustBeDivisibleBy32Error2 extends base_js_1.BaseError {
      constructor({ givenLength }) {
        super(`The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`);
        Object.defineProperty(this, "name", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "BytecodeLengthMustBeDivisibleBy32Error"
        });
      }
    }
    exports2.BytecodeLengthMustBeDivisibleBy32Error = BytecodeLengthMustBeDivisibleBy32Error2;
  });
  var require_hashBytecode = __commonJS2((exports2) => {
    function hashBytecode2(bytecode) {
      const bytecodeBytes = (0, toBytes_js_1.toBytes)(bytecode);
      if (bytecodeBytes.length % 32 !== 0)
        throw new bytecode_js_1.BytecodeLengthMustBeDivisibleBy32Error({
          givenLength: bytecodeBytes.length
        });
      if (bytecodeBytes.length > number_js_1.maxBytecodeSize)
        throw new bytecode_js_1.BytecodeLengthExceedsMaxSizeError({
          givenLength: bytecodeBytes.length,
          maxBytecodeSize: number_js_1.maxBytecodeSize
        });
      const hashStr = (0, sha256_js_1.sha256)(bytecodeBytes);
      const hash22 = (0, toBytes_js_1.toBytes)(hashStr);
      const bytecodeLengthInWords = bytecodeBytes.length / 32;
      if (bytecodeLengthInWords % 2 === 0) {
        throw new bytecode_js_1.BytecodeLengthInWordsMustBeOddError({
          givenLengthInWords: bytecodeLengthInWords
        });
      }
      const bytecodeLength = (0, toBytes_js_1.toBytes)(bytecodeLengthInWords);
      const bytecodeLengthPadded = (0, pad_js_1.pad)(bytecodeLength, { size: 2 });
      const codeHashVersion = new Uint8Array([1, 0]);
      hash22.set(codeHashVersion, 0);
      hash22.set(bytecodeLengthPadded, 2);
      return hash22;
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hashBytecode = void 0;
    var pad_js_1 = require_pad();
    var toBytes_js_1 = require_toBytes();
    var sha256_js_1 = require_sha2562();
    var number_js_1 = require_number2();
    var bytecode_js_1 = require_bytecode();
    exports2.hashBytecode = hashBytecode2;
  });
  var require_getEip712Domain = __commonJS2((exports2) => {
    function transactionToMessage2(transaction) {
      const { gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data } = transaction;
      return {
        txType: 113n,
        from: BigInt(from),
        to: to ? BigInt(to) : 0n,
        gasLimit: gas ?? 0n,
        gasPerPubdataByteLimit: gasPerPubdata ?? 0n,
        maxFeePerGas: maxFeePerGas ?? 0n,
        maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,
        paymaster: paymaster ? BigInt(paymaster) : 0n,
        nonce: nonce ? BigInt(nonce) : 0n,
        value: value ?? 0n,
        data: data ? data : "0x0",
        factoryDeps: factoryDeps?.map((dep) => (0, toHex_js_1.toHex)((0, hashBytecode_js_1.hashBytecode)(dep))) ?? [],
        paymasterInput: paymasterInput ? paymasterInput : "0x"
      };
    }
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEip712Domain = void 0;
    var toHex_js_1 = require_toHex();
    var assertEip712Transaction_js_1 = require_assertEip712Transaction();
    var hashBytecode_js_1 = require_hashBytecode();
    var getEip712Domain2 = (transaction) => {
      (0, assertEip712Transaction_js_1.assertEip712Transaction)(transaction);
      const message = transactionToMessage2(transaction);
      return {
        domain: {
          name: "zkSync",
          version: "2",
          chainId: transaction.chainId
        },
        types: {
          Transaction: [
            { name: "txType", type: "uint256" },
            { name: "from", type: "uint256" },
            { name: "to", type: "uint256" },
            { name: "gasLimit", type: "uint256" },
            { name: "gasPerPubdataByteLimit", type: "uint256" },
            { name: "maxFeePerGas", type: "uint256" },
            { name: "maxPriorityFeePerGas", type: "uint256" },
            { name: "paymaster", type: "uint256" },
            { name: "nonce", type: "uint256" },
            { name: "value", type: "uint256" },
            { name: "data", type: "bytes" },
            { name: "factoryDeps", type: "bytes32[]" },
            { name: "paymasterInput", type: "bytes" }
          ]
        },
        primaryType: "Transaction",
        message
      };
    };
    exports2.getEip712Domain = getEip712Domain2;
  });
  var require_chainConfig3 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chainConfig = void 0;
    var formatters_js_1 = require_formatters3();
    var serializers_js_1 = require_serializers3();
    var getEip712Domain_js_1 = require_getEip712Domain();
    exports2.chainConfig = {
      formatters: formatters_js_1.formatters,
      serializers: serializers_js_1.serializers,
      custom: {
        getEip712Domain: getEip712Domain_js_1.getEip712Domain
      }
    };
  });
  var require_playfiAlbireo = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.playfiAlbireo = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig3();
    exports2.playfiAlbireo = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 1612127,
      name: "PlayFi Albireo Testnet",
      network: "albireo",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://albireo-rpc.playfi.ai"],
          webSocket: ["wss://albireo-rpc-ws.playfi.ai/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "PlayFi Albireo Explorer",
          url: "https://albireo-explorer.playfi.ai"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      },
      testnet: true
    });
  });
  var require_pgn = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pgn = void 0;
    var formatters_js_1 = require_formatters();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.pgn = (0, defineChain_js_1.defineChain)({
      id: 424,
      network: "pgn",
      name: "PGN",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.publicgoods.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "PGN Explorer",
          url: "https://explorer.publicgoods.network",
          apiUrl: "https://explorer.publicgoods.network/api"
        },
        blocksout: {
          name: "PGN Explorer",
          url: "https://explorer.publicgoods.network",
          apiUrl: "https://explorer.publicgoods.network/api"
        }
      },
      contracts: {
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x9E6204F750cD866b299594e2aC9eA824E2e5f95c"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3380209
        },
        portal: {
          [sourceId5]: {
            address: "0xb26Fd985c5959bBB382BAFdD0b879E149e48116c"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xD0204B9527C1bA7bD765Fa5CCD9355d38338272b"
          }
        }
      },
      formatters: formatters_js_1.formatters,
      sourceId: sourceId5
    });
  });
  var require_pgnTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pgnTestnet = void 0;
    var formatters_js_1 = require_formatters();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.pgnTestnet = (0, defineChain_js_1.defineChain)({
      id: 58008,
      network: "pgn-testnet",
      name: "PGN ",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.publicgoods.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "PGN Testnet Explorer",
          url: "https://explorer.sepolia.publicgoods.network",
          apiUrl: "https://explorer.sepolia.publicgoods.network/api"
        },
        blocksout: {
          name: "PGN Testnet Explorer",
          url: "https://explorer.sepolia.publicgoods.network",
          apiUrl: "https://explorer.sepolia.publicgoods.network/api"
        }
      },
      contracts: {
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xD5bAc3152ffC25318F848B3DD5dA6C85171BaEEe"
          }
        },
        portal: {
          [sourceId5]: {
            address: "0xF04BdD5353Bb0EFF6CA60CfcC78594278eBfE179"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xFaE6abCAF30D23e233AC7faF747F2fC3a5a6Bfa3"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3754925
        }
      },
      formatters: formatters_js_1.formatters,
      sourceId: sourceId5,
      testnet: true
    });
  });
  var require_phoenix = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.phoenix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.phoenix = (0, defineChain_js_1.defineChain)({
      id: 13381,
      name: "Phoenix Blockchain",
      nativeCurrency: { name: "Phoenix", symbol: "PHX", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.phoenixplorer.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Phoenixplorer",
          url: "https://phoenixplorer.com",
          apiUrl: "https://phoenixplorer.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0x498cF757a575cFF2c2Ed9f532f56Efa797f86442",
          blockCreated: 5620192
        }
      }
    });
  });
  var require_plinga = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.plinga = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.plinga = (0, defineChain_js_1.defineChain)({
      id: 242,
      name: "Plinga",
      nativeCurrency: { name: "Plinga", symbol: "PLINGA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpcurl.mainnet.plgchain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Plgscan",
          url: "https://www.plgscan.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0x0989576160f2e7092908BB9479631b901060b6e4",
          blockCreated: 204489
        }
      }
    });
  });
  var require_plumeTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.plumeTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.plumeTestnet = (0, defineChain_js_1.defineChain)({
      id: 161221135,
      name: "Plume Testnet",
      nativeCurrency: {
        name: "Plume Sepolia Ether",
        symbol: "ETH",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.plumenetwork.xyz/http"],
          webSocket: ["wss://testnet-rpc.plumenetwork.xyz/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://testnet-explorer.plumenetwork.xyz",
          apiUrl: "https://testnet-explorer.plumenetwork.xyz/api"
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_polygon = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygon = (0, defineChain_js_1.defineChain)({
      id: 137,
      name: "Polygon",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://polygon-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://polygonscan.com",
          apiUrl: "https://api.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 25770160
        }
      }
    });
  });
  var require_polygonAmoy = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonAmoy = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonAmoy = (0, defineChain_js_1.defineChain)({
      id: 80002,
      name: "Polygon Amoy",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-amoy.polygon.technology"]
        }
      },
      blockExplorers: {
        default: {
          name: "OK LINK",
          url: "https://www.oklink.com/amoy"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 3127388
        }
      },
      testnet: true
    });
  });
  var require_polygonMumbai = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonMumbai = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonMumbai = (0, defineChain_js_1.defineChain)({
      id: 80001,
      name: "Polygon Mumbai",
      nativeCurrency: { name: "MATIC", symbol: "MATIC", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.ankr.com/polygon_mumbai"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://mumbai.polygonscan.com",
          apiUrl: "https://api-testnet.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 25770160
        }
      },
      testnet: true
    });
  });
  var require_polygonZkEvm = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonZkEvm = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonZkEvm = (0, defineChain_js_1.defineChain)({
      id: 1101,
      name: "Polygon zkEVM",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://zkevm-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://zkevm.polygonscan.com",
          apiUrl: "https://api-zkevm.polygonscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 57746
        }
      }
    });
  });
  var require_polygonZkEvmCardona = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonZkEvmCardona = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonZkEvmCardona = (0, defineChain_js_1.defineChain)({
      id: 2442,
      name: "Polygon zkEVM Cardona",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.cardona.zkevm-rpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://cardona-zkevm.polygonscan.com",
          apiUrl: "https://cardona-zkevm.polygonscan.com/api"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 114091
        }
      }
    });
  });
  var require_polygonZkEvmTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.polygonZkEvmTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.polygonZkEvmTestnet = (0, defineChain_js_1.defineChain)({
      id: 1442,
      name: "Polygon zkEVM Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.public.zkevm-test.net"]
        }
      },
      blockExplorers: {
        default: {
          name: "PolygonScan",
          url: "https://testnet-zkevm.polygonscan.com",
          apiUrl: "https://testnet-zkevm.polygonscan.com/api"
        }
      },
      testnet: true,
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 525686
        }
      }
    });
  });
  var require_pulsechain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pulsechain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.pulsechain = (0, defineChain_js_1.defineChain)({
      id: 369,
      name: "PulseChain",
      nativeCurrency: { name: "Pulse", symbol: "PLS", decimals: 18 },
      testnet: false,
      rpcUrls: {
        default: {
          http: ["https://rpc.pulsechain.com"],
          webSocket: ["wss://ws.pulsechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PulseScan",
          url: "https://scan.pulsechain.com",
          apiUrl: "https://api.scan.pulsechain.com/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    });
  });
  var require_pulsechainV4 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pulsechainV4 = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.pulsechainV4 = (0, defineChain_js_1.defineChain)({
      id: 943,
      name: "PulseChain V4",
      testnet: true,
      nativeCurrency: { name: "V4 Pulse", symbol: "v4PLS", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.v4.testnet.pulsechain.com"],
          webSocket: ["wss://ws.v4.testnet.pulsechain.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "PulseScan",
          url: "https://scan.v4.testnet.pulsechain.com",
          apiUrl: "https://scan.v4.testnet.pulsechain.com/api"
        }
      },
      contracts: {
        ensRegistry: {
          address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14353601
        }
      }
    });
  });
  var require_qMainnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.qMainnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.qMainnet = (0, defineChain_js_1.defineChain)({
      id: 35441,
      name: "Q Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Q",
        symbol: "Q"
      },
      rpcUrls: {
        default: { http: ["https://rpc.q.org"] }
      },
      blockExplorers: {
        default: {
          name: "Q Mainnet Explorer",
          url: "https://explorer.q.org",
          apiUrl: "https://explorer.q.org/api"
        }
      }
    });
  });
  var require_qTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.qTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.qTestnet = (0, defineChain_js_1.defineChain)({
      id: 35443,
      name: "Q Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Q",
        symbol: "Q"
      },
      rpcUrls: {
        default: { http: ["https://rpc.qtestnet.org"] }
      },
      blockExplorers: {
        default: {
          name: "Q Testnet Explorer",
          url: "https://explorer.qtestnet.org",
          apiUrl: "https://explorer.qtestnet.org/api"
        }
      },
      testnet: true
    });
  });
  var require_reyaNetwork = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.reyaNetwork = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.reyaNetwork = (0, defineChain_js_1.defineChain)({
      id: 1729,
      name: "Reya Network",
      nativeCurrency: { decimals: 18, name: "Ether", symbol: "ETH" },
      rpcUrls: {
        default: {
          http: ["https://rpc.reya.network"],
          webSocket: ["wss://ws.reya.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Reya Network Explorer",
          url: "https://explorer.reya.network"
        }
      },
      testnet: false
    });
  });
  var require_rollux = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rollux = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rollux = (0, defineChain_js_1.defineChain)({
      id: 570,
      name: "Rollux Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.rollux.com"],
          webSocket: ["wss://rpc.rollux.com/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "RolluxExplorer",
          url: "https://explorer.rollux.com",
          apiUrl: "https://explorer.rollux.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 119222
        }
      }
    });
  });
  var require_rolluxTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rolluxTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rolluxTestnet = (0, defineChain_js_1.defineChain)({
      id: 57e3,
      name: "Rollux Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc-tanenbaum.rollux.com/"],
          webSocket: ["wss://rpc-tanenbaum.rollux.com/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "RolluxTestnetExplorer",
          url: "https://rollux.tanenbaum.io",
          apiUrl: "https://rollux.tanenbaum.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 1813675
        }
      }
    });
  });
  var require_ronin = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ronin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.ronin = (0, defineChain_js_1.defineChain)({
      id: 2020,
      name: "Ronin",
      nativeCurrency: { name: "RON", symbol: "RON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.roninchain.com/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ronin Explorer",
          url: "https://app.roninchain.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 26023535
        }
      }
    });
  });
  var require_rootstock = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rootstock = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.rootstock = (0, defineChain_js_1.defineChain)({
      id: 30,
      name: "Rootstock Mainnet",
      network: "rootstock",
      nativeCurrency: {
        decimals: 18,
        name: "Rootstock Bitcoin",
        symbol: "RBTC"
      },
      rpcUrls: {
        default: { http: ["https://public-node.rsk.co"] }
      },
      blockExplorers: {
        default: {
          name: "RSK Explorer",
          url: "https://explorer.rsk.co"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 4249540
        }
      }
    });
  });
  var require_rss3 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rss3 = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.rss3 = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 12553,
      name: "RSS3 VSL Mainnet",
      nativeCurrency: { name: "RSS3", symbol: "RSS3", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.rss3.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "RSS3 VSL Mainnet Scan",
          url: "https://scan.rss3.io",
          apiUrl: "https://scan.rss3.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xE6f24d2C32B3109B18ed33cF08eFb490b1e09C10"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14193
        },
        portal: {
          [sourceId5]: {
            address: "0x6A12432491bbbE8d3babf75F759766774C778Db4",
            blockCreated: 19387057
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x4cbab69108Aa72151EDa5A3c164eA86845f18438"
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_rss3Sepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rss3Sepolia = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.rss3Sepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 2331,
      name: "RSS3 VSL Sepolia Testnet",
      nativeCurrency: { name: "RSS3", symbol: "RSS3", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.rss3.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "RSS3 VSL Sepolia Testnet Scan",
          url: "https://scan.testnet.rss3.io",
          apiUrl: "https://scan.testnet.rss3.io/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0xDb5c46C3Eaa6Ed6aE8b2379785DF7dd029C0dC81"
          }
        },
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 55697
        },
        portal: {
          [sourceId5]: {
            address: "0xcBD77E8E1E7F06B25baDe67142cdE82652Da7b57",
            blockCreated: 5345035
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0xdDD29bb63B0839FB1cE0eE439Ff027738595D07B"
          }
        }
      },
      testnet: true,
      sourceId: sourceId5
    });
  });
  var require_saigon = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.saigon = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.saigon = (0, defineChain_js_1.defineChain)({
      id: 2021,
      name: "Saigon Testnet",
      nativeCurrency: { name: "RON", symbol: "RON", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://saigon-testnet.roninchain.com/rpc"]
        }
      },
      blockExplorers: {
        default: {
          name: "Saigon Explorer",
          url: "https://saigon-app.roninchain.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 18736871
        }
      },
      testnet: true
    });
  });
  var require_sapphire = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sapphire = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sapphire = (0, defineChain_js_1.defineChain)({
      id: 23294,
      name: "Oasis Sapphire",
      network: "sapphire",
      nativeCurrency: { name: "Sapphire Rose", symbol: "ROSE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sapphire.oasis.io"],
          webSocket: ["wss://sapphire.oasis.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Oasis Sapphire Explorer",
          url: "https://explorer.sapphire.oasis.io",
          apiUrl: "https://explorer.sapphire.oasis.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 734531
        }
      }
    });
  });
  var require_sapphireTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sapphireTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sapphireTestnet = (0, defineChain_js_1.defineChain)({
      id: 23295,
      name: "Oasis Sapphire Testnet",
      network: "sapphire-testnet",
      nativeCurrency: { name: "Sapphire Test Rose", symbol: "TEST", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.sapphire.oasis.dev"],
          webSocket: ["wss://testnet.sapphire.oasis.dev/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Oasis Sapphire Testnet Explorer",
          url: "https://testnet.explorer.sapphire.oasis.dev",
          apiUrl: "https://testnet.explorer.sapphire.oasis.dev/api"
        }
      },
      testnet: true
    });
  });
  var require_scroll = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scroll = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.scroll = (0, defineChain_js_1.defineChain)({
      id: 534352,
      name: "Scroll",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.scroll.io"],
          webSocket: ["wss://wss-rpc.scroll.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Scrollscan",
          url: "https://scrollscan.com",
          apiUrl: "https://api.scrollscan.com/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 14
        }
      },
      testnet: false
    });
  });
  var require_scrollSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scrollSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.scrollSepolia = (0, defineChain_js_1.defineChain)({
      id: 534351,
      name: "Scroll Sepolia",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia-rpc.scroll.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://sepolia-blockscout.scroll.io",
          apiUrl: "https://sepolia-blockscout.scroll.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 9473
        }
      },
      testnet: true
    });
  });
  var require_scrollTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scrollTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.scrollTestnet = (0, defineChain_js_1.defineChain)({
      id: 534353,
      name: "Scroll Testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://alpha-rpc.scroll.io/l2"],
          webSocket: ["wss://alpha-rpc.scroll.io/l2/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://blockscout.scroll.io",
          apiUrl: "https://blockscout.scroll.io/api"
        }
      },
      testnet: true
    });
  });
  var require_seiDevnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.seiDevnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.seiDevnet = (0, defineChain_js_1.defineChain)({
      id: 713715,
      name: "Sei Devnet",
      nativeCurrency: { name: "Sei", symbol: "SEI", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://evm-rpc-arctic-1.sei-apis.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Seitrace",
          url: "https://seitrace.com"
        }
      },
      testnet: true
    });
  });
  var require_sepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.sepolia = (0, defineChain_js_1.defineChain)({
      id: 11155111,
      name: "Sepolia",
      nativeCurrency: { name: "Sepolia Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.sepolia.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://sepolia.etherscan.io",
          apiUrl: "https://api-sepolia.etherscan.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 751532
        },
        ensRegistry: { address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e" },
        ensUniversalResolver: {
          address: "0xc8Af999e38273D658BE1b921b88A9Ddf005769cC",
          blockCreated: 5317080
        }
      },
      testnet: true
    });
  });
  var require_shimmer = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shimmer = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shimmer = (0, defineChain_js_1.defineChain)({
      id: 148,
      name: "Shimmer",
      network: "shimmer",
      nativeCurrency: {
        decimals: 18,
        name: "Shimmer",
        symbol: "SMR"
      },
      rpcUrls: {
        default: {
          http: ["https://json-rpc.evm.shimmer.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shimmer Network Explorer",
          url: "https://explorer.evm.shimmer.network",
          apiUrl: "https://explorer.evm.shimmer.network/api"
        }
      }
    });
  });
  var require_shimmerTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shimmerTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shimmerTestnet = (0, defineChain_js_1.defineChain)({
      id: 1073,
      name: "Shimmer Testnet",
      network: "shimmer-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Shimmer",
        symbol: "SMR"
      },
      rpcUrls: {
        default: {
          http: ["https://json-rpc.evm.testnet.shimmer.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shimmer Network Explorer",
          url: "https://explorer.evm.testnet.shimmer.network",
          apiUrl: "https://explorer.evm.testnet.shimmer.network/api"
        }
      },
      testnet: true
    });
  });
  var require_brawl = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleBlockBrawlers = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleBlockBrawlers = (0, defineChain_js_1.defineChain)({
      id: 391845894,
      name: "SKALE | Block Brawlers",
      nativeCurrency: { name: "BRAWL", symbol: "BRAWL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/frayed-decent-antares"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/frayed-decent-antares"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://frayed-decent-antares.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  });
  var require_calypso = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCalypso = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCalypso = (0, defineChain_js_1.defineChain)({
      id: 1564830818,
      name: "SKALE | Calypso NFT Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/honorable-steel-rasalhague"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3107626
        }
      }
    });
  });
  var require_calypsoTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCalypsoTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCalypsoTestnet = (0, defineChain_js_1.defineChain)({
      id: 974399131,
      name: "SKALE Calypso Testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/giant-half-dual-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/giant-half-dual-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://giant-half-dual-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 103220
        }
      },
      testnet: true
    });
  });
  var require_cryptoBlades = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCryptoBlades = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCryptoBlades = (0, defineChain_js_1.defineChain)({
      id: 1026062157,
      name: "SKALE | CryptoBlades",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux"],
          webSocket: [
            "wss://mainnet.skalenodes.com/v1/ws/affectionate-immediate-pollux"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  });
  var require_cryptoColosseum = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleCryptoColosseum = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleCryptoColosseum = (0, defineChain_js_1.defineChain)({
      id: 2046399126,
      name: "SKALE | Crypto Colosseum",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/haunting-devoted-deneb"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/haunting-devoted-deneb"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  });
  var require_europa = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleEuropa = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleEuropa = (0, defineChain_js_1.defineChain)({
      id: 2046399126,
      name: "SKALE | Europa Liquidity Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/elated-tan-skat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/elated-tan-skat"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://elated-tan-skat.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 3113495
        }
      }
    });
  });
  var require_europaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleEuropaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleEuropaTestnet = (0, defineChain_js_1.defineChain)({
      id: 1444673419,
      name: "SKALE Europa Testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/juicy-low-small-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/juicy-low-small-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://juicy-low-small-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 110858
        }
      },
      testnet: true
    });
  });
  var require_exorde = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleExorde = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleExorde = (0, defineChain_js_1.defineChain)({
      id: 2139927552,
      name: "SKALE | Exorde",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/light-vast-diphda"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/light-vast-diphda"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://light-vast-diphda.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  });
  var require_humanProtocol = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleHumanProtocol = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleHumanProtocol = (0, defineChain_js_1.defineChain)({
      id: 1273227453,
      name: "SKALE | Human Protocol",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/wan-red-ain"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/wan-red-ain"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://wan-red-ain.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  });
  var require_nebula = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleNebula = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleNebula = (0, defineChain_js_1.defineChain)({
      id: 1482601649,
      name: "SKALE | Nebula Gaming Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/green-giddy-denebola"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/green-giddy-denebola"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://green-giddy-denebola.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2372986
        }
      }
    });
  });
  var require_nebulaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleNebulaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleNebulaTestnet = (0, defineChain_js_1.defineChain)({
      id: 37084624,
      name: "SKALE Nebula Testnet",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/lanky-ill-funny-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/lanky-ill-funny-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://lanky-ill-funny-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 105141
        }
      },
      testnet: true
    });
  });
  var require_razor = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleRazor = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleRazor = (0, defineChain_js_1.defineChain)({
      id: 278611351,
      name: "SKALE | Razor Network",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/turbulent-unique-scheat"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/turbulent-unique-scheat"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {}
    });
  });
  var require_titan = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleTitan = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleTitan = (0, defineChain_js_1.defineChain)({
      id: 1350216234,
      name: "SKALE | Titan Community Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.skalenodes.com/v1/parallel-stormy-spica"],
          webSocket: ["wss://mainnet.skalenodes.com/v1/ws/parallel-stormy-spica"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://parallel-stormy-spica.explorer.mainnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 2076458
        }
      }
    });
  });
  var require_titanTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.skaleTitanTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.skaleTitanTestnet = (0, defineChain_js_1.defineChain)({
      id: 1020352220,
      name: "SKALE Titan Hub",
      nativeCurrency: { name: "sFUEL", symbol: "sFUEL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.skalenodes.com/v1/aware-fake-trim-testnet"],
          webSocket: ["wss://testnet.skalenodes.com/v1/ws/aware-fake-trim-testnet"]
        }
      },
      blockExplorers: {
        default: {
          name: "SKALE Explorer",
          url: "https://aware-fake-trim-testnet.explorer.testnet.skalenodes.com"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 104072
        }
      },
      testnet: true
    });
  });
  var require_songbird = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.songbird = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.songbird = (0, defineChain_js_1.defineChain)({
      id: 19,
      name: "Songbird Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "songbird",
        symbol: "SGB"
      },
      rpcUrls: {
        default: { http: ["https://songbird-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Songbird Explorer",
          url: "https://songbird-explorer.flare.network",
          apiUrl: "https://songbird-explorer.flare.network/api"
        }
      }
    });
  });
  var require_songbirdTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.songbirdTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.songbirdTestnet = (0, defineChain_js_1.defineChain)({
      id: 16,
      name: "Coston",
      nativeCurrency: {
        decimals: 18,
        name: "costonflare",
        symbol: "CFLR"
      },
      rpcUrls: {
        default: { http: ["https://coston-api.flare.network/ext/C/rpc"] }
      },
      blockExplorers: {
        default: {
          name: "Coston Explorer",
          url: "https://coston-explorer.flare.network",
          apiUrl: "https://coston-explorer.flare.network/api"
        }
      },
      testnet: true
    });
  });
  var require_spicy = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.spicy = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.spicy = (0, defineChain_js_1.defineChain)({
      id: 88882,
      name: "Chiliz Spicy Testnet",
      network: "chiliz-spicy-Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "CHZ",
        symbol: "CHZ"
      },
      rpcUrls: {
        default: {
          http: [
            "https://spicy-rpc.chiliz.com",
            "https://chiliz-spicy-rpc.publicnode.com"
          ],
          webSocket: [
            "wss://spicy-rpc-ws.chiliz.com",
            "wss://chiliz-spicy-rpc.publicnode.com"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "Chiliz Explorer",
          url: "http://spicy-explorer.chiliz.com",
          apiUrl: "http://spicy-explorer.chiliz.com/api"
        }
      },
      testnet: true
    });
  });
  var require_shardeumSphinx = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shardeumSphinx = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shardeumSphinx = (0, defineChain_js_1.defineChain)({
      id: 8082,
      name: "Shardeum Sphinx",
      nativeCurrency: { name: "SHARDEUM", symbol: "SHM", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sphinx.shardeum.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Shardeum Explorer",
          url: "https://explorer-sphinx.shardeum.org"
        }
      },
      testnet: true
    });
  });
  var require_shibarium = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.shibarium = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.shibarium = (0, defineChain_js_1.defineChain)({
      id: 109,
      name: "Shibarium",
      network: "shibarium",
      nativeCurrency: { name: "Bone", symbol: "BONE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.shibrpc.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Blockscout",
          url: "https://shibariumscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0x864Bf681ADD6052395188A89101A1B37d3B4C961",
          blockCreated: 265900
        }
      }
    });
  });
  var require_stratis = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stratis = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.stratis = (0, defineChain_js_1.defineChain)({
      id: 105105,
      name: "Stratis Mainnet",
      network: "stratis",
      nativeCurrency: {
        name: "Stratis",
        symbol: "STRAX",
        decimals: 18
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.stratisevm.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Stratis Explorer",
          url: "https://explorer.stratisevm.com"
        }
      }
    });
  });
  var require_syscoin = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.syscoin = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.syscoin = (0, defineChain_js_1.defineChain)({
      id: 57,
      name: "Syscoin Mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.syscoin.org"],
          webSocket: ["wss://rpc.syscoin.org/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "SyscoinExplorer",
          url: "https://explorer.syscoin.org",
          apiUrl: "https://explorer.syscoin.org/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 287139
        }
      }
    });
  });
  var require_syscoinTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.syscoinTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.syscoinTestnet = (0, defineChain_js_1.defineChain)({
      id: 5700,
      name: "Syscoin Tanenbaum Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Syscoin",
        symbol: "SYS"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.tanenbaum.io"],
          webSocket: ["wss://rpc.tanenbaum.io/wss"]
        }
      },
      blockExplorers: {
        default: {
          name: "SyscoinTestnetExplorer",
          url: "https://tanenbaum.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 271288
        }
      }
    });
  });
  var require_taraxa = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taraxa = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taraxa = (0, defineChain_js_1.defineChain)({
      id: 841,
      name: "Taraxa Mainnet",
      nativeCurrency: { name: "Tara", symbol: "TARA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.mainnet.taraxa.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taraxa Explorer",
          url: "https://explorer.mainnet.taraxa.io"
        }
      }
    });
  });
  var require_taikoHekla = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoHekla = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoHekla = (0, defineChain_js_1.defineChain)({
      id: 167009,
      name: "Taiko Hekla L2",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.hekla.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taikoscan",
          url: "https://hekla.taikoscan.network"
        }
      }
    });
  });
  var require_taikoJolnir = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoJolnir = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoJolnir = (0, defineChain_js_1.defineChain)({
      id: 167007,
      name: "Taiko Jolnir (Alpha-5 Testnet)",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.jolnir.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.jolnir.taiko.xyz"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 732706
        }
      },
      testnet: true
    });
  });
  var require_taikoKatla = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoKatla = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoKatla = (0, defineChain_js_1.defineChain)({
      id: 167008,
      name: "Taiko Katla (Alpha-6 Testnet)",
      network: "tko-katla",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.katla.taiko.xyz"]
        },
        public: {
          http: ["https://rpc.katla.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.katla.taiko.xyz"
        }
      }
    });
  });
  var require_taikoTestnetSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taikoTestnetSepolia = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taikoTestnetSepolia = (0, defineChain_js_1.defineChain)({
      id: 167005,
      name: "Taiko (Alpha-3 Testnet)",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.test.taiko.xyz"]
        }
      },
      blockExplorers: {
        default: {
          name: "blockscout",
          url: "https://explorer.test.taiko.xyz"
        }
      }
    });
  });
  var require_taraxaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.taraxaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.taraxaTestnet = (0, defineChain_js_1.defineChain)({
      id: 842,
      name: "Taraxa Testnet",
      nativeCurrency: { name: "Tara", symbol: "TARA", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.testnet.taraxa.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Taraxa Explorer",
          url: "https://explorer.testnet.taraxa.io"
        }
      },
      testnet: true
    });
  });
  var require_telos = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.telos = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.telos = (0, defineChain_js_1.defineChain)({
      id: 40,
      name: "Telos",
      nativeCurrency: {
        decimals: 18,
        name: "Telos",
        symbol: "TLOS"
      },
      rpcUrls: {
        default: { http: ["https://mainnet.telos.net/evm"] }
      },
      blockExplorers: {
        default: {
          name: "Teloscan",
          url: "https://www.teloscan.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 246530709
        }
      }
    });
  });
  var require_telosTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.telosTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.telosTestnet = (0, defineChain_js_1.defineChain)({
      id: 41,
      name: "Telos",
      nativeCurrency: {
        decimals: 18,
        name: "Telos",
        symbol: "TLOS"
      },
      rpcUrls: {
        default: { http: ["https://testnet.telos.net/evm"] }
      },
      blockExplorers: {
        default: {
          name: "Teloscan (testnet)",
          url: "https://testnet.teloscan.io/"
        }
      },
      testnet: true
    });
  });
  var require_tenet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.tenet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.tenet = (0, defineChain_js_1.defineChain)({
      id: 1559,
      name: "Tenet",
      network: "tenet-mainnet",
      nativeCurrency: {
        name: "TENET",
        symbol: "TENET",
        decimals: 18
      },
      rpcUrls: {
        default: { http: ["https://rpc.tenet.org"] }
      },
      blockExplorers: {
        default: {
          name: "TenetScan Mainnet",
          url: "https://tenetscan.io",
          apiUrl: "https://tenetscan.io/api"
        }
      },
      testnet: false
    });
  });
  var require_thunderTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.thunderTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.thunderTestnet = (0, defineChain_js_1.defineChain)({
      id: 997,
      name: "5ireChain Thunder Testnet",
      nativeCurrency: { name: "5ire Token", symbol: "5IRE", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc-testnet.5ire.network"]
        }
      },
      blockExplorers: {
        default: {
          name: "5ireChain Explorer",
          url: "https://explorer.5ire.network"
        }
      },
      testnet: true
    });
  });
  var require_vechain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.vechain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.vechain = (0, defineChain_js_1.defineChain)({
      id: 100009,
      name: "Vechain",
      nativeCurrency: { name: "VeChain", symbol: "VET", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://mainnet.vechain.org"]
        }
      },
      blockExplorers: {
        default: {
          name: "Vechain Explorer",
          url: "https://explore.vechain.org"
        },
        vechainStats: {
          name: "Vechain Stats",
          url: "https://vechainstats.com"
        }
      }
    });
  });
  var require_wanchain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wanchain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wanchain = (0, defineChain_js_1.defineChain)({
      id: 888,
      name: "Wanchain",
      nativeCurrency: { name: "WANCHAIN", symbol: "WAN", decimals: 18 },
      rpcUrls: {
        default: {
          http: [
            "https://gwan-ssl.wandevs.org:56891",
            "https://gwan2-ssl.wandevs.org"
          ]
        }
      },
      blockExplorers: {
        default: {
          name: "WanScan",
          url: "https://wanscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0xcDF6A1566e78EB4594c86Fe73Fcdc82429e97fbB",
          blockCreated: 25312390
        }
      }
    });
  });
  var require_wanchainTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wanchainTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wanchainTestnet = (0, defineChain_js_1.defineChain)({
      id: 999,
      name: "Wanchain Testnet",
      nativeCurrency: { name: "WANCHAIN", symbol: "WANt", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://gwan-ssl.wandevs.org:46891"]
        }
      },
      blockExplorers: {
        default: {
          name: "WanScanTest",
          url: "https://wanscan.org"
        }
      },
      contracts: {
        multicall3: {
          address: "0x11c89bF4496c39FB80535Ffb4c92715839CC5324",
          blockCreated: 24743448
        }
      },
      testnet: true
    });
  });
  var require_wemix = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wemix = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wemix = (0, defineChain_js_1.defineChain)({
      id: 1111,
      name: "WEMIX",
      network: "wemix-mainnet",
      nativeCurrency: { name: "WEMIX", symbol: "WEMIX", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://api.wemix.com"] },
        public: { http: ["https://api.wemix.com"] }
      },
      blockExplorers: {
        default: {
          name: "wemixExplorer",
          url: "https://explorer.wemix.com"
        }
      }
    });
  });
  var require_wemixTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wemixTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.wemixTestnet = (0, defineChain_js_1.defineChain)({
      id: 1112,
      name: "WEMIX Testnet",
      network: "wemix-testnet",
      nativeCurrency: { name: "WEMIX", symbol: "tWEMIX", decimals: 18 },
      rpcUrls: {
        default: { http: ["https://api.test.wemix.com"] },
        public: { http: ["https://api.test.wemix.com"] }
      },
      blockExplorers: {
        default: {
          name: "wemixExplorer",
          url: "https://testnet.wemixscan.com",
          apiUrl: "https://testnet.wemixscan.com/api"
        }
      },
      testnet: true
    });
  });
  var require_x1Testnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.x1Testnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.x1Testnet = (0, defineChain_js_1.defineChain)({
      id: 195,
      name: "X1 Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "OKB",
        symbol: "OKB"
      },
      rpcUrls: {
        default: { http: ["https://x1testrpc.okx.com"] }
      },
      blockExplorers: {
        default: {
          name: "OKLink",
          url: "https://www.oklink.com/x1-test"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 624344
        }
      },
      testnet: true
    });
  });
  var require_xdc = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xdc = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xdc = (0, defineChain_js_1.defineChain)({
      id: 50,
      name: "XinFin Network",
      nativeCurrency: {
        decimals: 18,
        name: "XDC",
        symbol: "XDC"
      },
      rpcUrls: {
        default: { http: ["https://rpc.xinfin.network"] }
      },
      blockExplorers: {
        xinfin: {
          name: "XinFin",
          url: "https://explorer.xinfin.network"
        },
        default: {
          name: "Blocksscan",
          url: "https://xdc.blocksscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 71542788
        }
      }
    });
  });
  var require_xdcTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.xdcTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.xdcTestnet = (0, defineChain_js_1.defineChain)({
      id: 51,
      name: "Apothem Network",
      nativeCurrency: {
        decimals: 18,
        name: "TXDC",
        symbol: "TXDC"
      },
      rpcUrls: {
        default: { http: ["https://erpc.apothem.network"] }
      },
      blockExplorers: {
        default: {
          name: "Blocksscan",
          url: "https://apothem.blocksscan.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 59765389
        }
      }
    });
  });
  var require_zetachain = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zetachain = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zetachain = (0, defineChain_js_1.defineChain)({
      id: 7e3,
      name: "ZetaChain",
      nativeCurrency: {
        decimals: 18,
        name: "Zeta",
        symbol: "ZETA"
      },
      rpcUrls: {
        default: {
          http: ["https://zetachain-evm.blockpi.network/v1/rpc/public"]
        }
      },
      blockExplorers: {
        default: {
          name: "ZetaScan",
          url: "https://explorer.zetachain.com"
        }
      },
      testnet: false
    });
  });
  var require_zetachainAthensTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zetachainAthensTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zetachainAthensTestnet = (0, defineChain_js_1.defineChain)({
      id: 7001,
      name: "ZetaChain Athens Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Zeta",
        symbol: "aZETA"
      },
      rpcUrls: {
        default: {
          http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"]
        }
      },
      blockExplorers: {
        default: {
          name: "ZetaScan",
          url: "https://athens.explorer.zetachain.com"
        }
      },
      testnet: true
    });
  });
  var require_zhejiang = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zhejiang = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zhejiang = (0, defineChain_js_1.defineChain)({
      id: 1337803,
      name: "Zhejiang",
      nativeCurrency: { name: "Zhejiang Ether", symbol: "ZhejETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://rpc.zhejiang.ethpandaops.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "Beaconchain",
          url: "https://zhejiang.beaconcha.in"
        }
      },
      testnet: true
    });
  });
  var require_zilliqa = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zilliqa = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zilliqa = (0, defineChain_js_1.defineChain)({
      id: 32769,
      name: "Zilliqa",
      network: "zilliqa",
      nativeCurrency: { name: "Zilliqa", symbol: "ZIL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://api.zilliqa.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ethernal",
          url: "https://evmx.zilliqa.com"
        }
      },
      testnet: false
    });
  });
  var require_zilliqaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zilliqaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zilliqaTestnet = (0, defineChain_js_1.defineChain)({
      id: 33101,
      name: "Zilliqa Testnet",
      network: "zilliqa-testnet",
      nativeCurrency: { name: "Zilliqa", symbol: "ZIL", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://dev-api.zilliqa.com"]
        }
      },
      blockExplorers: {
        default: {
          name: "Ethernal",
          url: "https://evmx.testnet.zilliqa.com"
        }
      },
      testnet: true
    });
  });
  var require_zkFair = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkFair = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zkFair = (0, defineChain_js_1.defineChain)({
      id: 42766,
      name: "ZKFair Mainnet",
      network: "zkfair-mainnet",
      nativeCurrency: {
        decimals: 18,
        name: "USD Coin",
        symbol: "USDC"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.zkfair.io"]
        },
        public: {
          http: ["https://rpc.zkfair.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkFair Explorer",
          url: "https://scan.zkfair.io",
          apiUrl: "https://scan.zkfair.io/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xca11bde05977b3631167028862be2a173976ca11",
          blockCreated: 6090959
        }
      },
      testnet: false
    });
  });
  var require_zkFairTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkFairTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    exports2.zkFairTestnet = (0, defineChain_js_1.defineChain)({
      id: 43851,
      name: "ZKFair Testnet",
      network: "zkfair-testnet",
      nativeCurrency: {
        decimals: 18,
        name: "USD Coin",
        symbol: "USDC"
      },
      rpcUrls: {
        default: {
          http: ["https://testnet-rpc.zkfair.io"]
        },
        public: {
          http: ["https://testnet-rpc.zkfair.io"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkFair Explorer",
          url: "https://testnet-scan.zkfair.io"
        }
      },
      testnet: true
    });
  });
  var require_zkSync = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkSync = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig3();
    exports2.zkSync = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 324,
      name: "zkSync Era",
      network: "zksync-era",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://mainnet.era.zksync.io"],
          webSocket: ["wss://mainnet.era.zksync.io/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "Etherscan",
          url: "https://era.zksync.network/",
          apiUrl: "https://api-era.zksync.network/api"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      }
    });
  });
  var require_zkSyncInMemoryNode = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkSyncInMemoryNode = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig3();
    exports2.zkSyncInMemoryNode = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 260,
      name: "zkSync InMemory Node",
      network: "zksync-in-memory-node",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["http://localhost:8011"]
        }
      },
      testnet: true
    });
  });
  var require_zkSyncLocalNode = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkSyncLocalNode = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig3();
    exports2.zkSyncLocalNode = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 270,
      name: "zkSync CLI Local Node",
      network: "zksync-cli-local-node",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["http://localhost:3050"]
        }
      },
      testnet: true
    });
  });
  var require_zkSyncSepoliaTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkSyncSepoliaTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig3();
    exports2.zkSyncSepoliaTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 300,
      name: "zkSync Sepolia Testnet",
      network: "zksync-sepolia-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://sepolia.era.zksync.dev"],
          webSocket: ["wss://sepolia.era.zksync.dev/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkExplorer",
          url: "https://sepolia.explorer.zksync.io/"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      },
      testnet: true
    });
  });
  var require_zkSyncTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zkSyncTestnet = void 0;
    var defineChain_js_1 = require_defineChain();
    var chainConfig_js_1 = require_chainConfig3();
    exports2.zkSyncTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 280,
      name: "zkSync Era Testnet",
      network: "zksync-era-testnet",
      nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
      rpcUrls: {
        default: {
          http: ["https://testnet.era.zksync.dev"],
          webSocket: ["wss://testnet.era.zksync.dev/ws"]
        }
      },
      blockExplorers: {
        default: {
          name: "zkExplorer",
          url: "https://goerli.explorer.zksync.io"
        }
      },
      contracts: {
        multicall3: {
          address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
        }
      },
      testnet: true
    });
  });
  var require_zora = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zora = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 1;
    exports2.zora = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 7777777,
      name: "Zora",
      nativeCurrency: {
        decimals: 18,
        name: "Ether",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://rpc.zora.energy"],
          webSocket: ["wss://rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://explorer.zora.energy",
          apiUrl: "https://explorer.zora.energy/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x9E6204F750cD866b299594e2aC9eA824E2e5f95c"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 5882
        },
        portal: {
          [sourceId5]: {
            address: "0x1a0ad011913A150f69f6A19DF447A0CfD9551054"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x3e2Ea9B92B7E48A52296fD261dc26fd995284631"
          }
        }
      },
      sourceId: sourceId5
    });
  });
  var require_zoraSepolia = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zoraSepolia = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 11155111;
    exports2.zoraSepolia = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 999999999,
      name: "Zora Sepolia",
      network: "zora-sepolia",
      nativeCurrency: {
        decimals: 18,
        name: "Zora Sepolia",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://sepolia.rpc.zora.energy"],
          webSocket: ["wss://sepolia.rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: {
          name: "Zora Sepolia Explorer",
          url: "https://sepolia.explorer.zora.energy/",
          apiUrl: "https://sepolia.explorer.zora.energy/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        l2OutputOracle: {
          [sourceId5]: {
            address: "0x2615B481Bd3E5A1C0C7Ca3Da1bdc663E8615Ade9"
          }
        },
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 83160
        },
        portal: {
          [sourceId5]: {
            address: "0xeffE2C6cA9Ab797D418f0D91eA60807713f3536f"
          }
        },
        l1StandardBridge: {
          [sourceId5]: {
            address: "0x5376f1D543dcbB5BD416c56C189e4cB7399fCcCB"
          }
        }
      },
      sourceId: sourceId5,
      testnet: true
    });
  });
  var require_zoraTestnet = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zoraTestnet = void 0;
    var chainConfig_js_1 = require_chainConfig();
    var defineChain_js_1 = require_defineChain();
    var sourceId5 = 5;
    exports2.zoraTestnet = (0, defineChain_js_1.defineChain)({
      ...chainConfig_js_1.chainConfig,
      id: 999,
      name: "Zora Goerli Testnet",
      nativeCurrency: {
        decimals: 18,
        name: "Zora Goerli",
        symbol: "ETH"
      },
      rpcUrls: {
        default: {
          http: ["https://testnet.rpc.zora.energy"],
          webSocket: ["wss://testnet.rpc.zora.energy"]
        }
      },
      blockExplorers: {
        default: {
          name: "Explorer",
          url: "https://testnet.explorer.zora.energy",
          apiUrl: "https://testnet.explorer.zora.energy/api"
        }
      },
      contracts: {
        ...chainConfig_js_1.chainConfig.contracts,
        multicall3: {
          address: "0xcA11bde05977b3631167028862bE2a173976CA11",
          blockCreated: 189123
        },
        portal: {
          [sourceId5]: {
            address: "0xDb9F51790365e7dc196e7D072728df39Be958ACe"
          }
        }
      },
      sourceId: sourceId5,
      testnet: true
    });
  });
  var require_chains = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cronos = exports2.coreDao = exports2.confluxESpaceTestnet = exports2.confluxESpace = exports2.classic = exports2.chiliz = exports2.celoAlfajores = exports2.celo = exports2.canto = exports2.bxnTestnet = exports2.bxn = exports2.bscGreenfield = exports2.bscTestnet = exports2.bsc = exports2.bronosTestnet = exports2.bronos = exports2.boba = exports2.blastSepolia = exports2.blast = exports2.bitTorrentTestnet = exports2.bitTorrent = exports2.bevmMainnet = exports2.berachainTestnet = exports2.bearNetworkChainTestnet = exports2.bearNetworkChainMainnet = exports2.beamTestnet = exports2.beam = exports2.baseSepolia = exports2.baseGoerli = exports2.base = exports2.bahamut = exports2.avalancheFuji = exports2.avalanche = exports2.auroria = exports2.auroraTestnet = exports2.aurora = exports2.areonNetworkTestnet = exports2.areonNetwork = exports2.arbitrumSepolia = exports2.astarZkyoto = exports2.astarZkEVM = exports2.astar = exports2.arbitrumNova = exports2.arbitrumGoerli = exports2.arbitrum = exports2.apexTestnet = exports2.anvil = exports2.ancient8Sepolia = exports2.ancient8 = exports2.acala = void 0;
    exports2.hederaTestnet = exports2.hedera = exports2.haqqTestedge2 = exports2.haqqMainnet = exports2.harmonyOne = exports2.hardhat = exports2.gnosisChiado = exports2.gnosis = exports2.goerli = exports2.gobi = exports2.karura = exports2.jbc = exports2.iotexTestnet = exports2.iotex = exports2.fuseSparknet = exports2.fuse = exports2.fraxtalTestnet = exports2.fraxtal = exports2.foundry = exports2.flowMainnet = exports2.flowPreviewnet = exports2.flareTestnet = exports2.flare = exports2.filecoinHyperspace = exports2.filecoinCalibration = exports2.filecoin = exports2.fibo = exports2.fantomTestnet = exports2.fantomSonicTestnet = exports2.fantom = exports2.ektaTestnet = exports2.ekta = exports2.evmosTestnet = exports2.evmos = exports2.etherlinkTestnet = exports2.eosTestnet = exports2.eos = exports2.eon = exports2.edgewareTestnet = exports2.edgeware = exports2.edgelessTestnet = exports2.edgeless = exports2.dogechain = exports2.dfk = exports2.degen = exports2.defichainEvmTestnet = exports2.defichainEvm = exports2.darwinia = exports2.crossbell = exports2.cronosTestnet = void 0;
    exports2.nexi = exports2.neonMainnet = exports2.neonDevnet = exports2.morphSepolia = exports2.moonriver = exports2.moonbeamDev = exports2.moonbeam = exports2.moonbaseAlpha = exports2.modeTestnet = exports2.mode = exports2.mintSepoliaTestnet = exports2.mevTestnet = exports2.mev = exports2.metisGoerli = exports2.metis = exports2.meterTestnet = exports2.meter = exports2.metachainIstanbul = exports2.metachain = exports2.merlin = exports2.mantleTestnet = exports2.mantleSepoliaTestnet = exports2.mantle = exports2.mantaTestnet = exports2.mantaSepoliaTestnet = exports2.manta = exports2.mandala = exports2.mainnet = exports2.luksoTestnet = exports2.lukso = exports2.localhost = exports2.liskSepolia = exports2.lineaTestnet = exports2.lineaSepolia = exports2.lineaGoerli = exports2.linea = exports2.lightlinkPhoenix = exports2.lightlinkPegasus = exports2.kromaSepolia = exports2.kroma = exports2.klaytnBaobab = exports2.klaytn = exports2.kcc = exports2.kavaTestnet = exports2.kava = exports2.kakarotSepolia = exports2.immutableZkEvmTestnet = exports2.immutableZkEvm = exports2.holesky = exports2.hederaPreviewnet = void 0;
    exports2.skaleCryptoColosseum = exports2.skaleCryptoBlades = exports2.skaleCalypsoTestnet = exports2.skaleCalypso = exports2.skaleBlockBrawlers = exports2.shimmerTestnet = exports2.shimmer = exports2.sepolia = exports2.seiDevnet = exports2.scrollTestnet = exports2.scrollSepolia = exports2.scroll = exports2.sapphireTestnet = exports2.sapphire = exports2.saigon = exports2.rss3Sepolia = exports2.rss3 = exports2.rootstock = exports2.ronin = exports2.rolluxTestnet = exports2.rollux = exports2.reyaNetwork = exports2.qTestnet = exports2.qMainnet = exports2.pulsechainV4 = exports2.pulsechain = exports2.polygonZkEvmTestnet = exports2.polygonZkEvmCardona = exports2.polygonZkEvm = exports2.polygonMumbai = exports2.polygonAmoy = exports2.polygon = exports2.plumeTestnet = exports2.plinga = exports2.phoenix = exports2.pgnTestnet = exports2.pgn = exports2.playfiAlbireo = exports2.palmTestnet = exports2.palm = exports2.oortMainnetDev = exports2.opBNBTestnet = exports2.opBNB = exports2.optimismSepolia = exports2.optimismGoerli = exports2.optimism = exports2.okc = exports2.oasisTestnet = exports2.oasys = exports2.nexilix = void 0;
    exports2.zoraTestnet = exports2.zoraSepolia = exports2.zora = exports2.zkSyncTestnet = exports2.zkSyncSepoliaTestnet = exports2.zkSyncLocalNode = exports2.zkSyncInMemoryNode = exports2.zkSync = exports2.zkFairTestnet = exports2.zkFair = exports2.zilliqaTestnet = exports2.zilliqa = exports2.zhejiang = exports2.zetachainAthensTestnet = exports2.zetachain = exports2.xdcTestnet = exports2.xdc = exports2.x1Testnet = exports2.wemixTestnet = exports2.wemix = exports2.wanchainTestnet = exports2.wanchain = exports2.vechain = exports2.thunderTestnet = exports2.tenet = exports2.telosTestnet = exports2.telos = exports2.taraxaTestnet = exports2.taikoTestnetSepolia = exports2.taikoKatla = exports2.taikoJolnir = exports2.taikoHekla = exports2.taraxa = exports2.syscoinTestnet = exports2.syscoin = exports2.stratis = exports2.shibarium = exports2.shardeumSphinx = exports2.spicy = exports2.songbirdTestnet = exports2.songbird = exports2.skaleTitanTestnet = exports2.skaleTitan = exports2.skaleRazor = exports2.skaleNebulaTestnet = exports2.skaleNebula = exports2.skaleHumanProtocol = exports2.skaleExorde = exports2.skaleEuropaTestnet = exports2.skaleEuropa = void 0;
    var acala_js_1 = require_acala();
    Object.defineProperty(exports2, "acala", { enumerable: true, get: function() {
      return acala_js_1.acala;
    } });
    var ancient8_js_1 = require_ancient8();
    Object.defineProperty(exports2, "ancient8", { enumerable: true, get: function() {
      return ancient8_js_1.ancient8;
    } });
    var ancient8Sepolia_js_1 = require_ancient8Sepolia();
    Object.defineProperty(exports2, "ancient8Sepolia", { enumerable: true, get: function() {
      return ancient8Sepolia_js_1.ancient8Sepolia;
    } });
    var anvil_js_1 = require_anvil();
    Object.defineProperty(exports2, "anvil", { enumerable: true, get: function() {
      return anvil_js_1.anvil;
    } });
    var apexTestnet_js_1 = require_apexTestnet();
    Object.defineProperty(exports2, "apexTestnet", { enumerable: true, get: function() {
      return apexTestnet_js_1.apexTestnet;
    } });
    var arbitrum_js_1 = require_arbitrum();
    Object.defineProperty(exports2, "arbitrum", { enumerable: true, get: function() {
      return arbitrum_js_1.arbitrum;
    } });
    var arbitrumGoerli_js_1 = require_arbitrumGoerli();
    Object.defineProperty(exports2, "arbitrumGoerli", { enumerable: true, get: function() {
      return arbitrumGoerli_js_1.arbitrumGoerli;
    } });
    var arbitrumNova_js_1 = require_arbitrumNova();
    Object.defineProperty(exports2, "arbitrumNova", { enumerable: true, get: function() {
      return arbitrumNova_js_1.arbitrumNova;
    } });
    var astar_js_1 = require_astar();
    Object.defineProperty(exports2, "astar", { enumerable: true, get: function() {
      return astar_js_1.astar;
    } });
    var astarZkEVM_js_1 = require_astarZkEVM();
    Object.defineProperty(exports2, "astarZkEVM", { enumerable: true, get: function() {
      return astarZkEVM_js_1.astarZkEVM;
    } });
    var astarZkyoto_js_1 = require_astarZkyoto();
    Object.defineProperty(exports2, "astarZkyoto", { enumerable: true, get: function() {
      return astarZkyoto_js_1.astarZkyoto;
    } });
    var arbitrumSepolia_js_1 = require_arbitrumSepolia();
    Object.defineProperty(exports2, "arbitrumSepolia", { enumerable: true, get: function() {
      return arbitrumSepolia_js_1.arbitrumSepolia;
    } });
    var areonNetwork_js_1 = require_areonNetwork();
    Object.defineProperty(exports2, "areonNetwork", { enumerable: true, get: function() {
      return areonNetwork_js_1.areonNetwork;
    } });
    var areonNetworkTestnet_js_1 = require_areonNetworkTestnet();
    Object.defineProperty(exports2, "areonNetworkTestnet", { enumerable: true, get: function() {
      return areonNetworkTestnet_js_1.areonNetworkTestnet;
    } });
    var aurora_js_1 = require_aurora();
    Object.defineProperty(exports2, "aurora", { enumerable: true, get: function() {
      return aurora_js_1.aurora;
    } });
    var auroraTestnet_js_1 = require_auroraTestnet();
    Object.defineProperty(exports2, "auroraTestnet", { enumerable: true, get: function() {
      return auroraTestnet_js_1.auroraTestnet;
    } });
    var auroria_js_1 = require_auroria();
    Object.defineProperty(exports2, "auroria", { enumerable: true, get: function() {
      return auroria_js_1.auroria;
    } });
    var avalanche_js_1 = require_avalanche();
    Object.defineProperty(exports2, "avalanche", { enumerable: true, get: function() {
      return avalanche_js_1.avalanche;
    } });
    var avalancheFuji_js_1 = require_avalancheFuji();
    Object.defineProperty(exports2, "avalancheFuji", { enumerable: true, get: function() {
      return avalancheFuji_js_1.avalancheFuji;
    } });
    var bahamut_js_1 = require_bahamut();
    Object.defineProperty(exports2, "bahamut", { enumerable: true, get: function() {
      return bahamut_js_1.bahamut;
    } });
    var base_js_1 = require_base2();
    Object.defineProperty(exports2, "base", { enumerable: true, get: function() {
      return base_js_1.base;
    } });
    var baseGoerli_js_1 = require_baseGoerli();
    Object.defineProperty(exports2, "baseGoerli", { enumerable: true, get: function() {
      return baseGoerli_js_1.baseGoerli;
    } });
    var baseSepolia_js_1 = require_baseSepolia();
    Object.defineProperty(exports2, "baseSepolia", { enumerable: true, get: function() {
      return baseSepolia_js_1.baseSepolia;
    } });
    var beam_js_1 = require_beam();
    Object.defineProperty(exports2, "beam", { enumerable: true, get: function() {
      return beam_js_1.beam;
    } });
    var beamTestnet_js_1 = require_beamTestnet();
    Object.defineProperty(exports2, "beamTestnet", { enumerable: true, get: function() {
      return beamTestnet_js_1.beamTestnet;
    } });
    var bearNetworkChainMainnet_js_1 = require_bearNetworkChainMainnet();
    Object.defineProperty(exports2, "bearNetworkChainMainnet", { enumerable: true, get: function() {
      return bearNetworkChainMainnet_js_1.bearNetworkChainMainnet;
    } });
    var bearNetworkChainTestnet_js_1 = require_bearNetworkChainTestnet();
    Object.defineProperty(exports2, "bearNetworkChainTestnet", { enumerable: true, get: function() {
      return bearNetworkChainTestnet_js_1.bearNetworkChainTestnet;
    } });
    var berachainTestnet_js_1 = require_berachainTestnet();
    Object.defineProperty(exports2, "berachainTestnet", { enumerable: true, get: function() {
      return berachainTestnet_js_1.berachainTestnet;
    } });
    var bevmMainnet_js_1 = require_bevmMainnet();
    Object.defineProperty(exports2, "bevmMainnet", { enumerable: true, get: function() {
      return bevmMainnet_js_1.bevmMainnet;
    } });
    var bitTorrent_js_1 = require_bitTorrent();
    Object.defineProperty(exports2, "bitTorrent", { enumerable: true, get: function() {
      return bitTorrent_js_1.bitTorrent;
    } });
    var bitTorrentTestnet_js_1 = require_bitTorrentTestnet();
    Object.defineProperty(exports2, "bitTorrentTestnet", { enumerable: true, get: function() {
      return bitTorrentTestnet_js_1.bitTorrentTestnet;
    } });
    var blast_js_1 = require_blast();
    Object.defineProperty(exports2, "blast", { enumerable: true, get: function() {
      return blast_js_1.blast;
    } });
    var blastSepolia_js_1 = require_blastSepolia();
    Object.defineProperty(exports2, "blastSepolia", { enumerable: true, get: function() {
      return blastSepolia_js_1.blastSepolia;
    } });
    var boba_js_1 = require_boba();
    Object.defineProperty(exports2, "boba", { enumerable: true, get: function() {
      return boba_js_1.boba;
    } });
    var bronos_js_1 = require_bronos();
    Object.defineProperty(exports2, "bronos", { enumerable: true, get: function() {
      return bronos_js_1.bronos;
    } });
    var bronosTestnet_js_1 = require_bronosTestnet();
    Object.defineProperty(exports2, "bronosTestnet", { enumerable: true, get: function() {
      return bronosTestnet_js_1.bronosTestnet;
    } });
    var bsc_js_1 = require_bsc();
    Object.defineProperty(exports2, "bsc", { enumerable: true, get: function() {
      return bsc_js_1.bsc;
    } });
    var bscTestnet_js_1 = require_bscTestnet();
    Object.defineProperty(exports2, "bscTestnet", { enumerable: true, get: function() {
      return bscTestnet_js_1.bscTestnet;
    } });
    var bscGreenfield_js_1 = require_bscGreenfield();
    Object.defineProperty(exports2, "bscGreenfield", { enumerable: true, get: function() {
      return bscGreenfield_js_1.bscGreenfield;
    } });
    var bxn_js_1 = require_bxn();
    Object.defineProperty(exports2, "bxn", { enumerable: true, get: function() {
      return bxn_js_1.bxn;
    } });
    var bxnTestnet_js_1 = require_bxnTestnet();
    Object.defineProperty(exports2, "bxnTestnet", { enumerable: true, get: function() {
      return bxnTestnet_js_1.bxnTestnet;
    } });
    var canto_js_1 = require_canto();
    Object.defineProperty(exports2, "canto", { enumerable: true, get: function() {
      return canto_js_1.canto;
    } });
    var celo_js_1 = require_celo();
    Object.defineProperty(exports2, "celo", { enumerable: true, get: function() {
      return celo_js_1.celo;
    } });
    var celoAlfajores_js_1 = require_celoAlfajores();
    Object.defineProperty(exports2, "celoAlfajores", { enumerable: true, get: function() {
      return celoAlfajores_js_1.celoAlfajores;
    } });
    var chiliz_js_1 = require_chiliz();
    Object.defineProperty(exports2, "chiliz", { enumerable: true, get: function() {
      return chiliz_js_1.chiliz;
    } });
    var classic_js_1 = require_classic();
    Object.defineProperty(exports2, "classic", { enumerable: true, get: function() {
      return classic_js_1.classic;
    } });
    var confluxESpace_js_1 = require_confluxESpace();
    Object.defineProperty(exports2, "confluxESpace", { enumerable: true, get: function() {
      return confluxESpace_js_1.confluxESpace;
    } });
    var confluxESpaceTestnet_js_1 = require_confluxESpaceTestnet();
    Object.defineProperty(exports2, "confluxESpaceTestnet", { enumerable: true, get: function() {
      return confluxESpaceTestnet_js_1.confluxESpaceTestnet;
    } });
    var coreDao_js_1 = require_coreDao();
    Object.defineProperty(exports2, "coreDao", { enumerable: true, get: function() {
      return coreDao_js_1.coreDao;
    } });
    var cronos_js_1 = require_cronos();
    Object.defineProperty(exports2, "cronos", { enumerable: true, get: function() {
      return cronos_js_1.cronos;
    } });
    var cronosTestnet_js_1 = require_cronosTestnet();
    Object.defineProperty(exports2, "cronosTestnet", { enumerable: true, get: function() {
      return cronosTestnet_js_1.cronosTestnet;
    } });
    var crossbell_js_1 = require_crossbell();
    Object.defineProperty(exports2, "crossbell", { enumerable: true, get: function() {
      return crossbell_js_1.crossbell;
    } });
    var darwinia_js_1 = require_darwinia();
    Object.defineProperty(exports2, "darwinia", { enumerable: true, get: function() {
      return darwinia_js_1.darwinia;
    } });
    var defichainEvm_js_1 = require_defichainEvm();
    Object.defineProperty(exports2, "defichainEvm", { enumerable: true, get: function() {
      return defichainEvm_js_1.defichainEvm;
    } });
    var defichainEvmTestnet_js_1 = require_defichainEvmTestnet();
    Object.defineProperty(exports2, "defichainEvmTestnet", { enumerable: true, get: function() {
      return defichainEvmTestnet_js_1.defichainEvmTestnet;
    } });
    var degen_js_1 = require_degen();
    Object.defineProperty(exports2, "degen", { enumerable: true, get: function() {
      return degen_js_1.degen;
    } });
    var dfk_js_1 = require_dfk();
    Object.defineProperty(exports2, "dfk", { enumerable: true, get: function() {
      return dfk_js_1.dfk;
    } });
    var dogechain_js_1 = require_dogechain();
    Object.defineProperty(exports2, "dogechain", { enumerable: true, get: function() {
      return dogechain_js_1.dogechain;
    } });
    var edgeless_js_1 = require_edgeless();
    Object.defineProperty(exports2, "edgeless", { enumerable: true, get: function() {
      return edgeless_js_1.edgeless;
    } });
    var edgelessTestnet_js_1 = require_edgelessTestnet();
    Object.defineProperty(exports2, "edgelessTestnet", { enumerable: true, get: function() {
      return edgelessTestnet_js_1.edgelessTestnet;
    } });
    var edgeware_js_1 = require_edgeware();
    Object.defineProperty(exports2, "edgeware", { enumerable: true, get: function() {
      return edgeware_js_1.edgeware;
    } });
    var edgewareTestnet_js_1 = require_edgewareTestnet();
    Object.defineProperty(exports2, "edgewareTestnet", { enumerable: true, get: function() {
      return edgewareTestnet_js_1.edgewareTestnet;
    } });
    var eon_js_1 = require_eon();
    Object.defineProperty(exports2, "eon", { enumerable: true, get: function() {
      return eon_js_1.eon;
    } });
    var eos_js_1 = require_eos();
    Object.defineProperty(exports2, "eos", { enumerable: true, get: function() {
      return eos_js_1.eos;
    } });
    var eosTestnet_js_1 = require_eosTestnet();
    Object.defineProperty(exports2, "eosTestnet", { enumerable: true, get: function() {
      return eosTestnet_js_1.eosTestnet;
    } });
    var etherlinkTestnet_js_1 = require_etherlinkTestnet();
    Object.defineProperty(exports2, "etherlinkTestnet", { enumerable: true, get: function() {
      return etherlinkTestnet_js_1.etherlinkTestnet;
    } });
    var evmos_js_1 = require_evmos();
    Object.defineProperty(exports2, "evmos", { enumerable: true, get: function() {
      return evmos_js_1.evmos;
    } });
    var evmosTestnet_js_1 = require_evmosTestnet();
    Object.defineProperty(exports2, "evmosTestnet", { enumerable: true, get: function() {
      return evmosTestnet_js_1.evmosTestnet;
    } });
    var ekta_js_1 = require_ekta();
    Object.defineProperty(exports2, "ekta", { enumerable: true, get: function() {
      return ekta_js_1.ekta;
    } });
    var ektaTestnet_js_1 = require_ektaTestnet();
    Object.defineProperty(exports2, "ektaTestnet", { enumerable: true, get: function() {
      return ektaTestnet_js_1.ektaTestnet;
    } });
    var fantom_js_1 = require_fantom();
    Object.defineProperty(exports2, "fantom", { enumerable: true, get: function() {
      return fantom_js_1.fantom;
    } });
    var fantomSonicTestnet_js_1 = require_fantomSonicTestnet();
    Object.defineProperty(exports2, "fantomSonicTestnet", { enumerable: true, get: function() {
      return fantomSonicTestnet_js_1.fantomSonicTestnet;
    } });
    var fantomTestnet_js_1 = require_fantomTestnet();
    Object.defineProperty(exports2, "fantomTestnet", { enumerable: true, get: function() {
      return fantomTestnet_js_1.fantomTestnet;
    } });
    var fibo_js_1 = require_fibo();
    Object.defineProperty(exports2, "fibo", { enumerable: true, get: function() {
      return fibo_js_1.fibo;
    } });
    var filecoin_js_1 = require_filecoin();
    Object.defineProperty(exports2, "filecoin", { enumerable: true, get: function() {
      return filecoin_js_1.filecoin;
    } });
    var filecoinCalibration_js_1 = require_filecoinCalibration();
    Object.defineProperty(exports2, "filecoinCalibration", { enumerable: true, get: function() {
      return filecoinCalibration_js_1.filecoinCalibration;
    } });
    var filecoinHyperspace_js_1 = require_filecoinHyperspace();
    Object.defineProperty(exports2, "filecoinHyperspace", { enumerable: true, get: function() {
      return filecoinHyperspace_js_1.filecoinHyperspace;
    } });
    var flare_js_1 = require_flare();
    Object.defineProperty(exports2, "flare", { enumerable: true, get: function() {
      return flare_js_1.flare;
    } });
    var flareTestnet_js_1 = require_flareTestnet();
    Object.defineProperty(exports2, "flareTestnet", { enumerable: true, get: function() {
      return flareTestnet_js_1.flareTestnet;
    } });
    var flowPreviewnet_js_1 = require_flowPreviewnet();
    Object.defineProperty(exports2, "flowPreviewnet", { enumerable: true, get: function() {
      return flowPreviewnet_js_1.flowPreviewnet;
    } });
    var flowMainnet_js_1 = require_flowMainnet();
    Object.defineProperty(exports2, "flowMainnet", { enumerable: true, get: function() {
      return flowMainnet_js_1.flowMainnet;
    } });
    var foundry_js_1 = require_foundry();
    Object.defineProperty(exports2, "foundry", { enumerable: true, get: function() {
      return foundry_js_1.foundry;
    } });
    var fraxtal_js_1 = require_fraxtal();
    Object.defineProperty(exports2, "fraxtal", { enumerable: true, get: function() {
      return fraxtal_js_1.fraxtal;
    } });
    var fraxtalTestnet_js_1 = require_fraxtalTestnet();
    Object.defineProperty(exports2, "fraxtalTestnet", { enumerable: true, get: function() {
      return fraxtalTestnet_js_1.fraxtalTestnet;
    } });
    var fuse_js_1 = require_fuse();
    Object.defineProperty(exports2, "fuse", { enumerable: true, get: function() {
      return fuse_js_1.fuse;
    } });
    var fuseSparknet_js_1 = require_fuseSparknet();
    Object.defineProperty(exports2, "fuseSparknet", { enumerable: true, get: function() {
      return fuseSparknet_js_1.fuseSparknet;
    } });
    var iotex_js_1 = require_iotex();
    Object.defineProperty(exports2, "iotex", { enumerable: true, get: function() {
      return iotex_js_1.iotex;
    } });
    var iotexTestnet_js_1 = require_iotexTestnet();
    Object.defineProperty(exports2, "iotexTestnet", { enumerable: true, get: function() {
      return iotexTestnet_js_1.iotexTestnet;
    } });
    var jbc_js_1 = require_jbc();
    Object.defineProperty(exports2, "jbc", { enumerable: true, get: function() {
      return jbc_js_1.jbc;
    } });
    var karura_js_1 = require_karura();
    Object.defineProperty(exports2, "karura", { enumerable: true, get: function() {
      return karura_js_1.karura;
    } });
    var gobi_js_1 = require_gobi();
    Object.defineProperty(exports2, "gobi", { enumerable: true, get: function() {
      return gobi_js_1.gobi;
    } });
    var goerli_js_1 = require_goerli();
    Object.defineProperty(exports2, "goerli", { enumerable: true, get: function() {
      return goerli_js_1.goerli;
    } });
    var gnosis_js_1 = require_gnosis();
    Object.defineProperty(exports2, "gnosis", { enumerable: true, get: function() {
      return gnosis_js_1.gnosis;
    } });
    var gnosisChiado_js_1 = require_gnosisChiado();
    Object.defineProperty(exports2, "gnosisChiado", { enumerable: true, get: function() {
      return gnosisChiado_js_1.gnosisChiado;
    } });
    var hardhat_js_1 = require_hardhat();
    Object.defineProperty(exports2, "hardhat", { enumerable: true, get: function() {
      return hardhat_js_1.hardhat;
    } });
    var harmonyOne_js_1 = require_harmonyOne();
    Object.defineProperty(exports2, "harmonyOne", { enumerable: true, get: function() {
      return harmonyOne_js_1.harmonyOne;
    } });
    var haqqMainnet_js_1 = require_haqqMainnet();
    Object.defineProperty(exports2, "haqqMainnet", { enumerable: true, get: function() {
      return haqqMainnet_js_1.haqqMainnet;
    } });
    var haqqTestedge2_js_1 = require_haqqTestedge2();
    Object.defineProperty(exports2, "haqqTestedge2", { enumerable: true, get: function() {
      return haqqTestedge2_js_1.haqqTestedge2;
    } });
    var hedera_js_1 = require_hedera();
    Object.defineProperty(exports2, "hedera", { enumerable: true, get: function() {
      return hedera_js_1.hedera;
    } });
    var hederaTestnet_js_1 = require_hederaTestnet();
    Object.defineProperty(exports2, "hederaTestnet", { enumerable: true, get: function() {
      return hederaTestnet_js_1.hederaTestnet;
    } });
    var hederaPreviewnet_js_1 = require_hederaPreviewnet();
    Object.defineProperty(exports2, "hederaPreviewnet", { enumerable: true, get: function() {
      return hederaPreviewnet_js_1.hederaPreviewnet;
    } });
    var holesky_js_1 = require_holesky();
    Object.defineProperty(exports2, "holesky", { enumerable: true, get: function() {
      return holesky_js_1.holesky;
    } });
    var immutableZkEvm_js_1 = require_immutableZkEvm();
    Object.defineProperty(exports2, "immutableZkEvm", { enumerable: true, get: function() {
      return immutableZkEvm_js_1.immutableZkEvm;
    } });
    var immutableZkEvmTestnet_js_1 = require_immutableZkEvmTestnet();
    Object.defineProperty(exports2, "immutableZkEvmTestnet", { enumerable: true, get: function() {
      return immutableZkEvmTestnet_js_1.immutableZkEvmTestnet;
    } });
    var kakarotSepolia_js_1 = require_kakarotSepolia();
    Object.defineProperty(exports2, "kakarotSepolia", { enumerable: true, get: function() {
      return kakarotSepolia_js_1.kakarotSepolia;
    } });
    var kava_js_1 = require_kava();
    Object.defineProperty(exports2, "kava", { enumerable: true, get: function() {
      return kava_js_1.kava;
    } });
    var kavaTestnet_js_1 = require_kavaTestnet();
    Object.defineProperty(exports2, "kavaTestnet", { enumerable: true, get: function() {
      return kavaTestnet_js_1.kavaTestnet;
    } });
    var kcc_js_1 = require_kcc();
    Object.defineProperty(exports2, "kcc", { enumerable: true, get: function() {
      return kcc_js_1.kcc;
    } });
    var klaytn_js_1 = require_klaytn();
    Object.defineProperty(exports2, "klaytn", { enumerable: true, get: function() {
      return klaytn_js_1.klaytn;
    } });
    var klaytnBaobab_js_1 = require_klaytnBaobab();
    Object.defineProperty(exports2, "klaytnBaobab", { enumerable: true, get: function() {
      return klaytnBaobab_js_1.klaytnBaobab;
    } });
    var kroma_js_1 = require_kroma();
    Object.defineProperty(exports2, "kroma", { enumerable: true, get: function() {
      return kroma_js_1.kroma;
    } });
    var kromaSepolia_js_1 = require_kromaSepolia();
    Object.defineProperty(exports2, "kromaSepolia", { enumerable: true, get: function() {
      return kromaSepolia_js_1.kromaSepolia;
    } });
    var lightlinkPegasus_js_1 = require_lightlinkPegasus();
    Object.defineProperty(exports2, "lightlinkPegasus", { enumerable: true, get: function() {
      return lightlinkPegasus_js_1.lightlinkPegasus;
    } });
    var lightlinkPhoenix_js_1 = require_lightlinkPhoenix();
    Object.defineProperty(exports2, "lightlinkPhoenix", { enumerable: true, get: function() {
      return lightlinkPhoenix_js_1.lightlinkPhoenix;
    } });
    var linea_js_1 = require_linea();
    Object.defineProperty(exports2, "linea", { enumerable: true, get: function() {
      return linea_js_1.linea;
    } });
    var lineaGoerli_js_1 = require_lineaGoerli();
    Object.defineProperty(exports2, "lineaGoerli", { enumerable: true, get: function() {
      return lineaGoerli_js_1.lineaGoerli;
    } });
    var lineaSepolia_js_1 = require_lineaSepolia();
    Object.defineProperty(exports2, "lineaSepolia", { enumerable: true, get: function() {
      return lineaSepolia_js_1.lineaSepolia;
    } });
    var lineaTestnet_js_1 = require_lineaTestnet();
    Object.defineProperty(exports2, "lineaTestnet", { enumerable: true, get: function() {
      return lineaTestnet_js_1.lineaTestnet;
    } });
    var liskSepolia_js_1 = require_liskSepolia();
    Object.defineProperty(exports2, "liskSepolia", { enumerable: true, get: function() {
      return liskSepolia_js_1.liskSepolia;
    } });
    var localhost_js_1 = require_localhost();
    Object.defineProperty(exports2, "localhost", { enumerable: true, get: function() {
      return localhost_js_1.localhost;
    } });
    var lukso_js_1 = require_lukso();
    Object.defineProperty(exports2, "lukso", { enumerable: true, get: function() {
      return lukso_js_1.lukso;
    } });
    var luksoTestnet_js_1 = require_luksoTestnet();
    Object.defineProperty(exports2, "luksoTestnet", { enumerable: true, get: function() {
      return luksoTestnet_js_1.luksoTestnet;
    } });
    var mainnet_js_1 = require_mainnet();
    Object.defineProperty(exports2, "mainnet", { enumerable: true, get: function() {
      return mainnet_js_1.mainnet;
    } });
    var mandala_js_1 = require_mandala();
    Object.defineProperty(exports2, "mandala", { enumerable: true, get: function() {
      return mandala_js_1.mandala;
    } });
    var manta_js_1 = require_manta();
    Object.defineProperty(exports2, "manta", { enumerable: true, get: function() {
      return manta_js_1.manta;
    } });
    var mantaSepoliaTestnet_js_1 = require_mantaSepoliaTestnet();
    Object.defineProperty(exports2, "mantaSepoliaTestnet", { enumerable: true, get: function() {
      return mantaSepoliaTestnet_js_1.mantaSepoliaTestnet;
    } });
    var mantaTestnet_js_1 = require_mantaTestnet();
    Object.defineProperty(exports2, "mantaTestnet", { enumerable: true, get: function() {
      return mantaTestnet_js_1.mantaTestnet;
    } });
    var mantle_js_1 = require_mantle();
    Object.defineProperty(exports2, "mantle", { enumerable: true, get: function() {
      return mantle_js_1.mantle;
    } });
    var mantleSepoliaTestnet_js_1 = require_mantleSepoliaTestnet();
    Object.defineProperty(exports2, "mantleSepoliaTestnet", { enumerable: true, get: function() {
      return mantleSepoliaTestnet_js_1.mantleSepoliaTestnet;
    } });
    var mantleTestnet_js_1 = require_mantleTestnet();
    Object.defineProperty(exports2, "mantleTestnet", { enumerable: true, get: function() {
      return mantleTestnet_js_1.mantleTestnet;
    } });
    var merlin_js_1 = require_merlin();
    Object.defineProperty(exports2, "merlin", { enumerable: true, get: function() {
      return merlin_js_1.merlin;
    } });
    var metachain_js_1 = require_metachain();
    Object.defineProperty(exports2, "metachain", { enumerable: true, get: function() {
      return metachain_js_1.metachain;
    } });
    var metachainIstanbul_js_1 = require_metachainIstanbul();
    Object.defineProperty(exports2, "metachainIstanbul", { enumerable: true, get: function() {
      return metachainIstanbul_js_1.metachainIstanbul;
    } });
    var meter_js_1 = require_meter();
    Object.defineProperty(exports2, "meter", { enumerable: true, get: function() {
      return meter_js_1.meter;
    } });
    var meterTestnet_js_1 = require_meterTestnet();
    Object.defineProperty(exports2, "meterTestnet", { enumerable: true, get: function() {
      return meterTestnet_js_1.meterTestnet;
    } });
    var metis_js_1 = require_metis();
    Object.defineProperty(exports2, "metis", { enumerable: true, get: function() {
      return metis_js_1.metis;
    } });
    var metisGoerli_js_1 = require_metisGoerli();
    Object.defineProperty(exports2, "metisGoerli", { enumerable: true, get: function() {
      return metisGoerli_js_1.metisGoerli;
    } });
    var mev_js_1 = require_mev();
    Object.defineProperty(exports2, "mev", { enumerable: true, get: function() {
      return mev_js_1.mev;
    } });
    var mevTestnet_js_1 = require_mevTestnet();
    Object.defineProperty(exports2, "mevTestnet", { enumerable: true, get: function() {
      return mevTestnet_js_1.mevTestnet;
    } });
    var mintSepoliaTestnet_js_1 = require_mintSepoliaTestnet();
    Object.defineProperty(exports2, "mintSepoliaTestnet", { enumerable: true, get: function() {
      return mintSepoliaTestnet_js_1.mintSepoliaTestnet;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports2, "mode", { enumerable: true, get: function() {
      return mode_js_1.mode;
    } });
    var modeTestnet_js_1 = require_modeTestnet();
    Object.defineProperty(exports2, "modeTestnet", { enumerable: true, get: function() {
      return modeTestnet_js_1.modeTestnet;
    } });
    var moonbaseAlpha_js_1 = require_moonbaseAlpha();
    Object.defineProperty(exports2, "moonbaseAlpha", { enumerable: true, get: function() {
      return moonbaseAlpha_js_1.moonbaseAlpha;
    } });
    var moonbeam_js_1 = require_moonbeam();
    Object.defineProperty(exports2, "moonbeam", { enumerable: true, get: function() {
      return moonbeam_js_1.moonbeam;
    } });
    var moonbeamDev_js_1 = require_moonbeamDev();
    Object.defineProperty(exports2, "moonbeamDev", { enumerable: true, get: function() {
      return moonbeamDev_js_1.moonbeamDev;
    } });
    var moonriver_js_1 = require_moonriver();
    Object.defineProperty(exports2, "moonriver", { enumerable: true, get: function() {
      return moonriver_js_1.moonriver;
    } });
    var morphSepolia_js_1 = require_morphSepolia();
    Object.defineProperty(exports2, "morphSepolia", { enumerable: true, get: function() {
      return morphSepolia_js_1.morphSepolia;
    } });
    var neonDevnet_js_1 = require_neonDevnet();
    Object.defineProperty(exports2, "neonDevnet", { enumerable: true, get: function() {
      return neonDevnet_js_1.neonDevnet;
    } });
    var neonMainnet_js_1 = require_neonMainnet();
    Object.defineProperty(exports2, "neonMainnet", { enumerable: true, get: function() {
      return neonMainnet_js_1.neonMainnet;
    } });
    var nexi_js_1 = require_nexi();
    Object.defineProperty(exports2, "nexi", { enumerable: true, get: function() {
      return nexi_js_1.nexi;
    } });
    var nexilix_js_1 = require_nexilix();
    Object.defineProperty(exports2, "nexilix", { enumerable: true, get: function() {
      return nexilix_js_1.nexilix;
    } });
    var oasys_js_1 = require_oasys();
    Object.defineProperty(exports2, "oasys", { enumerable: true, get: function() {
      return oasys_js_1.oasys;
    } });
    var oasisTestnet_js_1 = require_oasisTestnet();
    Object.defineProperty(exports2, "oasisTestnet", { enumerable: true, get: function() {
      return oasisTestnet_js_1.oasisTestnet;
    } });
    var okc_js_1 = require_okc();
    Object.defineProperty(exports2, "okc", { enumerable: true, get: function() {
      return okc_js_1.okc;
    } });
    var optimism_js_1 = require_optimism();
    Object.defineProperty(exports2, "optimism", { enumerable: true, get: function() {
      return optimism_js_1.optimism;
    } });
    var optimismGoerli_js_1 = require_optimismGoerli();
    Object.defineProperty(exports2, "optimismGoerli", { enumerable: true, get: function() {
      return optimismGoerli_js_1.optimismGoerli;
    } });
    var optimismSepolia_js_1 = require_optimismSepolia();
    Object.defineProperty(exports2, "optimismSepolia", { enumerable: true, get: function() {
      return optimismSepolia_js_1.optimismSepolia;
    } });
    var opBNB_js_1 = require_opBNB();
    Object.defineProperty(exports2, "opBNB", { enumerable: true, get: function() {
      return opBNB_js_1.opBNB;
    } });
    var opBNBTestnet_js_1 = require_opBNBTestnet();
    Object.defineProperty(exports2, "opBNBTestnet", { enumerable: true, get: function() {
      return opBNBTestnet_js_1.opBNBTestnet;
    } });
    var oortmainnetDev_js_1 = require_oortmainnetDev();
    Object.defineProperty(exports2, "oortMainnetDev", { enumerable: true, get: function() {
      return oortmainnetDev_js_1.oortMainnetDev;
    } });
    var palm_js_1 = require_palm();
    Object.defineProperty(exports2, "palm", { enumerable: true, get: function() {
      return palm_js_1.palm;
    } });
    var palmTestnet_js_1 = require_palmTestnet();
    Object.defineProperty(exports2, "palmTestnet", { enumerable: true, get: function() {
      return palmTestnet_js_1.palmTestnet;
    } });
    var playfiAlbireo_js_1 = require_playfiAlbireo();
    Object.defineProperty(exports2, "playfiAlbireo", { enumerable: true, get: function() {
      return playfiAlbireo_js_1.playfiAlbireo;
    } });
    var pgn_js_1 = require_pgn();
    Object.defineProperty(exports2, "pgn", { enumerable: true, get: function() {
      return pgn_js_1.pgn;
    } });
    var pgnTestnet_js_1 = require_pgnTestnet();
    Object.defineProperty(exports2, "pgnTestnet", { enumerable: true, get: function() {
      return pgnTestnet_js_1.pgnTestnet;
    } });
    var phoenix_js_1 = require_phoenix();
    Object.defineProperty(exports2, "phoenix", { enumerable: true, get: function() {
      return phoenix_js_1.phoenix;
    } });
    var plinga_js_1 = require_plinga();
    Object.defineProperty(exports2, "plinga", { enumerable: true, get: function() {
      return plinga_js_1.plinga;
    } });
    var plumeTestnet_js_1 = require_plumeTestnet();
    Object.defineProperty(exports2, "plumeTestnet", { enumerable: true, get: function() {
      return plumeTestnet_js_1.plumeTestnet;
    } });
    var polygon_js_1 = require_polygon();
    Object.defineProperty(exports2, "polygon", { enumerable: true, get: function() {
      return polygon_js_1.polygon;
    } });
    var polygonAmoy_js_1 = require_polygonAmoy();
    Object.defineProperty(exports2, "polygonAmoy", { enumerable: true, get: function() {
      return polygonAmoy_js_1.polygonAmoy;
    } });
    var polygonMumbai_js_1 = require_polygonMumbai();
    Object.defineProperty(exports2, "polygonMumbai", { enumerable: true, get: function() {
      return polygonMumbai_js_1.polygonMumbai;
    } });
    var polygonZkEvm_js_1 = require_polygonZkEvm();
    Object.defineProperty(exports2, "polygonZkEvm", { enumerable: true, get: function() {
      return polygonZkEvm_js_1.polygonZkEvm;
    } });
    var polygonZkEvmCardona_js_1 = require_polygonZkEvmCardona();
    Object.defineProperty(exports2, "polygonZkEvmCardona", { enumerable: true, get: function() {
      return polygonZkEvmCardona_js_1.polygonZkEvmCardona;
    } });
    var polygonZkEvmTestnet_js_1 = require_polygonZkEvmTestnet();
    Object.defineProperty(exports2, "polygonZkEvmTestnet", { enumerable: true, get: function() {
      return polygonZkEvmTestnet_js_1.polygonZkEvmTestnet;
    } });
    var pulsechain_js_1 = require_pulsechain();
    Object.defineProperty(exports2, "pulsechain", { enumerable: true, get: function() {
      return pulsechain_js_1.pulsechain;
    } });
    var pulsechainV4_js_1 = require_pulsechainV4();
    Object.defineProperty(exports2, "pulsechainV4", { enumerable: true, get: function() {
      return pulsechainV4_js_1.pulsechainV4;
    } });
    var qMainnet_js_1 = require_qMainnet();
    Object.defineProperty(exports2, "qMainnet", { enumerable: true, get: function() {
      return qMainnet_js_1.qMainnet;
    } });
    var qTestnet_js_1 = require_qTestnet();
    Object.defineProperty(exports2, "qTestnet", { enumerable: true, get: function() {
      return qTestnet_js_1.qTestnet;
    } });
    var reyaNetwork_js_1 = require_reyaNetwork();
    Object.defineProperty(exports2, "reyaNetwork", { enumerable: true, get: function() {
      return reyaNetwork_js_1.reyaNetwork;
    } });
    var rollux_js_1 = require_rollux();
    Object.defineProperty(exports2, "rollux", { enumerable: true, get: function() {
      return rollux_js_1.rollux;
    } });
    var rolluxTestnet_js_1 = require_rolluxTestnet();
    Object.defineProperty(exports2, "rolluxTestnet", { enumerable: true, get: function() {
      return rolluxTestnet_js_1.rolluxTestnet;
    } });
    var ronin_js_1 = require_ronin();
    Object.defineProperty(exports2, "ronin", { enumerable: true, get: function() {
      return ronin_js_1.ronin;
    } });
    var rootstock_js_1 = require_rootstock();
    Object.defineProperty(exports2, "rootstock", { enumerable: true, get: function() {
      return rootstock_js_1.rootstock;
    } });
    var rss3_js_1 = require_rss3();
    Object.defineProperty(exports2, "rss3", { enumerable: true, get: function() {
      return rss3_js_1.rss3;
    } });
    var rss3Sepolia_js_1 = require_rss3Sepolia();
    Object.defineProperty(exports2, "rss3Sepolia", { enumerable: true, get: function() {
      return rss3Sepolia_js_1.rss3Sepolia;
    } });
    var saigon_js_1 = require_saigon();
    Object.defineProperty(exports2, "saigon", { enumerable: true, get: function() {
      return saigon_js_1.saigon;
    } });
    var sapphire_js_1 = require_sapphire();
    Object.defineProperty(exports2, "sapphire", { enumerable: true, get: function() {
      return sapphire_js_1.sapphire;
    } });
    var sapphireTestnet_js_1 = require_sapphireTestnet();
    Object.defineProperty(exports2, "sapphireTestnet", { enumerable: true, get: function() {
      return sapphireTestnet_js_1.sapphireTestnet;
    } });
    var scroll_js_1 = require_scroll();
    Object.defineProperty(exports2, "scroll", { enumerable: true, get: function() {
      return scroll_js_1.scroll;
    } });
    var scrollSepolia_js_1 = require_scrollSepolia();
    Object.defineProperty(exports2, "scrollSepolia", { enumerable: true, get: function() {
      return scrollSepolia_js_1.scrollSepolia;
    } });
    var scrollTestnet_js_1 = require_scrollTestnet();
    Object.defineProperty(exports2, "scrollTestnet", { enumerable: true, get: function() {
      return scrollTestnet_js_1.scrollTestnet;
    } });
    var seiDevnet_js_1 = require_seiDevnet();
    Object.defineProperty(exports2, "seiDevnet", { enumerable: true, get: function() {
      return seiDevnet_js_1.seiDevnet;
    } });
    var sepolia_js_1 = require_sepolia();
    Object.defineProperty(exports2, "sepolia", { enumerable: true, get: function() {
      return sepolia_js_1.sepolia;
    } });
    var shimmer_js_1 = require_shimmer();
    Object.defineProperty(exports2, "shimmer", { enumerable: true, get: function() {
      return shimmer_js_1.shimmer;
    } });
    var shimmerTestnet_js_1 = require_shimmerTestnet();
    Object.defineProperty(exports2, "shimmerTestnet", { enumerable: true, get: function() {
      return shimmerTestnet_js_1.shimmerTestnet;
    } });
    var brawl_js_1 = require_brawl();
    Object.defineProperty(exports2, "skaleBlockBrawlers", { enumerable: true, get: function() {
      return brawl_js_1.skaleBlockBrawlers;
    } });
    var calypso_js_1 = require_calypso();
    Object.defineProperty(exports2, "skaleCalypso", { enumerable: true, get: function() {
      return calypso_js_1.skaleCalypso;
    } });
    var calypsoTestnet_js_1 = require_calypsoTestnet();
    Object.defineProperty(exports2, "skaleCalypsoTestnet", { enumerable: true, get: function() {
      return calypsoTestnet_js_1.skaleCalypsoTestnet;
    } });
    var cryptoBlades_js_1 = require_cryptoBlades();
    Object.defineProperty(exports2, "skaleCryptoBlades", { enumerable: true, get: function() {
      return cryptoBlades_js_1.skaleCryptoBlades;
    } });
    var cryptoColosseum_js_1 = require_cryptoColosseum();
    Object.defineProperty(exports2, "skaleCryptoColosseum", { enumerable: true, get: function() {
      return cryptoColosseum_js_1.skaleCryptoColosseum;
    } });
    var europa_js_1 = require_europa();
    Object.defineProperty(exports2, "skaleEuropa", { enumerable: true, get: function() {
      return europa_js_1.skaleEuropa;
    } });
    var europaTestnet_js_1 = require_europaTestnet();
    Object.defineProperty(exports2, "skaleEuropaTestnet", { enumerable: true, get: function() {
      return europaTestnet_js_1.skaleEuropaTestnet;
    } });
    var exorde_js_1 = require_exorde();
    Object.defineProperty(exports2, "skaleExorde", { enumerable: true, get: function() {
      return exorde_js_1.skaleExorde;
    } });
    var humanProtocol_js_1 = require_humanProtocol();
    Object.defineProperty(exports2, "skaleHumanProtocol", { enumerable: true, get: function() {
      return humanProtocol_js_1.skaleHumanProtocol;
    } });
    var nebula_js_1 = require_nebula();
    Object.defineProperty(exports2, "skaleNebula", { enumerable: true, get: function() {
      return nebula_js_1.skaleNebula;
    } });
    var nebulaTestnet_js_1 = require_nebulaTestnet();
    Object.defineProperty(exports2, "skaleNebulaTestnet", { enumerable: true, get: function() {
      return nebulaTestnet_js_1.skaleNebulaTestnet;
    } });
    var razor_js_1 = require_razor();
    Object.defineProperty(exports2, "skaleRazor", { enumerable: true, get: function() {
      return razor_js_1.skaleRazor;
    } });
    var titan_js_1 = require_titan();
    Object.defineProperty(exports2, "skaleTitan", { enumerable: true, get: function() {
      return titan_js_1.skaleTitan;
    } });
    var titanTestnet_js_1 = require_titanTestnet();
    Object.defineProperty(exports2, "skaleTitanTestnet", { enumerable: true, get: function() {
      return titanTestnet_js_1.skaleTitanTestnet;
    } });
    var songbird_js_1 = require_songbird();
    Object.defineProperty(exports2, "songbird", { enumerable: true, get: function() {
      return songbird_js_1.songbird;
    } });
    var songbirdTestnet_js_1 = require_songbirdTestnet();
    Object.defineProperty(exports2, "songbirdTestnet", { enumerable: true, get: function() {
      return songbirdTestnet_js_1.songbirdTestnet;
    } });
    var spicy_js_1 = require_spicy();
    Object.defineProperty(exports2, "spicy", { enumerable: true, get: function() {
      return spicy_js_1.spicy;
    } });
    var shardeumSphinx_js_1 = require_shardeumSphinx();
    Object.defineProperty(exports2, "shardeumSphinx", { enumerable: true, get: function() {
      return shardeumSphinx_js_1.shardeumSphinx;
    } });
    var shibarium_js_1 = require_shibarium();
    Object.defineProperty(exports2, "shibarium", { enumerable: true, get: function() {
      return shibarium_js_1.shibarium;
    } });
    var stratis_js_1 = require_stratis();
    Object.defineProperty(exports2, "stratis", { enumerable: true, get: function() {
      return stratis_js_1.stratis;
    } });
    var syscoin_js_1 = require_syscoin();
    Object.defineProperty(exports2, "syscoin", { enumerable: true, get: function() {
      return syscoin_js_1.syscoin;
    } });
    var syscoinTestnet_js_1 = require_syscoinTestnet();
    Object.defineProperty(exports2, "syscoinTestnet", { enumerable: true, get: function() {
      return syscoinTestnet_js_1.syscoinTestnet;
    } });
    var taraxa_js_1 = require_taraxa();
    Object.defineProperty(exports2, "taraxa", { enumerable: true, get: function() {
      return taraxa_js_1.taraxa;
    } });
    var taikoHekla_js_1 = require_taikoHekla();
    Object.defineProperty(exports2, "taikoHekla", { enumerable: true, get: function() {
      return taikoHekla_js_1.taikoHekla;
    } });
    var taikoJolnir_js_1 = require_taikoJolnir();
    Object.defineProperty(exports2, "taikoJolnir", { enumerable: true, get: function() {
      return taikoJolnir_js_1.taikoJolnir;
    } });
    var taikoKatla_js_1 = require_taikoKatla();
    Object.defineProperty(exports2, "taikoKatla", { enumerable: true, get: function() {
      return taikoKatla_js_1.taikoKatla;
    } });
    var taikoTestnetSepolia_js_1 = require_taikoTestnetSepolia();
    Object.defineProperty(exports2, "taikoTestnetSepolia", { enumerable: true, get: function() {
      return taikoTestnetSepolia_js_1.taikoTestnetSepolia;
    } });
    var taraxaTestnet_js_1 = require_taraxaTestnet();
    Object.defineProperty(exports2, "taraxaTestnet", { enumerable: true, get: function() {
      return taraxaTestnet_js_1.taraxaTestnet;
    } });
    var telos_js_1 = require_telos();
    Object.defineProperty(exports2, "telos", { enumerable: true, get: function() {
      return telos_js_1.telos;
    } });
    var telosTestnet_js_1 = require_telosTestnet();
    Object.defineProperty(exports2, "telosTestnet", { enumerable: true, get: function() {
      return telosTestnet_js_1.telosTestnet;
    } });
    var tenet_js_1 = require_tenet();
    Object.defineProperty(exports2, "tenet", { enumerable: true, get: function() {
      return tenet_js_1.tenet;
    } });
    var thunderTestnet_js_1 = require_thunderTestnet();
    Object.defineProperty(exports2, "thunderTestnet", { enumerable: true, get: function() {
      return thunderTestnet_js_1.thunderTestnet;
    } });
    var vechain_js_1 = require_vechain();
    Object.defineProperty(exports2, "vechain", { enumerable: true, get: function() {
      return vechain_js_1.vechain;
    } });
    var wanchain_js_1 = require_wanchain();
    Object.defineProperty(exports2, "wanchain", { enumerable: true, get: function() {
      return wanchain_js_1.wanchain;
    } });
    var wanchainTestnet_js_1 = require_wanchainTestnet();
    Object.defineProperty(exports2, "wanchainTestnet", { enumerable: true, get: function() {
      return wanchainTestnet_js_1.wanchainTestnet;
    } });
    var wemix_js_1 = require_wemix();
    Object.defineProperty(exports2, "wemix", { enumerable: true, get: function() {
      return wemix_js_1.wemix;
    } });
    var wemixTestnet_js_1 = require_wemixTestnet();
    Object.defineProperty(exports2, "wemixTestnet", { enumerable: true, get: function() {
      return wemixTestnet_js_1.wemixTestnet;
    } });
    var x1Testnet_js_1 = require_x1Testnet();
    Object.defineProperty(exports2, "x1Testnet", { enumerable: true, get: function() {
      return x1Testnet_js_1.x1Testnet;
    } });
    var xdc_js_1 = require_xdc();
    Object.defineProperty(exports2, "xdc", { enumerable: true, get: function() {
      return xdc_js_1.xdc;
    } });
    var xdcTestnet_js_1 = require_xdcTestnet();
    Object.defineProperty(exports2, "xdcTestnet", { enumerable: true, get: function() {
      return xdcTestnet_js_1.xdcTestnet;
    } });
    var zetachain_js_1 = require_zetachain();
    Object.defineProperty(exports2, "zetachain", { enumerable: true, get: function() {
      return zetachain_js_1.zetachain;
    } });
    var zetachainAthensTestnet_js_1 = require_zetachainAthensTestnet();
    Object.defineProperty(exports2, "zetachainAthensTestnet", { enumerable: true, get: function() {
      return zetachainAthensTestnet_js_1.zetachainAthensTestnet;
    } });
    var zhejiang_js_1 = require_zhejiang();
    Object.defineProperty(exports2, "zhejiang", { enumerable: true, get: function() {
      return zhejiang_js_1.zhejiang;
    } });
    var zilliqa_js_1 = require_zilliqa();
    Object.defineProperty(exports2, "zilliqa", { enumerable: true, get: function() {
      return zilliqa_js_1.zilliqa;
    } });
    var zilliqaTestnet_js_1 = require_zilliqaTestnet();
    Object.defineProperty(exports2, "zilliqaTestnet", { enumerable: true, get: function() {
      return zilliqaTestnet_js_1.zilliqaTestnet;
    } });
    var zkFair_js_1 = require_zkFair();
    Object.defineProperty(exports2, "zkFair", { enumerable: true, get: function() {
      return zkFair_js_1.zkFair;
    } });
    var zkFairTestnet_js_1 = require_zkFairTestnet();
    Object.defineProperty(exports2, "zkFairTestnet", { enumerable: true, get: function() {
      return zkFairTestnet_js_1.zkFairTestnet;
    } });
    var zkSync_js_1 = require_zkSync();
    Object.defineProperty(exports2, "zkSync", { enumerable: true, get: function() {
      return zkSync_js_1.zkSync;
    } });
    var zkSyncInMemoryNode_js_1 = require_zkSyncInMemoryNode();
    Object.defineProperty(exports2, "zkSyncInMemoryNode", { enumerable: true, get: function() {
      return zkSyncInMemoryNode_js_1.zkSyncInMemoryNode;
    } });
    var zkSyncLocalNode_js_1 = require_zkSyncLocalNode();
    Object.defineProperty(exports2, "zkSyncLocalNode", { enumerable: true, get: function() {
      return zkSyncLocalNode_js_1.zkSyncLocalNode;
    } });
    var zkSyncSepoliaTestnet_js_1 = require_zkSyncSepoliaTestnet();
    Object.defineProperty(exports2, "zkSyncSepoliaTestnet", { enumerable: true, get: function() {
      return zkSyncSepoliaTestnet_js_1.zkSyncSepoliaTestnet;
    } });
    var zkSyncTestnet_js_1 = require_zkSyncTestnet();
    Object.defineProperty(exports2, "zkSyncTestnet", { enumerable: true, get: function() {
      return zkSyncTestnet_js_1.zkSyncTestnet;
    } });
    var zora_js_1 = require_zora();
    Object.defineProperty(exports2, "zora", { enumerable: true, get: function() {
      return zora_js_1.zora;
    } });
    var zoraSepolia_js_1 = require_zoraSepolia();
    Object.defineProperty(exports2, "zoraSepolia", { enumerable: true, get: function() {
      return zoraSepolia_js_1.zoraSepolia;
    } });
    var zoraTestnet_js_1 = require_zoraTestnet();
    Object.defineProperty(exports2, "zoraTestnet", { enumerable: true, get: function() {
      return zoraTestnet_js_1.zoraTestnet;
    } });
  });
  var require_validation_error = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ValidationError = void 0;
    class ValidationError extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace && typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, this.constructor);
        }
      }
      static createFrom(message) {
        return new this(message);
      }
    }
    exports2.ValidationError = ValidationError;
  });
  var require_promise_pool_error = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromisePoolError = void 0;
    class PromisePoolError extends Error {
      constructor(error, item) {
        super();
        this.raw = error;
        this.item = item;
        this.name = this.constructor.name;
        this.message = this.messageFrom(error);
        if (Error.captureStackTrace && typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, this.constructor);
        }
      }
      static createFrom(error, item) {
        return new this(error, item);
      }
      messageFrom(error) {
        if (error instanceof Error) {
          return error.message;
        }
        if (typeof error === "object") {
          return error.message;
        }
        if (typeof error === "string" || typeof error === "number") {
          return error.toString();
        }
        return "";
      }
    }
    exports2.PromisePoolError = PromisePoolError;
  });
  var require_stop_the_promise_pool_error = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StopThePromisePoolError = void 0;
    class StopThePromisePoolError extends Error {
    }
    exports2.StopThePromisePoolError = StopThePromisePoolError;
  });
  var require_promise_pool_executor = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromisePoolExecutor = void 0;
    var promise_pool_1 = require_promise_pool();
    var validation_error_1 = require_validation_error();
    var promise_pool_error_1 = require_promise_pool_error();
    var stop_the_promise_pool_error_1 = require_stop_the_promise_pool_error();
    class PromisePoolExecutor {
      constructor() {
        this.meta = {
          tasks: [],
          items: [],
          errors: [],
          results: [],
          stopped: false,
          concurrency: 10,
          shouldResultsCorrespond: false,
          processedItems: [],
          taskTimeout: 0
        };
        this.handler = (item) => item;
        this.errorHandler = void 0;
        this.onTaskStartedHandlers = [];
        this.onTaskFinishedHandlers = [];
      }
      useConcurrency(concurrency) {
        if (!this.isValidConcurrency(concurrency)) {
          throw validation_error_1.ValidationError.createFrom(`"concurrency" must be a number, 1 or up. Received "${concurrency}" (${typeof concurrency})`);
        }
        this.meta.concurrency = concurrency;
        return this;
      }
      isValidConcurrency(concurrency) {
        return typeof concurrency === "number" && concurrency >= 1;
      }
      withTaskTimeout(timeout) {
        this.meta.taskTimeout = timeout;
        return this;
      }
      concurrency() {
        return this.meta.concurrency;
      }
      useCorrespondingResults(shouldResultsCorrespond) {
        this.meta.shouldResultsCorrespond = shouldResultsCorrespond;
        return this;
      }
      shouldUseCorrespondingResults() {
        return this.meta.shouldResultsCorrespond;
      }
      taskTimeout() {
        return this.meta.taskTimeout;
      }
      for(items) {
        this.meta.items = items;
        return this;
      }
      items() {
        return this.meta.items;
      }
      itemsCount() {
        const items = this.items();
        return Array.isArray(items) ? items.length : NaN;
      }
      tasks() {
        return this.meta.tasks;
      }
      activeTaskCount() {
        return this.activeTasksCount();
      }
      activeTasksCount() {
        return this.tasks().length;
      }
      processedItems() {
        return this.meta.processedItems;
      }
      processedCount() {
        return this.processedItems().length;
      }
      processedPercentage() {
        return this.processedCount() / this.itemsCount() * 100;
      }
      results() {
        return this.meta.results;
      }
      errors() {
        return this.meta.errors;
      }
      withHandler(action) {
        this.handler = action;
        return this;
      }
      hasErrorHandler() {
        return !!this.errorHandler;
      }
      handleError(handler) {
        this.errorHandler = handler;
        return this;
      }
      onTaskStarted(handlers) {
        this.onTaskStartedHandlers = handlers;
        return this;
      }
      onTaskFinished(handlers) {
        this.onTaskFinishedHandlers = handlers;
        return this;
      }
      hasReachedConcurrencyLimit() {
        return this.activeTasksCount() >= this.concurrency();
      }
      stop() {
        this.markAsStopped();
        throw new stop_the_promise_pool_error_1.StopThePromisePoolError();
      }
      markAsStopped() {
        this.meta.stopped = true;
        return this;
      }
      isStopped() {
        return this.meta.stopped;
      }
      async start() {
        return await this.validateInputs().prepareResultsArray().process();
      }
      validateInputs() {
        if (typeof this.handler !== "function") {
          throw validation_error_1.ValidationError.createFrom("The first parameter for the .process(fn) method must be a function");
        }
        const timeout = this.taskTimeout();
        if (!(timeout == null || typeof timeout === "number" && timeout >= 0)) {
          throw validation_error_1.ValidationError.createFrom(`"timeout" must be undefined or a number. A number must be 0 or up. Received "${String(timeout)}" (${typeof timeout})`);
        }
        if (!this.areItemsValid()) {
          throw validation_error_1.ValidationError.createFrom(`"items" must be an array, an iterable or an async iterable. Received "${typeof this.items()}"`);
        }
        if (this.errorHandler && typeof this.errorHandler !== "function") {
          throw validation_error_1.ValidationError.createFrom(`The error handler must be a function. Received "${typeof this.errorHandler}"`);
        }
        this.onTaskStartedHandlers.forEach((handler) => {
          if (handler && typeof handler !== "function") {
            throw validation_error_1.ValidationError.createFrom(`The onTaskStarted handler must be a function. Received "${typeof handler}"`);
          }
        });
        this.onTaskFinishedHandlers.forEach((handler) => {
          if (handler && typeof handler !== "function") {
            throw validation_error_1.ValidationError.createFrom(`The error handler must be a function. Received "${typeof handler}"`);
          }
        });
        return this;
      }
      areItemsValid() {
        const items = this.items();
        if (Array.isArray(items))
          return true;
        if (typeof items[Symbol.iterator] === "function")
          return true;
        if (typeof items[Symbol.asyncIterator] === "function")
          return true;
        return false;
      }
      prepareResultsArray() {
        const items = this.items();
        if (!Array.isArray(items))
          return this;
        if (!this.shouldUseCorrespondingResults())
          return this;
        this.meta.results = Array(items.length).fill(promise_pool_1.PromisePool.notRun);
        return this;
      }
      async process() {
        let index2 = 0;
        for await (const item of this.items()) {
          if (this.isStopped()) {
            break;
          }
          if (this.shouldUseCorrespondingResults()) {
            this.results()[index2] = promise_pool_1.PromisePool.notRun;
          }
          this.startProcessing(item, index2);
          index2 += 1;
          await this.waitForProcessingSlot();
        }
        return await this.drained();
      }
      async waitForProcessingSlot() {
        while (this.hasReachedConcurrencyLimit()) {
          await this.waitForActiveTaskToFinish();
        }
      }
      async waitForActiveTaskToFinish() {
        await Promise.race(this.tasks());
      }
      startProcessing(item, index2) {
        const task = this.createTaskFor(item, index2).then((result) => {
          this.save(result, index2).removeActive(task);
        }).catch(async (error) => {
          await this.handleErrorFor(error, item, index2);
          this.removeActive(task);
        }).finally(() => {
          this.processedItems().push(item);
          this.runOnTaskFinishedHandlers(item);
        });
        this.tasks().push(task);
        this.runOnTaskStartedHandlers(item);
      }
      async createTaskFor(item, index2) {
        if (this.taskTimeout() === void 0) {
          return this.handler(item, index2, this);
        }
        const [timer, canceller] = this.createTaskTimeout(item);
        return Promise.race([
          this.handler(item, index2, this),
          timer()
        ]).finally(canceller);
      }
      createTaskTimeout(item) {
        let timerId;
        const timer = async () => new Promise((_resolve, reject) => {
          timerId = setTimeout(() => {
            reject(new promise_pool_error_1.PromisePoolError(`Task in promise pool timed out after ${this.taskTimeout()}ms`, item));
          }, this.taskTimeout());
        });
        const canceller = () => clearTimeout(timerId);
        return [timer, canceller];
      }
      save(result, position) {
        this.shouldUseCorrespondingResults() ? this.results()[position] = result : this.results().push(result);
        return this;
      }
      removeActive(task) {
        this.tasks().splice(this.tasks().indexOf(task), 1);
        return this;
      }
      async handleErrorFor(error, item, index2) {
        if (this.shouldUseCorrespondingResults()) {
          this.results()[index2] = promise_pool_1.PromisePool.failed;
        }
        if (this.isStoppingThePoolError(error)) {
          return;
        }
        if (this.isValidationError(error)) {
          this.markAsStopped();
          throw error;
        }
        this.hasErrorHandler() ? await this.runErrorHandlerFor(error, item) : this.saveErrorFor(error, item);
      }
      isStoppingThePoolError(error) {
        return error instanceof stop_the_promise_pool_error_1.StopThePromisePoolError;
      }
      isValidationError(error) {
        return error instanceof validation_error_1.ValidationError;
      }
      async runErrorHandlerFor(processingError, item) {
        try {
          await this.errorHandler?.(processingError, item, this);
        } catch (error) {
          this.rethrowIfNotStoppingThePool(error);
        }
      }
      runOnTaskStartedHandlers(item) {
        this.onTaskStartedHandlers.forEach((handler) => {
          handler(item, this);
        });
      }
      runOnTaskFinishedHandlers(item) {
        this.onTaskFinishedHandlers.forEach((handler) => {
          handler(item, this);
        });
      }
      rethrowIfNotStoppingThePool(error) {
        if (this.isStoppingThePoolError(error)) {
          return;
        }
        throw error;
      }
      saveErrorFor(error, item) {
        this.errors().push(promise_pool_error_1.PromisePoolError.createFrom(error, item));
      }
      async drained() {
        await this.drainActiveTasks();
        return {
          errors: this.errors(),
          results: this.results()
        };
      }
      async drainActiveTasks() {
        await Promise.all(this.tasks());
      }
    }
    exports2.PromisePoolExecutor = PromisePoolExecutor;
  });
  var require_promise_pool = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PromisePool = void 0;
    var promise_pool_executor_1 = require_promise_pool_executor();
    class PromisePool {
      constructor(items) {
        this.timeout = void 0;
        this.concurrency = 10;
        this.items = items ?? [];
        this.errorHandler = void 0;
        this.onTaskStartedHandlers = [];
        this.onTaskFinishedHandlers = [];
        this.shouldResultsCorrespond = false;
      }
      withConcurrency(concurrency) {
        this.concurrency = concurrency;
        return this;
      }
      static withConcurrency(concurrency) {
        return new this().withConcurrency(concurrency);
      }
      withTaskTimeout(timeout) {
        this.timeout = timeout;
        return this;
      }
      static withTaskTimeout(timeout) {
        return new this().withTaskTimeout(timeout);
      }
      for(items) {
        const pool = new PromisePool(items).withConcurrency(this.concurrency);
        if (typeof this.errorHandler === "function") {
          pool.handleError(this.errorHandler);
        }
        return typeof this.timeout === "number" ? pool.withTaskTimeout(this.timeout) : pool;
      }
      static for(items) {
        return new this().for(items);
      }
      handleError(handler) {
        this.errorHandler = handler;
        return this;
      }
      onTaskStarted(handler) {
        this.onTaskStartedHandlers.push(handler);
        return this;
      }
      onTaskFinished(handler) {
        this.onTaskFinishedHandlers.push(handler);
        return this;
      }
      useCorrespondingResults() {
        this.shouldResultsCorrespond = true;
        return this;
      }
      async process(callback) {
        return new promise_pool_executor_1.PromisePoolExecutor().useConcurrency(this.concurrency).useCorrespondingResults(this.shouldResultsCorrespond).withTaskTimeout(this.timeout).withHandler(callback).handleError(this.errorHandler).onTaskStarted(this.onTaskStartedHandlers).onTaskFinished(this.onTaskFinishedHandlers).for(this.items).start();
      }
    }
    exports2.PromisePool = PromisePool;
    PromisePool.notRun = Symbol("notRun");
    PromisePool.failed = Symbol("failed");
  });
  var require_contracts3 = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
  var require_return_value = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
  var require_dist = __commonJS2((exports2) => {
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports22) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports22, p))
          __createBinding(exports22, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var promise_pool_1 = require_promise_pool();
    exports2.default = promise_pool_1.PromisePool;
    __exportStar(require_contracts3(), exports2);
    __exportStar(require_promise_pool(), exports2);
    __exportStar(require_promise_pool_error(), exports2);
    __exportStar(require_return_value(), exports2);
    __exportStar(require_stop_the_promise_pool_error(), exports2);
    __exportStar(require_validation_error(), exports2);
  });
  var require_actions = __commonJS2((exports2) => {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestAddresses = exports2.waitForTransactionReceipt = exports2.getProof = exports2.getPermissions = exports2.getAddresses = exports2.readContract = exports2.watchPendingTransactions = exports2.watchEvent = exports2.watchBlockNumber = exports2.watchBlocks = exports2.multicall = exports2.mine = exports2.loadState = exports2.increaseTime = exports2.impersonateAccount = exports2.getTransactionReceipt = exports2.getTransaction = exports2.getTransactionCount = exports2.getTransactionConfirmations = exports2.getStorageAt = exports2.getLogs = exports2.getGasPrice = exports2.getFilterLogs = exports2.getFilterChanges = exports2.getFeeHistory = exports2.getContractEvents = exports2.getChainId = exports2.getBytecode = exports2.getBlockTransactionCount = exports2.getBlockNumber = exports2.getBlock = exports2.getBlobBaseFee = exports2.getBalance = exports2.estimateGas = exports2.estimateMaxPriorityFeePerGas = exports2.estimateFeesPerGas = exports2.estimateContractGas = exports2.dumpState = exports2.createPendingTransactionFilter = exports2.createEventFilter = exports2.createContractEventFilter = exports2.createBlockFilter = exports2.call = exports2.getEnsText = exports2.getEnsResolver = exports2.getEnsName = exports2.getEnsAvatar = exports2.getEnsAddress = exports2.deployContract = exports2.addChain = void 0;
    exports2.writeContract = exports2.watchContractEvent = exports2.watchAsset = exports2.verifyTypedData = exports2.verifyMessage = exports2.verifyHash = exports2.uninstallFilter = exports2.switchChain = exports2.stopImpersonatingAccount = exports2.simulateContract = exports2.signTypedData = exports2.signMessage = exports2.snapshot = exports2.setStorageAt = exports2.setRpcUrl = exports2.setNonce = exports2.setNextBlockTimestamp = exports2.setNextBlockBaseFeePerGas = exports2.setMinGasPrice = exports2.setLoggingEnabled = exports2.setIntervalMining = exports2.setCoinbase = exports2.setCode = exports2.setBlockTimestampInterval = exports2.setBlockGasLimit = exports2.setAutomine = exports2.setBalance = exports2.sendUnsignedTransaction = exports2.sendRawTransaction = exports2.signTransaction = exports2.sendTransaction = exports2.defaultPrepareTransactionRequestParameters = exports2.prepareTransactionRequest = exports2.revert = exports2.reset = exports2.removeBlockTimestampInterval = exports2.inspectTxpool = exports2.getTxpoolStatus = exports2.getTxpoolContent = exports2.getAutomine = exports2.dropTransaction = exports2.requestPermissions = void 0;
    var addChain_js_1 = require_addChain();
    Object.defineProperty(exports2, "addChain", { enumerable: true, get: function() {
      return addChain_js_1.addChain;
    } });
    var deployContract_js_1 = require_deployContract();
    Object.defineProperty(exports2, "deployContract", { enumerable: true, get: function() {
      return deployContract_js_1.deployContract;
    } });
    var getEnsAddress_js_1 = require_getEnsAddress();
    Object.defineProperty(exports2, "getEnsAddress", { enumerable: true, get: function() {
      return getEnsAddress_js_1.getEnsAddress;
    } });
    var getEnsAvatar_js_1 = require_getEnsAvatar();
    Object.defineProperty(exports2, "getEnsAvatar", { enumerable: true, get: function() {
      return getEnsAvatar_js_1.getEnsAvatar;
    } });
    var getEnsName_js_1 = require_getEnsName();
    Object.defineProperty(exports2, "getEnsName", { enumerable: true, get: function() {
      return getEnsName_js_1.getEnsName;
    } });
    var getEnsResolver_js_1 = require_getEnsResolver();
    Object.defineProperty(exports2, "getEnsResolver", { enumerable: true, get: function() {
      return getEnsResolver_js_1.getEnsResolver;
    } });
    var getEnsText_js_1 = require_getEnsText();
    Object.defineProperty(exports2, "getEnsText", { enumerable: true, get: function() {
      return getEnsText_js_1.getEnsText;
    } });
    var call_js_1 = require_call();
    Object.defineProperty(exports2, "call", { enumerable: true, get: function() {
      return call_js_1.call;
    } });
    var createBlockFilter_js_1 = require_createBlockFilter();
    Object.defineProperty(exports2, "createBlockFilter", { enumerable: true, get: function() {
      return createBlockFilter_js_1.createBlockFilter;
    } });
    var createContractEventFilter_js_1 = require_createContractEventFilter();
    Object.defineProperty(exports2, "createContractEventFilter", { enumerable: true, get: function() {
      return createContractEventFilter_js_1.createContractEventFilter;
    } });
    var createEventFilter_js_1 = require_createEventFilter();
    Object.defineProperty(exports2, "createEventFilter", { enumerable: true, get: function() {
      return createEventFilter_js_1.createEventFilter;
    } });
    var createPendingTransactionFilter_js_1 = require_createPendingTransactionFilter();
    Object.defineProperty(exports2, "createPendingTransactionFilter", { enumerable: true, get: function() {
      return createPendingTransactionFilter_js_1.createPendingTransactionFilter;
    } });
    var dumpState_js_1 = require_dumpState();
    Object.defineProperty(exports2, "dumpState", { enumerable: true, get: function() {
      return dumpState_js_1.dumpState;
    } });
    var estimateContractGas_js_1 = require_estimateContractGas();
    Object.defineProperty(exports2, "estimateContractGas", { enumerable: true, get: function() {
      return estimateContractGas_js_1.estimateContractGas;
    } });
    var estimateFeesPerGas_js_1 = require_estimateFeesPerGas();
    Object.defineProperty(exports2, "estimateFeesPerGas", { enumerable: true, get: function() {
      return estimateFeesPerGas_js_1.estimateFeesPerGas;
    } });
    var estimateMaxPriorityFeePerGas_js_1 = require_estimateMaxPriorityFeePerGas();
    Object.defineProperty(exports2, "estimateMaxPriorityFeePerGas", { enumerable: true, get: function() {
      return estimateMaxPriorityFeePerGas_js_1.estimateMaxPriorityFeePerGas;
    } });
    var estimateGas_js_1 = require_estimateGas2();
    Object.defineProperty(exports2, "estimateGas", { enumerable: true, get: function() {
      return estimateGas_js_1.estimateGas;
    } });
    var getBalance_js_1 = require_getBalance();
    Object.defineProperty(exports2, "getBalance", { enumerable: true, get: function() {
      return getBalance_js_1.getBalance;
    } });
    var getBlobBaseFee_js_1 = require_getBlobBaseFee();
    Object.defineProperty(exports2, "getBlobBaseFee", { enumerable: true, get: function() {
      return getBlobBaseFee_js_1.getBlobBaseFee;
    } });
    var getBlock_js_1 = require_getBlock();
    Object.defineProperty(exports2, "getBlock", { enumerable: true, get: function() {
      return getBlock_js_1.getBlock;
    } });
    var getBlockNumber_js_1 = require_getBlockNumber();
    Object.defineProperty(exports2, "getBlockNumber", { enumerable: true, get: function() {
      return getBlockNumber_js_1.getBlockNumber;
    } });
    var getBlockTransactionCount_js_1 = require_getBlockTransactionCount();
    Object.defineProperty(exports2, "getBlockTransactionCount", { enumerable: true, get: function() {
      return getBlockTransactionCount_js_1.getBlockTransactionCount;
    } });
    var getBytecode_js_1 = require_getBytecode();
    Object.defineProperty(exports2, "getBytecode", { enumerable: true, get: function() {
      return getBytecode_js_1.getBytecode;
    } });
    var getChainId_js_1 = require_getChainId();
    Object.defineProperty(exports2, "getChainId", { enumerable: true, get: function() {
      return getChainId_js_1.getChainId;
    } });
    var getContractEvents_js_1 = require_getContractEvents();
    Object.defineProperty(exports2, "getContractEvents", { enumerable: true, get: function() {
      return getContractEvents_js_1.getContractEvents;
    } });
    var getFeeHistory_js_1 = require_getFeeHistory();
    Object.defineProperty(exports2, "getFeeHistory", { enumerable: true, get: function() {
      return getFeeHistory_js_1.getFeeHistory;
    } });
    var getFilterChanges_js_1 = require_getFilterChanges();
    Object.defineProperty(exports2, "getFilterChanges", { enumerable: true, get: function() {
      return getFilterChanges_js_1.getFilterChanges;
    } });
    var getFilterLogs_js_1 = require_getFilterLogs();
    Object.defineProperty(exports2, "getFilterLogs", { enumerable: true, get: function() {
      return getFilterLogs_js_1.getFilterLogs;
    } });
    var getGasPrice_js_1 = require_getGasPrice();
    Object.defineProperty(exports2, "getGasPrice", { enumerable: true, get: function() {
      return getGasPrice_js_1.getGasPrice;
    } });
    var getLogs_js_1 = require_getLogs();
    Object.defineProperty(exports2, "getLogs", { enumerable: true, get: function() {
      return getLogs_js_1.getLogs;
    } });
    var getStorageAt_js_1 = require_getStorageAt();
    Object.defineProperty(exports2, "getStorageAt", { enumerable: true, get: function() {
      return getStorageAt_js_1.getStorageAt;
    } });
    var getTransactionConfirmations_js_1 = require_getTransactionConfirmations();
    Object.defineProperty(exports2, "getTransactionConfirmations", { enumerable: true, get: function() {
      return getTransactionConfirmations_js_1.getTransactionConfirmations;
    } });
    var getTransactionCount_js_1 = require_getTransactionCount();
    Object.defineProperty(exports2, "getTransactionCount", { enumerable: true, get: function() {
      return getTransactionCount_js_1.getTransactionCount;
    } });
    var getTransaction_js_1 = require_getTransaction();
    Object.defineProperty(exports2, "getTransaction", { enumerable: true, get: function() {
      return getTransaction_js_1.getTransaction;
    } });
    var getTransactionReceipt_js_1 = require_getTransactionReceipt();
    Object.defineProperty(exports2, "getTransactionReceipt", { enumerable: true, get: function() {
      return getTransactionReceipt_js_1.getTransactionReceipt;
    } });
    var impersonateAccount_js_1 = require_impersonateAccount();
    Object.defineProperty(exports2, "impersonateAccount", { enumerable: true, get: function() {
      return impersonateAccount_js_1.impersonateAccount;
    } });
    var increaseTime_js_1 = require_increaseTime();
    Object.defineProperty(exports2, "increaseTime", { enumerable: true, get: function() {
      return increaseTime_js_1.increaseTime;
    } });
    var loadState_js_1 = require_loadState();
    Object.defineProperty(exports2, "loadState", { enumerable: true, get: function() {
      return loadState_js_1.loadState;
    } });
    var mine_js_1 = require_mine();
    Object.defineProperty(exports2, "mine", { enumerable: true, get: function() {
      return mine_js_1.mine;
    } });
    var multicall_js_1 = require_multicall();
    Object.defineProperty(exports2, "multicall", { enumerable: true, get: function() {
      return multicall_js_1.multicall;
    } });
    var watchBlocks_js_1 = require_watchBlocks();
    Object.defineProperty(exports2, "watchBlocks", { enumerable: true, get: function() {
      return watchBlocks_js_1.watchBlocks;
    } });
    var watchBlockNumber_js_1 = require_watchBlockNumber();
    Object.defineProperty(exports2, "watchBlockNumber", { enumerable: true, get: function() {
      return watchBlockNumber_js_1.watchBlockNumber;
    } });
    var watchEvent_js_1 = require_watchEvent();
    Object.defineProperty(exports2, "watchEvent", { enumerable: true, get: function() {
      return watchEvent_js_1.watchEvent;
    } });
    var watchPendingTransactions_js_1 = require_watchPendingTransactions();
    Object.defineProperty(exports2, "watchPendingTransactions", { enumerable: true, get: function() {
      return watchPendingTransactions_js_1.watchPendingTransactions;
    } });
    var readContract_js_1 = require_readContract();
    Object.defineProperty(exports2, "readContract", { enumerable: true, get: function() {
      return readContract_js_1.readContract;
    } });
    var getAddresses_js_1 = require_getAddresses();
    Object.defineProperty(exports2, "getAddresses", { enumerable: true, get: function() {
      return getAddresses_js_1.getAddresses;
    } });
    var getPermissions_js_1 = require_getPermissions();
    Object.defineProperty(exports2, "getPermissions", { enumerable: true, get: function() {
      return getPermissions_js_1.getPermissions;
    } });
    var getProof_js_1 = require_getProof();
    Object.defineProperty(exports2, "getProof", { enumerable: true, get: function() {
      return getProof_js_1.getProof;
    } });
    var waitForTransactionReceipt_js_1 = require_waitForTransactionReceipt();
    Object.defineProperty(exports2, "waitForTransactionReceipt", { enumerable: true, get: function() {
      return waitForTransactionReceipt_js_1.waitForTransactionReceipt;
    } });
    var requestAddresses_js_1 = require_requestAddresses();
    Object.defineProperty(exports2, "requestAddresses", { enumerable: true, get: function() {
      return requestAddresses_js_1.requestAddresses;
    } });
    var requestPermissions_js_1 = require_requestPermissions();
    Object.defineProperty(exports2, "requestPermissions", { enumerable: true, get: function() {
      return requestPermissions_js_1.requestPermissions;
    } });
    var dropTransaction_js_1 = require_dropTransaction();
    Object.defineProperty(exports2, "dropTransaction", { enumerable: true, get: function() {
      return dropTransaction_js_1.dropTransaction;
    } });
    var getAutomine_js_1 = require_getAutomine();
    Object.defineProperty(exports2, "getAutomine", { enumerable: true, get: function() {
      return getAutomine_js_1.getAutomine;
    } });
    var getTxpoolContent_js_1 = require_getTxpoolContent();
    Object.defineProperty(exports2, "getTxpoolContent", { enumerable: true, get: function() {
      return getTxpoolContent_js_1.getTxpoolContent;
    } });
    var getTxpoolStatus_js_1 = require_getTxpoolStatus();
    Object.defineProperty(exports2, "getTxpoolStatus", { enumerable: true, get: function() {
      return getTxpoolStatus_js_1.getTxpoolStatus;
    } });
    var inspectTxpool_js_1 = require_inspectTxpool();
    Object.defineProperty(exports2, "inspectTxpool", { enumerable: true, get: function() {
      return inspectTxpool_js_1.inspectTxpool;
    } });
    var removeBlockTimestampInterval_js_1 = require_removeBlockTimestampInterval();
    Object.defineProperty(exports2, "removeBlockTimestampInterval", { enumerable: true, get: function() {
      return removeBlockTimestampInterval_js_1.removeBlockTimestampInterval;
    } });
    var reset_js_1 = require_reset();
    Object.defineProperty(exports2, "reset", { enumerable: true, get: function() {
      return reset_js_1.reset;
    } });
    var revert_js_1 = require_revert();
    Object.defineProperty(exports2, "revert", { enumerable: true, get: function() {
      return revert_js_1.revert;
    } });
    var prepareTransactionRequest_js_1 = require_prepareTransactionRequest();
    Object.defineProperty(exports2, "prepareTransactionRequest", { enumerable: true, get: function() {
      return prepareTransactionRequest_js_1.prepareTransactionRequest;
    } });
    Object.defineProperty(exports2, "defaultPrepareTransactionRequestParameters", { enumerable: true, get: function() {
      return prepareTransactionRequest_js_1.defaultParameters;
    } });
    var sendTransaction_js_1 = require_sendTransaction();
    Object.defineProperty(exports2, "sendTransaction", { enumerable: true, get: function() {
      return sendTransaction_js_1.sendTransaction;
    } });
    var signTransaction_js_1 = require_signTransaction();
    Object.defineProperty(exports2, "signTransaction", { enumerable: true, get: function() {
      return signTransaction_js_1.signTransaction;
    } });
    var sendRawTransaction_js_1 = require_sendRawTransaction();
    Object.defineProperty(exports2, "sendRawTransaction", { enumerable: true, get: function() {
      return sendRawTransaction_js_1.sendRawTransaction;
    } });
    var sendUnsignedTransaction_js_1 = require_sendUnsignedTransaction();
    Object.defineProperty(exports2, "sendUnsignedTransaction", { enumerable: true, get: function() {
      return sendUnsignedTransaction_js_1.sendUnsignedTransaction;
    } });
    var setBalance_js_1 = require_setBalance();
    Object.defineProperty(exports2, "setBalance", { enumerable: true, get: function() {
      return setBalance_js_1.setBalance;
    } });
    var setAutomine_js_1 = require_setAutomine();
    Object.defineProperty(exports2, "setAutomine", { enumerable: true, get: function() {
      return setAutomine_js_1.setAutomine;
    } });
    var setBlockGasLimit_js_1 = require_setBlockGasLimit();
    Object.defineProperty(exports2, "setBlockGasLimit", { enumerable: true, get: function() {
      return setBlockGasLimit_js_1.setBlockGasLimit;
    } });
    var setBlockTimestampInterval_js_1 = require_setBlockTimestampInterval();
    Object.defineProperty(exports2, "setBlockTimestampInterval", { enumerable: true, get: function() {
      return setBlockTimestampInterval_js_1.setBlockTimestampInterval;
    } });
    var setCode_js_1 = require_setCode();
    Object.defineProperty(exports2, "setCode", { enumerable: true, get: function() {
      return setCode_js_1.setCode;
    } });
    var setCoinbase_js_1 = require_setCoinbase();
    Object.defineProperty(exports2, "setCoinbase", { enumerable: true, get: function() {
      return setCoinbase_js_1.setCoinbase;
    } });
    var setIntervalMining_js_1 = require_setIntervalMining();
    Object.defineProperty(exports2, "setIntervalMining", { enumerable: true, get: function() {
      return setIntervalMining_js_1.setIntervalMining;
    } });
    var setLoggingEnabled_js_1 = require_setLoggingEnabled();
    Object.defineProperty(exports2, "setLoggingEnabled", { enumerable: true, get: function() {
      return setLoggingEnabled_js_1.setLoggingEnabled;
    } });
    var setMinGasPrice_js_1 = require_setMinGasPrice();
    Object.defineProperty(exports2, "setMinGasPrice", { enumerable: true, get: function() {
      return setMinGasPrice_js_1.setMinGasPrice;
    } });
    var setNextBlockBaseFeePerGas_js_1 = require_setNextBlockBaseFeePerGas();
    Object.defineProperty(exports2, "setNextBlockBaseFeePerGas", { enumerable: true, get: function() {
      return setNextBlockBaseFeePerGas_js_1.setNextBlockBaseFeePerGas;
    } });
    var setNextBlockTimestamp_js_1 = require_setNextBlockTimestamp();
    Object.defineProperty(exports2, "setNextBlockTimestamp", { enumerable: true, get: function() {
      return setNextBlockTimestamp_js_1.setNextBlockTimestamp;
    } });
    var setNonce_js_1 = require_setNonce();
    Object.defineProperty(exports2, "setNonce", { enumerable: true, get: function() {
      return setNonce_js_1.setNonce;
    } });
    var setRpcUrl_js_1 = require_setRpcUrl();
    Object.defineProperty(exports2, "setRpcUrl", { enumerable: true, get: function() {
      return setRpcUrl_js_1.setRpcUrl;
    } });
    var setStorageAt_js_1 = require_setStorageAt();
    Object.defineProperty(exports2, "setStorageAt", { enumerable: true, get: function() {
      return setStorageAt_js_1.setStorageAt;
    } });
    var snapshot_js_1 = require_snapshot();
    Object.defineProperty(exports2, "snapshot", { enumerable: true, get: function() {
      return snapshot_js_1.snapshot;
    } });
    var signMessage_js_1 = require_signMessage();
    Object.defineProperty(exports2, "signMessage", { enumerable: true, get: function() {
      return signMessage_js_1.signMessage;
    } });
    var signTypedData_js_1 = require_signTypedData();
    Object.defineProperty(exports2, "signTypedData", { enumerable: true, get: function() {
      return signTypedData_js_1.signTypedData;
    } });
    var simulateContract_js_1 = require_simulateContract();
    Object.defineProperty(exports2, "simulateContract", { enumerable: true, get: function() {
      return simulateContract_js_1.simulateContract;
    } });
    var stopImpersonatingAccount_js_1 = require_stopImpersonatingAccount();
    Object.defineProperty(exports2, "stopImpersonatingAccount", { enumerable: true, get: function() {
      return stopImpersonatingAccount_js_1.stopImpersonatingAccount;
    } });
    var switchChain_js_1 = require_switchChain();
    Object.defineProperty(exports2, "switchChain", { enumerable: true, get: function() {
      return switchChain_js_1.switchChain;
    } });
    var uninstallFilter_js_1 = require_uninstallFilter();
    Object.defineProperty(exports2, "uninstallFilter", { enumerable: true, get: function() {
      return uninstallFilter_js_1.uninstallFilter;
    } });
    var verifyHash_js_1 = require_verifyHash();
    Object.defineProperty(exports2, "verifyHash", { enumerable: true, get: function() {
      return verifyHash_js_1.verifyHash;
    } });
    var verifyMessage_js_1 = require_verifyMessage2();
    Object.defineProperty(exports2, "verifyMessage", { enumerable: true, get: function() {
      return verifyMessage_js_1.verifyMessage;
    } });
    var verifyTypedData_js_1 = require_verifyTypedData2();
    Object.defineProperty(exports2, "verifyTypedData", { enumerable: true, get: function() {
      return verifyTypedData_js_1.verifyTypedData;
    } });
    var watchAsset_js_1 = require_watchAsset();
    Object.defineProperty(exports2, "watchAsset", { enumerable: true, get: function() {
      return watchAsset_js_1.watchAsset;
    } });
    var watchContractEvent_js_1 = require_watchContractEvent();
    Object.defineProperty(exports2, "watchContractEvent", { enumerable: true, get: function() {
      return watchContractEvent_js_1.watchContractEvent;
    } });
    var writeContract_js_1 = require_writeContract();
    Object.defineProperty(exports2, "writeContract", { enumerable: true, get: function() {
      return writeContract_js_1.writeContract;
    } });
  });
  var require_src = __commonJS2((exports2, module2) => {
    function base2(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode2(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size22 = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size22);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size22 - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size22 - length;
        while (it2 !== size22 && b58[it2] === 0) {
          it2++;
        }
        var str2 = LEADER.repeat(zeroes);
        for (; it2 < size22; ++it2) {
          str2 += ALPHABET.charAt(b58[it2]);
        }
        return str2;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size22 = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size22);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size22 - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size22 - length;
        while (it4 !== size22 && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size22 - it4));
        var j2 = zeroes;
        while (it4 !== size22) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer2 = decodeUnsafe(string);
        if (buffer2) {
          return buffer2;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode2,
        decodeUnsafe,
        decode
      };
    }
    module2.exports = base2;
  });
  var require_bs58 = __commonJS2((exports2, module2) => {
    var basex = require_src();
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module2.exports = basex(ALPHABET);
  });
  var require_kind_of = __commonJS2((exports2, module2) => {
    function ctorName(val) {
      return typeof val.constructor === "function" ? val.constructor.name : null;
    }
    function isArray(val) {
      if (Array.isArray)
        return Array.isArray(val);
      return val instanceof Array;
    }
    function isError(val) {
      return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
    }
    function isDate(val) {
      if (val instanceof Date)
        return true;
      return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
    }
    function isRegexp(val) {
      if (val instanceof RegExp)
        return true;
      return typeof val.flags === "string" && typeof val.ignoreCase === "boolean" && typeof val.multiline === "boolean" && typeof val.global === "boolean";
    }
    function isGeneratorFn(name, val) {
      return ctorName(name) === "GeneratorFunction";
    }
    function isGeneratorObj(val) {
      return typeof val.throw === "function" && typeof val.return === "function" && typeof val.next === "function";
    }
    function isArguments(val) {
      try {
        if (typeof val.length === "number" && typeof val.callee === "function") {
          return true;
        }
      } catch (err) {
        if (err.message.indexOf("callee") !== -1) {
          return true;
        }
      }
      return false;
    }
    function isBuffer(val) {
      if (val.constructor && typeof val.constructor.isBuffer === "function") {
        return val.constructor.isBuffer(val);
      }
      return false;
    }
    var toString = Object.prototype.toString;
    module2.exports = function kindOf(val) {
      if (val === void 0)
        return "undefined";
      if (val === null)
        return "null";
      var type = typeof val;
      if (type === "boolean")
        return "boolean";
      if (type === "string")
        return "string";
      if (type === "number")
        return "number";
      if (type === "symbol")
        return "symbol";
      if (type === "function") {
        return isGeneratorFn(val) ? "generatorfunction" : "function";
      }
      if (isArray(val))
        return "array";
      if (isBuffer(val))
        return "buffer";
      if (isArguments(val))
        return "arguments";
      if (isDate(val))
        return "date";
      if (isError(val))
        return "error";
      if (isRegexp(val))
        return "regexp";
      switch (ctorName(val)) {
        case "Symbol":
          return "symbol";
        case "Promise":
          return "promise";
        case "WeakMap":
          return "weakmap";
        case "WeakSet":
          return "weakset";
        case "Map":
          return "map";
        case "Set":
          return "set";
        case "Int8Array":
          return "int8array";
        case "Uint8Array":
          return "uint8array";
        case "Uint8ClampedArray":
          return "uint8clampedarray";
        case "Int16Array":
          return "int16array";
        case "Uint16Array":
          return "uint16array";
        case "Int32Array":
          return "int32array";
        case "Uint32Array":
          return "uint32array";
        case "Float32Array":
          return "float32array";
        case "Float64Array":
          return "float64array";
      }
      if (isGeneratorObj(val)) {
        return "generator";
      }
      type = toString.call(val);
      switch (type) {
        case "[object Object]":
          return "object";
        case "[object Map Iterator]":
          return "mapiterator";
        case "[object Set Iterator]":
          return "setiterator";
        case "[object String Iterator]":
          return "stringiterator";
        case "[object Array Iterator]":
          return "arrayiterator";
      }
      return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
    };
  });
  var require_is_extendable = __commonJS2((exports2, module2) => {
    module2.exports = function isExtendable(val) {
      return typeof val !== "undefined" && val !== null && (typeof val === "object" || typeof val === "function");
    };
  });
  var require_extend_shallow = __commonJS2((exports2, module2) => {
    function assign(a, b) {
      for (var key in b) {
        if (hasOwn(b, key)) {
          a[key] = b[key];
        }
      }
    }
    function hasOwn(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    var isObject = require_is_extendable();
    module2.exports = function extend(o) {
      if (!isObject(o)) {
        o = {};
      }
      var len = arguments.length;
      for (var i = 1; i < len; i++) {
        var obj = arguments[i];
        if (isObject(obj)) {
          assign(o, obj);
        }
      }
      return o;
    };
  });
  var require_section_matter = __commonJS2((exports2, module2) => {
    function isDelimiter(line, delim) {
      if (line.slice(0, delim.length) !== delim) {
        return false;
      }
      if (line.charAt(delim.length + 1) === delim.slice(-1)) {
        return false;
      }
      return true;
    }
    function toObject(input) {
      if (typeOf(input) !== "object") {
        input = { content: input };
      }
      if (typeof input.content !== "string" && !isBuffer(input.content)) {
        throw new TypeError("expected a buffer or string");
      }
      input.content = input.content.toString();
      input.sections = [];
      return input;
    }
    function getKey(val, delim) {
      return val ? val.slice(delim.length).trim() : "";
    }
    function createSection() {
      return { key: "", data: "", content: "" };
    }
    function identity(val) {
      return val;
    }
    function isBuffer(val) {
      if (val && val.constructor && typeof val.constructor.isBuffer === "function") {
        return val.constructor.isBuffer(val);
      }
      return false;
    }
    var typeOf = require_kind_of();
    var extend = require_extend_shallow();
    module2.exports = function(input, options2) {
      if (typeof options2 === "function") {
        options2 = { parse: options2 };
      }
      var file = toObject(input);
      var defaults = { section_delimiter: "---", parse: identity };
      var opts = extend({}, defaults, options2);
      var delim = opts.section_delimiter;
      var lines = file.content.split(/\r?\n/);
      var sections = null;
      var section = createSection();
      var content = [];
      var stack = [];
      function initSections(val) {
        file.content = val;
        sections = [];
        content = [];
      }
      function closeSection(val) {
        if (stack.length) {
          section.key = getKey(stack[0], delim);
          section.content = val;
          opts.parse(section, sections);
          sections.push(section);
          section = createSection();
          content = [];
          stack = [];
        }
      }
      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        var len = stack.length;
        var ln = line.trim();
        if (isDelimiter(ln, delim)) {
          if (ln.length === 3 && i !== 0) {
            if (len === 0 || len === 2) {
              content.push(line);
              continue;
            }
            stack.push(ln);
            section.data = content.join("\n");
            content = [];
            continue;
          }
          if (sections === null) {
            initSections(content.join("\n"));
          }
          if (len === 2) {
            closeSection(content.join("\n"));
          }
          stack.push(ln);
          continue;
        }
        content.push(line);
      }
      if (sections === null) {
        initSections(content.join("\n"));
      } else {
        closeSection(content.join("\n"));
      }
      file.sections = sections;
      return file;
    };
  });
  var require_common = __commonJS2((exports2, module2) => {
    function isNothing(subject) {
      return typeof subject === "undefined" || subject === null;
    }
    function isObject(subject) {
      return typeof subject === "object" && subject !== null;
    }
    function toArray(sequence) {
      if (Array.isArray(sequence))
        return sequence;
      else if (isNothing(sequence))
        return [];
      return [sequence];
    }
    function extend(target, source) {
      var index2, length, key, sourceKeys;
      if (source) {
        sourceKeys = Object.keys(source);
        for (index2 = 0, length = sourceKeys.length; index2 < length; index2 += 1) {
          key = sourceKeys[index2];
          target[key] = source[key];
        }
      }
      return target;
    }
    function repeat(string, count) {
      var result = "", cycle;
      for (cycle = 0; cycle < count; cycle += 1) {
        result += string;
      }
      return result;
    }
    function isNegativeZero(number22) {
      return number22 === 0 && Number.NEGATIVE_INFINITY === 1 / number22;
    }
    exports2.isNothing = isNothing;
    exports2.isObject = isObject;
    exports2.toArray = toArray;
    exports2.repeat = repeat;
    exports2.isNegativeZero = isNegativeZero;
    exports2.extend = extend;
  });
  var require_exception = __commonJS2((exports2, module2) => {
    function YAMLException(reason, mark) {
      Error.call(this);
      this.name = "YAMLException";
      this.reason = reason;
      this.mark = mark;
      this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack || "";
      }
    }
    YAMLException.prototype = Object.create(Error.prototype);
    YAMLException.prototype.constructor = YAMLException;
    YAMLException.prototype.toString = function toString(compact) {
      var result = this.name + ": ";
      result += this.reason || "(unknown reason)";
      if (!compact && this.mark) {
        result += " " + this.mark.toString();
      }
      return result;
    };
    module2.exports = YAMLException;
  });
  var require_mark = __commonJS2((exports2, module2) => {
    function Mark(name, buffer2, position, line, column) {
      this.name = name;
      this.buffer = buffer2;
      this.position = position;
      this.line = line;
      this.column = column;
    }
    var common = require_common();
    Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
      var head, start, tail, end, snippet;
      if (!this.buffer)
        return null;
      indent = indent || 4;
      maxLength = maxLength || 75;
      head = "";
      start = this.position;
      while (start > 0 && `\0\r
\x85\u2028\u2029`.indexOf(this.buffer.charAt(start - 1)) === -1) {
        start -= 1;
        if (this.position - start > maxLength / 2 - 1) {
          head = " ... ";
          start += 5;
          break;
        }
      }
      tail = "";
      end = this.position;
      while (end < this.buffer.length && `\0\r
\x85\u2028\u2029`.indexOf(this.buffer.charAt(end)) === -1) {
        end += 1;
        if (end - this.position > maxLength / 2 - 1) {
          tail = " ... ";
          end -= 5;
          break;
        }
      }
      snippet = this.buffer.slice(start, end);
      return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start + head.length) + "^";
    };
    Mark.prototype.toString = function toString(compact) {
      var snippet, where = "";
      if (this.name) {
        where += 'in "' + this.name + '" ';
      }
      where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
      if (!compact) {
        snippet = this.getSnippet();
        if (snippet) {
          where += ":\n" + snippet;
        }
      }
      return where;
    };
    module2.exports = Mark;
  });
  var require_type = __commonJS2((exports2, module2) => {
    function compileStyleAliases(map) {
      var result = {};
      if (map !== null) {
        Object.keys(map).forEach(function(style) {
          map[style].forEach(function(alias) {
            result[String(alias)] = style;
          });
        });
      }
      return result;
    }
    function Type(tag, options2) {
      options2 = options2 || {};
      Object.keys(options2).forEach(function(name) {
        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
          throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
        }
      });
      this.tag = tag;
      this.kind = options2["kind"] || null;
      this.resolve = options2["resolve"] || function() {
        return true;
      };
      this.construct = options2["construct"] || function(data) {
        return data;
      };
      this.instanceOf = options2["instanceOf"] || null;
      this.predicate = options2["predicate"] || null;
      this.represent = options2["represent"] || null;
      this.defaultStyle = options2["defaultStyle"] || null;
      this.styleAliases = compileStyleAliases(options2["styleAliases"] || null);
      if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
        throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
      }
    }
    var YAMLException = require_exception();
    var TYPE_CONSTRUCTOR_OPTIONS = [
      "kind",
      "resolve",
      "construct",
      "instanceOf",
      "predicate",
      "represent",
      "defaultStyle",
      "styleAliases"
    ];
    var YAML_NODE_KINDS = [
      "scalar",
      "sequence",
      "mapping"
    ];
    module2.exports = Type;
  });
  var require_schema = __commonJS2((exports2, module2) => {
    function compileList(schema, name, result) {
      var exclude = [];
      schema.include.forEach(function(includedSchema) {
        result = compileList(includedSchema, name, result);
      });
      schema[name].forEach(function(currentType) {
        result.forEach(function(previousType, previousIndex) {
          if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
            exclude.push(previousIndex);
          }
        });
        result.push(currentType);
      });
      return result.filter(function(type, index2) {
        return exclude.indexOf(index2) === -1;
      });
    }
    function compileMap() {
      var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {}
      }, index2, length;
      function collectType(type) {
        result[type.kind][type.tag] = result["fallback"][type.tag] = type;
      }
      for (index2 = 0, length = arguments.length; index2 < length; index2 += 1) {
        arguments[index2].forEach(collectType);
      }
      return result;
    }
    function Schema(definition) {
      this.include = definition.include || [];
      this.implicit = definition.implicit || [];
      this.explicit = definition.explicit || [];
      this.implicit.forEach(function(type) {
        if (type.loadKind && type.loadKind !== "scalar") {
          throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
        }
      });
      this.compiledImplicit = compileList(this, "implicit", []);
      this.compiledExplicit = compileList(this, "explicit", []);
      this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
    }
    var common = require_common();
    var YAMLException = require_exception();
    var Type = require_type();
    Schema.DEFAULT = null;
    Schema.create = function createSchema() {
      var schemas, types;
      switch (arguments.length) {
        case 1:
          schemas = Schema.DEFAULT;
          types = arguments[0];
          break;
        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;
        default:
          throw new YAMLException("Wrong number of arguments for Schema.create function");
      }
      schemas = common.toArray(schemas);
      types = common.toArray(types);
      if (!schemas.every(function(schema) {
        return schema instanceof Schema;
      })) {
        throw new YAMLException("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
      }
      if (!types.every(function(type) {
        return type instanceof Type;
      })) {
        throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
      }
      return new Schema({
        include: schemas,
        explicit: types
      });
    };
    module2.exports = Schema;
  });
  var require_str = __commonJS2((exports2, module2) => {
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:str", {
      kind: "scalar",
      construct: function(data) {
        return data !== null ? data : "";
      }
    });
  });
  var require_seq = __commonJS2((exports2, module2) => {
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:seq", {
      kind: "sequence",
      construct: function(data) {
        return data !== null ? data : [];
      }
    });
  });
  var require_map = __commonJS2((exports2, module2) => {
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:map", {
      kind: "mapping",
      construct: function(data) {
        return data !== null ? data : {};
      }
    });
  });
  var require_failsafe = __commonJS2((exports2, module2) => {
    var Schema = require_schema();
    module2.exports = new Schema({
      explicit: [
        require_str(),
        require_seq(),
        require_map()
      ]
    });
  });
  var require_null = __commonJS2((exports2, module2) => {
    function resolveYamlNull(data) {
      if (data === null)
        return true;
      var max = data.length;
      return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
    }
    function constructYamlNull() {
      return null;
    }
    function isNull(object) {
      return object === null;
    }
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:null", {
      kind: "scalar",
      resolve: resolveYamlNull,
      construct: constructYamlNull,
      predicate: isNull,
      represent: {
        canonical: function() {
          return "~";
        },
        lowercase: function() {
          return "null";
        },
        uppercase: function() {
          return "NULL";
        },
        camelcase: function() {
          return "Null";
        }
      },
      defaultStyle: "lowercase"
    });
  });
  var require_bool = __commonJS2((exports2, module2) => {
    function resolveYamlBoolean(data) {
      if (data === null)
        return false;
      var max = data.length;
      return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
    }
    function constructYamlBoolean(data) {
      return data === "true" || data === "True" || data === "TRUE";
    }
    function isBoolean(object) {
      return Object.prototype.toString.call(object) === "[object Boolean]";
    }
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:bool", {
      kind: "scalar",
      resolve: resolveYamlBoolean,
      construct: constructYamlBoolean,
      predicate: isBoolean,
      represent: {
        lowercase: function(object) {
          return object ? "true" : "false";
        },
        uppercase: function(object) {
          return object ? "TRUE" : "FALSE";
        },
        camelcase: function(object) {
          return object ? "True" : "False";
        }
      },
      defaultStyle: "lowercase"
    });
  });
  var require_int = __commonJS2((exports2, module2) => {
    function isHexCode(c) {
      return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
    }
    function isOctCode(c) {
      return 48 <= c && c <= 55;
    }
    function isDecCode(c) {
      return 48 <= c && c <= 57;
    }
    function resolveYamlInteger(data) {
      if (data === null)
        return false;
      var max = data.length, index2 = 0, hasDigits = false, ch;
      if (!max)
        return false;
      ch = data[index2];
      if (ch === "-" || ch === "+") {
        ch = data[++index2];
      }
      if (ch === "0") {
        if (index2 + 1 === max)
          return true;
        ch = data[++index2];
        if (ch === "b") {
          index2++;
          for (; index2 < max; index2++) {
            ch = data[index2];
            if (ch === "_")
              continue;
            if (ch !== "0" && ch !== "1")
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "x") {
          index2++;
          for (; index2 < max; index2++) {
            ch = data[index2];
            if (ch === "_")
              continue;
            if (!isHexCode(data.charCodeAt(index2)))
              return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        for (; index2 < max; index2++) {
          ch = data[index2];
          if (ch === "_")
            continue;
          if (!isOctCode(data.charCodeAt(index2)))
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "_")
        return false;
      for (; index2 < max; index2++) {
        ch = data[index2];
        if (ch === "_")
          continue;
        if (ch === ":")
          break;
        if (!isDecCode(data.charCodeAt(index2))) {
          return false;
        }
        hasDigits = true;
      }
      if (!hasDigits || ch === "_")
        return false;
      if (ch !== ":")
        return true;
      return /^(:[0-5]?[0-9])+$/.test(data.slice(index2));
    }
    function constructYamlInteger(data) {
      var value = data, sign = 1, ch, base2, digits = [];
      if (value.indexOf("_") !== -1) {
        value = value.replace(/_/g, "");
      }
      ch = value[0];
      if (ch === "-" || ch === "+") {
        if (ch === "-")
          sign = -1;
        value = value.slice(1);
        ch = value[0];
      }
      if (value === "0")
        return 0;
      if (ch === "0") {
        if (value[1] === "b")
          return sign * parseInt(value.slice(2), 2);
        if (value[1] === "x")
          return sign * parseInt(value, 16);
        return sign * parseInt(value, 8);
      }
      if (value.indexOf(":") !== -1) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseInt(v, 10));
        });
        value = 0;
        base2 = 1;
        digits.forEach(function(d) {
          value += d * base2;
          base2 *= 60;
        });
        return sign * value;
      }
      return sign * parseInt(value, 10);
    }
    function isInteger(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
    }
    var common = require_common();
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:int", {
      kind: "scalar",
      resolve: resolveYamlInteger,
      construct: constructYamlInteger,
      predicate: isInteger,
      represent: {
        binary: function(obj) {
          return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
        },
        octal: function(obj) {
          return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
        },
        decimal: function(obj) {
          return obj.toString(10);
        },
        hexadecimal: function(obj) {
          return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
        }
      },
      defaultStyle: "decimal",
      styleAliases: {
        binary: [2, "bin"],
        octal: [8, "oct"],
        decimal: [10, "dec"],
        hexadecimal: [16, "hex"]
      }
    });
  });
  var require_float = __commonJS2((exports2, module2) => {
    function resolveYamlFloat(data) {
      if (data === null)
        return false;
      if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
        return false;
      }
      return true;
    }
    function constructYamlFloat(data) {
      var value, sign, base2, digits;
      value = data.replace(/_/g, "").toLowerCase();
      sign = value[0] === "-" ? -1 : 1;
      digits = [];
      if ("+-".indexOf(value[0]) >= 0) {
        value = value.slice(1);
      }
      if (value === ".inf") {
        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
      } else if (value === ".nan") {
        return NaN;
      } else if (value.indexOf(":") >= 0) {
        value.split(":").forEach(function(v) {
          digits.unshift(parseFloat(v, 10));
        });
        value = 0;
        base2 = 1;
        digits.forEach(function(d) {
          value += d * base2;
          base2 *= 60;
        });
        return sign * value;
      }
      return sign * parseFloat(value, 10);
    }
    function representYamlFloat(object, style) {
      var res;
      if (isNaN(object)) {
        switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
        }
      } else if (Number.POSITIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
        }
      } else if (Number.NEGATIVE_INFINITY === object) {
        switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
        }
      } else if (common.isNegativeZero(object)) {
        return "-0.0";
      }
      res = object.toString(10);
      return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
    }
    function isFloat(object) {
      return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
    }
    var common = require_common();
    var Type = require_type();
    var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
    var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
    module2.exports = new Type("tag:yaml.org,2002:float", {
      kind: "scalar",
      resolve: resolveYamlFloat,
      construct: constructYamlFloat,
      predicate: isFloat,
      represent: representYamlFloat,
      defaultStyle: "lowercase"
    });
  });
  var require_json = __commonJS2((exports2, module2) => {
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_failsafe()
      ],
      implicit: [
        require_null(),
        require_bool(),
        require_int(),
        require_float()
      ]
    });
  });
  var require_core = __commonJS2((exports2, module2) => {
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_json()
      ]
    });
  });
  var require_timestamp = __commonJS2((exports2, module2) => {
    function resolveYamlTimestamp(data) {
      if (data === null)
        return false;
      if (YAML_DATE_REGEXP.exec(data) !== null)
        return true;
      if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
        return true;
      return false;
    }
    function constructYamlTimestamp(data) {
      var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
      match = YAML_DATE_REGEXP.exec(data);
      if (match === null)
        match = YAML_TIMESTAMP_REGEXP.exec(data);
      if (match === null)
        throw new Error("Date resolve error");
      year = +match[1];
      month = +match[2] - 1;
      day = +match[3];
      if (!match[4]) {
        return new Date(Date.UTC(year, month, day));
      }
      hour = +match[4];
      minute = +match[5];
      second = +match[6];
      if (match[7]) {
        fraction = match[7].slice(0, 3);
        while (fraction.length < 3) {
          fraction += "0";
        }
        fraction = +fraction;
      }
      if (match[9]) {
        tz_hour = +match[10];
        tz_minute = +(match[11] || 0);
        delta = (tz_hour * 60 + tz_minute) * 6e4;
        if (match[9] === "-")
          delta = -delta;
      }
      date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
      if (delta)
        date.setTime(date.getTime() - delta);
      return date;
    }
    function representYamlTimestamp(object) {
      return object.toISOString();
    }
    var Type = require_type();
    var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
    var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
    module2.exports = new Type("tag:yaml.org,2002:timestamp", {
      kind: "scalar",
      resolve: resolveYamlTimestamp,
      construct: constructYamlTimestamp,
      instanceOf: Date,
      represent: representYamlTimestamp
    });
  });
  var require_merge = __commonJS2((exports2, module2) => {
    function resolveYamlMerge(data) {
      return data === "<<" || data === null;
    }
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:merge", {
      kind: "scalar",
      resolve: resolveYamlMerge
    });
  });
  var require_binary = __commonJS2((exports2, module2) => {
    function resolveYamlBinary(data) {
      if (data === null)
        return false;
      var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        code = map.indexOf(data.charAt(idx));
        if (code > 64)
          continue;
        if (code < 0)
          return false;
        bitlen += 6;
      }
      return bitlen % 8 === 0;
    }
    function constructYamlBinary(data) {
      var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
      for (idx = 0; idx < max; idx++) {
        if (idx % 4 === 0 && idx) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        }
        bits = bits << 6 | map.indexOf(input.charAt(idx));
      }
      tailbits = max % 4 * 6;
      if (tailbits === 0) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      } else if (tailbits === 18) {
        result.push(bits >> 10 & 255);
        result.push(bits >> 2 & 255);
      } else if (tailbits === 12) {
        result.push(bits >> 4 & 255);
      }
      if (NodeBuffer) {
        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
      }
      return result;
    }
    function representYamlBinary(object) {
      var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
      for (idx = 0; idx < max; idx++) {
        if (idx % 3 === 0 && idx) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        }
        bits = (bits << 8) + object[idx];
      }
      tail = max % 3;
      if (tail === 0) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      } else if (tail === 2) {
        result += map[bits >> 10 & 63];
        result += map[bits >> 4 & 63];
        result += map[bits << 2 & 63];
        result += map[64];
      } else if (tail === 1) {
        result += map[bits >> 2 & 63];
        result += map[bits << 4 & 63];
        result += map[64];
        result += map[64];
      }
      return result;
    }
    function isBinary(object) {
      return NodeBuffer && NodeBuffer.isBuffer(object);
    }
    var NodeBuffer;
    try {
      _require = __require5;
      NodeBuffer = _require("buffer").Buffer;
    } catch (__) {
    }
    var _require;
    var Type = require_type();
    var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
    module2.exports = new Type("tag:yaml.org,2002:binary", {
      kind: "scalar",
      resolve: resolveYamlBinary,
      construct: constructYamlBinary,
      predicate: isBinary,
      represent: representYamlBinary
    });
  });
  var require_omap = __commonJS2((exports2, module2) => {
    function resolveYamlOmap(data) {
      if (data === null)
        return true;
      var objectKeys = [], index2, length, pair, pairKey, pairHasKey, object = data;
      for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
        pair = object[index2];
        pairHasKey = false;
        if (_toString.call(pair) !== "[object Object]")
          return false;
        for (pairKey in pair) {
          if (_hasOwnProperty.call(pair, pairKey)) {
            if (!pairHasKey)
              pairHasKey = true;
            else
              return false;
          }
        }
        if (!pairHasKey)
          return false;
        if (objectKeys.indexOf(pairKey) === -1)
          objectKeys.push(pairKey);
        else
          return false;
      }
      return true;
    }
    function constructYamlOmap(data) {
      return data !== null ? data : [];
    }
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var _toString = Object.prototype.toString;
    module2.exports = new Type("tag:yaml.org,2002:omap", {
      kind: "sequence",
      resolve: resolveYamlOmap,
      construct: constructYamlOmap
    });
  });
  var require_pairs = __commonJS2((exports2, module2) => {
    function resolveYamlPairs(data) {
      if (data === null)
        return true;
      var index2, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
        pair = object[index2];
        if (_toString.call(pair) !== "[object Object]")
          return false;
        keys = Object.keys(pair);
        if (keys.length !== 1)
          return false;
        result[index2] = [keys[0], pair[keys[0]]];
      }
      return true;
    }
    function constructYamlPairs(data) {
      if (data === null)
        return [];
      var index2, length, pair, keys, result, object = data;
      result = new Array(object.length);
      for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
        pair = object[index2];
        keys = Object.keys(pair);
        result[index2] = [keys[0], pair[keys[0]]];
      }
      return result;
    }
    var Type = require_type();
    var _toString = Object.prototype.toString;
    module2.exports = new Type("tag:yaml.org,2002:pairs", {
      kind: "sequence",
      resolve: resolveYamlPairs,
      construct: constructYamlPairs
    });
  });
  var require_set = __commonJS2((exports2, module2) => {
    function resolveYamlSet(data) {
      if (data === null)
        return true;
      var key, object = data;
      for (key in object) {
        if (_hasOwnProperty.call(object, key)) {
          if (object[key] !== null)
            return false;
        }
      }
      return true;
    }
    function constructYamlSet(data) {
      return data !== null ? data : {};
    }
    var Type = require_type();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    module2.exports = new Type("tag:yaml.org,2002:set", {
      kind: "mapping",
      resolve: resolveYamlSet,
      construct: constructYamlSet
    });
  });
  var require_default_safe = __commonJS2((exports2, module2) => {
    var Schema = require_schema();
    module2.exports = new Schema({
      include: [
        require_core()
      ],
      implicit: [
        require_timestamp(),
        require_merge()
      ],
      explicit: [
        require_binary(),
        require_omap(),
        require_pairs(),
        require_set()
      ]
    });
  });
  var require_undefined = __commonJS2((exports2, module2) => {
    function resolveJavascriptUndefined() {
      return true;
    }
    function constructJavascriptUndefined() {
      return;
    }
    function representJavascriptUndefined() {
      return "";
    }
    function isUndefined(object) {
      return typeof object === "undefined";
    }
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:js/undefined", {
      kind: "scalar",
      resolve: resolveJavascriptUndefined,
      construct: constructJavascriptUndefined,
      predicate: isUndefined,
      represent: representJavascriptUndefined
    });
  });
  var require_regexp = __commonJS2((exports2, module2) => {
    function resolveJavascriptRegExp(data) {
      if (data === null)
        return false;
      if (data.length === 0)
        return false;
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers2 = "";
      if (regexp[0] === "/") {
        if (tail)
          modifiers2 = tail[1];
        if (modifiers2.length > 3)
          return false;
        if (regexp[regexp.length - modifiers2.length - 1] !== "/")
          return false;
      }
      return true;
    }
    function constructJavascriptRegExp(data) {
      var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers2 = "";
      if (regexp[0] === "/") {
        if (tail)
          modifiers2 = tail[1];
        regexp = regexp.slice(1, regexp.length - modifiers2.length - 1);
      }
      return new RegExp(regexp, modifiers2);
    }
    function representJavascriptRegExp(object) {
      var result = "/" + object.source + "/";
      if (object.global)
        result += "g";
      if (object.multiline)
        result += "m";
      if (object.ignoreCase)
        result += "i";
      return result;
    }
    function isRegExp(object) {
      return Object.prototype.toString.call(object) === "[object RegExp]";
    }
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:js/regexp", {
      kind: "scalar",
      resolve: resolveJavascriptRegExp,
      construct: constructJavascriptRegExp,
      predicate: isRegExp,
      represent: representJavascriptRegExp
    });
  });
  var require_function = __commonJS2((exports2, module2) => {
    function resolveJavascriptFunction(data) {
      if (data === null)
        return false;
      try {
        var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    function constructJavascriptFunction(data) {
      var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
      if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
        throw new Error("Failed to resolve function");
      }
      ast.body[0].expression.params.forEach(function(param) {
        params.push(param.name);
      });
      body = ast.body[0].expression.body.range;
      if (ast.body[0].expression.body.type === "BlockStatement") {
        return new Function(params, source.slice(body[0] + 1, body[1] - 1));
      }
      return new Function(params, "return " + source.slice(body[0], body[1]));
    }
    function representJavascriptFunction(object) {
      return object.toString();
    }
    function isFunction(object) {
      return Object.prototype.toString.call(object) === "[object Function]";
    }
    var esprima;
    try {
      _require = __require5;
      esprima = _require("esprima");
    } catch (_) {
      if (typeof window !== "undefined")
        esprima = window.esprima;
    }
    var _require;
    var Type = require_type();
    module2.exports = new Type("tag:yaml.org,2002:js/function", {
      kind: "scalar",
      resolve: resolveJavascriptFunction,
      construct: constructJavascriptFunction,
      predicate: isFunction,
      represent: representJavascriptFunction
    });
  });
  var require_default_full = __commonJS2((exports2, module2) => {
    var Schema = require_schema();
    module2.exports = Schema.DEFAULT = new Schema({
      include: [
        require_default_safe()
      ],
      explicit: [
        require_undefined(),
        require_regexp(),
        require_function()
      ]
    });
  });
  var require_loader = __commonJS2((exports2, module2) => {
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function is_EOL(c) {
      return c === 10 || c === 13;
    }
    function is_WHITE_SPACE(c) {
      return c === 9 || c === 32;
    }
    function is_WS_OR_EOL(c) {
      return c === 9 || c === 32 || c === 10 || c === 13;
    }
    function is_FLOW_INDICATOR(c) {
      return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
    }
    function fromHexCode(c) {
      var lc;
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      lc = c | 32;
      if (97 <= lc && lc <= 102) {
        return lc - 97 + 10;
      }
      return -1;
    }
    function escapedHexLen(c) {
      if (c === 120) {
        return 2;
      }
      if (c === 117) {
        return 4;
      }
      if (c === 85) {
        return 8;
      }
      return 0;
    }
    function fromDecimalCode(c) {
      if (48 <= c && c <= 57) {
        return c - 48;
      }
      return -1;
    }
    function simpleEscapeSequence(c) {
      return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? `
` : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? `\r` : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
    }
    function charFromCodepoint(c) {
      if (c <= 65535) {
        return String.fromCharCode(c);
      }
      return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
    }
    function State(input, options2) {
      this.input = input;
      this.filename = options2["filename"] || null;
      this.schema = options2["schema"] || DEFAULT_FULL_SCHEMA;
      this.onWarning = options2["onWarning"] || null;
      this.legacy = options2["legacy"] || false;
      this.json = options2["json"] || false;
      this.listener = options2["listener"] || null;
      this.implicitTypes = this.schema.compiledImplicit;
      this.typeMap = this.schema.compiledTypeMap;
      this.length = input.length;
      this.position = 0;
      this.line = 0;
      this.lineStart = 0;
      this.lineIndent = 0;
      this.documents = [];
    }
    function generateError(state, message) {
      return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
    }
    function throwError(state, message) {
      throw generateError(state, message);
    }
    function throwWarning(state, message) {
      if (state.onWarning) {
        state.onWarning.call(null, generateError(state, message));
      }
    }
    function captureSegment(state, start, end, checkJson) {
      var _position, _length, _character, _result;
      if (start < end) {
        _result = state.input.slice(start, end);
        if (checkJson) {
          for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
            _character = _result.charCodeAt(_position);
            if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
              throwError(state, "expected valid JSON character");
            }
          }
        } else if (PATTERN_NON_PRINTABLE.test(_result)) {
          throwError(state, "the stream contains non-printable characters");
        }
        state.result += _result;
      }
    }
    function mergeMappings(state, destination, source, overridableKeys) {
      var sourceKeys, key, index2, quantity;
      if (!common.isObject(source)) {
        throwError(state, "cannot merge mappings; the provided source object is unacceptable");
      }
      sourceKeys = Object.keys(source);
      for (index2 = 0, quantity = sourceKeys.length; index2 < quantity; index2 += 1) {
        key = sourceKeys[index2];
        if (!_hasOwnProperty.call(destination, key)) {
          destination[key] = source[key];
          overridableKeys[key] = true;
        }
      }
    }
    function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
      var index2, quantity;
      if (Array.isArray(keyNode)) {
        keyNode = Array.prototype.slice.call(keyNode);
        for (index2 = 0, quantity = keyNode.length; index2 < quantity; index2 += 1) {
          if (Array.isArray(keyNode[index2])) {
            throwError(state, "nested arrays are not supported inside keys");
          }
          if (typeof keyNode === "object" && _class(keyNode[index2]) === "[object Object]") {
            keyNode[index2] = "[object Object]";
          }
        }
      }
      if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
        keyNode = "[object Object]";
      }
      keyNode = String(keyNode);
      if (_result === null) {
        _result = {};
      }
      if (keyTag === "tag:yaml.org,2002:merge") {
        if (Array.isArray(valueNode)) {
          for (index2 = 0, quantity = valueNode.length; index2 < quantity; index2 += 1) {
            mergeMappings(state, _result, valueNode[index2], overridableKeys);
          }
        } else {
          mergeMappings(state, _result, valueNode, overridableKeys);
        }
      } else {
        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
          state.line = startLine || state.line;
          state.position = startPos || state.position;
          throwError(state, "duplicated mapping key");
        }
        _result[keyNode] = valueNode;
        delete overridableKeys[keyNode];
      }
      return _result;
    }
    function readLineBreak(state) {
      var ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 10) {
        state.position++;
      } else if (ch === 13) {
        state.position++;
        if (state.input.charCodeAt(state.position) === 10) {
          state.position++;
        }
      } else {
        throwError(state, "a line break is expected");
      }
      state.line += 1;
      state.lineStart = state.position;
    }
    function skipSeparationSpace(state, allowComments, checkIndent) {
      var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (allowComments && ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 10 && ch !== 13 && ch !== 0);
        }
        if (is_EOL(ch)) {
          readLineBreak(state);
          ch = state.input.charCodeAt(state.position);
          lineBreaks++;
          state.lineIndent = 0;
          while (ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
        } else {
          break;
        }
      }
      if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
        throwWarning(state, "deficient indentation");
      }
      return lineBreaks;
    }
    function testDocumentSeparator(state) {
      var _position = state.position, ch;
      ch = state.input.charCodeAt(_position);
      if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
        _position += 3;
        ch = state.input.charCodeAt(_position);
        if (ch === 0 || is_WS_OR_EOL(ch)) {
          return true;
        }
      }
      return false;
    }
    function writeFoldedLines(state, count) {
      if (count === 1) {
        state.result += " ";
      } else if (count > 1) {
        state.result += common.repeat("\n", count - 1);
      }
    }
    function readPlainScalar(state, nodeIndent, withinFlowCollection) {
      var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
      ch = state.input.charCodeAt(state.position);
      if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
        return false;
      }
      if (ch === 63 || ch === 45) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          return false;
        }
      }
      state.kind = "scalar";
      state.result = "";
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
      while (ch !== 0) {
        if (ch === 58) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            break;
          }
        } else if (ch === 35) {
          preceding = state.input.charCodeAt(state.position - 1);
          if (is_WS_OR_EOL(preceding)) {
            break;
          }
        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
          break;
        } else if (is_EOL(ch)) {
          _line = state.line;
          _lineStart = state.lineStart;
          _lineIndent = state.lineIndent;
          skipSeparationSpace(state, false, -1);
          if (state.lineIndent >= nodeIndent) {
            hasPendingContent = true;
            ch = state.input.charCodeAt(state.position);
            continue;
          } else {
            state.position = captureEnd;
            state.line = _line;
            state.lineStart = _lineStart;
            state.lineIndent = _lineIndent;
            break;
          }
        }
        if (hasPendingContent) {
          captureSegment(state, captureStart, captureEnd, false);
          writeFoldedLines(state, state.line - _line);
          captureStart = captureEnd = state.position;
          hasPendingContent = false;
        }
        if (!is_WHITE_SPACE(ch)) {
          captureEnd = state.position + 1;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, captureEnd, false);
      if (state.result) {
        return true;
      }
      state.kind = _kind;
      state.result = _result;
      return false;
    }
    function readSingleQuotedScalar(state, nodeIndent) {
      var ch, captureStart, captureEnd;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 39) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 39) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (ch === 39) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
            return true;
          }
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a single quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a single quoted scalar");
    }
    function readDoubleQuotedScalar(state, nodeIndent) {
      var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 34) {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      state.position++;
      captureStart = captureEnd = state.position;
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        if (ch === 34) {
          captureSegment(state, captureStart, state.position, true);
          state.position++;
          return true;
        } else if (ch === 92) {
          captureSegment(state, captureStart, state.position, true);
          ch = state.input.charCodeAt(++state.position);
          if (is_EOL(ch)) {
            skipSeparationSpace(state, false, nodeIndent);
          } else if (ch < 256 && simpleEscapeCheck[ch]) {
            state.result += simpleEscapeMap[ch];
            state.position++;
          } else if ((tmp = escapedHexLen(ch)) > 0) {
            hexLength = tmp;
            hexResult = 0;
            for (; hexLength > 0; hexLength--) {
              ch = state.input.charCodeAt(++state.position);
              if ((tmp = fromHexCode(ch)) >= 0) {
                hexResult = (hexResult << 4) + tmp;
              } else {
                throwError(state, "expected hexadecimal character");
              }
            }
            state.result += charFromCodepoint(hexResult);
            state.position++;
          } else {
            throwError(state, "unknown escape sequence");
          }
          captureStart = captureEnd = state.position;
        } else if (is_EOL(ch)) {
          captureSegment(state, captureStart, captureEnd, true);
          writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
          captureStart = captureEnd = state.position;
        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
          throwError(state, "unexpected end of the document within a double quoted scalar");
        } else {
          state.position++;
          captureEnd = state.position;
        }
      }
      throwError(state, "unexpected end of the stream within a double quoted scalar");
    }
    function readFlowCollection(state, nodeIndent) {
      var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 91) {
        terminator = 93;
        isMapping = false;
        _result = [];
      } else if (ch === 123) {
        terminator = 125;
        isMapping = true;
        _result = {};
      } else {
        return false;
      }
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(++state.position);
      while (ch !== 0) {
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === terminator) {
          state.position++;
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = isMapping ? "mapping" : "sequence";
          state.result = _result;
          return true;
        } else if (!readNext) {
          throwError(state, "missed comma between flow collection entries");
        }
        keyTag = keyNode = valueNode = null;
        isPair = isExplicitPair = false;
        if (ch === 63) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following)) {
            isPair = isExplicitPair = true;
            state.position++;
            skipSeparationSpace(state, true, nodeIndent);
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        keyTag = state.tag;
        keyNode = state.result;
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if ((isExplicitPair || state.line === _line) && ch === 58) {
          isPair = true;
          ch = state.input.charCodeAt(++state.position);
          skipSeparationSpace(state, true, nodeIndent);
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          valueNode = state.result;
        }
        if (isMapping) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
        } else if (isPair) {
          _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
        } else {
          _result.push(keyNode);
        }
        skipSeparationSpace(state, true, nodeIndent);
        ch = state.input.charCodeAt(state.position);
        if (ch === 44) {
          readNext = true;
          ch = state.input.charCodeAt(++state.position);
        } else {
          readNext = false;
        }
      }
      throwError(state, "unexpected end of the stream within a flow collection");
    }
    function readBlockScalar(state, nodeIndent) {
      var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch === 124) {
        folding = false;
      } else if (ch === 62) {
        folding = true;
      } else {
        return false;
      }
      state.kind = "scalar";
      state.result = "";
      while (ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
        if (ch === 43 || ch === 45) {
          if (CHOMPING_CLIP === chomping) {
            chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
          } else {
            throwError(state, "repeat of a chomping mode identifier");
          }
        } else if ((tmp = fromDecimalCode(ch)) >= 0) {
          if (tmp === 0) {
            throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
          } else if (!detectedIndent) {
            textIndent = nodeIndent + tmp - 1;
            detectedIndent = true;
          } else {
            throwError(state, "repeat of an indentation width identifier");
          }
        } else {
          break;
        }
      }
      if (is_WHITE_SPACE(ch)) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (is_WHITE_SPACE(ch));
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (!is_EOL(ch) && ch !== 0);
        }
      }
      while (ch !== 0) {
        readLineBreak(state);
        state.lineIndent = 0;
        ch = state.input.charCodeAt(state.position);
        while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
        if (!detectedIndent && state.lineIndent > textIndent) {
          textIndent = state.lineIndent;
        }
        if (is_EOL(ch)) {
          emptyLines++;
          continue;
        }
        if (state.lineIndent < textIndent) {
          if (chomping === CHOMPING_KEEP) {
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (chomping === CHOMPING_CLIP) {
            if (didReadContent) {
              state.result += "\n";
            }
          }
          break;
        }
        if (folding) {
          if (is_WHITE_SPACE(ch)) {
            atMoreIndented = true;
            state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          } else if (atMoreIndented) {
            atMoreIndented = false;
            state.result += common.repeat("\n", emptyLines + 1);
          } else if (emptyLines === 0) {
            if (didReadContent) {
              state.result += " ";
            }
          } else {
            state.result += common.repeat("\n", emptyLines);
          }
        } else {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        }
        didReadContent = true;
        detectedIndent = true;
        emptyLines = 0;
        captureStart = state.position;
        while (!is_EOL(ch) && ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, state.position, false);
      }
      return true;
    }
    function readBlockSequence(state, nodeIndent) {
      var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        if (ch !== 45) {
          break;
        }
        following = state.input.charCodeAt(state.position + 1);
        if (!is_WS_OR_EOL(following)) {
          break;
        }
        detected = true;
        state.position++;
        if (skipSeparationSpace(state, true, -1)) {
          if (state.lineIndent <= nodeIndent) {
            _result.push(null);
            ch = state.input.charCodeAt(state.position);
            continue;
          }
        }
        _line = state.line;
        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
        _result.push(state.result);
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
          throwError(state, "bad indentation of a sequence entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "sequence";
        state.result = _result;
        return true;
      }
      return false;
    }
    function readBlockMapping(state, nodeIndent, flowIndent) {
      var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = _result;
      }
      ch = state.input.charCodeAt(state.position);
      while (ch !== 0) {
        following = state.input.charCodeAt(state.position + 1);
        _line = state.line;
        _pos = state.position;
        if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
          if (ch === 63) {
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = true;
            allowCompact = true;
          } else if (atExplicitKey) {
            atExplicitKey = false;
            allowCompact = true;
          } else {
            throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
          }
          state.position += 1;
          ch = following;
        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
          if (state.line === _line) {
            ch = state.input.charCodeAt(state.position);
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 58) {
              ch = state.input.charCodeAt(++state.position);
              if (!is_WS_OR_EOL(ch)) {
                throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
              }
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = false;
              allowCompact = false;
              keyTag = state.tag;
              keyNode = state.result;
            } else if (detected) {
              throwError(state, "can not read an implicit mapping pair; a colon is missed");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else if (detected) {
            throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else {
          break;
        }
        if (state.line === _line || state.lineIndent > nodeIndent) {
          if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
            if (atExplicitKey) {
              keyNode = state.result;
            } else {
              valueNode = state.result;
            }
          }
          if (!atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
            keyTag = keyNode = valueNode = null;
          }
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
        }
        if (state.lineIndent > nodeIndent && ch !== 0) {
          throwError(state, "bad indentation of a mapping entry");
        } else if (state.lineIndent < nodeIndent) {
          break;
        }
      }
      if (atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
      }
      if (detected) {
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = "mapping";
        state.result = _result;
      }
      return detected;
    }
    function readTagProperty(state) {
      var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 33)
        return false;
      if (state.tag !== null) {
        throwError(state, "duplication of a tag property");
      }
      ch = state.input.charCodeAt(++state.position);
      if (ch === 60) {
        isVerbatim = true;
        ch = state.input.charCodeAt(++state.position);
      } else if (ch === 33) {
        isNamed = true;
        tagHandle = "!!";
        ch = state.input.charCodeAt(++state.position);
      } else {
        tagHandle = "!";
      }
      _position = state.position;
      if (isVerbatim) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && ch !== 62);
        if (state.position < state.length) {
          tagName = state.input.slice(_position, state.position);
          ch = state.input.charCodeAt(++state.position);
        } else {
          throwError(state, "unexpected end of the stream within a verbatim tag");
        }
      } else {
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          if (ch === 33) {
            if (!isNamed) {
              tagHandle = state.input.slice(_position - 1, state.position + 1);
              if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                throwError(state, "named tag handle cannot contain such characters");
              }
              isNamed = true;
              _position = state.position + 1;
            } else {
              throwError(state, "tag suffix cannot contain exclamation marks");
            }
          }
          ch = state.input.charCodeAt(++state.position);
        }
        tagName = state.input.slice(_position, state.position);
        if (PATTERN_FLOW_INDICATORS.test(tagName)) {
          throwError(state, "tag suffix cannot contain flow indicator characters");
        }
      }
      if (tagName && !PATTERN_TAG_URI.test(tagName)) {
        throwError(state, "tag name cannot contain such characters: " + tagName);
      }
      if (isVerbatim) {
        state.tag = tagName;
      } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
        state.tag = state.tagMap[tagHandle] + tagName;
      } else if (tagHandle === "!") {
        state.tag = "!" + tagName;
      } else if (tagHandle === "!!") {
        state.tag = "tag:yaml.org,2002:" + tagName;
      } else {
        throwError(state, 'undeclared tag handle "' + tagHandle + '"');
      }
      return true;
    }
    function readAnchorProperty(state) {
      var _position, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 38)
        return false;
      if (state.anchor !== null) {
        throwError(state, "duplication of an anchor property");
      }
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an anchor node must contain at least one character");
      }
      state.anchor = state.input.slice(_position, state.position);
      return true;
    }
    function readAlias(state) {
      var _position, alias, ch;
      ch = state.input.charCodeAt(state.position);
      if (ch !== 42)
        return false;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (state.position === _position) {
        throwError(state, "name of an alias node must contain at least one character");
      }
      alias = state.input.slice(_position, state.position);
      if (!_hasOwnProperty.call(state.anchorMap, alias)) {
        throwError(state, 'unidentified alias "' + alias + '"');
      }
      state.result = state.anchorMap[alias];
      skipSeparationSpace(state, true, -1);
      return true;
    }
    function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
      var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
      if (state.listener !== null) {
        state.listener("open", state);
      }
      state.tag = null;
      state.anchor = null;
      state.kind = null;
      state.result = null;
      allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
      if (allowToSeek) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        }
      }
      if (indentStatus === 1) {
        while (readTagProperty(state) || readAnchorProperty(state)) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            allowBlockCollections = allowBlockStyles;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          } else {
            allowBlockCollections = false;
          }
        }
      }
      if (allowBlockCollections) {
        allowBlockCollections = atNewLine || allowCompact;
      }
      if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
          flowIndent = parentIndent;
        } else {
          flowIndent = parentIndent + 1;
        }
        blockIndent = state.position - state.lineStart;
        if (indentStatus === 1) {
          if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
            hasContent = true;
          } else {
            if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
              hasContent = true;
            } else if (readAlias(state)) {
              hasContent = true;
              if (state.tag !== null || state.anchor !== null) {
                throwError(state, "alias node should not have any properties");
              }
            } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
              hasContent = true;
              if (state.tag === null) {
                state.tag = "?";
              }
            }
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else if (indentStatus === 0) {
          hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
        }
      }
      if (state.tag !== null && state.tag !== "!") {
        if (state.tag === "?") {
          if (state.result !== null && state.kind !== "scalar") {
            throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
          }
          for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
            type = state.implicitTypes[typeIndex];
            if (type.resolve(state.result)) {
              state.result = type.construct(state.result);
              state.tag = type.tag;
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
              break;
            }
          }
        } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
          type = state.typeMap[state.kind || "fallback"][state.tag];
          if (state.result !== null && type.kind !== state.kind) {
            throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
          }
          if (!type.resolve(state.result)) {
            throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
          } else {
            state.result = type.construct(state.result);
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        } else {
          throwError(state, "unknown tag !<" + state.tag + ">");
        }
      }
      if (state.listener !== null) {
        state.listener("close", state);
      }
      return state.tag !== null || state.anchor !== null || hasContent;
    }
    function readDocument(state) {
      var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
      state.version = null;
      state.checkLineBreaks = state.legacy;
      state.tagMap = {};
      state.anchorMap = {};
      while ((ch = state.input.charCodeAt(state.position)) !== 0) {
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
        if (state.lineIndent > 0 || ch !== 37) {
          break;
        }
        hasDirectives = true;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveName = state.input.slice(_position, state.position);
        directiveArgs = [];
        if (directiveName.length < 1) {
          throwError(state, "directive name must not be less than one character in length");
        }
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 0 && !is_EOL(ch));
            break;
          }
          if (is_EOL(ch))
            break;
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveArgs.push(state.input.slice(_position, state.position));
        }
        if (ch !== 0)
          readLineBreak(state);
        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
          directiveHandlers[directiveName](state, directiveName, directiveArgs);
        } else {
          throwWarning(state, 'unknown document directive "' + directiveName + '"');
        }
      }
      skipSeparationSpace(state, true, -1);
      if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      } else if (hasDirectives) {
        throwError(state, "directives end mark is expected");
      }
      composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
      skipSeparationSpace(state, true, -1);
      if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
        throwWarning(state, "non-ASCII line breaks are interpreted as content");
      }
      state.documents.push(state.result);
      if (state.position === state.lineStart && testDocumentSeparator(state)) {
        if (state.input.charCodeAt(state.position) === 46) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        }
        return;
      }
      if (state.position < state.length - 1) {
        throwError(state, "end of the stream or a document separator is expected");
      } else {
        return;
      }
    }
    function loadDocuments(input, options2) {
      input = String(input);
      options2 = options2 || {};
      if (input.length !== 0) {
        if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
          input += "\n";
        }
        if (input.charCodeAt(0) === 65279) {
          input = input.slice(1);
        }
      }
      var state = new State(input, options2);
      var nullpos = input.indexOf("\0");
      if (nullpos !== -1) {
        state.position = nullpos;
        throwError(state, "null byte is not allowed in input");
      }
      state.input += "\0";
      while (state.input.charCodeAt(state.position) === 32) {
        state.lineIndent += 1;
        state.position += 1;
      }
      while (state.position < state.length - 1) {
        readDocument(state);
      }
      return state.documents;
    }
    function loadAll(input, iterator, options2) {
      if (iterator !== null && typeof iterator === "object" && typeof options2 === "undefined") {
        options2 = iterator;
        iterator = null;
      }
      var documents = loadDocuments(input, options2);
      if (typeof iterator !== "function") {
        return documents;
      }
      for (var index2 = 0, length = documents.length; index2 < length; index2 += 1) {
        iterator(documents[index2]);
      }
    }
    function load(input, options2) {
      var documents = loadDocuments(input, options2);
      if (documents.length === 0) {
        return;
      } else if (documents.length === 1) {
        return documents[0];
      }
      throw new YAMLException("expected a single document in the stream, but found more");
    }
    function safeLoadAll(input, iterator, options2) {
      if (typeof iterator === "object" && iterator !== null && typeof options2 === "undefined") {
        options2 = iterator;
        iterator = null;
      }
      return loadAll(input, iterator, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
    }
    function safeLoad(input, options2) {
      return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
    }
    var common = require_common();
    var YAMLException = require_exception();
    var Mark = require_mark();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CONTEXT_FLOW_IN = 1;
    var CONTEXT_FLOW_OUT = 2;
    var CONTEXT_BLOCK_IN = 3;
    var CONTEXT_BLOCK_OUT = 4;
    var CHOMPING_CLIP = 1;
    var CHOMPING_STRIP = 2;
    var CHOMPING_KEEP = 3;
    var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
    var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
    var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
    var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
    var simpleEscapeCheck = new Array(256);
    var simpleEscapeMap = new Array(256);
    for (i = 0; i < 256; i++) {
      simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
      simpleEscapeMap[i] = simpleEscapeSequence(i);
    }
    var i;
    var directiveHandlers = {
      YAML: function handleYamlDirective(state, name, args) {
        var match, major, minor;
        if (state.version !== null) {
          throwError(state, "duplication of %YAML directive");
        }
        if (args.length !== 1) {
          throwError(state, "YAML directive accepts exactly one argument");
        }
        match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
        if (match === null) {
          throwError(state, "ill-formed argument of the YAML directive");
        }
        major = parseInt(match[1], 10);
        minor = parseInt(match[2], 10);
        if (major !== 1) {
          throwError(state, "unacceptable YAML version of the document");
        }
        state.version = args[0];
        state.checkLineBreaks = minor < 2;
        if (minor !== 1 && minor !== 2) {
          throwWarning(state, "unsupported YAML version of the document");
        }
      },
      TAG: function handleTagDirective(state, name, args) {
        var handle, prefix;
        if (args.length !== 2) {
          throwError(state, "TAG directive accepts exactly two arguments");
        }
        handle = args[0];
        prefix = args[1];
        if (!PATTERN_TAG_HANDLE.test(handle)) {
          throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
        }
        if (_hasOwnProperty.call(state.tagMap, handle)) {
          throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
        }
        if (!PATTERN_TAG_URI.test(prefix)) {
          throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
        }
        state.tagMap[handle] = prefix;
      }
    };
    exports2.loadAll = loadAll;
    exports2.load = load;
    exports2.safeLoadAll = safeLoadAll;
    exports2.safeLoad = safeLoad;
  });
  var require_dumper = __commonJS2((exports2, module2) => {
    function compileStyleMap(schema, map) {
      var result, keys, index2, length, tag, style, type;
      if (map === null)
        return {};
      result = {};
      keys = Object.keys(map);
      for (index2 = 0, length = keys.length; index2 < length; index2 += 1) {
        tag = keys[index2];
        style = String(map[tag]);
        if (tag.slice(0, 2) === "!!") {
          tag = "tag:yaml.org,2002:" + tag.slice(2);
        }
        type = schema.compiledTypeMap["fallback"][tag];
        if (type && _hasOwnProperty.call(type.styleAliases, style)) {
          style = type.styleAliases[style];
        }
        result[tag] = style;
      }
      return result;
    }
    function encodeHex(character) {
      var string, handle, length;
      string = character.toString(16).toUpperCase();
      if (character <= 255) {
        handle = "x";
        length = 2;
      } else if (character <= 65535) {
        handle = "u";
        length = 4;
      } else if (character <= 4294967295) {
        handle = "U";
        length = 8;
      } else {
        throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
      }
      return "\\" + handle + common.repeat("0", length - string.length) + string;
    }
    function State(options2) {
      this.schema = options2["schema"] || DEFAULT_FULL_SCHEMA;
      this.indent = Math.max(1, options2["indent"] || 2);
      this.noArrayIndent = options2["noArrayIndent"] || false;
      this.skipInvalid = options2["skipInvalid"] || false;
      this.flowLevel = common.isNothing(options2["flowLevel"]) ? -1 : options2["flowLevel"];
      this.styleMap = compileStyleMap(this.schema, options2["styles"] || null);
      this.sortKeys = options2["sortKeys"] || false;
      this.lineWidth = options2["lineWidth"] || 80;
      this.noRefs = options2["noRefs"] || false;
      this.noCompatMode = options2["noCompatMode"] || false;
      this.condenseFlow = options2["condenseFlow"] || false;
      this.implicitTypes = this.schema.compiledImplicit;
      this.explicitTypes = this.schema.compiledExplicit;
      this.tag = null;
      this.result = "";
      this.duplicates = [];
      this.usedDuplicates = null;
    }
    function indentString(string, spaces) {
      var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
      while (position < length) {
        next = string.indexOf("\n", position);
        if (next === -1) {
          line = string.slice(position);
          position = length;
        } else {
          line = string.slice(position, next + 1);
          position = next + 1;
        }
        if (line.length && line !== "\n")
          result += ind;
        result += line;
      }
      return result;
    }
    function generateNextLine(state, level) {
      return "\n" + common.repeat(" ", state.indent * level);
    }
    function testImplicitResolving(state, str2) {
      var index2, length, type;
      for (index2 = 0, length = state.implicitTypes.length; index2 < length; index2 += 1) {
        type = state.implicitTypes[index2];
        if (type.resolve(str2)) {
          return true;
        }
      }
      return false;
    }
    function isWhitespace(c) {
      return c === CHAR_SPACE || c === CHAR_TAB;
    }
    function isPrintable(c) {
      return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
    }
    function isNsChar(c) {
      return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
    }
    function isPlainSafe(c, prev) {
      return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
    }
    function isPlainSafeFirst(c) {
      return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
    }
    function needIndentIndicator(string) {
      var leadingSpaceRe = /^\n* /;
      return leadingSpaceRe.test(string);
    }
    function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
      var i;
      var char, prev_char;
      var hasLineBreak = false;
      var hasFoldableLine = false;
      var shouldTrackWidth = lineWidth !== -1;
      var previousLineBreak = -1;
      var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
      if (singleLineOnly) {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
      } else {
        for (i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char === CHAR_LINE_FEED) {
            hasLineBreak = true;
            if (shouldTrackWidth) {
              hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
              previousLineBreak = i;
            }
          } else if (!isPrintable(char)) {
            return STYLE_DOUBLE;
          }
          prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
          plain = plain && isPlainSafe(char, prev_char);
        }
        hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
      }
      if (!hasLineBreak && !hasFoldableLine) {
        return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
      }
      if (indentPerLevel > 9 && needIndentIndicator(string)) {
        return STYLE_DOUBLE;
      }
      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    }
    function writeScalar(state, string, level, iskey) {
      state.dump = function() {
        if (string.length === 0) {
          return "''";
        }
        if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
          return "'" + string + "'";
        }
        var indent = state.indent * Math.max(1, level);
        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
        function testAmbiguity(string2) {
          return testImplicitResolving(state, string2);
        }
        switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return '"' + escapeString(string, lineWidth) + '"';
          default:
            throw new YAMLException("impossible error: invalid scalar style");
        }
      }();
    }
    function blockHeader(string, indentPerLevel) {
      var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
      var clip = string[string.length - 1] === "\n";
      var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
      var chomp = keep ? "+" : clip ? "" : "-";
      return indentIndicator + chomp + "\n";
    }
    function dropEndingNewline(string) {
      return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
    }
    function foldString(string, width) {
      var lineRe = /(\n+)([^\n]*)/g;
      var result = function() {
        var nextLF = string.indexOf("\n");
        nextLF = nextLF !== -1 ? nextLF : string.length;
        lineRe.lastIndex = nextLF;
        return foldLine(string.slice(0, nextLF), width);
      }();
      var prevMoreIndented = string[0] === "\n" || string[0] === " ";
      var moreIndented;
      var match;
      while (match = lineRe.exec(string)) {
        var prefix = match[1], line = match[2];
        moreIndented = line[0] === " ";
        result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
        prevMoreIndented = moreIndented;
      }
      return result;
    }
    function foldLine(line, width) {
      if (line === "" || line[0] === " ")
        return line;
      var breakRe = / [^ ]/g;
      var match;
      var start = 0, end, curr = 0, next = 0;
      var result = "";
      while (match = breakRe.exec(line)) {
        next = match.index;
        if (next - start > width) {
          end = curr > start ? curr : next;
          result += "\n" + line.slice(start, end);
          start = end + 1;
        }
        curr = next;
      }
      result += "\n";
      if (line.length - start > width && curr > start) {
        result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
      } else {
        result += line.slice(start);
      }
      return result.slice(1);
    }
    function escapeString(string) {
      var result = "";
      var char, nextChar;
      var escapeSeq;
      for (var i = 0; i < string.length; i++) {
        char = string.charCodeAt(i);
        if (char >= 55296 && char <= 56319) {
          nextChar = string.charCodeAt(i + 1);
          if (nextChar >= 56320 && nextChar <= 57343) {
            result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
            i++;
            continue;
          }
        }
        escapeSeq = ESCAPE_SEQUENCES[char];
        result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
      }
      return result;
    }
    function writeFlowSequence(state, level, object) {
      var _result = "", _tag = state.tag, index2, length;
      for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
        if (writeNode(state, level, object[index2], false, false)) {
          if (index2 !== 0)
            _result += "," + (!state.condenseFlow ? " " : "");
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = "[" + _result + "]";
    }
    function writeBlockSequence(state, level, object, compact) {
      var _result = "", _tag = state.tag, index2, length;
      for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
        if (writeNode(state, level + 1, object[index2], true, true)) {
          if (!compact || index2 !== 0) {
            _result += generateNextLine(state, level);
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            _result += "-";
          } else {
            _result += "- ";
          }
          _result += state.dump;
        }
      }
      state.tag = _tag;
      state.dump = _result || "[]";
    }
    function writeFlowMapping(state, level, object) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index2, length, objectKey, objectValue, pairBuffer;
      for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
        pairBuffer = "";
        if (index2 !== 0)
          pairBuffer += ", ";
        if (state.condenseFlow)
          pairBuffer += '"';
        objectKey = objectKeyList[index2];
        objectValue = object[objectKey];
        if (!writeNode(state, level, objectKey, false, false)) {
          continue;
        }
        if (state.dump.length > 1024)
          pairBuffer += "? ";
        pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
        if (!writeNode(state, level, objectValue, false, false)) {
          continue;
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = "{" + _result + "}";
    }
    function writeBlockMapping(state, level, object, compact) {
      var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index2, length, objectKey, objectValue, explicitPair, pairBuffer;
      if (state.sortKeys === true) {
        objectKeyList.sort();
      } else if (typeof state.sortKeys === "function") {
        objectKeyList.sort(state.sortKeys);
      } else if (state.sortKeys) {
        throw new YAMLException("sortKeys must be a boolean or a function");
      }
      for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
        pairBuffer = "";
        if (!compact || index2 !== 0) {
          pairBuffer += generateNextLine(state, level);
        }
        objectKey = objectKeyList[index2];
        objectValue = object[objectKey];
        if (!writeNode(state, level + 1, objectKey, true, true, true)) {
          continue;
        }
        explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
        if (explicitPair) {
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += "?";
          } else {
            pairBuffer += "? ";
          }
        }
        pairBuffer += state.dump;
        if (explicitPair) {
          pairBuffer += generateNextLine(state, level);
        }
        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
          continue;
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += ":";
        } else {
          pairBuffer += ": ";
        }
        pairBuffer += state.dump;
        _result += pairBuffer;
      }
      state.tag = _tag;
      state.dump = _result || "{}";
    }
    function detectType(state, object, explicit) {
      var _result, typeList, index2, length, type, style;
      typeList = explicit ? state.explicitTypes : state.implicitTypes;
      for (index2 = 0, length = typeList.length; index2 < length; index2 += 1) {
        type = typeList[index2];
        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
          state.tag = explicit ? type.tag : "?";
          if (type.represent) {
            style = state.styleMap[type.tag] || type.defaultStyle;
            if (_toString.call(type.represent) === "[object Function]") {
              _result = type.represent(object, style);
            } else if (_hasOwnProperty.call(type.represent, style)) {
              _result = type.represent[style](object, style);
            } else {
              throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
            }
            state.dump = _result;
          }
          return true;
        }
      }
      return false;
    }
    function writeNode(state, level, object, block, compact, iskey) {
      state.tag = null;
      state.dump = object;
      if (!detectType(state, object, false)) {
        detectType(state, object, true);
      }
      var type = _toString.call(state.dump);
      if (block) {
        block = state.flowLevel < 0 || state.flowLevel > level;
      }
      var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
      if (objectOrArray) {
        duplicateIndex = state.duplicates.indexOf(object);
        duplicate = duplicateIndex !== -1;
      }
      if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
        compact = false;
      }
      if (duplicate && state.usedDuplicates[duplicateIndex]) {
        state.dump = "*ref_" + duplicateIndex;
      } else {
        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
          state.usedDuplicates[duplicateIndex] = true;
        }
        if (type === "[object Object]") {
          if (block && Object.keys(state.dump).length !== 0) {
            writeBlockMapping(state, level, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowMapping(state, level, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object Array]") {
          var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
          if (block && state.dump.length !== 0) {
            writeBlockSequence(state, arrayLevel, state.dump, compact);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + state.dump;
            }
          } else {
            writeFlowSequence(state, arrayLevel, state.dump);
            if (duplicate) {
              state.dump = "&ref_" + duplicateIndex + " " + state.dump;
            }
          }
        } else if (type === "[object String]") {
          if (state.tag !== "?") {
            writeScalar(state, state.dump, level, iskey);
          }
        } else {
          if (state.skipInvalid)
            return false;
          throw new YAMLException("unacceptable kind of an object to dump " + type);
        }
        if (state.tag !== null && state.tag !== "?") {
          state.dump = "!<" + state.tag + "> " + state.dump;
        }
      }
      return true;
    }
    function getDuplicateReferences(object, state) {
      var objects = [], duplicatesIndexes = [], index2, length;
      inspectNode(object, objects, duplicatesIndexes);
      for (index2 = 0, length = duplicatesIndexes.length; index2 < length; index2 += 1) {
        state.duplicates.push(objects[duplicatesIndexes[index2]]);
      }
      state.usedDuplicates = new Array(length);
    }
    function inspectNode(object, objects, duplicatesIndexes) {
      var objectKeyList, index2, length;
      if (object !== null && typeof object === "object") {
        index2 = objects.indexOf(object);
        if (index2 !== -1) {
          if (duplicatesIndexes.indexOf(index2) === -1) {
            duplicatesIndexes.push(index2);
          }
        } else {
          objects.push(object);
          if (Array.isArray(object)) {
            for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
              inspectNode(object[index2], objects, duplicatesIndexes);
            }
          } else {
            objectKeyList = Object.keys(object);
            for (index2 = 0, length = objectKeyList.length; index2 < length; index2 += 1) {
              inspectNode(object[objectKeyList[index2]], objects, duplicatesIndexes);
            }
          }
        }
      }
    }
    function dump(input, options2) {
      options2 = options2 || {};
      var state = new State(options2);
      if (!state.noRefs)
        getDuplicateReferences(input, state);
      if (writeNode(state, 0, input, true, true))
        return state.dump + "\n";
      return "";
    }
    function safeDump(input, options2) {
      return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options2));
    }
    var common = require_common();
    var YAMLException = require_exception();
    var DEFAULT_FULL_SCHEMA = require_default_full();
    var DEFAULT_SAFE_SCHEMA = require_default_safe();
    var _toString = Object.prototype.toString;
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var CHAR_TAB = 9;
    var CHAR_LINE_FEED = 10;
    var CHAR_CARRIAGE_RETURN = 13;
    var CHAR_SPACE = 32;
    var CHAR_EXCLAMATION = 33;
    var CHAR_DOUBLE_QUOTE = 34;
    var CHAR_SHARP = 35;
    var CHAR_PERCENT = 37;
    var CHAR_AMPERSAND = 38;
    var CHAR_SINGLE_QUOTE = 39;
    var CHAR_ASTERISK = 42;
    var CHAR_COMMA = 44;
    var CHAR_MINUS = 45;
    var CHAR_COLON = 58;
    var CHAR_EQUALS = 61;
    var CHAR_GREATER_THAN = 62;
    var CHAR_QUESTION = 63;
    var CHAR_COMMERCIAL_AT = 64;
    var CHAR_LEFT_SQUARE_BRACKET = 91;
    var CHAR_RIGHT_SQUARE_BRACKET = 93;
    var CHAR_GRAVE_ACCENT = 96;
    var CHAR_LEFT_CURLY_BRACKET = 123;
    var CHAR_VERTICAL_LINE = 124;
    var CHAR_RIGHT_CURLY_BRACKET = 125;
    var ESCAPE_SEQUENCES = {};
    ESCAPE_SEQUENCES[0] = "\\0";
    ESCAPE_SEQUENCES[7] = "\\a";
    ESCAPE_SEQUENCES[8] = "\\b";
    ESCAPE_SEQUENCES[9] = "\\t";
    ESCAPE_SEQUENCES[10] = "\\n";
    ESCAPE_SEQUENCES[11] = "\\v";
    ESCAPE_SEQUENCES[12] = "\\f";
    ESCAPE_SEQUENCES[13] = "\\r";
    ESCAPE_SEQUENCES[27] = "\\e";
    ESCAPE_SEQUENCES[34] = '\\"';
    ESCAPE_SEQUENCES[92] = "\\\\";
    ESCAPE_SEQUENCES[133] = "\\N";
    ESCAPE_SEQUENCES[160] = "\\_";
    ESCAPE_SEQUENCES[8232] = "\\L";
    ESCAPE_SEQUENCES[8233] = "\\P";
    var DEPRECATED_BOOLEANS_SYNTAX = [
      "y",
      "Y",
      "yes",
      "Yes",
      "YES",
      "on",
      "On",
      "ON",
      "n",
      "N",
      "no",
      "No",
      "NO",
      "off",
      "Off",
      "OFF"
    ];
    var STYLE_PLAIN = 1;
    var STYLE_SINGLE = 2;
    var STYLE_LITERAL = 3;
    var STYLE_FOLDED = 4;
    var STYLE_DOUBLE = 5;
    exports2.dump = dump;
    exports2.safeDump = safeDump;
  });
  var require_js_yaml = __commonJS2((exports2, module2) => {
    function deprecated(name) {
      return function() {
        throw new Error("Function " + name + " is deprecated and cannot be used.");
      };
    }
    var loader = require_loader();
    var dumper = require_dumper();
    exports2.Type = require_type();
    exports2.Schema = require_schema();
    exports2.FAILSAFE_SCHEMA = require_failsafe();
    exports2.JSON_SCHEMA = require_json();
    exports2.CORE_SCHEMA = require_core();
    exports2.DEFAULT_SAFE_SCHEMA = require_default_safe();
    exports2.DEFAULT_FULL_SCHEMA = require_default_full();
    exports2.load = loader.load;
    exports2.loadAll = loader.loadAll;
    exports2.safeLoad = loader.safeLoad;
    exports2.safeLoadAll = loader.safeLoadAll;
    exports2.dump = dumper.dump;
    exports2.safeDump = dumper.safeDump;
    exports2.YAMLException = require_exception();
    exports2.MINIMAL_SCHEMA = require_failsafe();
    exports2.SAFE_SCHEMA = require_default_safe();
    exports2.DEFAULT_SCHEMA = require_default_full();
    exports2.scan = deprecated("scan");
    exports2.parse = deprecated("parse");
    exports2.compose = deprecated("compose");
    exports2.addConstructor = deprecated("addConstructor");
  });
  var require_js_yaml2 = __commonJS2((exports2, module2) => {
    var yaml2 = require_js_yaml();
    module2.exports = yaml2;
  });
  var require_engines = __commonJS2((exports, module) => {
    var yaml = require_js_yaml2();
    var engines = exports = module.exports;
    engines.yaml = {
      parse: yaml.safeLoad.bind(yaml),
      stringify: yaml.safeDump.bind(yaml)
    };
    engines.json = {
      parse: JSON.parse.bind(JSON),
      stringify: function(obj, options2) {
        const opts = Object.assign({ replacer: null, space: 2 }, options2);
        return JSON.stringify(obj, opts.replacer, opts.space);
      }
    };
    engines.javascript = {
      parse: function parse(str, options, wrap) {
        try {
          if (wrap !== false) {
            str = "(function() {\nreturn " + str.trim() + ";\n}());";
          }
          return eval(str) || {};
        } catch (err) {
          if (wrap !== false && /(unexpected|identifier)/i.test(err.message)) {
            return parse(str, options, false);
          }
          throw new SyntaxError(err);
        }
      },
      stringify: function() {
        throw new Error("stringifying JavaScript is not supported");
      }
    };
  });
  var require_strip_bom_string = __commonJS2((exports2, module2) => {
    module2.exports = function(str2) {
      if (typeof str2 === "string" && str2.charAt(0) === "\uFEFF") {
        return str2.slice(1);
      }
      return str2;
    };
  });
  var require_utils9 = __commonJS2((exports2) => {
    var stripBom = require_strip_bom_string();
    var typeOf = require_kind_of();
    exports2.define = function(obj, key, val) {
      Reflect.defineProperty(obj, key, {
        enumerable: false,
        configurable: true,
        writable: true,
        value: val
      });
    };
    exports2.isBuffer = function(val) {
      return typeOf(val) === "buffer";
    };
    exports2.isObject = function(val) {
      return typeOf(val) === "object";
    };
    exports2.toBuffer = function(input) {
      return typeof input === "string" ? Buffer.from(input) : input;
    };
    exports2.toString = function(input) {
      if (exports2.isBuffer(input))
        return stripBom(String(input));
      if (typeof input !== "string") {
        throw new TypeError("expected input to be a string or buffer");
      }
      return stripBom(input);
    };
    exports2.arrayify = function(val) {
      return val ? Array.isArray(val) ? val : [val] : [];
    };
    exports2.startsWith = function(str2, substr, len) {
      if (typeof len !== "number")
        len = substr.length;
      return str2.slice(0, len) === substr;
    };
  });
  var require_defaults = __commonJS2((exports2, module2) => {
    var engines2 = require_engines();
    var utils = require_utils9();
    module2.exports = function(options2) {
      const opts = Object.assign({}, options2);
      opts.delimiters = utils.arrayify(opts.delims || opts.delimiters || "---");
      if (opts.delimiters.length === 1) {
        opts.delimiters.push(opts.delimiters[0]);
      }
      opts.language = (opts.language || opts.lang || "yaml").toLowerCase();
      opts.engines = Object.assign({}, engines2, opts.parsers, opts.engines);
      return opts;
    };
  });
  var require_engine = __commonJS2((exports2, module2) => {
    function aliase(name) {
      switch (name.toLowerCase()) {
        case "js":
        case "javascript":
          return "javascript";
        case "coffee":
        case "coffeescript":
        case "cson":
          return "coffee";
        case "yaml":
        case "yml":
          return "yaml";
        default: {
          return name;
        }
      }
    }
    module2.exports = function(name, options2) {
      let engine = options2.engines[name] || options2.engines[aliase(name)];
      if (typeof engine === "undefined") {
        throw new Error('gray-matter engine "' + name + '" is not registered');
      }
      if (typeof engine === "function") {
        engine = { parse: engine };
      }
      return engine;
    };
  });
  var require_stringify2 = __commonJS2((exports2, module2) => {
    function newline(str2) {
      return str2.slice(-1) !== "\n" ? str2 + "\n" : str2;
    }
    var typeOf = require_kind_of();
    var getEngine = require_engine();
    var defaults = require_defaults();
    module2.exports = function(file, data, options2) {
      if (data == null && options2 == null) {
        switch (typeOf(file)) {
          case "object":
            data = file.data;
            options2 = {};
            break;
          case "string":
            return file;
          default: {
            throw new TypeError("expected file to be a string or object");
          }
        }
      }
      const str2 = file.content;
      const opts = defaults(options2);
      if (data == null) {
        if (!opts.data)
          return file;
        data = opts.data;
      }
      const language = file.language || opts.language;
      const engine = getEngine(language, opts);
      if (typeof engine.stringify !== "function") {
        throw new TypeError('expected "' + language + '.stringify" to be a function');
      }
      data = Object.assign({}, file.data, data);
      const open = opts.delimiters[0];
      const close = opts.delimiters[1];
      const matter = engine.stringify(data, options2).trim();
      let buf = "";
      if (matter !== "{}") {
        buf = newline(open) + newline(matter) + newline(close);
      }
      if (typeof file.excerpt === "string" && file.excerpt !== "") {
        if (str2.indexOf(file.excerpt.trim()) === -1) {
          buf += newline(file.excerpt) + newline(close);
        }
      }
      return buf + newline(str2);
    };
  });
  var require_excerpt = __commonJS2((exports2, module2) => {
    var defaults = require_defaults();
    module2.exports = function(file, options2) {
      const opts = defaults(options2);
      if (file.data == null) {
        file.data = {};
      }
      if (typeof opts.excerpt === "function") {
        return opts.excerpt(file, opts);
      }
      const sep = file.data.excerpt_separator || opts.excerpt_separator;
      if (sep == null && (opts.excerpt === false || opts.excerpt == null)) {
        return file;
      }
      const delimiter = typeof opts.excerpt === "string" ? opts.excerpt : sep || opts.delimiters[0];
      const idx = file.content.indexOf(delimiter);
      if (idx !== -1) {
        file.excerpt = file.content.slice(0, idx);
      }
      return file;
    };
  });
  var require_to_file = __commonJS2((exports2, module2) => {
    var typeOf = require_kind_of();
    var stringify22 = require_stringify2();
    var utils = require_utils9();
    module2.exports = function(file) {
      if (typeOf(file) !== "object") {
        file = { content: file };
      }
      if (typeOf(file.data) !== "object") {
        file.data = {};
      }
      if (file.contents && file.content == null) {
        file.content = file.contents;
      }
      utils.define(file, "orig", utils.toBuffer(file.content));
      utils.define(file, "language", file.language || "");
      utils.define(file, "matter", file.matter || "");
      utils.define(file, "stringify", function(data, options2) {
        if (options2 && options2.language) {
          file.language = options2.language;
        }
        return stringify22(file, data, options2);
      });
      file.content = utils.toString(file.content);
      file.isEmpty = false;
      file.excerpt = "";
      return file;
    };
  });
  var require_parse = __commonJS2((exports2, module2) => {
    var getEngine = require_engine();
    var defaults = require_defaults();
    module2.exports = function(language, str2, options2) {
      const opts = defaults(options2);
      const engine = getEngine(language, opts);
      if (typeof engine.parse !== "function") {
        throw new TypeError('expected "' + language + '.parse" to be a function');
      }
      return engine.parse(str2, opts);
    };
  });
  var require_gray_matter = __commonJS2((exports2, module2) => {
    function matter(input, options2) {
      if (input === "") {
        return { data: {}, content: input, excerpt: "", orig: input };
      }
      let file = toFile(input);
      const cached = matter.cache[file.content];
      if (!options2) {
        if (cached) {
          file = Object.assign({}, cached);
          file.orig = cached.orig;
          return file;
        }
        matter.cache[file.content] = file;
      }
      return parseMatter(file, options2);
    }
    function parseMatter(file, options2) {
      const opts = defaults(options2);
      const open = opts.delimiters[0];
      const close = "\n" + opts.delimiters[1];
      let str2 = file.content;
      if (opts.language) {
        file.language = opts.language;
      }
      const openLen = open.length;
      if (!utils.startsWith(str2, open, openLen)) {
        excerpt(file, opts);
        return file;
      }
      if (str2.charAt(openLen) === open.slice(-1)) {
        return file;
      }
      str2 = str2.slice(openLen);
      const len = str2.length;
      const language = matter.language(str2, opts);
      if (language.name) {
        file.language = language.name;
        str2 = str2.slice(language.raw.length);
      }
      let closeIndex = str2.indexOf(close);
      if (closeIndex === -1) {
        closeIndex = len;
      }
      file.matter = str2.slice(0, closeIndex);
      const block = file.matter.replace(/^\s*#[^\n]+/gm, "").trim();
      if (block === "") {
        file.isEmpty = true;
        file.empty = file.content;
        file.data = {};
      } else {
        file.data = parse2(file.language, file.matter, opts);
      }
      if (closeIndex === len) {
        file.content = "";
      } else {
        file.content = str2.slice(closeIndex + close.length);
        if (file.content[0] === "\r") {
          file.content = file.content.slice(1);
        }
        if (file.content[0] === "\n") {
          file.content = file.content.slice(1);
        }
      }
      excerpt(file, opts);
      if (opts.sections === true || typeof opts.section === "function") {
        sections(file, opts.section);
      }
      return file;
    }
    var fs = __require5("fs");
    var sections = require_section_matter();
    var defaults = require_defaults();
    var stringify22 = require_stringify2();
    var excerpt = require_excerpt();
    var engines2 = require_engines();
    var toFile = require_to_file();
    var parse2 = require_parse();
    var utils = require_utils9();
    matter.engines = engines2;
    matter.stringify = function(file, data, options2) {
      if (typeof file === "string")
        file = matter(file, options2);
      return stringify22(file, data, options2);
    };
    matter.read = function(filepath, options2) {
      const str2 = fs.readFileSync(filepath, "utf8");
      const file = matter(str2, options2);
      file.path = filepath;
      return file;
    };
    matter.test = function(str2, options2) {
      return utils.startsWith(str2, defaults(options2).delimiters[0]);
    };
    matter.language = function(str2, options2) {
      const opts = defaults(options2);
      const open = opts.delimiters[0];
      if (matter.test(str2)) {
        str2 = str2.slice(open.length);
      }
      const language = str2.slice(0, str2.search(/\r?\n/));
      return {
        raw: language,
        name: language ? language.trim() : ""
      };
    };
    matter.cache = {};
    matter.clearCache = function() {
      matter.cache = {};
    };
    module2.exports = matter;
  });
  var require_node2 = __commonJS2((exports2, module2) => {
    function compareStorageLayouts(layoutBefore, layoutAfter) {
      const layoutForComparisonBefore = preformatStorageLayout(layoutBefore);
      const layoutForComparisonAfter = preformatStorageLayout(layoutAfter);
      const comparison = compareStorageArrays(layoutForComparisonBefore, layoutForComparisonAfter);
      const md = generateMarkdownOutput(comparison);
      return md;
    }
    function preformatStorageLayout(json) {
      return json.storage.map((item) => ({
        label: item.label,
        offset: item.offset,
        slot: item.slot,
        type: json.types[item.type].label,
        numberOfBytes: json.types[item.type].numberOfBytes
      }));
    }
    function compareStorageArrays(oldArray, newArray) {
      const changes = [];
      const oldMap = new Map(oldArray.map((item) => [item.slot + "-" + item.offset, item]));
      const newMap = new Map(newArray.map((item) => [item.slot + "-" + item.offset, item]));
      oldArray.forEach((oldItem) => {
        const newItem = newMap.get(oldItem.slot + "-" + oldItem.offset);
        if (!newItem) {
          changes.push({ ...oldItem, status: "removed" });
        } else if (isDifferent(oldItem, newItem)) {
          changes.push({ ...oldItem, status: "removed" });
          changes.push({ ...newItem, status: "added" });
        } else {
          changes.push({ ...newItem, status: "unchanged" });
        }
      });
      newArray.forEach((newItem) => {
        if (!oldMap.has(newItem.slot + "-" + newItem.offset)) {
          changes.push({ ...newItem, status: "added" });
        }
      });
      changes.sort((a, b) => {
        if (a.slot === b.slot) {
          return a.offset - b.offset;
        }
        return a.slot.localeCompare(b.slot);
      });
      return changes;
    }
    function isDifferent(item1, item2) {
      return item1.offset !== item2.offset || item1.slot !== item2.slot || item1.type !== item2.type || item1.numberOfBytes !== item2.numberOfBytes;
    }
    function generateMarkdownOutput(items) {
      const columnWidths = {
        name: Math.max(...items.map((item) => item.label.length), "Label".length),
        offset: "Offset".length,
        slot: "Slot".length,
        type: Math.max(...items.map((item) => item.type.length), "Type".length),
        numberOfBytes: "Bytes".length
      };
      let markdownTable = "```diff\n";
      markdownTable += ` | ${"Label".padEnd(columnWidths.name, " ")} | ${"Offset".padEnd(columnWidths.offset, " ")} | ${"Slot".padEnd(columnWidths.slot, " ")} | ${"Type".padEnd(columnWidths.type, " ")} | ${"Bytes".padEnd(columnWidths.numberOfBytes, " ")} |
`;
      markdownTable += ` |${"-".repeat(columnWidths.name + 2)}|${"-".repeat(columnWidths.offset + 2)}|${"-".repeat(columnWidths.slot + 2)}|${"-".repeat(columnWidths.type + 2)}|${"-".repeat(columnWidths.numberOfBytes + 2)}||
`;
      items.forEach((item) => {
        const sign = item.status === "added" ? "+" : item.status === "removed" ? "-" : " ";
        const row = `${sign}| ${item.label.padEnd(columnWidths.name, " ")} | ${item.offset.toString().padEnd(columnWidths.offset, " ")} | ${item.slot.padEnd(columnWidths.slot, " ")} | ${item.type.padEnd(columnWidths.type, " ")} | ${item.numberOfBytes.padEnd(columnWidths.numberOfBytes, " ")} |
`;
        markdownTable += row;
      });
      markdownTable += "```";
      return markdownTable;
    }
    async function getContractDeploymentBlock({
      client,
      contractAddress,
      fromBlock,
      toBlock,
      maxDelta
    }) {
      if (fromBlock == toBlock)
        return fromBlock;
      if (fromBlock < toBlock) {
        const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);
        const codeMid = await (0, import_actions7.getBytecode)(client, {
          blockNumber: midBlock,
          address: contractAddress
        });
        if (!codeMid) {
          if (toBlock - midBlock > maxDelta) {
            return getContractDeploymentBlock({
              client,
              contractAddress,
              fromBlock: midBlock,
              toBlock,
              maxDelta
            });
          } else {
            return midBlock;
          }
        }
        return getContractDeploymentBlock({
          client,
          contractAddress,
          fromBlock,
          toBlock: midBlock,
          maxDelta
        });
      }
      throw new Error("Could not find contract deployment block");
    }
    async function getBlockAtTimestamp({
      client,
      timestamp,
      fromBlock,
      toBlock,
      maxDelta
    }) {
      if (fromBlock <= toBlock) {
        const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);
        const block = await (0, import_actions7.getBlock)(client, { blockNumber: midBlock });
        if (block.timestamp > timestamp) {
          return getBlockAtTimestamp({
            client,
            timestamp,
            fromBlock,
            toBlock: midBlock,
            maxDelta
          });
        } else {
          if (timestamp - block.timestamp < maxDelta) {
            return block;
          } else {
            return getBlockAtTimestamp({
              client,
              timestamp,
              fromBlock: midBlock,
              toBlock,
              maxDelta
            });
          }
        }
      }
      throw new Error("Could not find matching block");
    }
    async function strategicGetLogs({
      client,
      events,
      address,
      fromBlock,
      toBlock
    }) {
      if (client.transport.key === "http") {
        const url = client.transport.url;
        let batchSize = 0;
        if (/llamarpc/.test(url))
          batchSize = 1e5;
        if (/quiknode/.test(url))
          batchSize = 1e4;
        if (/alchemy/.test(url)) {
          getLogsRecursive({ client, events, address, fromBlock, toBlock });
        }
        if (batchSize > 0) {
          return getLogsInBatches({
            client,
            events,
            address,
            fromBlock,
            toBlock,
            batchSize
          });
        }
      }
      return getLogsRecursive({ client, events, address, fromBlock, toBlock });
    }
    async function getLogsRecursive({
      client,
      events,
      address,
      fromBlock,
      toBlock
    }) {
      console.log("recursions", fromBlock, toBlock);
      if (fromBlock <= toBlock) {
        try {
          const logs = await (0, import_actions7.getLogs)(client, {
            fromBlock,
            toBlock,
            events,
            address
          });
          return logs;
        } catch (error) {
          const rangeMatch = error.details?.match(/.*\[(.*),\s*(.*)\]/);
          if (rangeMatch?.length === 3) {
            const maxBlock = (0, import_viem15.fromHex)(rangeMatch[2], "bigint");
            const arr1 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock,
              toBlock: maxBlock
            });
            const midBlock = BigInt(maxBlock + toBlock) >> BigInt(1);
            const arr2 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock: maxBlock + BigInt(1),
              toBlock: midBlock
            });
            const arr3 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock: midBlock + BigInt(1),
              toBlock
            });
            return [...arr1, ...arr2, ...arr3];
          } else {
            const midBlock = BigInt(fromBlock + toBlock) >> BigInt(1);
            const arr1 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock,
              toBlock: midBlock
            });
            const arr2 = await getLogsRecursive({
              client,
              events,
              address,
              fromBlock: midBlock + BigInt(1),
              toBlock
            });
            return [...arr1, ...arr2];
          }
        }
      }
      return [];
    }
    async function getLogsInBatches({
      client,
      events,
      address,
      fromBlock,
      toBlock,
      batchSize
    }) {
      const batches = [];
      for (let i = Number(fromBlock); i < Number(toBlock); i = i + batchSize) {
        batches.push({
          from: BigInt(i),
          to: BigInt(i + batchSize - 1) > toBlock ? toBlock : BigInt(i + batchSize - 1)
        });
      }
      const { results, errors } = await import_promise_pool.PromisePool.for(batches).withConcurrency(5).useCorrespondingResults().process(async ({ from, to }) => {
        return (0, import_actions7.getLogs)(client, {
          fromBlock: from,
          toBlock: to,
          events,
          address
        });
      });
      if (errors.length != 0) {
        console.log(errors);
        throw new Error("Error fetching logs");
      }
      return results.flat();
    }
    function baseToCidv0(hash22) {
      return import_bs58.default.encode(Buffer.from(`1220${hash22.slice(2)}`, "hex"));
    }
    async function uploadToPinata(source) {
      const PINATA_KEY = process.env.PINATA_KEY;
      if (!PINATA_KEY)
        throw new Error("PINATA_KEY env must be set");
      const PINATA_SECRET = process.env.PINATA_SECRET;
      if (!PINATA_SECRET)
        throw new Error("PINATA_SECRET env must be set");
      const data = new FormData();
      data.append("file", new Blob([source]));
      const res = await fetch("https://api.pinata.cloud/pinning/pinFileToIPFS", {
        method: "POST",
        body: data,
        headers: {
          pinata_api_key: PINATA_KEY,
          pinata_secret_api_key: PINATA_SECRET
        }
      });
      if (!res.ok) {
        throw Error(await res.text());
      }
      const result = await res.json();
      if (result.error)
        throw { message: result.error };
      return result;
    }
    async function uploadToTheGraph(source) {
      const data = new FormData();
      data.append("file", new Blob([source]));
      const res = await fetch("https://api.thegraph.com/ipfs/api/v0/add", {
        method: "POST",
        body: data
      });
      return res.json();
    }
    async function uploadToQuicknode(source, key) {
      const apiKey = process.env.QUICKNODE_API_KEY;
      const headers = new Headers();
      headers.append("x-api-key", apiKey);
      const data = new FormData();
      data.append("Body", new Blob([source]));
      data.append("Key", key || "unknownKey");
      data.append("ContentType", "text/plain");
      const res = await fetch("https://api.quicknode.com/ipfs/rest/v1/s3/put-object", {
        method: "POST",
        headers,
        body: data,
        redirect: "follow"
      });
      return res.text();
    }
    function getLink(hash22, gateway) {
      return `${gateway}/${hash22}`;
    }
    async function getProposalMetadata(hash22, gateway = "https://cloudflare-ipfs.com/ipfs") {
      const ipfsHash = hash22.startsWith("0x") ? baseToCidv0(hash22) : hash22;
      const ipfsPath = getLink(ipfsHash, gateway);
      const ipfsResponse = await fetch(ipfsPath, {
        headers: {
          "Content-Type": "application/json"
        }
      });
      if (!ipfsResponse.ok)
        throw Error(`IPFS: error fetching ${ipfsPath}`);
      const clone = ipfsResponse.clone();
      try {
        const response = await ipfsResponse.json();
        const { content, data } = (0, import_gray_matter.default)(response.description);
        return {
          ...response,
          ipfsHash,
          description: content,
          ...data
        };
      } catch (e) {
        const { content, data } = (0, import_gray_matter.default)(await clone.text());
        return {
          ...ipfsResponse,
          ipfsHash,
          description: content,
          ...data
        };
      }
    }
    function getSolidityStorageSlotBytes2(mappingSlot, key) {
      const slot = (0, import_viem32.pad)(mappingSlot, { size: 32 });
      return (0, import_viem32.trim)((0, import_viem32.keccak256)((0, import_viem32.encodeAbiParameters)((0, import_viem32.parseAbiParameters)("bytes32, uint256"), [
        key,
        BigInt(slot)
      ])));
    }
    function getSolidityStorageSlotUint2(mappingSlot, key) {
      return (0, import_viem32.keccak256)((0, import_viem32.encodeAbiParameters)((0, import_viem32.parseAbiParameters)("uint256, uint256"), [
        key,
        mappingSlot
      ]));
    }
    function getSolidityStorageSlotAddress2(mappingSlot, key) {
      return (0, import_viem32.keccak256)((0, import_viem32.encodeAbiParameters)((0, import_viem32.parseAbiParameters)("address, uint256"), [
        key,
        BigInt(mappingSlot)
      ]));
    }
    function getDynamicArraySlot(baseSlot, arrayIndex, itemSize) {
      return (0, import_viem32.pad)((0, import_viem32.toHex)((0, import_viem32.fromHex)((0, import_viem32.keccak256)((0, import_viem32.encodeAbiParameters)((0, import_viem32.parseAbiParameters)("uint256"), [baseSlot])), "bigint") + BigInt(arrayIndex * itemSize)), { size: 32 });
    }
    function getBytesValue(value) {
      const bytesString = (0, import_viem32.toBytes)(value);
      if (bytesString.length > 31)
        throw new Error("Error: strings > 31 bytes are not implemented");
      return (0, import_viem32.concat)([
        (0, import_viem32.toHex)((0, import_viem32.pad)(bytesString, { size: 31, dir: "right" })),
        (0, import_viem32.toHex)(bytesString.length * 2, { size: 1 })
      ]);
    }
    function getBits2(_bigIntValue, startBit, _endBit) {
      let endBit = _endBit;
      const bigIntValue = BigInt(_bigIntValue);
      if (startBit > endBit) {
        throw new Error("Invalid bit range: startBit must be less than or equal to endBit");
      }
      const bitLength = BigInt(bigIntValue.toString(2)).toString().length;
      if (endBit >= bitLength) {
        endBit = BigInt(bitLength - 1);
      }
      const mask = (1n << endBit - startBit + 1n) - 1n;
      const maskedValue = bigIntValue >> startBit & mask;
      return maskedValue.toString();
    }
    function setBits2(_bigIntBase, startBit, endBit, _replaceValue) {
      const bigIntBase = BigInt(_bigIntBase);
      const bigIntReplaceValue = BigInt(_replaceValue);
      let mask = BigInt(0);
      for (let i = startBit; i < endBit; i++) {
        mask |= BigInt(1) << BigInt(i);
      }
      const clearedNumber = bigIntBase & ~mask;
      const result = clearedNumber | bigIntReplaceValue << BigInt(startBit);
      return result;
    }
    function decodeReserveConfigV2(data) {
      const ltv = getBits2(data, 0n, 15n);
      const liquidationThreshold = getBits2(data, 16n, 31n);
      const liquidationBonus = getBits2(data, 32n, 47n);
      const decimals = getBits2(data, 48n, 55n);
      const active = Number(getBits2(data, 56n, 56n));
      const frozen = Number(getBits2(data, 57n, 57n));
      const borrowingEnabled = Number(getBits2(data, 58n, 58n));
      const stableBorrowingEnabled = Number(getBits2(data, 59n, 59n));
      const reserveFactor = getBits2(data, 64n, 79n);
      return {
        ltv,
        liquidationThreshold,
        liquidationBonus,
        decimals,
        active: !!active,
        frozen: !!frozen,
        borrowingEnabled: !!borrowingEnabled,
        stableBorrowingEnabled: !!stableBorrowingEnabled,
        reserveFactor
      };
    }
    function decodeReserveConfigV3(data) {
      const ltv = getBits2(data, 0n, 15n);
      const liquidationThreshold = getBits2(data, 16n, 31n);
      const liquidationBonus = getBits2(data, 32n, 47n);
      const decimals = getBits2(data, 48n, 55n);
      const active = Number(getBits2(data, 56n, 56n));
      const frozen = Number(getBits2(data, 57n, 57n));
      const borrowingEnabled = Number(getBits2(data, 58n, 58n));
      const stableRateBorrowingEnabled = Number(getBits2(data, 59n, 59n));
      const paused = Number(getBits2(data, 60n, 60n));
      const borrowingInIsolation = Number(getBits2(data, 61n, 61n));
      const siloedBorrowingEnabled = Number(getBits2(data, 62n, 62n));
      const flashloaningEnabled = Number(getBits2(data, 63n, 63n));
      const reserveFactor = getBits2(data, 64n, 79n);
      const borrowCap = getBits2(data, 80n, 115n);
      const supplyCap = getBits2(data, 116n, 151n);
      const liquidationProtocolFee = getBits2(data, 152n, 167n);
      const eModeCategory = getBits2(data, 168n, 175n);
      const unbackedMintCap = getBits2(data, 176n, 211n);
      const debtCeiling = getBits2(data, 212n, 251n);
      return {
        ltv,
        liquidationThreshold,
        liquidationBonus,
        decimals,
        active: !!active,
        frozen: !!frozen,
        borrowingEnabled: !!borrowingEnabled,
        stableRateBorrowingEnabled: !!stableRateBorrowingEnabled,
        paused: !!paused,
        borrowingInIsolation: !!borrowingInIsolation,
        reserveFactor,
        borrowCap,
        supplyCap,
        liquidationProtocolFee,
        eModeCategory,
        unbackedMintCap,
        debtCeiling,
        siloedBorrowingEnabled: !!siloedBorrowingEnabled,
        flashloaningEnabled: !!flashloaningEnabled
      };
    }
    function readJSONCache2(filePath, filename) {
      const joinedPath = import_path2.default.join(DEFAULT_PATH, filePath, `${filename}.json`);
      if ((0, import_fs4.existsSync)(joinedPath)) {
        return JSON.parse((0, import_fs4.readFileSync)(joinedPath, "utf8"));
      }
    }
    function writeJSONCache2(filePath, filename, json) {
      const joinedFolderPath = import_path2.default.join(DEFAULT_PATH, filePath);
      if (!(0, import_fs4.existsSync)(joinedFolderPath)) {
        (0, import_fs4.mkdirSync)(joinedFolderPath, { recursive: true });
      }
      const joinedFilePath = import_path2.default.join(joinedFolderPath, `${filename}.json`);
      (0, import_fs4.writeFileSync)(joinedFilePath, JSON.stringify(json, (key, value) => typeof value === "bigint" ? value.toString() : value === void 0 ? null : value, 2));
    }
    var __create22 = Object.create;
    var __defProp22 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames22 = Object.getOwnPropertyNames;
    var __getProtoOf22 = Object.getPrototypeOf;
    var __hasOwnProp22 = Object.prototype.hasOwnProperty;
    var __export22 = (target, all) => {
      for (var name in all)
        __defProp22(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames22(from))
          if (!__hasOwnProp22.call(to, key) && key !== except)
            __defProp22(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM22 = (mod2, isNodeMode, target) => (target = mod2 != null ? __create22(__getProtoOf22(mod2)) : {}, __copyProps2(isNodeMode || !mod2 || !mod2.__esModule ? __defProp22(target, "default", { value: mod2, enumerable: true }) : target, mod2));
    var __toCommonJS = (mod2) => __copyProps2(__defProp22({}, "__esModule", { value: true }), mod2);
    var node_exports = {};
    __export22(node_exports, {
      CHAIN_ID_CLIENT_MAP: () => CHAIN_ID_CLIENT_MAP,
      ChainId: () => ChainId3,
      arbitrumClient: () => arbitrumClient,
      arbitrumGoerliClient: () => arbitrumGoerliClient,
      arbitrumSepoliaClient: () => arbitrumSepoliaClient,
      avalancheClient: () => avalancheClient,
      baseClient: () => baseClient,
      baseSepoliaClient: () => baseSepoliaClient,
      baseToCidv0: () => baseToCidv0,
      bnbClient: () => bnbClient,
      celoClient: () => celoClient,
      compareStorageLayouts: () => compareStorageLayouts,
      decodeReserveConfigV2: () => decodeReserveConfigV2,
      decodeReserveConfigV3: () => decodeReserveConfigV3,
      fantomClient: () => fantomClient,
      fantomTestnetClient: () => fantomTestnetClient,
      fujiClient: () => fujiClient,
      getBits: () => getBits2,
      getBlockAtTimestamp: () => getBlockAtTimestamp,
      getBytesValue: () => getBytesValue,
      getContractDeploymentBlock: () => getContractDeploymentBlock,
      getDynamicArraySlot: () => getDynamicArraySlot,
      getLink: () => getLink,
      getLogsRecursive: () => getLogsRecursive,
      getProposalMetadata: () => getProposalMetadata,
      getSolidityStorageSlotAddress: () => getSolidityStorageSlotAddress2,
      getSolidityStorageSlotBytes: () => getSolidityStorageSlotBytes2,
      getSolidityStorageSlotUint: () => getSolidityStorageSlotUint2,
      gnosisClient: () => gnosisClient,
      goerliClient: () => goerliClient,
      harmonyClient: () => harmonyClient,
      mainnetClient: () => mainnetClient,
      metisClient: () => metisClient,
      mumbaiClient: () => mumbaiClient,
      optimismClient: () => optimismClient,
      optimismGoerliClient: () => optimismGoerliClient,
      optimismSepoliaClient: () => optimismSepoliaClient,
      polygonClient: () => polygonClient,
      readJSONCache: () => readJSONCache2,
      scrollClient: () => scrollClient,
      scrollSepoliaClient: () => scrollSepoliaClient,
      sepoliaClient: () => sepoliaClient,
      setBits: () => setBits2,
      strategicGetLogs: () => strategicGetLogs,
      uploadToPinata: () => uploadToPinata,
      uploadToQuicknode: () => uploadToQuicknode,
      uploadToTheGraph: () => uploadToTheGraph,
      writeJSONCache: () => writeJSONCache2,
      zkEVMClient: () => zkEVMClient,
      zkSyncClient: () => zkSyncClient
    });
    module2.exports = __toCommonJS(node_exports);
    var import_chains = require_chains();
    var ChainId3 = {
      mainnet: import_chains.mainnet.id,
      goerli: import_chains.goerli.id,
      polygon: import_chains.polygon.id,
      mumbai: import_chains.polygonMumbai.id,
      avalanche: import_chains.avalanche.id,
      fuji: import_chains.avalancheFuji.id,
      arbitrum_one: import_chains.arbitrum.id,
      arbitrum_goerli: import_chains.arbitrumGoerli.id,
      arbitrum_sepolia: import_chains.arbitrumSepolia.id,
      fantom: import_chains.fantom.id,
      fantom_testnet: import_chains.fantomTestnet.id,
      optimism: import_chains.optimism.id,
      optimism_sepolia: import_chains.optimismSepolia.id,
      optimism_goerli: import_chains.optimismGoerli.id,
      harmony: import_chains.harmonyOne.id,
      sepolia: import_chains.sepolia.id,
      scroll: import_chains.scroll.id,
      scroll_sepolia: import_chains.scrollSepolia.id,
      metis: import_chains.metis.id,
      base: import_chains.base.id,
      base_sepolia: import_chains.baseSepolia.id,
      bnb: import_chains.bsc.id,
      gnosis: import_chains.gnosis.id,
      zkEVM: import_chains.polygonZkEvm.id,
      celo: import_chains.celo.id,
      zkSync: import_chains.zkSync.id
    };
    var import_viem15 = require__cjs2();
    var import_promise_pool = require_dist();
    var import_actions7 = require_actions();
    var import_viem22 = require__cjs2();
    var import_chains2 = require_chains();
    var commonConfig = { timeout: 3e4 };
    var mainnetClient = (0, import_viem22.createClient)({
      chain: import_chains2.mainnet,
      transport: (0, import_viem22.http)(process.env.RPC_MAINNET, commonConfig)
    });
    var arbitrumClient = (0, import_viem22.createClient)({
      chain: import_chains2.arbitrum,
      transport: (0, import_viem22.http)(process.env.RPC_ARBITRUM, commonConfig)
    });
    var polygonClient = (0, import_viem22.createClient)({
      chain: import_chains2.polygon,
      transport: (0, import_viem22.http)(process.env.RPC_POLYGON, commonConfig)
    });
    var optimismClient = (0, import_viem22.createClient)({
      chain: import_chains2.optimism,
      transport: (0, import_viem22.http)(process.env.RPC_OPTIMISM, commonConfig)
    });
    var metisClient = (0, import_viem22.createClient)({
      chain: import_chains2.metis,
      transport: (0, import_viem22.http)(process.env.RPC_METIS, commonConfig)
    });
    var baseClient = (0, import_viem22.createClient)({
      chain: import_chains2.base,
      transport: (0, import_viem22.http)(process.env.RPC_BASE, commonConfig)
    });
    var fantomClient = (0, import_viem22.createClient)({
      chain: import_chains2.fantom,
      transport: (0, import_viem22.http)(process.env.RPC_FANTOM, commonConfig)
    });
    var bnbClient = (0, import_viem22.createClient)({
      chain: import_chains2.bsc,
      transport: (0, import_viem22.http)(process.env.RPC_BNB, commonConfig)
    });
    var avalancheClient = (0, import_viem22.createClient)({
      chain: import_chains2.avalanche,
      transport: (0, import_viem22.http)(process.env.RPC_AVALANCHE, commonConfig)
    });
    var gnosisClient = (0, import_viem22.createClient)({
      chain: import_chains2.gnosis,
      transport: (0, import_viem22.http)(process.env.RPC_GNOSIS, commonConfig)
    });
    var scrollClient = (0, import_viem22.createClient)({
      chain: import_chains2.scroll,
      transport: (0, import_viem22.http)(process.env.RPC_SCROLL, commonConfig)
    });
    var zkEVMClient = (0, import_viem22.createClient)({
      chain: import_chains2.polygonZkEvm,
      transport: (0, import_viem22.http)(process.env.RPC_ZKEVM, commonConfig)
    });
    var celoClient = (0, import_viem22.createClient)({
      chain: import_chains2.celo,
      transport: (0, import_viem22.http)(process.env.RPC_CELO, commonConfig)
    });
    var zkSyncClient = (0, import_viem22.createClient)({
      chain: import_chains2.zkSync,
      transport: (0, import_viem22.http)(process.env.RPC_ZKSYNC, commonConfig)
    });
    var harmonyClient = (0, import_viem22.createClient)({
      chain: import_chains2.harmonyOne,
      transport: (0, import_viem22.http)(process.env.RPC_HARMONY, commonConfig)
    });
    var fujiClient = (0, import_viem22.createClient)({
      chain: import_chains2.avalancheFuji,
      transport: (0, import_viem22.http)(process.env.RPC_FUJI, commonConfig)
    });
    var mumbaiClient = (0, import_viem22.createClient)({
      chain: import_chains2.polygonMumbai,
      transport: (0, import_viem22.http)(process.env.RPC_MUMBAI, commonConfig)
    });
    var sepoliaClient = (0, import_viem22.createClient)({
      chain: import_chains2.sepolia,
      transport: (0, import_viem22.http)(process.env.RPC_SEPOLIA, commonConfig)
    });
    var goerliClient = (0, import_viem22.createClient)({
      chain: import_chains2.goerli,
      transport: (0, import_viem22.http)(process.env.RPC_GOERLI, commonConfig)
    });
    var arbitrumGoerliClient = (0, import_viem22.createClient)({
      chain: import_chains2.arbitrumGoerli,
      transport: (0, import_viem22.http)(process.env.RPC_ARBITRUM_GOERLI, commonConfig)
    });
    var arbitrumSepoliaClient = (0, import_viem22.createClient)({
      chain: import_chains2.arbitrumSepolia,
      transport: (0, import_viem22.http)(process.env.RPC_ARBITRUM_SEPOLIA, commonConfig)
    });
    var optimismGoerliClient = (0, import_viem22.createClient)({
      chain: import_chains2.optimismGoerli,
      transport: (0, import_viem22.http)(process.env.RPC_OPTIMISM_GOERLI, commonConfig)
    });
    var optimismSepoliaClient = (0, import_viem22.createClient)({
      chain: import_chains2.optimismSepolia,
      transport: (0, import_viem22.http)(process.env.RPC_OPTIMISM_SEPOLIA, commonConfig)
    });
    var scrollSepoliaClient = (0, import_viem22.createClient)({
      chain: import_chains2.scrollSepolia,
      transport: (0, import_viem22.http)(process.env.RPC_SCROLL_SEPOLIA, commonConfig)
    });
    var fantomTestnetClient = (0, import_viem22.createClient)({
      chain: import_chains2.fantomTestnet,
      transport: (0, import_viem22.http)(process.env.RPC_FANTOM_TESTNET, commonConfig)
    });
    var baseSepoliaClient = (0, import_viem22.createClient)({
      chain: import_chains2.baseSepolia,
      transport: (0, import_viem22.http)(process.env.RPC_BASE_SEPOLIA, commonConfig)
    });
    var CHAIN_ID_CLIENT_MAP = {
      [ChainId3.mainnet]: mainnetClient,
      [ChainId3.arbitrum_one]: arbitrumClient,
      [ChainId3.arbitrum_goerli]: arbitrumGoerliClient,
      [ChainId3.arbitrum_sepolia]: arbitrumSepoliaClient,
      [ChainId3.polygon]: polygonClient,
      [ChainId3.optimism]: optimismClient,
      [ChainId3.optimism_goerli]: optimismGoerliClient,
      [ChainId3.optimism_sepolia]: optimismSepoliaClient,
      [ChainId3.metis]: metisClient,
      [ChainId3.base]: baseClient,
      [ChainId3.base_sepolia]: baseSepoliaClient,
      [ChainId3.sepolia]: sepoliaClient,
      [ChainId3.goerli]: goerliClient,
      [ChainId3.fantom]: fantomClient,
      [ChainId3.fantom_testnet]: fantomTestnetClient,
      [ChainId3.bnb]: bnbClient,
      [ChainId3.avalanche]: avalancheClient,
      [ChainId3.gnosis]: gnosisClient,
      [ChainId3.scroll]: scrollClient,
      [ChainId3.scroll_sepolia]: scrollSepoliaClient,
      [ChainId3.zkEVM]: zkEVMClient,
      [ChainId3.celo]: celoClient,
      [ChainId3.zkSync]: zkSyncClient,
      [ChainId3.fuji]: fujiClient,
      [ChainId3.mumbai]: mumbaiClient,
      [ChainId3.harmony]: harmonyClient
    };
    var import_bs58 = __toESM22(require_bs58(), 1);
    var import_gray_matter = __toESM22(require_gray_matter(), 1);
    var import_viem32 = require__cjs2();
    var import_fs4 = __require5("fs");
    var import_path2 = __toESM22(__require5("path"), 1);
    var DEFAULT_PATH = import_path2.default.join(process.cwd(), "cache");
  });
  function isProposalFinal(state) {
    return FINAL_PROPOSAL_STATES.includes(state);
  }
  function isPayloadFinal(state) {
    return FINAL_PAYLOAD_STATES.includes(state);
  }
  var ProposalState2;
  ((ProposalState22) => {
    ProposalState22[ProposalState22["Null"] = 0] = "Null";
    ProposalState22[ProposalState22["Created"] = 1] = "Created";
    ProposalState22[ProposalState22["Active"] = 2] = "Active";
    ProposalState22[ProposalState22["Queued"] = 3] = "Queued";
    ProposalState22[ProposalState22["Executed"] = 4] = "Executed";
    ProposalState22[ProposalState22["Failed"] = 5] = "Failed";
    ProposalState22[ProposalState22["Cancelled"] = 6] = "Cancelled";
    ProposalState22[ProposalState22["Expired"] = 7] = "Expired";
  })(ProposalState2 ||= {});
  var FINAL_PROPOSAL_STATES = [
    4,
    5,
    6,
    7
    /* Expired */
  ];
  var PayloadState2;
  ((PayloadState22) => {
    PayloadState22[PayloadState22["None"] = 0] = "None";
    PayloadState22[PayloadState22["Created"] = 1] = "Created";
    PayloadState22[PayloadState22["Queued"] = 2] = "Queued";
    PayloadState22[PayloadState22["Executed"] = 3] = "Executed";
    PayloadState22[PayloadState22["Cancelled"] = 4] = "Cancelled";
    PayloadState22[PayloadState22["Expired"] = 5] = "Expired";
  })(PayloadState2 ||= {});
  var FINAL_PAYLOAD_STATES = [
    4,
    3,
    5
    /* Expired */
  ];
  var package_default = {
    name: "@bgd-labs/aave-v3-governance-cache",
    version: "1.0.8",
    sideEffects: false,
    files: [
      "cache",
      "dist"
    ],
    private: false,
    publishConfig: {
      access: "public"
    },
    type: "module",
    exports: {
      ".": {
        types: "./dist/index.d.ts",
        default: "./dist/index.js"
      },
      "./customStorageProvider": {
        types: "./dist/customStorageProvider.d.ts",
        default: "./dist/providers/customStorageProvider.js"
      },
      "./fileSystemStorageAdapter": {
        types: "./dist/fileSystem.d.ts",
        default: "./dist/providers/storage/fileSystem.js"
      },
      "./githubPagesProvider": {
        types: "./dist/githubPagesProvider.d.ts",
        default: "./dist/providers/githubPagesProvider.js"
      },
      "./fallbackProvider": {
        types: "./dist/fallbackProvider.d.ts",
        default: "./dist/providers/fallbackProvider.js"
      },
      "./rpcProvider": {
        types: "./dist/rpcProvider.d.ts",
        default: "./dist/providers/rpcProvider.js"
      },
      "./refreshCache": {
        types: "./dist/refreshCache.d.ts",
        default: "./dist/common/refreshCache.js"
      }
    },
    scripts: {
      build: "bun run scripts/build.ts",
      cache: "bun ./scripts/refreshCache.ts",
      "ci:publish": "npm run build && npm publish --access=public"
    },
    devDependencies: {
      "@bgd-labs/aave-address-book": "^4.0.1-02c70ec5f8a433b38372b81d27ed44b79aa52f65.0",
      "@bgd-labs/js-utils": "^1.4.2",
      "@types/bun": "latest",
      "bun-plugin-dts": "^0.2.3",
      prettier: "^3.2.5",
      typescript: "^5.0.0",
      viem: "^2.9.20"
    },
    peerDependencies: {
      viem: "^2.9.20",
      "@bgd-labs/aave-address-book": "^4.0.1-02c70ec5f8a433b38372b81d27ed44b79aa52f65.0"
    }
  };
  var ISSUES_FETCHING_PAYLOAD = "ISSUES_FETCHING_PAYLOAD";
  var ISSUES_FETCHING_PROPOSAL = "ISSUES_FETCHING_PROPOSAL";
  function getAction2(client, action, name) {
    return (params) => client[action.name]?.(params) ?? client[name]?.(params) ?? action(client, params);
  }
  init_abi2();
  init_base2();
  var FilterTypeNotSupportedError2 = class extends BaseError4 {
    constructor(type) {
      super(`Filter type "${type}" is not supported.`);
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "FilterTypeNotSupportedError"
      });
    }
  };
  init_toBytes2();
  init_keccak2562();
  init_toEventSelector2();
  init_encodeAbiParameters2();
  init_formatAbiItem22();
  init_getAbiItem2();
  function encodeEventTopics2(parameters) {
    const { abi, eventName, args } = parameters;
    let abiItem = abi[0];
    if (eventName) {
      const item = getAbiItem2({ abi, name: eventName });
      if (!item)
        throw new AbiEventNotFoundError2(eventName, { docsPath: docsPath6 });
      abiItem = item;
    }
    if (abiItem.type !== "event")
      throw new AbiEventNotFoundError2(void 0, { docsPath: docsPath6 });
    const definition = formatAbiItem22(abiItem);
    const signature = toEventSelector2(definition);
    let topics = [];
    if (args && "inputs" in abiItem) {
      const indexedInputs = abiItem.inputs?.filter((param) => "indexed" in param && param.indexed);
      const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map((x) => args[x.name]) ?? [] : [];
      if (args_.length > 0) {
        topics = indexedInputs?.map((param, i) => Array.isArray(args_[i]) ? args_[i].map((_, j) => encodeArg2({ param, value: args_[i][j] })) : args_[i] ? encodeArg2({ param, value: args_[i] }) : null) ?? [];
      }
    }
    return [signature, ...topics];
  }
  function encodeArg2({ param, value }) {
    if (param.type === "string" || param.type === "bytes")
      return keccak2563(toBytes4(value));
    if (param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
      throw new FilterTypeNotSupportedError2(param.type);
    return encodeAbiParameters2([param], [value]);
  }
  var docsPath6 = "/docs/contract/encodeEventTopics";
  init_toHex2();
  function createFilterRequestScope2(client, { method }) {
    const requestMap = {};
    if (client.transport.type === "fallback")
      client.transport.onResponse?.(({ method: method_, response: id, status, transport }) => {
        if (status === "success" && method === method_)
          requestMap[id] = transport.request;
      });
    return (id) => requestMap[id] || client.request;
  }
  async function createContractEventFilter2(client, parameters) {
    const { address, abi, args, eventName, fromBlock, strict, toBlock } = parameters;
    const getRequest = createFilterRequestScope2(client, {
      method: "eth_newFilter"
    });
    const topics = eventName ? encodeEventTopics2({
      abi,
      args,
      eventName
    }) : void 0;
    const id = await client.request({
      method: "eth_newFilter",
      params: [
        {
          address,
          fromBlock: typeof fromBlock === "bigint" ? numberToHex3(fromBlock) : fromBlock,
          toBlock: typeof toBlock === "bigint" ? numberToHex3(toBlock) : toBlock,
          topics
        }
      ]
    });
    return {
      abi,
      args,
      eventName,
      id,
      request: getRequest(id),
      strict: Boolean(strict),
      type: "event"
    };
  }
  init_encodeFunctionData2();
  init_abi2();
  init_base2();
  init_contract3();
  init_rpc2();
  function getContractError2(err, { abi, address, args, docsPath: docsPath33, functionName, sender }) {
    const { code, data, message, shortMessage } = err instanceof RawContractError2 ? err : err instanceof BaseError4 ? err.walk((err2) => "data" in err2) || err.walk() : {};
    const cause = (() => {
      if (err instanceof AbiDecodingZeroDataError2)
        return new ContractFunctionZeroDataError2({ functionName });
      if ([EXECUTION_REVERTED_ERROR_CODE2, InternalRpcError2.code].includes(code) && (data || message || shortMessage)) {
        return new ContractFunctionRevertedError2({
          abi,
          data: typeof data === "object" ? data.data : data,
          functionName,
          message: shortMessage ?? message
        });
      }
      return err;
    })();
    return new ContractFunctionExecutionError2(cause, {
      abi,
      args,
      contractAddress: address,
      docsPath: docsPath33,
      functionName,
      sender
    });
  }
  var EXECUTION_REVERTED_ERROR_CODE2 = 3;
  init_toHex2();
  init_formatEther2();
  init_formatGwei2();
  init_base2();
  init_transaction2();
  var EstimateGasExecutionError2 = class extends BaseError4 {
    constructor(cause, { account, docsPath: docsPath33, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
      const prettyArgs = prettyPrint3({
        from: account?.address,
        to,
        value: typeof value !== "undefined" && `${formatEther2(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
        data,
        gas,
        gasPrice: typeof gasPrice !== "undefined" && `${formatGwei3(gasPrice)} gwei`,
        maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei3(maxFeePerGas)} gwei`,
        maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei3(maxPriorityFeePerGas)} gwei`,
        nonce
      });
      super(cause.shortMessage, {
        cause,
        docsPath: docsPath33,
        metaMessages: [
          ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
          "Estimate Gas Arguments:",
          prettyArgs
        ].filter(Boolean)
      });
      Object.defineProperty(this, "cause", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "EstimateGasExecutionError"
      });
      this.cause = cause;
    }
  };
  init_node2();
  init_getNodeError2();
  function getEstimateGasError2(err, { docsPath: docsPath33, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError2(err, args);
      if (cause2 instanceof UnknownNodeError2)
        return err;
      return cause2;
    })();
    return new EstimateGasExecutionError2(cause, {
      docsPath: docsPath33,
      ...args
    });
  }
  init_transactionRequest2();
  init_assertRequest2();
  init_formatGwei2();
  init_base2();
  var BaseFeeScalarError2 = class extends BaseError4 {
    constructor() {
      super("`baseFeeMultiplier` must be greater than 1.");
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "BaseFeeScalarError"
      });
    }
  };
  var Eip1559FeesNotSupportedError2 = class extends BaseError4 {
    constructor() {
      super("Chain does not support EIP-1559 fees.");
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Eip1559FeesNotSupportedError"
      });
    }
  };
  var MaxFeePerGasTooLowError2 = class extends BaseError4 {
    constructor({ maxPriorityFeePerGas }) {
      super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${formatGwei3(maxPriorityFeePerGas)} gwei).`);
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "MaxFeePerGasTooLowError"
      });
    }
  };
  init_fromHex2();
  init_base2();
  var BlockNotFoundError2 = class extends BaseError4 {
    constructor({ blockHash, blockNumber }) {
      let identifier = "Block";
      if (blockHash)
        identifier = `Block at hash "${blockHash}"`;
      if (blockNumber)
        identifier = `Block at number "${blockNumber}"`;
      super(`${identifier} could not be found.`);
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "BlockNotFoundError"
      });
    }
  };
  init_toHex2();
  init_fromHex2();
  function formatTransaction3(transaction) {
    const transaction_ = {
      ...transaction,
      blockHash: transaction.blockHash ? transaction.blockHash : null,
      blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
      chainId: transaction.chainId ? hexToNumber4(transaction.chainId) : void 0,
      gas: transaction.gas ? BigInt(transaction.gas) : void 0,
      gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
      maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
      maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
      nonce: transaction.nonce ? hexToNumber4(transaction.nonce) : void 0,
      to: transaction.to ? transaction.to : null,
      transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
      type: transaction.type ? transactionType3[transaction.type] : void 0,
      typeHex: transaction.type ? transaction.type : void 0,
      value: transaction.value ? BigInt(transaction.value) : void 0,
      v: transaction.v ? BigInt(transaction.v) : void 0
    };
    transaction_.yParity = (() => {
      if (transaction.yParity)
        return Number(transaction.yParity);
      if (typeof transaction_.v === "bigint") {
        if (transaction_.v === 0n || transaction_.v === 27n)
          return 0;
        if (transaction_.v === 1n || transaction_.v === 28n)
          return 1;
        if (transaction_.v >= 35n)
          return transaction_.v % 2n === 0n ? 1 : 0;
      }
      return;
    })();
    if (transaction_.type === "legacy") {
      delete transaction_.accessList;
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
      delete transaction_.yParity;
    }
    if (transaction_.type === "eip2930") {
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
    }
    if (transaction_.type === "eip1559") {
      delete transaction_.maxFeePerBlobGas;
    }
    return transaction_;
  }
  var transactionType3 = {
    "0x0": "legacy",
    "0x1": "eip2930",
    "0x2": "eip1559",
    "0x3": "eip4844"
  };
  function formatBlock3(block) {
    const transactions = block.transactions?.map((transaction) => {
      if (typeof transaction === "string")
        return transaction;
      return formatTransaction3(transaction);
    });
    return {
      ...block,
      baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
      blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
      difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
      excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
      gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
      gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
      hash: block.hash ? block.hash : null,
      logsBloom: block.logsBloom ? block.logsBloom : null,
      nonce: block.nonce ? block.nonce : null,
      number: block.number ? BigInt(block.number) : null,
      size: block.size ? BigInt(block.size) : void 0,
      timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
      transactions,
      totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
    };
  }
  async function getBlock2(client, { blockHash, blockNumber, blockTag: blockTag_, includeTransactions: includeTransactions_ } = {}) {
    const blockTag = blockTag_ ?? "latest";
    const includeTransactions = includeTransactions_ ?? false;
    const blockNumberHex = blockNumber !== void 0 ? numberToHex3(blockNumber) : void 0;
    let block = null;
    if (blockHash) {
      block = await client.request({
        method: "eth_getBlockByHash",
        params: [blockHash, includeTransactions]
      });
    } else {
      block = await client.request({
        method: "eth_getBlockByNumber",
        params: [blockNumberHex || blockTag, includeTransactions]
      });
    }
    if (!block)
      throw new BlockNotFoundError2({ blockHash, blockNumber });
    const format = client.chain?.formatters?.block?.format || formatBlock3;
    return format(block);
  }
  async function getGasPrice2(client) {
    const gasPrice = await client.request({
      method: "eth_gasPrice"
    });
    return BigInt(gasPrice);
  }
  async function internal_estimateMaxPriorityFeePerGas2(client, args) {
    const { block: block_, chain = client.chain, request } = args || {};
    if (typeof chain?.fees?.defaultPriorityFee === "function") {
      const block = block_ || await getAction2(client, getBlock2, "getBlock")({});
      return chain.fees.defaultPriorityFee({
        block,
        client,
        request
      });
    }
    if (typeof chain?.fees?.defaultPriorityFee !== "undefined")
      return chain?.fees?.defaultPriorityFee;
    try {
      const maxPriorityFeePerGasHex = await client.request({
        method: "eth_maxPriorityFeePerGas"
      });
      return hexToBigInt3(maxPriorityFeePerGasHex);
    } catch {
      const [block, gasPrice] = await Promise.all([
        block_ ? Promise.resolve(block_) : getAction2(client, getBlock2, "getBlock")({}),
        getAction2(client, getGasPrice2, "getGasPrice")({})
      ]);
      if (typeof block.baseFeePerGas !== "bigint")
        throw new Eip1559FeesNotSupportedError2();
      const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;
      if (maxPriorityFeePerGas < 0n)
        return 0n;
      return maxPriorityFeePerGas;
    }
  }
  async function internal_estimateFeesPerGas2(client, args) {
    const { block: block_, chain = client.chain, request, type = "eip1559" } = args || {};
    const baseFeeMultiplier = await (async () => {
      if (typeof chain?.fees?.baseFeeMultiplier === "function")
        return chain.fees.baseFeeMultiplier({
          block: block_,
          client,
          request
        });
      return chain?.fees?.baseFeeMultiplier ?? 1.2;
    })();
    if (baseFeeMultiplier < 1)
      throw new BaseFeeScalarError2();
    const decimals = baseFeeMultiplier.toString().split(".")[1]?.length ?? 0;
    const denominator = 10 ** decimals;
    const multiply = (base2) => base2 * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);
    const block = block_ ? block_ : await getAction2(client, getBlock2, "getBlock")({});
    if (typeof chain?.fees?.estimateFeesPerGas === "function") {
      const fees2 = await chain.fees.estimateFeesPerGas({
        block: block_,
        client,
        multiply,
        request,
        type
      });
      if (fees2 !== null)
        return fees2;
    }
    if (type === "eip1559") {
      if (typeof block.baseFeePerGas !== "bigint")
        throw new Eip1559FeesNotSupportedError2();
      const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === "bigint" ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas2(client, {
        block,
        chain,
        request
      });
      const baseFeePerGas = multiply(block.baseFeePerGas);
      const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;
      return {
        maxFeePerGas,
        maxPriorityFeePerGas
      };
    }
    const gasPrice = request?.gasPrice ?? multiply(await getAction2(client, getGasPrice2, "getGasPrice")({}));
    return {
      gasPrice
    };
  }
  init_fromHex2();
  init_toHex2();
  async function getTransactionCount2(client, { address, blockTag = "latest", blockNumber }) {
    const count = await client.request({
      method: "eth_getTransactionCount",
      params: [address, blockNumber ? numberToHex3(blockNumber) : blockTag]
    });
    return hexToNumber4(count);
  }
  init_base2();
  var AccountNotFoundError2 = class extends BaseError4 {
    constructor({ docsPath: docsPath33 } = {}) {
      super([
        "Could not find an Account to execute with this Action.",
        "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the WalletClient."
      ].join("\n"), {
        docsPath: docsPath33,
        docsSlug: "account"
      });
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AccountNotFoundError"
      });
    }
  };
  init_toBytes2();
  init_toHex2();
  function blobsToCommitments3(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes4(x)) : parameters.blobs;
    const commitments = [];
    for (const blob of blobs)
      commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
    return to === "bytes" ? commitments : commitments.map((x) => bytesToHex4(x));
  }
  init_toBytes2();
  init_toHex2();
  function blobsToProofs3(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes4(x)) : parameters.blobs;
    const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x) => hexToBytes4(x)) : parameters.commitments;
    const proofs = [];
    for (let i = 0; i < blobs.length; i++) {
      const blob = blobs[i];
      const commitment = commitments[i];
      proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
    }
    return to === "bytes" ? proofs : proofs.map((x) => bytesToHex4(x));
  }
  init_toHex2();
  init_sha2562();
  init_toBytes2();
  init_toHex2();
  function sha25623(value, to_) {
    const to = to_ || "hex";
    const bytes22 = sha2564(isHex3(value, { strict: false }) ? toBytes4(value) : value);
    if (to === "bytes")
      return bytes22;
    return toHex3(bytes22);
  }
  function commitmentToVersionedHash3(parameters) {
    const { commitment, version: version22 = 1 } = parameters;
    const to = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
    const versionedHash = sha25623(commitment, "bytes");
    versionedHash.set([version22], 0);
    return to === "bytes" ? versionedHash : bytesToHex4(versionedHash);
  }
  function commitmentsToVersionedHashes3(parameters) {
    const { commitments, version: version22 } = parameters;
    const to = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
    const hashes = [];
    for (const commitment of commitments) {
      hashes.push(commitmentToVersionedHash3({
        commitment,
        to,
        version: version22
      }));
    }
    return hashes;
  }
  var blobsPerTransaction3 = 6;
  var bytesPerFieldElement3 = 32;
  var fieldElementsPerBlob3 = 4096;
  var bytesPerBlob3 = bytesPerFieldElement3 * fieldElementsPerBlob3;
  var maxBytesPerTransaction3 = bytesPerBlob3 * blobsPerTransaction3 - 1 - 1 * fieldElementsPerBlob3 * blobsPerTransaction3;
  init_base2();
  var BlobSizeTooLargeError3 = class extends BaseError4 {
    constructor({ maxSize, size: size22 }) {
      super("Blob size is too large.", {
        metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size22} bytes`]
      });
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "BlobSizeTooLargeError"
      });
    }
  };
  var EmptyBlobError3 = class extends BaseError4 {
    constructor() {
      super("Blob data must not be empty.");
      Object.defineProperty(this, "name", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "EmptyBlobError"
      });
    }
  };
  init_cursor22();
  init_size2();
  init_toBytes2();
  init_toHex2();
  function toBlobs3(parameters) {
    const to = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
    const data = typeof parameters.data === "string" ? hexToBytes4(parameters.data) : parameters.data;
    const size_ = size4(data);
    if (!size_)
      throw new EmptyBlobError3();
    if (size_ > maxBytesPerTransaction3)
      throw new BlobSizeTooLargeError3({
        maxSize: maxBytesPerTransaction3,
        size: size_
      });
    const blobs = [];
    let active = true;
    let position = 0;
    while (active) {
      const blob = createCursor3(new Uint8Array(bytesPerBlob3));
      let size22 = 0;
      while (size22 < fieldElementsPerBlob3) {
        const bytes22 = data.slice(position, position + (bytesPerFieldElement3 - 1));
        blob.pushByte(0);
        blob.pushBytes(bytes22);
        if (bytes22.length < 31) {
          blob.pushByte(128);
          active = false;
          break;
        }
        size22++;
        position += 31;
      }
      blobs.push(blob);
    }
    return to === "bytes" ? blobs.map((x) => x.bytes) : blobs.map((x) => bytesToHex4(x.bytes));
  }
  function toBlobSidecars3(parameters) {
    const { data, kzg, to } = parameters;
    const blobs = parameters.blobs ?? toBlobs3({ data, to });
    const commitments = parameters.commitments ?? blobsToCommitments3({ blobs, kzg, to });
    const proofs = parameters.proofs ?? blobsToProofs3({ blobs, commitments, kzg, to });
    const sidecars = [];
    for (let i = 0; i < blobs.length; i++)
      sidecars.push({
        blob: blobs[i],
        commitment: commitments[i],
        proof: proofs[i]
      });
    return sidecars;
  }
  init_assertRequest2();
  init_transaction2();
  function getTransactionType3(transaction) {
    if (transaction.type)
      return transaction.type;
    if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
      return "eip4844";
    if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
      return "eip1559";
    }
    if (typeof transaction.gasPrice !== "undefined") {
      if (typeof transaction.accessList !== "undefined")
        return "eip2930";
      return "legacy";
    }
    throw new InvalidSerializableTransactionError3({ transaction });
  }
  init_fromHex2();
  async function getChainId2(client) {
    const chainIdHex = await client.request({
      method: "eth_chainId"
    });
    return hexToNumber4(chainIdHex);
  }
  async function prepareTransactionRequest2(client, args) {
    const { account: account_ = client.account, blobs, chain, chainId, gas, kzg, nonce, parameters = defaultParameters2, type } = args;
    const account = account_ ? parseAccount2(account_) : void 0;
    const request = { ...args, ...account ? { from: account?.address } : {} };
    let block;
    async function getBlock22() {
      if (block)
        return block;
      block = await getAction2(client, getBlock2, "getBlock")({ blockTag: "latest" });
      return block;
    }
    if ((parameters.includes("blobVersionedHashes") || parameters.includes("sidecars")) && blobs && kzg) {
      const commitments = blobsToCommitments3({ blobs, kzg });
      if (parameters.includes("blobVersionedHashes")) {
        const versionedHashes = commitmentsToVersionedHashes3({
          commitments,
          to: "hex"
        });
        request.blobVersionedHashes = versionedHashes;
      }
      if (parameters.includes("sidecars")) {
        const proofs = blobsToProofs3({ blobs, commitments, kzg });
        const sidecars = toBlobSidecars3({
          blobs,
          commitments,
          proofs,
          to: "hex"
        });
        request.sidecars = sidecars;
      }
    }
    if (parameters.includes("chainId")) {
      if (chain)
        request.chainId = chain.id;
      else if (typeof chainId !== "undefined")
        request.chainId = chainId;
      else
        request.chainId = await getAction2(client, getChainId2, "getChainId")({});
    }
    if (parameters.includes("nonce") && typeof nonce === "undefined" && account)
      request.nonce = await getAction2(client, getTransactionCount2, "getTransactionCount")({
        address: account.address,
        blockTag: "pending"
      });
    if ((parameters.includes("fees") || parameters.includes("type")) && typeof type === "undefined") {
      try {
        request.type = getTransactionType3(request);
      } catch {
        const block2 = await getBlock22();
        request.type = typeof block2?.baseFeePerGas === "bigint" ? "eip1559" : "legacy";
      }
    }
    if (parameters.includes("fees")) {
      if (request.type === "eip1559" || request.type === "eip4844") {
        if (typeof request.maxFeePerGas === "undefined" || typeof request.maxPriorityFeePerGas === "undefined") {
          const block2 = await getBlock22();
          const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas2(client, {
            block: block2,
            chain,
            request
          });
          if (typeof args.maxPriorityFeePerGas === "undefined" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)
            throw new MaxFeePerGasTooLowError2({
              maxPriorityFeePerGas
            });
          request.maxPriorityFeePerGas = maxPriorityFeePerGas;
          request.maxFeePerGas = maxFeePerGas;
        }
      } else {
        if (typeof args.maxFeePerGas !== "undefined" || typeof args.maxPriorityFeePerGas !== "undefined")
          throw new Eip1559FeesNotSupportedError2();
        const block2 = await getBlock22();
        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas2(client, {
          block: block2,
          chain,
          request,
          type: "legacy"
        });
        request.gasPrice = gasPrice_;
      }
    }
    if (parameters.includes("gas") && typeof gas === "undefined")
      request.gas = await getAction2(client, estimateGas2, "estimateGas")({
        ...request,
        account: account ? { address: account.address, type: "json-rpc" } : void 0
      });
    assertRequest2(request);
    delete request.parameters;
    return request;
  }
  var defaultParameters2 = [
    "blobVersionedHashes",
    "chainId",
    "fees",
    "gas",
    "nonce",
    "type"
  ];
  async function estimateGas2(client, args) {
    const account_ = args.account ?? client.account;
    const account = account_ ? parseAccount2(account_) : void 0;
    try {
      const { accessList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = await prepareTransactionRequest2(client, {
        ...args,
        parameters: account?.type === "local" ? void 0 : ["blobVersionedHashes"]
      });
      const blockNumberHex = blockNumber ? numberToHex3(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      assertRequest2(args);
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || formatTransactionRequest3;
      const request = format({
        ...extract2(rest, { format: chainFormat }),
        from: account?.address,
        accessList,
        blobs,
        blobVersionedHashes,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      const balance = await client.request({
        method: "eth_estimateGas",
        params: block ? [request, block] : [request]
      });
      return BigInt(balance);
    } catch (err) {
      throw getEstimateGasError2(err, {
        ...args,
        account,
        chain: client.chain
      });
    }
  }
  async function estimateContractGas2(client, parameters) {
    const { abi, address, args, functionName, ...request } = parameters;
    const data = encodeFunctionData2({
      abi,
      args,
      functionName
    });
    try {
      const gas = await getAction2(client, estimateGas2, "estimateGas")({
        data,
        to: address,
        ...request
      });
      return gas;
    } catch (error) {
      const account = request.account ? parseAccount2(request.account) : void 0;
      throw getContractError2(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/estimateContractGas",
        functionName,
        sender: account?.address
      });
    }
  }
  init_getAbiItem2();
  init_abi2();
  init_size2();
  init_toEventSelector2();
  init_cursor3();
  init_decodeAbiParameters2();
  init_formatAbiItem22();
  function decodeEventLog2(parameters) {
    const { abi, data, strict: strict_, topics } = parameters;
    const strict = strict_ ?? true;
    const [signature, ...argTopics] = topics;
    if (!signature)
      throw new AbiEventSignatureEmptyTopicsError2({ docsPath: docsPath32 });
    const abiItem = abi.find((x) => x.type === "event" && signature === toEventSelector2(formatAbiItem22(x)));
    if (!(abiItem && "name" in abiItem) || abiItem.type !== "event")
      throw new AbiEventSignatureNotFoundError2(signature, { docsPath: docsPath32 });
    const { name, inputs } = abiItem;
    const isUnnamed = inputs?.some((x) => !("name" in x && x.name));
    let args = isUnnamed ? [] : {};
    const indexedInputs = inputs.filter((x) => "indexed" in x && x.indexed);
    for (let i = 0; i < indexedInputs.length; i++) {
      const param = indexedInputs[i];
      const topic = argTopics[i];
      if (!topic)
        throw new DecodeLogTopicsMismatch2({
          abiItem,
          param
        });
      args[isUnnamed ? i : param.name || i] = decodeTopic2({ param, value: topic });
    }
    const nonIndexedInputs = inputs.filter((x) => !("indexed" in x && x.indexed));
    if (nonIndexedInputs.length > 0) {
      if (data && data !== "0x") {
        try {
          const decodedData = decodeAbiParameters2(nonIndexedInputs, data);
          if (decodedData) {
            if (isUnnamed)
              args = [...args, ...decodedData];
            else {
              for (let i = 0; i < nonIndexedInputs.length; i++) {
                args[nonIndexedInputs[i].name] = decodedData[i];
              }
            }
          }
        } catch (err) {
          if (strict) {
            if (err instanceof AbiDecodingDataSizeTooSmallError2 || err instanceof PositionOutOfBoundsError3)
              throw new DecodeLogDataMismatch2({
                abiItem,
                data,
                params: nonIndexedInputs,
                size: size4(data)
              });
            throw err;
          }
        }
      } else if (strict) {
        throw new DecodeLogDataMismatch2({
          abiItem,
          data: "0x",
          params: nonIndexedInputs,
          size: 0
        });
      }
    }
    return {
      eventName: name,
      args: Object.values(args).length > 0 ? args : void 0
    };
  }
  function decodeTopic2({ param, value }) {
    if (param.type === "string" || param.type === "bytes" || param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
      return value;
    const decodedArg = decodeAbiParameters2([param], value) || [];
    return decodedArg[0];
  }
  var docsPath32 = "/docs/contract/decodeEventLog";
  function parseEventLogs2({ abi, eventName, logs, strict = true }) {
    return logs.map((log) => {
      try {
        const event = decodeEventLog2({
          ...log,
          abi,
          strict
        });
        if (eventName && !eventName.includes(event.eventName))
          return null;
        return { ...event, ...log };
      } catch (err) {
        let eventName2;
        let isUnnamed;
        if (err instanceof AbiEventSignatureNotFoundError2)
          return null;
        if (err instanceof DecodeLogDataMismatch2 || err instanceof DecodeLogTopicsMismatch2) {
          if (strict)
            return null;
          eventName2 = err.abiItem.name;
          isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
        }
        return { ...log, args: isUnnamed ? [] : {}, eventName: eventName2 };
      }
    }).filter(Boolean);
  }
  init_toHex2();
  function formatLog3(log, { args, eventName } = {}) {
    return {
      ...log,
      blockHash: log.blockHash ? log.blockHash : null,
      blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
      logIndex: log.logIndex ? Number(log.logIndex) : null,
      transactionHash: log.transactionHash ? log.transactionHash : null,
      transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
      ...eventName ? { args, eventName } : {}
    };
  }
  async function getLogs2(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_ } = {}) {
    const strict = strict_ ?? false;
    const events = events_ ?? (event ? [event] : void 0);
    let topics = [];
    if (events) {
      topics = [
        events.flatMap((event2) => encodeEventTopics2({
          abi: [event2],
          eventName: event2.name,
          args
        }))
      ];
      if (event)
        topics = topics[0];
    }
    let logs;
    if (blockHash) {
      logs = await client.request({
        method: "eth_getLogs",
        params: [{ address, topics, blockHash }]
      });
    } else {
      logs = await client.request({
        method: "eth_getLogs",
        params: [
          {
            address,
            topics,
            fromBlock: typeof fromBlock === "bigint" ? numberToHex3(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? numberToHex3(toBlock) : toBlock
          }
        ]
      });
    }
    const formattedLogs = logs.map((log) => formatLog3(log));
    if (!events)
      return formattedLogs;
    return parseEventLogs2({
      abi: events,
      logs: formattedLogs,
      strict
    });
  }
  async function getContractEvents2(client, parameters) {
    const { abi, address, args, blockHash, eventName, fromBlock, toBlock, strict } = parameters;
    const event = eventName ? getAbiItem2({ abi, name: eventName }) : void 0;
    const events = !event ? abi.filter((x) => x.type === "event") : void 0;
    return getAction2(client, getLogs2, "getLogs")({
      address,
      args,
      blockHash,
      event,
      events,
      fromBlock,
      toBlock,
      strict
    });
  }
  init_decodeFunctionResult2();
  init_encodeFunctionData2();
  init_call2();
  async function readContract2(client, parameters) {
    const { abi, address, args, functionName, ...rest } = parameters;
    const calldata = encodeFunctionData2({
      abi,
      args,
      functionName
    });
    try {
      const { data } = await getAction2(client, call2, "call")({
        ...rest,
        data: calldata,
        to: address
      });
      return decodeFunctionResult2({
        abi,
        args,
        functionName,
        data: data || "0x"
      });
    } catch (error) {
      throw getContractError2(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/readContract",
        functionName
      });
    }
  }
  init_decodeFunctionResult2();
  init_encodeFunctionData2();
  init_call2();
  async function simulateContract2(client, parameters) {
    const { abi, address, args, dataSuffix, functionName, ...callRequest } = parameters;
    const account = callRequest.account ? parseAccount2(callRequest.account) : client.account;
    const calldata = encodeFunctionData2({ abi, args, functionName });
    try {
      const { data } = await getAction2(client, call2, "call")({
        batch: false,
        data: `${calldata}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        ...callRequest,
        account
      });
      const result = decodeFunctionResult2({
        abi,
        args,
        functionName,
        data: data || "0x"
      });
      const minimizedAbi = abi.filter((abiItem) => "name" in abiItem && abiItem.name === parameters.functionName);
      return {
        result,
        request: {
          abi: minimizedAbi,
          address,
          args,
          dataSuffix,
          functionName,
          ...callRequest,
          account
        }
      };
    } catch (error) {
      throw getContractError2(error, {
        abi,
        address,
        args,
        docsPath: "/docs/contract/simulateContract",
        functionName,
        sender: account?.address
      });
    }
  }
  init_abi2();
  init_rpc2();
  function observe2(observerId, callbacks, fn) {
    const callbackId = ++callbackCount2;
    const getListeners = () => listenersCache2.get(observerId) || [];
    const unsubscribe = () => {
      const listeners2 = getListeners();
      listenersCache2.set(observerId, listeners2.filter((cb) => cb.id !== callbackId));
    };
    const unwatch = () => {
      const cleanup2 = cleanupCache2.get(observerId);
      if (getListeners().length === 1 && cleanup2)
        cleanup2();
      unsubscribe();
    };
    const listeners = getListeners();
    listenersCache2.set(observerId, [
      ...listeners,
      { id: callbackId, fns: callbacks }
    ]);
    if (listeners && listeners.length > 0)
      return unwatch;
    const emit = {};
    for (const key in callbacks) {
      emit[key] = (...args) => {
        const listeners2 = getListeners();
        if (listeners2.length === 0)
          return;
        for (const listener of listeners2)
          listener.fns[key]?.(...args);
      };
    }
    const cleanup = fn(emit);
    if (typeof cleanup === "function")
      cleanupCache2.set(observerId, cleanup);
    return unwatch;
  }
  var listenersCache2 = /* @__PURE__ */ new Map();
  var cleanupCache2 = /* @__PURE__ */ new Map();
  var callbackCount2 = 0;
  async function wait2(time) {
    return new Promise((res) => setTimeout(res, time));
  }
  function poll2(fn, { emitOnBegin, initialWaitTime, interval }) {
    let active = true;
    const unwatch = () => active = false;
    const watch = async () => {
      let data = void 0;
      if (emitOnBegin)
        data = await fn({ unpoll: unwatch });
      const initialWait = await initialWaitTime?.(data) ?? interval;
      await wait2(initialWait);
      const poll22 = async () => {
        if (!active)
          return;
        await fn({ unpoll: unwatch });
        await wait2(interval);
        poll22();
      };
      poll22();
    };
    watch();
    return unwatch;
  }
  function getCache2(cacheKey3) {
    const buildCache = (cacheKey22, cache) => ({
      clear: () => cache.delete(cacheKey22),
      get: () => cache.get(cacheKey22),
      set: (data) => cache.set(cacheKey22, data)
    });
    const promise = buildCache(cacheKey3, promiseCache3);
    const response = buildCache(cacheKey3, responseCache2);
    return {
      clear: () => {
        promise.clear();
        response.clear();
      },
      promise,
      response
    };
  }
  async function withCache2(fn, { cacheKey: cacheKey3, cacheTime = Infinity }) {
    const cache = getCache2(cacheKey3);
    const response = cache.response.get();
    if (response && cacheTime > 0) {
      const age = (/* @__PURE__ */ new Date()).getTime() - response.created.getTime();
      if (age < cacheTime)
        return response.data;
    }
    let promise = cache.promise.get();
    if (!promise) {
      promise = fn();
      cache.promise.set(promise);
    }
    try {
      const data = await promise;
      cache.response.set({ created: /* @__PURE__ */ new Date(), data });
      return data;
    } finally {
      cache.promise.clear();
    }
  }
  var promiseCache3 = /* @__PURE__ */ new Map();
  var responseCache2 = /* @__PURE__ */ new Map();
  async function getBlockNumber2(client, { cacheTime = client.cacheTime } = {}) {
    const blockNumberHex = await withCache2(() => client.request({
      method: "eth_blockNumber"
    }), { cacheKey: cacheKey2(client.uid), cacheTime });
    return BigInt(blockNumberHex);
  }
  var cacheKey2 = (id) => `blockNumber.${id}`;
  async function getFilterChanges2(_client, { filter }) {
    const strict = "strict" in filter && filter.strict;
    const logs = await filter.request({
      method: "eth_getFilterChanges",
      params: [filter.id]
    });
    if (typeof logs[0] === "string")
      return logs;
    const formattedLogs = logs.map((log) => formatLog3(log));
    if (!("abi" in filter) || !filter.abi)
      return formattedLogs;
    return parseEventLogs2({
      abi: filter.abi,
      logs: formattedLogs,
      strict
    });
  }
  async function uninstallFilter2(_client, { filter }) {
    return filter.request({
      method: "eth_uninstallFilter",
      params: [filter.id]
    });
  }
  function watchContractEvent2(client, parameters) {
    const { abi, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ } = parameters;
    const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket" || typeof fromBlock === "number";
    const pollContractEvent = () => {
      const strict = strict_ ?? false;
      const observerId = stringify2([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval,
        strict,
        fromBlock
      ]);
      return observe2(observerId, { onLogs, onError }, (emit) => {
        let previousBlockNumber;
        if (fromBlock !== void 0)
          previousBlockNumber = fromBlock - 1n;
        let filter;
        let initialized = false;
        const unwatch = poll2(async () => {
          if (!initialized) {
            try {
              filter = await getAction2(client, createContractEventFilter2, "createContractEventFilter")({
                abi,
                address,
                args,
                eventName,
                strict,
                fromBlock
              });
            } catch {
            }
            initialized = true;
            return;
          }
          try {
            let logs;
            if (filter) {
              logs = await getAction2(client, getFilterChanges2, "getFilterChanges")({ filter });
            } else {
              const blockNumber = await getAction2(client, getBlockNumber2, "getBlockNumber")({});
              if (previousBlockNumber && previousBlockNumber !== blockNumber) {
                logs = await getAction2(client, getContractEvents2, "getContractEvents")({
                  abi,
                  address,
                  args,
                  eventName,
                  fromBlock: previousBlockNumber + 1n,
                  toBlock: blockNumber,
                  strict
                });
              } else {
                logs = [];
              }
              previousBlockNumber = blockNumber;
            }
            if (logs.length === 0)
              return;
            if (batch)
              emit.onLogs(logs);
            else
              for (const log of logs)
                emit.onLogs([log]);
          } catch (err) {
            if (filter && err instanceof InvalidInputRpcError2)
              initialized = false;
            emit.onError?.(err);
          }
        }, {
          emitOnBegin: true,
          interval: pollingInterval
        });
        return async () => {
          if (filter)
            await getAction2(client, uninstallFilter2, "uninstallFilter")({ filter });
          unwatch();
        };
      });
    };
    const subscribeContractEvent = () => {
      const strict = strict_ ?? false;
      const observerId = stringify2([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval,
        strict
      ]);
      let active = true;
      let unsubscribe = () => active = false;
      return observe2(observerId, { onLogs, onError }, (emit) => {
        (async () => {
          try {
            const topics = eventName ? encodeEventTopics2({
              abi,
              eventName,
              args
            }) : [];
            const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
              params: ["logs", { address, topics }],
              onData(data) {
                if (!active)
                  return;
                const log = data.result;
                try {
                  const { eventName: eventName2, args: args2 } = decodeEventLog2({
                    abi,
                    data: log.data,
                    topics: log.topics,
                    strict: strict_
                  });
                  const formatted = formatLog3(log, {
                    args: args2,
                    eventName: eventName2
                  });
                  emit.onLogs([formatted]);
                } catch (err) {
                  let eventName2;
                  let isUnnamed;
                  if (err instanceof DecodeLogDataMismatch2 || err instanceof DecodeLogTopicsMismatch2) {
                    if (strict_)
                      return;
                    eventName2 = err.abiItem.name;
                    isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                  }
                  const formatted = formatLog3(log, {
                    args: isUnnamed ? [] : {},
                    eventName: eventName2
                  });
                  emit.onLogs([formatted]);
                }
              },
              onError(error) {
                emit.onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      });
    };
    return enablePolling ? pollContractEvent() : subscribeContractEvent();
  }
  init_encodeFunctionData2();
  init_chain2();
  function assertCurrentChain2({ chain, currentChainId }) {
    if (!chain)
      throw new ChainNotFoundError2();
    if (currentChainId !== chain.id)
      throw new ChainMismatchError2({ chain, currentChainId });
  }
  init_node2();
  init_transaction2();
  init_getNodeError2();
  function getTransactionError2(err, { docsPath: docsPath52, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError2(err, args);
      if (cause2 instanceof UnknownNodeError2)
        return err;
      return cause2;
    })();
    return new TransactionExecutionError2(cause, {
      docsPath: docsPath52,
      ...args
    });
  }
  init_transactionRequest2();
  init_assertRequest2();
  async function sendRawTransaction2(client, { serializedTransaction }) {
    return client.request({
      method: "eth_sendRawTransaction",
      params: [serializedTransaction]
    }, { retryCount: 0 });
  }
  async function sendTransaction2(client, parameters) {
    const { account: account_ = client.account, chain = client.chain, accessList, blobs, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value, ...rest } = parameters;
    if (!account_)
      throw new AccountNotFoundError2({
        docsPath: "/docs/actions/wallet/sendTransaction"
      });
    const account = parseAccount2(account_);
    try {
      assertRequest2(parameters);
      let chainId;
      if (chain !== null) {
        chainId = await getAction2(client, getChainId2, "getChainId")({});
        assertCurrentChain2({
          currentChainId: chainId,
          chain
        });
      }
      if (account.type === "local") {
        const request2 = await getAction2(client, prepareTransactionRequest2, "prepareTransactionRequest")({
          account,
          accessList,
          blobs,
          chain,
          chainId,
          data,
          gas,
          gasPrice,
          maxFeePerBlobGas,
          maxFeePerGas,
          maxPriorityFeePerGas,
          nonce,
          parameters: [...defaultParameters2, "sidecars"],
          to,
          value,
          ...rest
        });
        const serializer = chain?.serializers?.transaction;
        const serializedTransaction = await account.signTransaction(request2, {
          serializer
        });
        return await getAction2(client, sendRawTransaction2, "sendRawTransaction")({
          serializedTransaction
        });
      }
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || formatTransactionRequest3;
      const request = format({
        ...extract2(rest, { format: chainFormat }),
        accessList,
        blobs,
        data,
        from: account.address,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      return await client.request({
        method: "eth_sendTransaction",
        params: [request]
      }, { retryCount: 0 });
    } catch (err) {
      throw getTransactionError2(err, {
        ...parameters,
        account,
        chain: parameters.chain || void 0
      });
    }
  }
  async function writeContract2(client, parameters) {
    const { abi, address, args, dataSuffix, functionName, ...request } = parameters;
    const data = encodeFunctionData2({
      abi,
      args,
      functionName
    });
    return getAction2(client, sendTransaction2, "sendTransaction")({
      data: `${data}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
      to: address,
      ...request
    });
  }
  function getContract3({ abi, address, client: client_ }) {
    const client = client_;
    const [publicClient, walletClient] = (() => {
      if (!client)
        return [void 0, void 0];
      if ("public" in client && "wallet" in client)
        return [client.public, client.wallet];
      if ("public" in client)
        return [client.public, void 0];
      if ("wallet" in client)
        return [void 0, client.wallet];
      return [client, client];
    })();
    const hasPublicClient = publicClient !== void 0 && publicClient !== null;
    const hasWalletClient = walletClient !== void 0 && walletClient !== null;
    const contract = {};
    let hasReadFunction = false;
    let hasWriteFunction = false;
    let hasEvent = false;
    for (const item of abi) {
      if (item.type === "function")
        if (item.stateMutability === "view" || item.stateMutability === "pure")
          hasReadFunction = true;
        else
          hasWriteFunction = true;
      else if (item.type === "event")
        hasEvent = true;
      if (hasReadFunction && hasWriteFunction && hasEvent)
        break;
    }
    if (hasPublicClient) {
      if (hasReadFunction)
        contract.read = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters2(parameters);
              return getAction2(publicClient, readContract2, "readContract")({
                abi,
                address,
                functionName,
                args,
                ...options2
              });
            };
          }
        });
      if (hasWriteFunction)
        contract.simulate = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters2(parameters);
              return getAction2(publicClient, simulateContract2, "simulateContract")({
                abi,
                address,
                functionName,
                args,
                ...options2
              });
            };
          }
        });
      if (hasEvent) {
        contract.createEventFilter = new Proxy({}, {
          get(_, eventName) {
            return (...parameters) => {
              const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
              const { args, options: options2 } = getEventParameters2(parameters, abiEvent);
              return getAction2(publicClient, createContractEventFilter2, "createContractEventFilter")({
                abi,
                address,
                eventName,
                args,
                ...options2
              });
            };
          }
        });
        contract.getEvents = new Proxy({}, {
          get(_, eventName) {
            return (...parameters) => {
              const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
              const { args, options: options2 } = getEventParameters2(parameters, abiEvent);
              return getAction2(publicClient, getContractEvents2, "getContractEvents")({
                abi,
                address,
                eventName,
                args,
                ...options2
              });
            };
          }
        });
        contract.watchEvent = new Proxy({}, {
          get(_, eventName) {
            return (...parameters) => {
              const abiEvent = abi.find((x) => x.type === "event" && x.name === eventName);
              const { args, options: options2 } = getEventParameters2(parameters, abiEvent);
              return getAction2(publicClient, watchContractEvent2, "watchContractEvent")({
                abi,
                address,
                eventName,
                args,
                ...options2
              });
            };
          }
        });
      }
    }
    if (hasWalletClient) {
      if (hasWriteFunction)
        contract.write = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters2(parameters);
              return getAction2(walletClient, writeContract2, "writeContract")({
                abi,
                address,
                functionName,
                args,
                ...options2
              });
            };
          }
        });
    }
    if (hasPublicClient || hasWalletClient) {
      if (hasWriteFunction)
        contract.estimateGas = new Proxy({}, {
          get(_, functionName) {
            return (...parameters) => {
              const { args, options: options2 } = getFunctionParameters2(parameters);
              const client2 = publicClient ?? walletClient;
              return getAction2(client2, estimateContractGas2, "estimateContractGas")({
                abi,
                address,
                functionName,
                args,
                ...options2,
                account: options2.account ?? walletClient.account
              });
            };
          }
        });
    }
    contract.address = address;
    contract.abi = abi;
    return contract;
  }
  function getFunctionParameters2(values) {
    const hasArgs = values.length && Array.isArray(values[0]);
    const args = hasArgs ? values[0] : [];
    const options2 = (hasArgs ? values[1] : values[0]) ?? {};
    return { args, options: options2 };
  }
  function getEventParameters2(values, abiEvent) {
    let hasArgs = false;
    if (Array.isArray(values[0]))
      hasArgs = true;
    else if (values.length === 1) {
      hasArgs = abiEvent.inputs.some((x) => x.indexed);
    } else if (values.length === 2) {
      hasArgs = true;
    }
    const args = hasArgs ? values[0] : void 0;
    const options2 = (hasArgs ? values[1] : values[0]) ?? {};
    return { args, options: options2 };
  }
  init_abi2();
  init_getAbiItem2();
  var import_js_utils = __toESM2(require_node2(), 1);
  var IPayloadsControllerCore_ABI2 = [
    {
      type: "function",
      name: "EXPIRATION_DELAY",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "GRACE_PERIOD",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MAX_EXECUTION_DELAY",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MIN_EXECUTION_DELAY",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "cancelPayload",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "createPayload",
      inputs: [
        {
          name: "actions",
          type: "tuple[]",
          internalType: "struct IPayloadsControllerCore.ExecutionAction[]",
          components: [
            {
              name: "target",
              type: "address",
              internalType: "address"
            },
            {
              name: "withDelegateCall",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "signature",
              type: "string",
              internalType: "string"
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "executePayload",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "getExecutorSettingsByAccessControl",
      inputs: [
        {
          name: "accessControl",
          type: "uint8",
          internalType: "enum PayloadsControllerUtils.AccessControl"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IPayloadsControllerCore.ExecutorConfig",
          components: [
            {
              name: "executor",
              type: "address",
              internalType: "address"
            },
            {
              name: "delay",
              type: "uint40",
              internalType: "uint40"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPayloadById",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IPayloadsControllerCore.Payload",
          components: [
            {
              name: "creator",
              type: "address",
              internalType: "address"
            },
            {
              name: "maximumAccessLevelRequired",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "state",
              type: "uint8",
              internalType: "enum IPayloadsControllerCore.PayloadState"
            },
            {
              name: "createdAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "queuedAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "executedAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "cancelledAt",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "expirationTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "delay",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "gracePeriod",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "actions",
              type: "tuple[]",
              internalType: "struct IPayloadsControllerCore.ExecutionAction[]",
              components: [
                {
                  name: "target",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "withDelegateCall",
                  type: "bool",
                  internalType: "bool"
                },
                {
                  name: "accessLevel",
                  type: "uint8",
                  internalType: "enum PayloadsControllerUtils.AccessControl"
                },
                {
                  name: "value",
                  type: "uint256",
                  internalType: "uint256"
                },
                {
                  name: "signature",
                  type: "string",
                  internalType: "string"
                },
                {
                  name: "callData",
                  type: "bytes",
                  internalType: "bytes"
                }
              ]
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPayloadState",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint8",
          internalType: "enum IPayloadsControllerCore.PayloadState"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPayloadsCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint40",
          internalType: "uint40"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "updateExecutors",
      inputs: [
        {
          name: "executors",
          type: "tuple[]",
          internalType: "struct IPayloadsControllerCore.UpdateExecutorInput[]",
          components: [
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "executorConfig",
              type: "tuple",
              internalType: "struct IPayloadsControllerCore.ExecutorConfig",
              components: [
                {
                  name: "executor",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "delay",
                  type: "uint40",
                  internalType: "uint40"
                }
              ]
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "ExecutorSet",
      inputs: [
        {
          name: "accessLevel",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        },
        {
          name: "executor",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "delay",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadCancelled",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadCreated",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: true,
          internalType: "uint40"
        },
        {
          name: "creator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "actions",
          type: "tuple[]",
          indexed: false,
          internalType: "struct IPayloadsControllerCore.ExecutionAction[]",
          components: [
            {
              name: "target",
              type: "address",
              internalType: "address"
            },
            {
              name: "withDelegateCall",
              type: "bool",
              internalType: "bool"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "signature",
              type: "string",
              internalType: "string"
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes"
            }
          ]
        },
        {
          name: "maximumAccessLevelRequired",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadExecuted",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadExecutionMessageReceived",
      inputs: [
        {
          name: "originSender",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "originChainId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "delivered",
          type: "bool",
          indexed: true,
          internalType: "bool"
        },
        {
          name: "message",
          type: "bytes",
          indexed: false,
          internalType: "bytes"
        },
        {
          name: "reason",
          type: "bytes",
          indexed: false,
          internalType: "bytes"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadQueued",
      inputs: [
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        }
      ],
      anonymous: false
    }
  ];
  var IGovernanceCore_ABI2 = [
    {
      type: "function",
      name: "ACHIEVABLE_VOTING_PARTICIPATION",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "CANCELLATION_FEE_COLLECTOR",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "COOLDOWN_PERIOD",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "MIN_VOTING_DURATION",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "NAME",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "string",
          internalType: "string"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "PRECISION_DIVIDER",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "PROPOSAL_EXPIRATION_TIME",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "VOTING_TOKENS_CAP",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "activateVoting",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "addVotingPortals",
      inputs: [
        {
          name: "votingPortals",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "cancelProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "createProposal",
      inputs: [
        {
          name: "payloads",
          type: "tuple[]",
          internalType: "struct PayloadsControllerUtils.Payload[]",
          components: [
            {
              name: "chain",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "payloadsController",
              type: "address",
              internalType: "address"
            },
            {
              name: "payloadId",
              type: "uint40",
              internalType: "uint40"
            }
          ]
        },
        {
          name: "votingPortal",
          type: "address",
          internalType: "address"
        },
        {
          name: "ipfsHash",
          type: "bytes32",
          internalType: "bytes32"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "payable"
    },
    {
      type: "function",
      name: "executeProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "getCancellationFee",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getPowerStrategy",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IGovernancePowerStrategy"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IGovernanceCore.Proposal",
          components: [
            {
              name: "state",
              type: "uint8",
              internalType: "enum IGovernanceCore.State"
            },
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "creationTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "votingDuration",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "votingActivationTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "queuingTime",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "cancelTimestamp",
              type: "uint40",
              internalType: "uint40"
            },
            {
              name: "creator",
              type: "address",
              internalType: "address"
            },
            {
              name: "votingPortal",
              type: "address",
              internalType: "address"
            },
            {
              name: "snapshotBlockHash",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "ipfsHash",
              type: "bytes32",
              internalType: "bytes32"
            },
            {
              name: "forVotes",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "againstVotes",
              type: "uint128",
              internalType: "uint128"
            },
            {
              name: "cancellationFee",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "payloads",
              type: "tuple[]",
              internalType: "struct PayloadsControllerUtils.Payload[]",
              components: [
                {
                  name: "chain",
                  type: "uint256",
                  internalType: "uint256"
                },
                {
                  name: "accessLevel",
                  type: "uint8",
                  internalType: "enum PayloadsControllerUtils.AccessControl"
                },
                {
                  name: "payloadsController",
                  type: "address",
                  internalType: "address"
                },
                {
                  name: "payloadId",
                  type: "uint40",
                  internalType: "uint40"
                }
              ]
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getProposalState",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "uint8",
          internalType: "enum IGovernanceCore.State"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getProposalsCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getRepresentativeByChain",
      inputs: [
        {
          name: "voter",
          type: "address",
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getRepresentedVotersByChain",
      inputs: [
        {
          name: "representative",
          type: "address",
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [
        {
          name: "",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getVotingConfig",
      inputs: [
        {
          name: "accessLevel",
          type: "uint8",
          internalType: "enum PayloadsControllerUtils.AccessControl"
        }
      ],
      outputs: [
        {
          name: "",
          type: "tuple",
          internalType: "struct IGovernanceCore.VotingConfig",
          components: [
            {
              name: "coolDownBeforeVotingStart",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "votingDuration",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "yesThreshold",
              type: "uint56",
              internalType: "uint56"
            },
            {
              name: "yesNoDifferential",
              type: "uint56",
              internalType: "uint56"
            },
            {
              name: "minPropositionPower",
              type: "uint56",
              internalType: "uint56"
            }
          ]
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "getVotingPortalsCount",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "isVotingPortalApproved",
      inputs: [
        {
          name: "votingPortal",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool"
        }
      ],
      stateMutability: "view"
    },
    {
      type: "function",
      name: "queueProposal",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          internalType: "uint256"
        },
        {
          name: "forVotes",
          type: "uint128",
          internalType: "uint128"
        },
        {
          name: "againstVotes",
          type: "uint128",
          internalType: "uint128"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "redeemCancellationFee",
      inputs: [
        {
          name: "proposalIds",
          type: "uint256[]",
          internalType: "uint256[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "removeVotingPortals",
      inputs: [
        {
          name: "votingPortals",
          type: "address[]",
          internalType: "address[]"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "rescueVotingPortal",
      inputs: [
        {
          name: "votingPortal",
          type: "address",
          internalType: "address"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setPowerStrategy",
      inputs: [
        {
          name: "newPowerStrategy",
          type: "address",
          internalType: "contract IGovernancePowerStrategy"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "setVotingConfigs",
      inputs: [
        {
          name: "votingConfigs",
          type: "tuple[]",
          internalType: "struct IGovernanceCore.SetVotingConfigInput[]",
          components: [
            {
              name: "accessLevel",
              type: "uint8",
              internalType: "enum PayloadsControllerUtils.AccessControl"
            },
            {
              name: "coolDownBeforeVotingStart",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "votingDuration",
              type: "uint24",
              internalType: "uint24"
            },
            {
              name: "yesThreshold",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "yesNoDifferential",
              type: "uint256",
              internalType: "uint256"
            },
            {
              name: "minPropositionPower",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "updateCancellationFee",
      inputs: [
        {
          name: "cancellationFee",
          type: "uint256",
          internalType: "uint256"
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "function",
      name: "updateRepresentativesForChain",
      inputs: [
        {
          name: "representatives",
          type: "tuple[]",
          internalType: "struct IGovernanceCore.RepresentativeInput[]",
          components: [
            {
              name: "representative",
              type: "address",
              internalType: "address"
            },
            {
              name: "chainId",
              type: "uint256",
              internalType: "uint256"
            }
          ]
        }
      ],
      outputs: [],
      stateMutability: "nonpayable"
    },
    {
      type: "event",
      name: "CancellationFeeRedeemed",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "to",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "cancellationFee",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "success",
          type: "bool",
          indexed: true,
          internalType: "bool"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "CancellationFeeUpdated",
      inputs: [
        {
          name: "cancellationFee",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PayloadSent",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "payloadId",
          type: "uint40",
          indexed: false,
          internalType: "uint40"
        },
        {
          name: "payloadsController",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "payloadNumberOnProposal",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "numberOfPayloadsOnProposal",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "PowerStrategyUpdated",
      inputs: [
        {
          name: "newPowerStrategy",
          type: "address",
          indexed: true,
          internalType: "address"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalCanceled",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalCreated",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "creator",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "accessLevel",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        },
        {
          name: "ipfsHash",
          type: "bytes32",
          indexed: false,
          internalType: "bytes32"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalExecuted",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalFailed",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "votesFor",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        },
        {
          name: "votesAgainst",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "ProposalQueued",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "votesFor",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        },
        {
          name: "votesAgainst",
          type: "uint128",
          indexed: false,
          internalType: "uint128"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "RepresentativeUpdated",
      inputs: [
        {
          name: "voter",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "representative",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "chainId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VoteForwarded",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "voter",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "support",
          type: "bool",
          indexed: true,
          internalType: "bool"
        },
        {
          name: "votingAssetsWithSlot",
          type: "tuple[]",
          indexed: false,
          internalType: "struct IVotingMachineWithProofs.VotingAssetWithSlot[]",
          components: [
            {
              name: "underlyingAsset",
              type: "address",
              internalType: "address"
            },
            {
              name: "slot",
              type: "uint128",
              internalType: "uint128"
            }
          ]
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VotingActivated",
      inputs: [
        {
          name: "proposalId",
          type: "uint256",
          indexed: true,
          internalType: "uint256"
        },
        {
          name: "snapshotBlockHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32"
        },
        {
          name: "votingDuration",
          type: "uint24",
          indexed: false,
          internalType: "uint24"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VotingConfigUpdated",
      inputs: [
        {
          name: "accessLevel",
          type: "uint8",
          indexed: true,
          internalType: "enum PayloadsControllerUtils.AccessControl"
        },
        {
          name: "votingDuration",
          type: "uint24",
          indexed: false,
          internalType: "uint24"
        },
        {
          name: "coolDownBeforeVotingStart",
          type: "uint24",
          indexed: false,
          internalType: "uint24"
        },
        {
          name: "yesThreshold",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "yesNoDifferential",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        },
        {
          name: "minPropositionPower",
          type: "uint256",
          indexed: false,
          internalType: "uint256"
        }
      ],
      anonymous: false
    },
    {
      type: "event",
      name: "VotingPortalUpdated",
      inputs: [
        {
          name: "votingPortal",
          type: "address",
          indexed: true,
          internalType: "address"
        },
        {
          name: "approved",
          type: "bool",
          indexed: true,
          internalType: "bool"
        }
      ],
      anonymous: false
    }
  ];
  async function getPayloadsControllerEvents({
    payloadsController,
    client,
    fromBlockNumber,
    toBlockNumber
  }) {
    const logs = await import_js_utils.strategicGetLogs({
      client,
      events: [
        getAbiItem2({ abi: IPayloadsControllerCore_ABI2, name: "PayloadCreated" }),
        getAbiItem2({ abi: IPayloadsControllerCore_ABI2, name: "PayloadQueued" }),
        getAbiItem2({ abi: IPayloadsControllerCore_ABI2, name: "PayloadExecuted" })
      ],
      address: payloadsController,
      fromBlock: fromBlockNumber,
      toBlock: toBlockNumber
    });
    return await Promise.all(logs.map(async (l) => ({
      ...l,
      timestamp: Number((await getBlock2(client, { blockNumber: l.blockNumber })).timestamp)
    })));
  }
  async function syncPayloadsControllerEvents({
    client,
    payloadsController,
    lastSeenBlock = 0n
  }) {
    const currentBlock = await getBlockNumber2(client);
    const contract = getContract3({
      abi: IPayloadsControllerCore_ABI2,
      client,
      address: payloadsController
    });
    const payloadsCount = await contract.read.getPayloadsCount();
    if (payloadsCount === 0) {
      return { lastSeenBlock: currentBlock, events: [] };
    }
    if (lastSeenBlock === 0n) {
      const firstPayload = await contract.read.getPayloadById([0]);
      const firstRelevantBlock = await import_js_utils.getBlockAtTimestamp({
        client,
        timestamp: BigInt(firstPayload.createdAt),
        fromBlock: BigInt(0),
        toBlock: currentBlock,
        maxDelta: BigInt(60 * 60 * 12)
      });
      lastSeenBlock = firstRelevantBlock.number;
    }
    return {
      lastSeenBlock: currentBlock,
      events: await getPayloadsControllerEvents({
        client,
        payloadsController,
        fromBlockNumber: lastSeenBlock,
        toBlockNumber: currentBlock
      })
    };
  }
  function formatPayloadLogs(logs) {
    return {
      createdLog: logs.find((log) => log.eventName === "PayloadCreated"),
      queuedLog: logs.find((log) => log.eventName === "PayloadQueued"),
      executedLog: logs.find((log) => log.eventName === "PayloadExecuted")
    };
  }
  function getPayload({
    client,
    payloadsController,
    payloadId
  }) {
    const contract = getContract3({
      abi: IPayloadsControllerCore_ABI2,
      client,
      address: payloadsController
    });
    return contract.read.getPayloadById([payloadId]);
  }
  var import_js_utils2 = __toESM2(require_node2(), 1);
  async function getGovernanceEvents({
    governance,
    client,
    fromBlockNumber,
    toBlockNumber
  }) {
    const logs = await import_js_utils2.strategicGetLogs({
      client,
      events: [
        getAbiItem2({ abi: IGovernanceCore_ABI2, name: "ProposalCreated" }),
        getAbiItem2({ abi: IGovernanceCore_ABI2, name: "ProposalQueued" }),
        getAbiItem2({ abi: IGovernanceCore_ABI2, name: "ProposalExecuted" }),
        getAbiItem2({ abi: IGovernanceCore_ABI2, name: "PayloadSent" }),
        getAbiItem2({ abi: IGovernanceCore_ABI2, name: "VotingActivated" }),
        getAbiItem2({ abi: IGovernanceCore_ABI2, name: "ProposalCanceled" })
      ],
      address: governance,
      fromBlock: fromBlockNumber,
      toBlock: toBlockNumber
    });
    return await Promise.all(logs.map(async (l) => ({
      ...l,
      timestamp: Number((await getBlock2(client, { blockNumber: l.blockNumber })).timestamp)
    })));
  }
  async function syncGovernanceEvents({
    client,
    governance,
    lastSeenBlock = 0n
  }) {
    const currentBlock = await getBlockNumber2(client);
    const contract = getContract3({
      abi: IGovernanceCore_ABI2,
      address: governance,
      client
    });
    const proposalsCount = await contract.read.getProposalsCount();
    if (proposalsCount === 0n) {
      return { lastSeenBlock: currentBlock, events: [] };
    }
    if (lastSeenBlock === 0n) {
      const firstProposal = await contract.read.getProposal([0n]);
      const firstRelevantBlock = await import_js_utils2.getBlockAtTimestamp({
        client,
        timestamp: BigInt(firstProposal.creationTime),
        fromBlock: BigInt(0),
        toBlock: currentBlock,
        maxDelta: BigInt(60 * 60 * 12)
      });
      lastSeenBlock = firstRelevantBlock.number;
    }
    return {
      lastSeenBlock: currentBlock,
      events: await getGovernanceEvents({
        governance,
        client,
        fromBlockNumber: lastSeenBlock,
        toBlockNumber: currentBlock
      })
    };
  }
  function formatProposalLogs(logs) {
    return {
      createdLog: logs.find((log) => log.eventName === "ProposalCreated"),
      votingActivatedLog: logs.find((log) => log.eventName === "VotingActivated"),
      queuedLog: logs.find((log) => log.eventName === "ProposalQueued"),
      executedLog: logs.find((log) => log.eventName === "ProposalExecuted"),
      payloadSentLog: logs.filter((log) => log.eventName === "PayloadSent"),
      canceledLog: logs.find((log) => log.eventName === "ProposalCanceled")
    };
  }
  function getProposal({
    client,
    governance,
    proposalId
  }) {
    const contract = getContract3({
      abi: IGovernanceCore_ABI2,
      address: governance,
      client
    });
    return contract.read.getProposal([proposalId]);
  }
  var import_js_utils3 = __toESM2(require_node2(), 1);
  function getPath() {
    const installPath = import_path.default.join(process.cwd(), "node_modules", package_default.name);
    const isInstalled = (0, import_fs3.existsSync)(installPath);
    return import_path.default.join(isInstalled ? installPath : process.cwd(), "cache");
  }
  function readJSONCache(filePath, filename) {
    const joinedPath = import_path.default.join(getPath(), filePath, `${filename}.json`);
    if ((0, import_fs3.existsSync)(joinedPath)) {
      return JSON.parse((0, import_fs3.readFileSync)(joinedPath, "utf8"));
    }
  }
  function writeJSONCache(filePath, filename, json) {
    const joinedFolderPath = import_path.default.join(getPath(), filePath);
    if (!(0, import_fs3.existsSync)(joinedFolderPath)) {
      (0, import_fs3.mkdirSync)(joinedFolderPath, { recursive: true });
    }
    const joinedFilePath = import_path.default.join(joinedFolderPath, `${filename}.json`);
    (0, import_fs3.writeFileSync)(joinedFilePath, JSON.stringify(json, (key, value) => typeof value === "bigint" ? value.toString() : value === void 0 ? null : value, 2));
  }
  var syncProposalCache = async ({
    chainId,
    governance
  }) => {
    const client = import_js_utils3.CHAIN_ID_CLIENT_MAP[chainId];
    const proposalsPath = `${chainId.toString()}/${governance}/proposals`;
    const trackingCache = readJSONCache(proposalsPath, "trackingCache") || {
      lastSeenBlock: 0n,
      isFinal: {}
    };
    const newData = await syncGovernanceEvents({
      client,
      governance,
      lastSeenBlock: BigInt(trackingCache.lastSeenBlock)
    });
    trackingCache.lastSeenBlock = newData.lastSeenBlock;
    const uniqueProposals = new Set(Object.keys(trackingCache.isFinal).filter((id) => !trackingCache.isFinal[id]).map((id) => BigInt(id)) || []);
    for (const event of newData.events) {
      const proposalId = event.args.proposalId;
      uniqueProposals.add(proposalId);
      const cache = readJSONCache(proposalsPath, proposalId.toString()) || { events: [] };
      cache.events.push(event);
      writeJSONCache(proposalsPath, proposalId.toString(), cache);
    }
    for (const proposalId of uniqueProposals) {
      const cache = readJSONCache(proposalsPath, proposalId.toString()) || { events: [] };
      cache.proposal = await getProposal({ client, governance, proposalId });
      if (!cache.ipfs) {
        try {
          cache.ipfs = await import_js_utils3.getProposalMetadata(cache.proposal.ipfsHash, "https://ipfs.io/ipfs");
        } catch (e) {
          console.log(e);
        }
      }
      trackingCache.isFinal[String(proposalId)] = isProposalFinal(cache.proposal.state);
      writeJSONCache(proposalsPath, proposalId.toString(), cache);
    }
    writeJSONCache(proposalsPath, "trackingCache", trackingCache);
    return newData;
  };
  var syncPayloadsCache = async ({
    chainId,
    payloadsController
  }) => {
    const client = import_js_utils3.CHAIN_ID_CLIENT_MAP[chainId];
    const path2 = `${chainId.toString()}/${payloadsController}/payloads`;
    const trackingCache = readJSONCache(path2, "trackingCache") || {
      lastSeenBlock: 0n,
      isFinal: {}
    };
    const newData = await syncPayloadsControllerEvents({
      client,
      payloadsController,
      lastSeenBlock: BigInt(trackingCache.lastSeenBlock)
    });
    trackingCache.lastSeenBlock = newData.lastSeenBlock;
    const uniquePayloads = new Set(Object.keys(trackingCache.isFinal).filter((id) => !trackingCache.isFinal[id]).map((id) => Number(id)) || []);
    for (const event of newData.events) {
      const payloadId = event.args.payloadId;
      uniquePayloads.add(payloadId);
      const cache = readJSONCache(path2, payloadId) || {
        events: []
      };
      cache.events.push(event);
      writeJSONCache(path2, payloadId, cache);
    }
    for (const payloadId of uniquePayloads) {
      const cache = readJSONCache(path2, payloadId) || {
        events: []
      };
      cache.payload = await getPayload({ client, payloadsController, payloadId });
      writeJSONCache(path2, payloadId, cache);
      trackingCache.isFinal[String(payloadId)] = isPayloadFinal(cache.payload.state);
    }
    writeJSONCache(path2, "trackingCache", trackingCache);
    return newData;
  };
  var fileSystemStorageAdapter = {
    async getPayload({ chainId, payloadsController, payloadId }) {
      const path2 = `${chainId.toString()}/${payloadsController}/payloads`;
      const cache = readJSONCache(path2, payloadId);
      if (!cache)
        throw new Error(ISSUES_FETCHING_PAYLOAD);
      return { payload: cache.payload, logs: formatPayloadLogs(cache.events) };
    },
    async getProposal({ chainId, governance, proposalId }) {
      const path2 = `${chainId.toString()}/${governance}/proposals`;
      const cache = readJSONCache(path2, proposalId);
      if (!cache)
        throw new Error(ISSUES_FETCHING_PROPOSAL);
      return { proposal: cache.proposal, logs: formatProposalLogs(cache.events), ipfs: cache.ipfs };
    },
    syncPayloadsCache,
    syncProposalCache
  };

  // src/govv3/simulate.ts
  var localCacheAdapter = customStorageProvider(fileSystemStorageAdapter);
  async function simulateProposal(governanceAddress, client, proposalId) {
    logInfo("General", `Running simulation for ${proposalId}`);
    const governance = getGovernance({ address: governanceAddress, client });
    await refreshCache(localCacheAdapter);
    const proposal = await localCacheAdapter.getProposal({
      chainId: client.chain.id,
      governance: governanceAddress,
      proposalId
    });
    const result = await governance.simulateProposalExecutionOnTenderly(proposalId, proposal.logs);
    console.log(
      await generateProposalReport({
        simulation: result,
        proposalId,
        proposalInfo: proposal,
        client
      })
    );
    const payloads = [];
    for (const payload of proposal.proposal.payloads) {
      const client2 = getClient(Number(payload.chain));
      const controllerContract = getPayloadsController(payload.payloadsController, client2);
      const cache = await localCacheAdapter.getPayload({
        payloadId: payload.payloadId,
        chainId: Number(payload.chain),
        payloadsController: payload.payloadsController
      });
      try {
        const result2 = await controllerContract.simulatePayloadExecutionOnTenderly(
          payload.payloadId,
          cache.logs
        );
        console.log(
          await generateReport({
            simulation: result2,
            payloadId: payload.payloadId,
            payloadInfo: cache,
            client: getClient(Number(payload.chain))
          })
        );
        payloads.push({ payload: cache, simulation: result2 });
      } catch (e) {
        console.log("error simulating payload");
        console.log(e);
      }
    }
    return { proposal, payloads };
  }
})();
/**
 * Highly inspired by - reimplemented a bit simpler & added types
 * @license MIT https://github.com/omgaz/diffler
 * Author: Gary Chisholm @omgaz
 */
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@bgd-labs/rpc-env/dist/lib.mjs:
  (*! Bundled license information:
  
  @noble/hashes/esm/utils.js:
    (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  *)

@bgd-labs/aave-v3-governance-cache/dist/providers/storage/fileSystem.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*!
   * is-extendable <https://github.com/jonschlinkert/is-extendable>
   *
   * Copyright (c) 2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)
  (*!
   * strip-bom-string <https://github.com/jonschlinkert/strip-bom-string>
   *
   * Copyright (c) 2015, 2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=index.global.js.map