import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// src/providers/customStorageProvider.ts
var customStorageProvider = (adapter) => ({
  async getPayload(args) {
    try {
      const cache = await adapter.getPayload(args);
      return cache;
    } catch (e) {
      await adapter.syncPayloadsCache(args);
      return await adapter.getPayload(args);
    }
  },
  async getProposal(args) {
    try {
      const cache = await adapter.getProposal(args);
      return cache;
    } catch (e) {
      await adapter.syncProposalCache(args);
      return await adapter.getProposal(args);
    }
  },
  syncPayloadsCache(args) {
    return adapter.syncPayloadsCache(args);
  },
  syncProposalCache(args) {
    return adapter.syncProposalCache(args);
  }
});
export {
  customStorageProvider
};

//# debugId=30466C88BDA929D464756E2164756E21
