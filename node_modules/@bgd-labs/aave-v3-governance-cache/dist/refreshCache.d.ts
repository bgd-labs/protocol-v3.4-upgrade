// Generated by dts-bundle-generator v9.5.0

import { IGovernanceCore_ABI, IPayloadsControllerCore_ABI } from '@bgd-labs/aave-address-book/abis';
import { ProposalMetadata } from '@bgd-labs/js-utils';
import { AbiEvent, ExtractAbiEvent } from 'abitype';
import { AbiStateMutability, Address, ContractFunctionReturnType, GetLogsReturnType } from 'viem';

export type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;
export type LogWithTimestamp<TAbiEvent extends AbiEvent | undefined = undefined, TAbiEvents extends readonly AbiEvent[] | readonly unknown[] | undefined = TAbiEvent extends AbiEvent ? [
	TAbiEvent
] : undefined> = ArrayElement<GetLogsReturnType<TAbiEvent, TAbiEvents>> & {
	timestamp: number;
};
export interface GetPayloadReturnType {
	logs: PayloadLogs;
	payload: Payload;
}
export interface GetProposalReturnType {
	logs: ProposalLogs;
	proposal: Proposal;
	ipfs?: ProposalMetadata;
}
export interface GovernanceCacheAdapter {
	getPayload: (args: {
		chainId: number;
		payloadsController: Address;
		payloadId: number;
	}) => GetPayloadReturnType | Promise<GetPayloadReturnType>;
	getProposal: (args: {
		chainId: number;
		governance: Address;
		proposalId: bigint;
	}) => GetProposalReturnType | Promise<GetProposalReturnType>;
}
export interface GovernanceCacheAdapterWithSync extends GovernanceCacheAdapter {
	syncPayloadsCache: (args: {
		chainId: number;
		payloadsController: Address;
	}) => any;
	syncProposalCache: (args: {
		chainId: number;
		governance: Address;
	}) => any;
}
/**
 * Proposal types
 */
export type ProposalCreatedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IGovernanceCore_ABI, "ProposalCreated">>;
export type ProposalQueuedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IGovernanceCore_ABI, "ProposalQueued">>;
export type ProposalCanceledEvent = LogWithTimestamp<ExtractAbiEvent<typeof IGovernanceCore_ABI, "ProposalCanceled">>;
export type ProposalExecutedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IGovernanceCore_ABI, "ProposalExecuted">>;
export type ProposalPayloadSentEvent = LogWithTimestamp<ExtractAbiEvent<typeof IGovernanceCore_ABI, "PayloadSent">>;
export type ProposalVotingActivatedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IGovernanceCore_ABI, "VotingActivated">>;
export type Proposal = ContractFunctionReturnType<typeof IGovernanceCore_ABI, AbiStateMutability, "getProposal">;
export interface ProposalLogs {
	createdLog: ProposalCreatedEvent;
	queuedLog?: ProposalQueuedEvent;
	executedLog?: ProposalExecutedEvent;
	votingActivatedLog?: ProposalVotingActivatedEvent;
	canceledLog?: ProposalCanceledEvent;
	payloadSentLog: ProposalPayloadSentEvent[];
}
export type PayloadCreatedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IPayloadsControllerCore_ABI, "PayloadCreated">>;
export type PayloadQueuedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IPayloadsControllerCore_ABI, "PayloadQueued">>;
export type PayloadExecutedEvent = LogWithTimestamp<ExtractAbiEvent<typeof IPayloadsControllerCore_ABI, "PayloadExecuted">>;
export interface PayloadLogs {
	createdLog: PayloadCreatedEvent;
	queuedLog?: PayloadQueuedEvent;
	executedLog?: PayloadExecutedEvent;
}
export type Payload = ContractFunctionReturnType<typeof IPayloadsControllerCore_ABI, AbiStateMutability, "getPayloadById">;
export declare function refreshCache(adapter: GovernanceCacheAdapterWithSync): Promise<void>;

export {};
